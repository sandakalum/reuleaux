/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-02-18 17:29:29.722874
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKcos(j[4]);
x8=IKsin(j[0]);
x9=IKsin(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((0.39225)*x0);
x13=((0.09465)*x0);
x14=((1.0)*x8);
x15=((0.09465)*x8);
x16=((0.0823)*x6);
x17=((0.0823)*x5);
x18=((1.0)*x7);
x19=((0.39225)*x8);
x20=((1.0)*x0);
x21=((0.425)*x1);
x22=(x1*x3);
x23=(x7*x8);
x24=(x2*x4);
x25=(x1*x2);
x26=(x3*x4);
x27=(x0*x9);
x28=(x14*x9);
x29=(x20*x22);
x30=(x14*x22);
x31=(x25+x26);
x32=((((-1.0)*x24))+(((1.0)*x22)));
x33=(x31*x6);
x34=(x32*x5);
x35=(((x0*x24))+(((-1.0)*x29)));
x36=((((-1.0)*x30))+((x24*x8)));
x37=(x20*((x25+x26)));
x38=(x14*((x25+x26)));
x39=((((-1.0)*x34))+(((-1.0)*x33)));
x40=((((-1.0)*x32*x6))+((x5*(((((1.0)*x25))+(((1.0)*x26)))))));
x41=(((x35*x6))+((x37*x5)));
x42=(((x38*x5))+((x36*x6)));
x43=(((x5*((x29+(((-1.0)*x20*x24))))))+((x37*x6)));
x44=(((x5*(((((-1.0)*x14*x24))+x30))))+((x38*x6)));
eerot[0]=(((x41*x9))+x23);
eerot[1]=(((x11*x43))+((x10*(((((-1.0)*x28))+((x41*x7)))))));
eerot[2]=(((x10*x43))+((x11*(((((-1.0)*x18*x41))+x28)))));
eetrans[0]=(((x5*(((((-1.0)*x13*x24))+((x13*x22))))))+(((0.10915)*x8))+(((-1.0)*x0*x21))+(((-1.0)*x12*x22))+((x9*((((x17*x37))+((x16*x35))))))+((x6*((((x13*x25))+((x13*x26))))))+((x12*x24))+(((0.0823)*x23)));
eerot[3]=((((-1.0)*x0*x18))+((x42*x9)));
eerot[4]=(((x11*x44))+((x10*((((x42*x7))+x27)))));
eerot[5]=(((x10*x44))+((x11*(((((-1.0)*x18*x42))+(((-1.0)*x20*x9)))))));
eetrans[1]=((((-1.0)*x21*x8))+((x5*(((((-1.0)*x15*x24))+((x15*x22))))))+(((-0.0823)*x0*x7))+((x6*((((x15*x26))+((x15*x25))))))+((x19*x24))+(((-0.10915)*x0))+(((-1.0)*x19*x22))+((x9*((((x17*x38))+((x16*x36)))))));
eerot[6]=(x39*x9);
eerot[7]=(((x11*x40))+((x10*x39*x7)));
eerot[8]=(((x11*x7*((x33+x34))))+((x10*x40)));
eetrans[2]=((0.08916)+((x6*(((((-0.09465)*x22))+(((0.09465)*x24))))))+(((-0.425)*x4))+((x9*(((((-1.0)*x17*x32))+(((-1.0)*x16*x31))))))+((x5*(((((0.09465)*x25))+(((0.09465)*x26))))))+(((-0.39225)*x25))+(((-0.39225)*x26)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r01;
new_r01=r02;
new_r02=((-1.0)*r00);
new_px=((((0.0823)*r00))+(((-1.0)*px)));
new_r10=r11;
new_r11=r12;
new_r12=((-1.0)*r10);
new_py=((((0.0823)*r10))+(((-1.0)*py)));
new_r20=((-1.0)*r21);
new_r21=((-1.0)*r22);
new_r22=r20;
new_pz=((-0.08916)+pz+(((-0.0823)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x45=((1.0)*px);
IkReal x46=((1.0)*pz);
IkReal x47=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x47))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x46)));
rxp0_2=((((-1.0)*r10*x45))+((py*r00)));
rxp1_0=((((-1.0)*r21*x47))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x46)));
rxp1_2=((((-1.0)*r11*x45))+((py*r01)));
rxp2_0=((((-1.0)*r22*x47))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x46))+((px*r22)));
rxp2_2=((((-1.0)*r12*x45))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x48=((0.1893)*npx);
IkReal x49=((0.1893)*npy);
IkReal x50=((0.09465)*r22);
IkReal x51=((0.09465)*r21);
IkReal x52=((-0.09465)*r20);
IkReal x53=((-1.0)*r20);
IkReal x54=((-1.0)*rxp0_2);
IkReal x55=((-0.09465)*r21);
IkReal x56=((-1.0)*r21);
IkReal x57=((-1.0)*rxp1_2);
IkReal x58=((-1.0)*npx);
IkReal x59=((-1.0)*r22);
IkReal x60=((-1.0)*npz);
matrixinvcoeffs[0]=x52;
matrixinvcoeffs[1]=x48;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x53;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x54;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x52;
matrixinvcoeffs[19]=x48;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x53;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x54;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x55;
matrixinvcoeffs[33]=x49;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x56;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x57;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x55;
matrixinvcoeffs[51]=x49;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x56;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x57;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x59;
matrixinvcoeffs[76]=x50;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x60;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x50;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x57;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x55;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x57;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x51;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x53;
matrixinvcoeffs[133]=x58;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.09465)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x53;
matrixinvcoeffs[151]=x58;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x52;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x59;
matrixinvcoeffs[165]=x60;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x50;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x59;
matrixinvcoeffs[183]=x60;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.09465)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x56;
matrixinvcoeffs[204]=x51;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x57;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x51;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x58;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x52;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x53;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x52;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x54;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x61=pz*pz;
IkReal x62=pp*pp;
IkReal x63=((0.1893)*pz);
IkReal x64=((1.7)*pz);
IkReal x65=(gclwh15_9*npx);
IkReal x66=(gclwh6_11*r21);
IkReal x67=(pp*r22);
IkReal x68=((0.00702803935125)*r21);
IkReal x69=(gclwh5_9*npz);
IkReal x70=(gclwh8_11*r20);
IkReal x71=(npy*pz);
IkReal x72=((3.60823078949063e-5)*r22);
IkReal x73=(gclwh14_3*rxp0_2);
IkReal x74=((0.000977833645875)*r20);
IkReal x75=(npz*pz);
IkReal x76=((0.000977833645875)*r21);
IkReal x77=(gclwh10_12*r22);
IkReal x78=(gclwh10_2*rxp2_2);
IkReal x79=((0.00076243651125)*rxp1_2);
IkReal x80=((0.00600991575645741)*r20);
IkReal x81=((0.154705425)*rxp1_2);
IkReal x82=((0.017917245)*r21);
IkReal x83=(gclwh6_11*rxp1_2);
IkReal x84=((0.3786)*rxp1_2);
IkReal x85=(gclwh7_0*rxp1_2);
IkReal x86=((0.7572)*rxp1_2);
IkReal x87=((0.154705425)*rxp2_2);
IkReal x88=((2.0)*gclwh11_10);
IkReal x89=(gclwh12_8*r21);
IkReal x90=((0.81725)*pp);
IkReal x91=(pp*pz);
IkReal x92=(gclwh14_2*r20);
IkReal x93=(pp*r21);
IkReal x94=((2.0)*gclwh4_11);
IkReal x95=(gclwh8_12*r20);
IkReal x96=(npx*pz);
IkReal x97=(gclwh14_8*rxp0_2);
IkReal x98=((0.1893)*rxp2_2);
IkReal x99=(gclwh5_9*rxp2_2);
IkReal x100=((0.020662095)*rxp1_2);
IkReal x101=((0.007321434238125)*r21);
IkReal x102=((1.6345)*pz);
IkReal x103=((0.0089586225)*pz);
IkReal x104=(gclwh13_0*r21);
IkReal x105=(gclwh5_9*r22);
IkReal x106=(gclwh11_10*r22);
IkReal x107=(gclwh11_13*r22);
IkReal x108=((1.0)*r21);
IkReal x109=((0.3786)*rxp0_2);
IkReal x110=(gclwh14_14*rxp0_2);
IkReal x111=(pp*r20);
IkReal x112=((0.00195566729175)*r22);
IkReal x113=(gclwh15_10*rxp0_2);
IkReal x114=(gclwh14_8*r20);
IkReal x115=(gclwh12_8*rxp1_2);
IkReal x116=((2.0)*gclwh9_10);
IkReal x117=((2.0)*gclwh15_10);
IkReal x118=(gclwh5_15*rxp2_2);
IkReal x119=((2.0)*gclwh13_10);
IkReal x120=((0.00702803935125)*r20);
IkReal x121=(gclwh13_9*r21);
IkReal x122=(gclwh5_0*r22);
IkReal x123=((0.01464286847625)*r20);
IkReal x124=(gclwh15_1*r20);
IkReal x125=((0.000977833645875)*r22);
IkReal x126=((0.0089586225)*r20);
IkReal x127=((2.0)*gclwh10_11);
IkReal x128=(gclwh5_10*r22);
IkReal x129=((2.0)*pp);
IkReal x130=(gclwh15_9*r20);
IkReal x131=(gclwh1_3*r20);
IkReal x132=((0.00195566729175)*r20);
IkReal x133=(gclwh4_3*rxp2_2);
IkReal x134=((0.2183)*gclwh13_15);
IkReal x135=((2.0)*gclwh7_10);
IkReal x136=(gclwh15_0*r20);
IkReal x137=(gclwh9_0*r20);
IkReal x138=(gclwh15_15*rxp0_2);
IkReal x139=(gclwh2_1*r21);
IkReal x140=((4.0)*gclwh11_10);
IkReal x141=((0.30941085)*rxp0_2);
IkReal x142=(gclwh9_0*rxp0_2);
IkReal x143=(gclwh5_10*rxp2_2);
IkReal x144=((0.2183)*gclwh12_14);
IkReal x145=((0.2183)*gclwh14_14);
IkReal x146=(gclwh4_2*rxp2_2);
IkReal x147=((0.03275)*pp);
IkReal x148=((0.006199575)*rxp1_2);
IkReal x149=(gclwh12_2*rxp1_2);
IkReal x150=(gclwh5_0*rxp2_2);
IkReal x151=((3.60823078949063e-5)*r21);
IkReal x152=(gclwh14_11*rxp0_2);
IkReal x153=((0.020662095)*rxp0_2);
IkReal x154=(gclwh14_8*npx);
IkReal x155=((4.0)*gclwh9_10);
IkReal x156=((0.00195566729175)*r21);
IkReal x157=(gclwh8_12*rxp0_2);
IkReal x158=((0.01464286847625)*r21);
IkReal x159=((0.3786)*rxp2_2);
IkReal x160=((0.01464286847625)*r22);
IkReal x161=(gclwh7_13*r21);
IkReal x162=((4.0)*gclwh7_10);
IkReal x163=(gclwh13_0*rxp1_2);
IkReal x164=((0.1893)*rxp1_2);
IkReal x165=(gclwh6_2*r21);
IkReal x166=(gclwh5_1*rxp2_2);
IkReal x167=(gclwh8_2*rxp0_2);
IkReal x168=(gclwh9_10*r20);
IkReal x169=((4.0)*pp);
IkReal x170=(gclwh15_1*rxp0_2);
IkReal x171=(gclwh9_13*r20);
IkReal x172=((0.0089586225)*r21);
IkReal x173=(gclwh0_0*r20);
IkReal x174=(gclwh10_11*r22);
IkReal x175=((2.0)*gclwh12_11);
IkReal x176=((0.0655)*pz);
IkReal x177=((0.006199575)*rxp2_2);
IkReal x178=(gclwh12_14*rxp1_2);
IkReal x179=(gclwh15_0*rxp0_2);
IkReal x180=((2.0)*npx);
IkReal x181=(gclwh9_13*rxp0_2);
IkReal x182=((1.0)*pp);
IkReal x183=((4.0)*gclwh10_11);
IkReal x184=(gclwh15_9*rxp0_2);
IkReal x185=((3.60823078949063e-5)*r20);
IkReal x186=((0.00702803935125)*r22);
IkReal x187=(gclwh8_2*r20);
IkReal x188=((0.2183)*gclwh5_15);
IkReal x189=(gclwh10_2*r22);
IkReal x190=(gclwh5_1*r22);
IkReal x191=(gclwh13_9*rxp1_2);
IkReal x192=((2.0)*gclwh5_10);
IkReal x193=((0.020662095)*rxp2_2);
IkReal x194=(gclwh4_8*r22);
IkReal x195=((0.017917245)*r20);
IkReal x196=(gclwh7_0*r21);
IkReal x197=((0.00600991575645741)*r21);
IkReal x198=(gclwh11_0*r22);
IkReal x199=(gclwh6_12*r21);
IkReal x200=((0.2183)*gclwh15_15);
IkReal x201=(gclwh11_0*rxp2_2);
IkReal x202=((0.2183)*gclwh4_14);
IkReal x203=(gclwh4_14*rxp2_2);
IkReal x204=(gclwh6_2*rxp1_2);
IkReal x205=((0.1893)*rxp0_2);
IkReal x206=(gclwh4_8*rxp2_2);
IkReal x207=((0.12699240901125)*rxp1_2);
IkReal x208=(gclwh14_2*rxp0_2);
IkReal x209=(gclwh4_3*r22);
IkReal x210=((0.1893)*pp);
IkReal x211=(gclwh13_15*rxp1_2);
IkReal x212=(gclwh1_2*r20);
IkReal x213=((2.0)*gclwh14_11);
IkReal x214=(gclwh4_11*r22);
IkReal x215=((0.020662095)*x110);
IkReal x216=(gclwh6_5*x76);
IkReal x217=(gclwh8_5*x74);
IkReal x218=(gclwh12_14*x100);
IkReal x219=(gclwh10_5*x125);
IkReal x220=(gclwh4_14*x193);
IkReal x221=((0.0089586225)*x66);
IkReal x222=(gclwh12_11*x164);
IkReal x223=((0.017917245)*x115);
IkReal x224=((0.017917245)*x206);
IkReal x225=(gclwh4_11*x98);
IkReal x226=((0.0089586225)*x70);
IkReal x227=((0.1893)*x152);
IkReal x228=((0.0089586225)*x174);
IkReal x229=((0.017917245)*x97);
IkReal x230=((0.017917245)*x99);
IkReal x231=((0.0089586225)*x106);
IkReal x232=((0.1893)*x113);
IkReal x233=((0.017917245)*x191);
IkReal x234=(gclwh9_10*x126);
IkReal x235=((0.017917245)*x184);
IkReal x236=(gclwh13_10*x164);
IkReal x237=(gclwh7_10*x172);
IkReal x238=(gclwh5_10*x98);
IkReal x239=((0.020662095)*x138);
IkReal x240=(gclwh7_7*x76);
IkReal x241=(gclwh9_7*x74);
IkReal x242=(gclwh13_15*x100);
IkReal x243=((0.020662095)*x118);
IkReal x244=(gclwh11_7*x125);
IkReal x245=(gclwh10_5*x193);
IkReal x246=(gclwh8_5*x153);
IkReal x247=(gclwh14_14*x74);
IkReal x248=(gclwh6_5*x100);
IkReal x249=(gclwh4_14*x125);
IkReal x250=(gclwh12_14*x76);
IkReal x251=(gclwh8_11*x205);
IkReal x252=((0.000847933619625)*x89);
IkReal x253=(gclwh12_11*x172);
IkReal x254=(gclwh10_11*x98);
IkReal x255=((0.0089586225)*x214);
IkReal x256=((0.000847933619625)*x194);
IkReal x257=((0.1893)*x83);
IkReal x258=(gclwh14_11*x126);
IkReal x259=((0.000847933619625)*x114);
IkReal x260=(gclwh9_10*x205);
IkReal x261=(gclwh13_10*x172);
IkReal x262=(gclwh11_10*x98);
IkReal x263=((0.000847933619625)*x130);
IkReal x264=((0.0089586225)*x128);
IkReal x265=((0.000847933619625)*x105);
IkReal x266=(gclwh7_10*x164);
IkReal x267=((0.000847933619625)*x121);
IkReal x268=(gclwh15_10*x126);
IkReal x269=(gclwh5_15*x125);
IkReal x270=(gclwh7_7*x100);
IkReal x271=(gclwh13_15*x76);
IkReal x272=(gclwh15_15*x74);
IkReal x273=(gclwh9_7*x153);
IkReal x274=(gclwh11_7*x193);
IkReal x275=((0.017917245)*x174);
IkReal x276=(gclwh14_11*x109);
IkReal x277=((0.017917245)*x70);
IkReal x278=((0.04132419)*x110);
IkReal x279=((0.04132419)*x178);
IkReal x280=((0.04132419)*x203);
IkReal x281=(gclwh4_11*x159);
IkReal x282=((0.017917245)*x66);
IkReal x283=(gclwh12_11*x84);
IkReal x284=((0.04132419)*x118);
IkReal x285=((0.04132419)*x211);
IkReal x286=((0.04132419)*x138);
IkReal x287=((0.017917245)*x168);
IkReal x288=(gclwh15_10*x109);
IkReal x289=((0.017917245)*x106);
IkReal x290=(gclwh7_10*x82);
IkReal x291=((0.3786)*x143);
IkReal x292=(gclwh13_10*x84);
IkReal x293=((0.3786)*x83);
IkReal x294=(gclwh14_11*x195);
IkReal x295=(gclwh14_14*x132);
IkReal x296=(gclwh4_14*x112);
IkReal x297=(gclwh12_14*x156);
IkReal x298=(gclwh14_8*x111);
IkReal x299=((2.0)*x61);
IkReal x300=((1.0)*x62);
IkReal x301=(r21*x62);
IkReal x302=((0.2183)*gclwh10_5*x75);
IkReal x303=((0.2183)*gclwh8_5*x96);
IkReal x304=((0.10915)*gclwh6_5*x93);
IkReal x305=((0.2183)*gclwh6_5*x71);
IkReal x306=((0.10915)*gclwh8_5*x111);
IkReal x307=((0.10915)*gclwh10_5*x67);
IkReal x308=(gclwh12_3*pp*x164);
IkReal x309=(x127*x75);
IkReal x310=(x103*x187);
IkReal x311=((2.0)*gclwh8_11*x96);
IkReal x312=(gclwh10_2*pz*x67);
IkReal x313=(x208*x63);
IkReal x314=(x187*x91);
IkReal x315=(gclwh4_3*pp*x98);
IkReal x316=(x103*x189);
IkReal x317=(x149*x63);
IkReal x318=((2.0)*gclwh6_11*x71);
IkReal x319=(x146*x63);
IkReal x320=(x210*x73);
IkReal x321=(x103*x165);
IkReal x322=(gclwh13_1*pp*x164);
IkReal x323=(x103*x198);
IkReal x324=(x103*x137);
IkReal x325=(gclwh5_1*pp*x98);
IkReal x326=(x179*x63);
IkReal x327=(gclwh11_0*pz*x67);
IkReal x328=(x135*x71);
IkReal x329=(x137*x91);
IkReal x330=(x75*x88);
IkReal x331=(x170*x210);
IkReal x332=(x116*x96);
IkReal x333=(x103*x196);
IkReal x334=(x163*x63);
IkReal x335=(x150*x63);
IkReal x336=((0.10915)*gclwh7_7*x93);
IkReal x337=((0.2183)*gclwh9_7*x96);
IkReal x338=((0.2183)*gclwh11_7*x75);
IkReal x339=((0.10915)*gclwh9_7*x111);
IkReal x340=((0.2183)*gclwh7_7*x71);
IkReal x341=((0.10915)*gclwh11_7*x67);
IkReal x342=((0.10915)*gclwh14_14*x111);
IkReal x343=(x202*x75);
IkReal x344=(x144*x71);
IkReal x345=((0.10915)*gclwh12_14*x93);
IkReal x346=(x145*x96);
IkReal x347=((0.10915)*gclwh4_14*x67);
IkReal x348=((0.09465)*gclwh4_8*x67);
IkReal x349=(x91*x92);
IkReal x350=(gclwh12_3*x301);
IkReal x351=(x204*x63);
IkReal x352=(gclwh3_3*x301);
IkReal x353=(x131*x62);
IkReal x354=(gclwh3_2*r21*x103);
IkReal x355=(x213*x96);
IkReal x356=(x154*x63);
IkReal x357=(x103*x92);
IkReal x358=((0.09465)*pp*x89);
IkReal x359=(x209*x62);
IkReal x360=(x103*x212);
IkReal x361=(x167*x63);
IkReal x362=(x75*x94);
IkReal x363=(gclwh4_2*r22*x103);
IkReal x364=(gclwh4_8*npz*x63);
IkReal x365=(gclwh12_2*r21*x103);
IkReal x366=(x63*x78);
IkReal x367=((0.09465)*x298);
IkReal x368=(x175*x71);
IkReal x369=(gclwh12_8*npy*x63);
IkReal x370=(x124*x62);
IkReal x371=(x63*x69);
IkReal x372=(gclwh5_0*pz*x67);
IkReal x373=(gclwh13_9*npy*x63);
IkReal x374=(x103*x122);
IkReal x375=(x104*x91);
IkReal x376=((0.09465)*gclwh15_9*x111);
IkReal x377=(x117*x96);
IkReal x378=(x103*x104);
IkReal x379=(x139*x62);
IkReal x380=(gclwh2_0*r21*x103);
IkReal x381=(x142*x63);
IkReal x382=(x201*x63);
IkReal x383=(gclwh0_1*r20*x62);
IkReal x384=(x103*x173);
IkReal x385=((0.09465)*gclwh5_9*x67);
IkReal x386=(x63*x85);
IkReal x387=((0.09465)*gclwh13_9*x93);
IkReal x388=(x103*x136);
IkReal x389=(x63*x65);
IkReal x390=(x192*x75);
IkReal x391=(x119*x71);
IkReal x392=((0.10915)*gclwh13_15*x93);
IkReal x393=((0.10915)*gclwh5_15*x67);
IkReal x394=(x200*x96);
IkReal x395=((0.10915)*gclwh15_15*x111);
IkReal x396=(x188*x75);
IkReal x397=(x134*x71);
IkReal x398=(x129*x70);
IkReal x399=(x127*x67);
IkReal x400=((4.0)*gclwh6_11*x71);
IkReal x401=((4.0)*gclwh8_11*x96);
IkReal x402=(x129*x66);
IkReal x403=(x183*x75);
IkReal x404=(x67*x88);
IkReal x405=(x162*x71);
IkReal x406=(x111*x116);
IkReal x407=(x135*x93);
IkReal x408=(x155*x96);
IkReal x409=(x140*x75);
IkReal x410=(x111*x213);
IkReal x411=((4.0)*gclwh12_11*x71);
IkReal x412=((4.0)*gclwh4_11*x75);
IkReal x413=(x111*x145);
IkReal x414=((0.4366)*gclwh12_14*x71);
IkReal x415=((0.4366)*gclwh4_14*x75);
IkReal x416=(x144*x93);
IkReal x417=((0.4366)*gclwh14_14*x96);
IkReal x418=(x202*x67);
IkReal x419=(gclwh6_2*npy*x299);
IkReal x420=(gclwh6_2*x108*x91);
IkReal x421=(gclwh10_2*npz*x299);
IkReal x422=(gclwh8_2*x180*x61);
IkReal x423=(gclwh7_0*npy*x299);
IkReal x424=(gclwh9_0*x180*x61);
IkReal x425=(gclwh11_0*npz*x299);
IkReal x426=(gclwh7_0*x108*x91);
IkReal x427=(gclwh12_2*npy*x299);
IkReal x428=(gclwh3_2*npy*x299);
IkReal x429=(gclwh1_2*x180*x61);
IkReal x430=(gclwh14_3*x180*x91);
IkReal x431=(gclwh4_2*npz*x299);
IkReal x432=(gclwh4_3*x129*x75);
IkReal x433=(gclwh12_2*x108*x91);
IkReal x434=((1.0)*x212*x91);
IkReal x435=(gclwh3_3*x129*x71);
IkReal x436=((1.0)*gclwh4_2*pz*x67);
IkReal x437=(gclwh1_3*x180*x91);
IkReal x438=(gclwh3_2*x108*x91);
IkReal x439=(gclwh12_3*x129*x71);
IkReal x440=(gclwh14_2*x180*x61);
IkReal x441=(gclwh14_3*r20*x300);
IkReal x442=(gclwh0_0*x180*x61);
IkReal x443=(gclwh2_0*npy*x299);
IkReal x444=(gclwh5_1*x129*x75);
IkReal x445=(gclwh13_1*x129*x71);
IkReal x446=(gclwh15_0*x180*x61);
IkReal x447=(gclwh2_1*x129*x71);
IkReal x448=(gclwh0_1*x180*x91);
IkReal x449=(gclwh5_0*npz*x299);
IkReal x450=(gclwh13_0*npy*x299);
IkReal x451=((1.0)*x173*x91);
IkReal x452=((1.0)*x136*x91);
IkReal x453=(gclwh2_0*x108*x91);
IkReal x454=(gclwh13_1*x108*x62);
IkReal x455=(x190*x300);
IkReal x456=(gclwh15_1*x180*x91);
IkReal x457=(x279+x280);
IkReal x458=(x285+x284);
IkReal x459=(x246+x245);
IkReal x460=(x218+x220);
IkReal x461=(x243+x242);
IkReal x462=(x274+x273);
IkReal x463=(x318+x228+x227+x226);
IkReal x464=(x328+x232+x231+x234);
IkReal x465=(x391+x390+x266+x268);
IkReal x466=(x368+x362+x258+x257);
IkReal x467=(x295+x413+x414+x415);
IkReal x468=(x304+x302+x303+x216);
IkReal x469=(x342+x343+x344+x247);
IkReal x470=(x395+x397+x396+x272);
IkReal x471=(x338+x337+x336+x240);
IkReal x472=(x377+x264+x261+x260+x262);
IkReal x473=(x355+x254+x255+x251+x253);
IkReal x474=(x309+x311+x221+x222+x225);
IkReal x475=(x332+x330+x238+x236+x237);
IkReal x476=(x346+x347+x345+x250+x249);
IkReal x477=(x394+x393+x392+x269+x271);
IkReal x478=(x339+x340+x341+x241+x244);
IkReal x479=(x296+x297+x416+x417+x418);
IkReal x480=(x293+x294+x412+x410+x411);
IkReal x481=(x306+x307+x305+x217+x219);
IkReal x482=(x283+x282+x281+x401+x403+x402);
IkReal x483=(x290+x291+x292+x407+x409+x408);
IkReal x484=(x289+x288+x287+x405+x404+x406);
IkReal x485=(x399+x398+x276+x277+x275+x400);
IkReal x486=(((gclwh8_11*x109))+((gclwh10_11*x159))+((x175*x93))+((x67*x94))+((gclwh12_11*x82))+(((0.017917245)*x214))+(((4.0)*gclwh14_11*x96)));
IkReal x487=(x320+x321+x319+x317+x229+x422+x421+x420);
IkReal x488=(x333+x331+x335+x334+x235+x426+x425+x424);
IkReal x489=(x308+x315+x314+x316+x310+x313+x312+x223+x224+x419);
IkReal x490=(x324+x325+x326+x327+x322+x323+x329+x233+x230+x423);
IkReal x491=(x386+x387+x385+x388+x389+x265+x267+x449+x448+x447+x456+x454+x455+x452+x453+x450+x451);
IkReal x492=(x351+x350+x353+x352+x354+x357+x356+x359+x358+x348+x349+x360+x256+x252+x429+x428+x427+x430+x431+x63);
IkReal x493=(x369+x361+x363+x364+x365+x366+x367+x259+x438+x439+x432+x433+x434+x435+x436+x437+x441+x440);
IkReal x494=(x384+x382+x383+x380+x381+x379+x378+x376+x375+x374+x373+x372+x371+x370+x263+x445+x444+x446+x443+x442+x63);
op[0]=((((1.6345)*gclwh10_12*x75))+((x199*x90))+(((0.154705425)*x97))+(((-1.0)*x481))+(((-1.0)*x90*x95))+((gclwh6_12*x101))+(((-0.007321434238125)*x95))+(((-1.6345)*gclwh6_12*x71))+(((-1.0)*gclwh4_8*x87))+x468+x460+(((-0.81725)*gclwh10_12*x67))+(((-1.0)*x215))+(((1.6345)*gclwh8_12*x96))+(((-0.007321434238125)*x77))+(((-1.0)*gclwh12_8*x81)));
op[1]=((((-1.0)*x487))+(((-1.0)*gclwh12_3*x207))+(((-1.0)*x474))+(((-0.12699240901125)*x133))+x489+x463+(((-1.0)*x182*x66))+((pp*x70))+(((0.12699240901125)*x73))+((gclwh10_11*x67)));
op[2]=((-0.17125635)+(((-1.0)*x482))+x485);
op[3]=(((gclwh8_2*x120))+((gclwh10_2*x186))+(((-0.160905)*x97))+(((0.7845)*gclwh8_2*x111))+(((-1.0)*gclwh6_2*x68))+(((-0.7845)*gclwh6_2*x93))+(((0.160905)*x206))+(((-0.14850585)*x149))+(((-0.14850585)*x146))+(((-1.569)*gclwh10_2*x75))+(((0.7845)*gclwh10_2*x67))+(((0.160905)*x115))+(((-1.0)*x457))+x278+(((-1.569)*gclwh8_2*x96))+(((0.14850585)*x208))+(((1.569)*gclwh6_2*x71)));
op[4]=((((-0.000293394886875)*x77))+(((-0.0655)*gclwh6_12*x71))+(((-1.0)*x481))+(((0.03275)*gclwh6_12*x93))+(((-1.0)*x460))+(((-0.03275)*gclwh10_12*x67))+(((-0.000293394886875)*x95))+((gclwh4_8*x177))+x215+x468+(((0.0655)*gclwh10_12*x75))+(((0.0655)*gclwh8_12*x96))+(((0.006199575)*x115))+(((-0.006199575)*x97))+(((-1.0)*x147*x95))+(((0.000293394886875)*x199)));
op[5]=(((pp*x66))+(((-1.0)*x487))+(((-1.0)*x463))+(((-1.0)*x182*x70))+x489+x474+(((-0.00076243651125)*x133))+(((0.00076243651125)*x73))+(((-1.0)*gclwh12_3*x79))+(((-1.0)*gclwh10_11*x67)));
op[6]=((((0.12699240901125)*x170))+(((-1.0)*x488))+(((-1.0)*gclwh9_10*x111))+((gclwh7_10*x93))+(((-1.0)*gclwh13_1*x207))+(((-1.0)*gclwh11_10*x67))+(((-1.0)*x464))+x490+x475+(((-0.12699240901125)*x166)));
op[7]=(((gclwh7_13*x101))+(((-1.0)*gclwh13_9*x81))+(((-1.0)*x171*x90))+(((0.154705425)*x184))+((x161*x90))+(((-1.0)*x478))+(((-1.0)*gclwh5_9*x87))+(((-1.0)*x239))+x461+x471+(((1.6345)*gclwh9_13*x96))+(((-0.007321434238125)*x107))+(((-0.007321434238125)*x171))+(((1.6345)*gclwh11_13*x75))+(((-1.6345)*gclwh7_13*x71))+(((-0.81725)*gclwh11_13*x67)));
op[8]=((((-0.160905)*x191))+(((-0.160905)*x99))+(((0.160905)*x184))+(((1.569)*gclwh7_0*x71))+(((0.14850585)*x179))+(((-1.0)*gclwh7_0*x68))+(((0.7845)*gclwh11_0*x67))+(((-0.14850585)*x150))+(((-0.14850585)*x163))+((gclwh9_0*x120))+x458+(((-1.569)*gclwh11_0*x75))+(((-1.569)*gclwh9_0*x96))+(((-1.0)*x286))+(((-0.7845)*gclwh7_0*x93))+((gclwh11_0*x186))+(((0.7845)*gclwh9_0*x111)));
op[9]=((-0.17125635)+(((-1.0)*x483))+x484);
op[10]=((((-1.0)*x488))+(((-1.0)*gclwh7_10*x93))+(((-1.0)*x475))+x490+x464+(((-1.0)*gclwh13_1*x79))+(((0.00076243651125)*x170))+((gclwh9_10*x111))+(((-0.00076243651125)*x166))+((gclwh11_10*x67)));
op[11]=((((0.000293394886875)*x161))+(((-0.03275)*gclwh9_13*x111))+(((0.03275)*gclwh7_13*x93))+(((-0.006199575)*x184))+(((-0.0655)*gclwh7_13*x71))+(((-1.0)*x478))+(((-1.0)*x461))+(((-0.000293394886875)*x107))+((gclwh13_9*x148))+(((0.0655)*gclwh11_13*x75))+(((-0.03275)*gclwh11_13*x67))+x239+x471+(((0.0655)*gclwh9_13*x96))+(((-0.000293394886875)*x171))+(((0.006199575)*x99)));
op[12]=((((1.6345)*gclwh4_8*x75))+(((1.6345)*gclwh12_8*x71))+(((-1.6345)*gclwh14_8*x96))+((x114*x90))+(((0.154705425)*x157))+(((-1.0)*x469))+(((-0.007321434238125)*x89))+((gclwh10_12*x87))+x459+x476+(((-0.81725)*gclwh4_8*x67))+(((-1.0)*x248))+(((0.007321434238125)*x114))+(((-1.0)*x89*x90))+(((-1.0)*gclwh6_12*x81))+(((-0.007321434238125)*x194)));
op[13]=((-0.679811285)+(((1.341705325)*gclwh12_3*x71))+(((-1.0)*x493))+(((-0.00600991575645741)*x209))+(((1.341705325)*gclwh4_3*x75))+(((-1.0)*gclwh12_3*x197))+(((-0.66189404)*gclwh4_3*x67))+(((-0.66189404)*gclwh12_3*x93))+(((-1.0)*x473))+((gclwh3_3*x197))+(((-0.679811285)*gclwh1_3*x111))+(((-0.679811285)*gclwh3_3*x93))+(((1.341705325)*gclwh3_3*x71))+(((-1.0)*gclwh4_11*x67))+(((1.341705325)*gclwh1_3*x96))+x492+x466+((gclwh1_3*x80))+((gclwh14_3*x80))+(((-1.341705325)*gclwh14_3*x96))+((gclwh14_11*x111))+(((-1.0)*gclwh12_11*x93))+(((0.66189404)*gclwh14_3*x111)));
op[14]=((-0.07735732)+(((-1.0)*x486))+x480);
op[15]=((((-1.0)*gclwh4_2*x186))+(((-0.14850585)*x78))+(((1.569)*gclwh3_2*x71))+(((0.7845)*pp*x92))+(((-0.7845)*gclwh12_2*x93))+(((-0.007614829125)*x114))+(((-1.0)*x479))+(((1.569)*gclwh12_2*x71))+(((-0.14850585)*x167))+(((0.00702803935125)*x92))+(((0.85)*pp*x89))+x467+(((0.007614829125)*x194))+(((-1.0)*gclwh12_2*x68))+(((-0.85)*x298))+(((0.007614829125)*x89))+((gclwh3_2*x68))+(((-0.7845)*gclwh1_2*x111))+((x154*x64))+(((0.85)*gclwh4_8*x67))+(((1.569)*gclwh4_2*x75))+(((-0.7845)*gclwh3_2*x93))+(((-1.569)*gclwh14_2*x96))+(((1.569)*gclwh1_2*x96))+(((-1.0)*gclwh12_8*npy*x64))+((gclwh1_2*x120))+(((-1.0)*gclwh4_8*npz*x64))+(((0.14850585)*x204))+(((-0.7845)*gclwh4_2*x67)));
op[16]=((((0.0655)*gclwh14_8*x96))+(((-1.0)*gclwh6_12*x148))+(((0.03275)*gclwh4_8*x67))+(((-0.0655)*gclwh12_8*x71))+((x147*x89))+(((-0.0655)*gclwh4_8*x75))+(((-1.0)*x476))+(((-0.000293394886875)*x114))+x459+x469+(((0.006199575)*x157))+(((0.000293394886875)*x89))+((gclwh10_12*x177))+(((-1.0)*x248))+(((-0.03275)*x298))+(((0.000293394886875)*x194)));
op[17]=((0.012986285)+(((-0.00493096)*gclwh14_3*x111))+(((-1.0)*gclwh14_11*x111))+(((0.008055325)*gclwh3_3*x71))+(((-1.0)*x493))+((gclwh4_11*x67))+(((0.00493096)*gclwh4_3*x67))+(((-1.0)*x466))+(((-0.012986285)*gclwh3_3*x93))+(((0.008055325)*gclwh12_3*x71))+x492+x473+(((0.008055325)*gclwh4_3*x75))+(((-0.008055325)*gclwh14_3*x96))+((gclwh3_3*x151))+(((0.00493096)*gclwh12_3*x93))+(((3.60823078949063e-5)*x131))+(((-1.0)*gclwh4_3*x72))+(((-0.012986285)*gclwh1_3*x111))+((gclwh12_11*x93))+((gclwh14_3*x185))+(((-1.0)*gclwh12_3*x151))+(((0.008055325)*gclwh1_3*x96)));
op[18]=((0.679811285)+(((0.66189404)*gclwh5_1*x67))+(((-1.0)*x491))+(((1.341705325)*gclwh0_1*x96))+(((0.00600991575645741)*x190))+(((-0.66189404)*gclwh15_1*x111))+(((-1.0)*gclwh15_1*x80))+(((-0.679811285)*gclwh0_1*x111))+(((-1.341705325)*gclwh5_1*x75))+(((-1.0)*x472))+(((-1.341705325)*gclwh13_1*x71))+(((-1.0)*gclwh13_10*x93))+((gclwh0_1*x80))+((gclwh15_10*x111))+(((-1.0)*gclwh5_10*x67))+x494+x465+(((0.66189404)*gclwh13_1*x93))+(((1.341705325)*gclwh2_1*x71))+(((0.00600991575645741)*x139))+(((-0.679811285)*gclwh2_1*x93))+(((1.341705325)*gclwh15_1*x96))+((gclwh13_1*x197)));
op[19]=((((-1.0)*x477))+(((-1.0)*x462))+(((-1.0)*gclwh11_13*x87))+(((-0.154705425)*x181))+x270+((x121*x90))+x470+(((-0.007321434238125)*x130))+((x102*x65))+(((-1.6345)*gclwh13_9*x71))+(((0.007321434238125)*x105))+((gclwh7_13*x81))+(((0.81725)*gclwh5_9*x67))+((gclwh13_9*x101))+(((-1.0)*x130*x90))+(((-1.0)*x102*x69)));
op[20]=((((-0.7845)*gclwh15_0*x111))+((gclwh15_15*x132))+(((-0.85)*gclwh15_9*x111))+((gclwh0_0*x120))+(((0.007614829125)*x105))+(((-0.007614829125)*x130))+((gclwh2_0*x68))+(((-0.14850585)*x85))+(((-0.7845)*gclwh2_0*x93))+(((0.4366)*gclwh13_15*x71))+(((0.007614829125)*x121))+(((-1.569)*gclwh5_0*x75))+(((0.7845)*gclwh5_0*x67))+((gclwh13_0*x68))+(((1.569)*gclwh15_0*x96))+(((0.14850585)*x142))+(((-1.0)*x188*x67))+(((-0.7845)*gclwh0_0*x111))+(((-1.0)*gclwh15_0*x120))+(((1.569)*gclwh2_0*x71))+(((1.569)*gclwh0_0*x96))+(((-1.0)*x64*x69))+((x111*x200))+(((-1.0)*gclwh5_15*x112))+(((0.85)*gclwh5_9*x67))+(((0.4366)*gclwh5_15*x75))+(((-1.0)*gclwh13_15*x156))+(((0.85)*gclwh13_9*x93))+(((-0.4366)*gclwh15_15*x96))+(((-1.0)*x134*x93))+(((0.00702803935125)*x122))+(((0.14850585)*x201))+((x64*x65))+(((-1.0)*gclwh13_9*npy*x64))+(((0.7845)*gclwh13_0*x93))+(((-1.569)*gclwh13_0*x71)));
op[21]=((-0.07735732)+(((-1.0)*x111*x117))+(((4.0)*gclwh15_10*x96))+((gclwh11_10*x159))+(((-4.0)*gclwh13_10*x71))+(((-1.0)*gclwh15_10*x195))+((x119*x93))+((x192*x67))+(((0.017917245)*x128))+((gclwh9_10*x109))+((gclwh13_10*x82))+(((-4.0)*gclwh5_10*x75))+(((-1.0)*gclwh7_10*x84)));
op[22]=((-0.012986285)+((gclwh5_1*x72))+(((0.008055325)*gclwh2_1*x71))+(((-1.0)*x491))+(((-1.0)*gclwh15_10*x111))+(((-0.00493096)*gclwh5_1*x67))+(((-0.012986285)*gclwh2_1*x93))+(((-0.008055325)*gclwh5_1*x75))+(((0.008055325)*gclwh15_1*x96))+(((-1.0)*x465))+(((-0.012986285)*gclwh0_1*x111))+x494+x472+((gclwh0_1*x185))+(((0.00493096)*gclwh15_1*x111))+(((3.60823078949063e-5)*x139))+(((-0.00493096)*gclwh13_1*x93))+(((0.008055325)*gclwh0_1*x96))+((gclwh13_10*x93))+((gclwh5_10*x67))+(((-3.60823078949063e-5)*x124))+(((-0.008055325)*gclwh13_1*x71))+((gclwh13_1*x151)));
op[23]=((((0.0655)*gclwh13_9*x71))+(((-0.006199575)*x181))+(((0.03275)*gclwh15_9*x111))+(((-0.03275)*gclwh13_9*x93))+(((-0.000293394886875)*x121))+((gclwh7_13*x148))+(((-0.03275)*gclwh5_9*x67))+(((-1.0)*x470))+(((0.000293394886875)*x130))+(((-1.0)*x462))+(((-0.000293394886875)*x105))+x270+x477+(((-1.0)*gclwh11_13*x177))+((x176*x69))+(((-1.0)*x176*x65)));
op[24]=((-0.35681135)+(((-1.0)*x482))+x485);
op[25]=((((-3.269)*gclwh8_2*x96))+((gclwh8_2*x123))+((gclwh10_2*x160))+(((-1.0)*gclwh6_2*x158))+(((3.269)*gclwh6_2*x71))+(((-3.269)*gclwh10_2*x75))+(((-1.0)*x457))+x278+((gclwh14_2*x141))+(((-0.30941085)*x146))+(((-0.30941085)*x149))+(((-1.6345)*gclwh6_2*x93))+(((1.6345)*gclwh8_2*x111))+(((1.6345)*gclwh10_2*x67)));
op[26]=((((1.569)*pp*x95))+(((0.08264838)*x110))+(((1.569)*gclwh10_12*x67))+(((-3.138)*gclwh10_12*x75))+(((0.0140560787025)*x77))+(((-1.569)*gclwh6_12*x93))+(((-0.08264838)*x178))+(((0.0140560787025)*x95))+(((-0.08264838)*x203))+(((-0.0140560787025)*x199))+(((3.138)*gclwh6_12*x71))+(((-3.138)*gclwh8_12*x96)));
op[27]=((((-0.03583449)*x70))+((x169*x66))+(((0.03583449)*x66))+(((8.0)*gclwh10_11*x75))+(((0.7572)*gclwh4_11*rxp2_2))+(((-0.03583449)*x174))+(((8.0)*gclwh8_11*x96))+(((-1.0)*x183*x67))+(((-0.7572)*x152))+(((-1.0)*x169*x70))+((gclwh12_11*x86))+(((-8.0)*gclwh6_11*x71)));
op[28]=((-0.01429865)+(((-1.0)*x485))+x482);
op[29]=((((-0.00058678977375)*x165))+(((-0.131)*gclwh8_2*x96))+(((0.00058678977375)*x187))+(((0.00058678977375)*x189))+(((0.0655)*gclwh8_2*x111))+x457+(((-0.0655)*gclwh6_2*x93))+(((-1.0)*x278))+(((0.131)*gclwh6_2*x71))+(((-0.131)*gclwh10_2*x75))+(((0.01239915)*x208))+(((0.0655)*gclwh10_2*x67))+(((-0.01239915)*x149))+(((-0.01239915)*x146)));
op[30]=((((-3.269)*gclwh9_0*x96))+(((-1.6345)*gclwh7_0*x93))+(((-0.30941085)*x163))+(((3.269)*gclwh7_0*x71))+(((-0.30941085)*x150))+(((1.6345)*gclwh9_0*x111))+((gclwh9_0*x123))+x458+(((-1.0)*gclwh7_0*x158))+(((-3.269)*gclwh11_0*x75))+(((1.6345)*gclwh11_0*x67))+((gclwh15_0*x141))+(((-1.0)*x286))+((gclwh11_0*x160)));
op[31]=((-0.35681135)+(((-1.0)*x483))+x484);
op[32]=((((0.03583449)*x168))+(((-1.0)*gclwh13_10*x86))+(((-0.03583449)*gclwh7_10*r21))+((x111*x155))+(((0.03583449)*x106))+(((-8.0)*gclwh11_10*x75))+(((8.0)*gclwh7_10*x71))+(((-0.7572)*x143))+(((-1.0)*x162*x93))+(((0.7572)*x113))+((x140*x67))+(((-8.0)*gclwh9_10*x96)));
op[33]=((((-0.0140560787025)*x161))+(((-3.138)*gclwh11_13*x75))+(((-0.08264838)*x118))+(((1.569)*gclwh9_13*x111))+(((0.0140560787025)*x107))+(((-0.08264838)*x211))+(((0.08264838)*x138))+(((1.569)*gclwh11_13*x67))+(((3.138)*gclwh7_13*x71))+(((0.0140560787025)*x171))+(((-1.569)*gclwh7_13*x93))+(((-3.138)*gclwh9_13*x96)));
op[34]=((((-0.0655)*gclwh7_0*x93))+(((-0.00058678977375)*x196))+(((0.00058678977375)*x198))+(((0.131)*gclwh7_0*x71))+(((0.00058678977375)*x137))+(((-1.0)*x458))+x286+(((0.0655)*gclwh11_0*x67))+(((-0.131)*gclwh11_0*x75))+(((0.0655)*gclwh9_0*x111))+(((-0.131)*gclwh9_0*x96))+(((-0.01239915)*x163))+(((-0.01239915)*x150))+(((0.01239915)*x179)));
op[35]=((-0.01429865)+(((-1.0)*x484))+x483);
op[36]=((1.31196768)+(((-1.0)*x486))+x480);
op[37]=((((-1.6345)*gclwh3_2*x93))+(((3.269)*gclwh12_2*x71))+(((-1.0)*gclwh12_2*x158))+(((0.30941085)*x204))+(((-1.0)*gclwh4_2*x160))+(((-1.0)*x479))+(((-3.269)*gclwh14_2*x96))+(((-1.6345)*gclwh1_2*x111))+(((0.01464286847625)*x92))+(((3.269)*gclwh1_2*x96))+x467+(((-1.6345)*gclwh12_2*x93))+(((3.269)*gclwh3_2*x71))+((gclwh3_2*x158))+((gclwh1_2*x123))+(((-1.0)*gclwh8_2*x141))+(((-1.6345)*gclwh4_2*x67))+(((1.6345)*pp*x92))+(((3.269)*gclwh4_2*x75))+(((-0.30941085)*x78)));
IkReal x495=pz*pz;
IkReal x496=pp*pp;
IkReal x497=((0.1893)*pz);
IkReal x498=((1.7)*pz);
IkReal x499=(gclwh15_9*npx);
IkReal x500=(pp*r21);
IkReal x501=(pp*r22);
IkReal x502=((0.00702803935125)*r21);
IkReal x503=(gclwh5_9*npz);
IkReal x504=(pp*r20);
IkReal x505=(npy*pz);
IkReal x506=((4.0)*gclwh12_11);
IkReal x507=((3.60823078949063e-5)*r22);
IkReal x508=(gclwh14_3*rxp0_2);
IkReal x509=((0.000977833645875)*r20);
IkReal x510=(npz*pz);
IkReal x511=((0.000977833645875)*r21);
IkReal x512=(gclwh10_2*rxp2_2);
IkReal x513=((0.00076243651125)*rxp1_2);
IkReal x514=((0.00600991575645741)*r20);
IkReal x515=((0.154705425)*rxp1_2);
IkReal x516=((0.4366)*gclwh5_15);
IkReal x517=(gclwh6_11*rxp1_2);
IkReal x518=(gclwh7_0*rxp1_2);
IkReal x519=((0.154705425)*rxp2_2);
IkReal x520=((2.0)*gclwh11_10);
IkReal x521=((0.2970117)*rxp1_2);
IkReal x522=((0.017917245)*r21);
IkReal x523=(gclwh14_2*pz);
IkReal x524=(gclwh12_8*r21);
IkReal x525=(gclwh14_2*rxp0_2);
IkReal x526=((2.0)*gclwh4_11);
IkReal x527=((0.007321434238125)*r20);
IkReal x528=(npx*pz);
IkReal x529=((0.4366)*gclwh15_15);
IkReal x530=(gclwh10_11*rxp2_2);
IkReal x531=(gclwh5_9*rxp2_2);
IkReal x532=((0.020662095)*rxp1_2);
IkReal x533=((0.007321434238125)*r21);
IkReal x534=(gclwh0_0*r20);
IkReal x535=((0.0089586225)*r21);
IkReal x536=(gclwh13_0*pz);
IkReal x537=((1.6345)*pz);
IkReal x538=((0.007321434238125)*r22);
IkReal x539=((1.0)*pz);
IkReal x540=(gclwh14_14*rxp0_2);
IkReal x541=(gclwh4_14*r22);
IkReal x542=((0.1893)*rxp0_2);
IkReal x543=((0.00058678977375)*r22);
IkReal x544=(gclwh12_8*rxp1_2);
IkReal x545=((2.0)*gclwh9_10);
IkReal x546=((0.1893)*rxp2_2);
IkReal x547=((2.0)*gclwh15_10);
IkReal x548=((4.0)*gclwh14_11);
IkReal x549=(gclwh5_15*rxp2_2);
IkReal x550=((0.020662095)*rxp0_2);
IkReal x551=((2.0)*gclwh13_10);
IkReal x552=((0.3786)*rxp1_2);
IkReal x553=(gclwh9_0*r20);
IkReal x554=(gclwh13_9*r21);
IkReal x555=(gclwh15_1*r20);
IkReal x556=((0.000977833645875)*r22);
IkReal x557=((0.006199575)*rxp0_2);
IkReal x558=(gclwh6_2*rxp1_2);
IkReal x559=((0.0089586225)*r20);
IkReal x560=((2.0)*gclwh10_11);
IkReal x561=((2.0)*pp);
IkReal x562=((0.00058678977375)*r21);
IkReal x563=(gclwh1_3*r20);
IkReal x564=(gclwh14_14*r20);
IkReal x565=(gclwh9_0*rxp0_2);
IkReal x566=(gclwh4_3*rxp2_2);
IkReal x567=(gclwh5_0*r22);
IkReal x568=((0.03583449)*r20);
IkReal x569=((0.00058678977375)*r20);
IkReal x570=((0.2183)*gclwh13_15);
IkReal x571=((2.0)*gclwh7_10);
IkReal x572=(gclwh2_1*r21);
IkReal x573=((4.0)*gclwh15_10);
IkReal x574=((0.0089586225)*pz);
IkReal x575=((0.2183)*gclwh12_14);
IkReal x576=((0.2183)*gclwh14_14);
IkReal x577=(gclwh11_0*rxp2_2);
IkReal x578=(gclwh8_2*rxp0_2);
IkReal x579=((0.3786)*rxp2_2);
IkReal x580=(gclwh12_2*rxp1_2);
IkReal x581=(gclwh5_0*rxp2_2);
IkReal x582=((3.60823078949063e-5)*r21);
IkReal x583=(gclwh15_9*r20);
IkReal x584=((0.3786)*rxp0_2);
IkReal x585=((0.006199575)*rxp1_2);
IkReal x586=(gclwh14_8*npx);
IkReal x587=(gclwh13_15*r21);
IkReal x588=((0.017917245)*r20);
IkReal x589=(gclwh5_15*r22);
IkReal x590=((0.000293394886875)*r21);
IkReal x591=(gclwh13_0*rxp1_2);
IkReal x592=(gclwh7_10*rxp1_2);
IkReal x593=((0.000293394886875)*r22);
IkReal x594=(gclwh5_1*rxp2_2);
IkReal x595=((0.154705425)*rxp0_2);
IkReal x596=((0.4366)*gclwh13_15);
IkReal x597=((0.0089586225)*r22);
IkReal x598=((0.2970117)*rxp2_2);
IkReal x599=(gclwh5_9*r22);
IkReal x600=((0.7572)*rxp0_2);
IkReal x601=((4.0)*gclwh4_11);
IkReal x602=(gclwh15_1*rxp0_2);
IkReal x603=((0.000293394886875)*r20);
IkReal x604=((2.0)*gclwh6_11);
IkReal x605=((0.4366)*gclwh12_14);
IkReal x606=((0.017917245)*r22);
IkReal x607=(gclwh15_0*r20);
IkReal x608=(gclwh15_15*r20);
IkReal x609=((2.0)*gclwh12_11);
IkReal x610=(gclwh14_8*rxp0_2);
IkReal x611=((0.0655)*pz);
IkReal x612=((0.006199575)*rxp2_2);
IkReal x613=((0.04132419)*rxp1_2);
IkReal x614=((0.4366)*gclwh4_14);
IkReal x615=(gclwh15_0*rxp0_2);
IkReal x616=(gclwh14_8*r20);
IkReal x617=((0.03583449)*r22);
IkReal x618=((2.0)*gclwh8_11);
IkReal x619=((4.0)*gclwh13_10);
IkReal x620=(gclwh15_9*rxp0_2);
IkReal x621=((3.60823078949063e-5)*r20);
IkReal x622=((0.00702803935125)*r22);
IkReal x623=((0.2183)*gclwh5_15);
IkReal x624=(gclwh5_1*r22);
IkReal x625=((4.0)*gclwh5_10);
IkReal x626=(gclwh13_9*rxp1_2);
IkReal x627=((2.0)*gclwh5_10);
IkReal x628=((0.4366)*gclwh14_14);
IkReal x629=((0.020662095)*rxp2_2);
IkReal x630=(gclwh4_8*r22);
IkReal x631=(gclwh4_2*rxp2_2);
IkReal x632=((0.00600991575645741)*r21);
IkReal x633=((0.2183)*gclwh15_15);
IkReal x634=((0.2183)*gclwh4_14);
IkReal x635=((0.00702803935125)*r20);
IkReal x636=(gclwh12_14*r21);
IkReal x637=(gclwh4_8*rxp2_2);
IkReal x638=((0.2970117)*rxp0_2);
IkReal x639=(gclwh8_2*pz);
IkReal x640=(gclwh13_1*rxp1_2);
IkReal x641=((0.1893)*pp);
IkReal x642=(gclwh12_3*rxp1_2);
IkReal x643=((0.01464286847625)*r21);
IkReal x644=((0.1893)*rxp1_2);
IkReal x645=(gclwh4_3*r22);
IkReal x646=((2.0)*gclwh14_11);
IkReal x647=((0.03583449)*r21);
IkReal x648=((0.00195566729175)*x587);
IkReal x649=((0.00195566729175)*x589);
IkReal x650=((0.00195566729175)*x608);
IkReal x651=(gclwh15_10*x588);
IkReal x652=(gclwh7_10*x552);
IkReal x653=(gclwh5_10*x606);
IkReal x654=(gclwh9_10*x584);
IkReal x655=(gclwh13_10*x522);
IkReal x656=(gclwh11_10*x579);
IkReal x657=(gclwh12_14*x532);
IkReal x658=(gclwh6_5*x511);
IkReal x659=(gclwh4_14*x629);
IkReal x660=(gclwh8_5*x509);
IkReal x661=((0.020662095)*x540);
IkReal x662=(gclwh10_5*x556);
IkReal x663=((0.017917245)*x544);
IkReal x664=(gclwh8_11*x559);
IkReal x665=(gclwh14_11*x542);
IkReal x666=((0.017917245)*x637);
IkReal x667=(gclwh10_11*x597);
IkReal x668=(gclwh6_11*x535);
IkReal x669=(gclwh12_11*x644);
IkReal x670=(gclwh4_11*x546);
IkReal x671=((0.017917245)*x610);
IkReal x672=((0.017917245)*x531);
IkReal x673=(gclwh13_10*x644);
IkReal x674=(gclwh7_10*x535);
IkReal x675=(gclwh5_10*x546);
IkReal x676=((0.017917245)*x626);
IkReal x677=((0.017917245)*x620);
IkReal x678=(gclwh11_10*x597);
IkReal x679=(gclwh15_10*x542);
IkReal x680=(gclwh9_10*x559);
IkReal x681=(gclwh13_15*x532);
IkReal x682=((0.020662095)*x549);
IkReal x683=(gclwh7_7*x511);
IkReal x684=(gclwh9_7*x509);
IkReal x685=(gclwh15_15*x550);
IkReal x686=(gclwh11_7*x556);
IkReal x687=(gclwh12_11*x522);
IkReal x688=((0.3786)*x530);
IkReal x689=(gclwh4_11*x606);
IkReal x690=(gclwh8_11*x584);
IkReal x691=((0.00195566729175)*x541);
IkReal x692=((0.00195566729175)*x636);
IkReal x693=((0.00195566729175)*x564);
IkReal x694=((0.000977833645875)*x541);
IkReal x695=(gclwh10_5*x629);
IkReal x696=(gclwh12_14*x511);
IkReal x697=(gclwh8_5*x550);
IkReal x698=(gclwh6_5*x532);
IkReal x699=(gclwh14_14*x509);
IkReal x700=((0.000847933619625)*x524);
IkReal x701=((0.1893)*x517);
IkReal x702=(gclwh14_11*x559);
IkReal x703=((0.000847933619625)*x630);
IkReal x704=(gclwh8_11*x542);
IkReal x705=(gclwh12_11*x535);
IkReal x706=((0.1893)*x530);
IkReal x707=(gclwh4_11*x597);
IkReal x708=((0.000847933619625)*x616);
IkReal x709=((0.1893)*x592);
IkReal x710=(gclwh15_10*x559);
IkReal x711=((0.000847933619625)*x583);
IkReal x712=((0.000847933619625)*x599);
IkReal x713=(gclwh9_10*x542);
IkReal x714=(gclwh13_10*x535);
IkReal x715=((0.000847933619625)*x554);
IkReal x716=(gclwh11_10*x546);
IkReal x717=(gclwh5_10*x597);
IkReal x718=(gclwh15_15*x509);
IkReal x719=(gclwh7_7*x532);
IkReal x720=(gclwh5_15*x556);
IkReal x721=(gclwh9_7*x550);
IkReal x722=(gclwh11_7*x629);
IkReal x723=(gclwh13_15*x511);
IkReal x724=((2.0)*x495);
IkReal x725=(r21*x496);
IkReal x726=((1.0)*x496);
IkReal x727=(x500*x570);
IkReal x728=(x528*x529);
IkReal x729=(x501*x623);
IkReal x730=(x505*x596);
IkReal x731=(x504*x633);
IkReal x732=(x510*x516);
IkReal x733=(x504*x547);
IkReal x734=(x510*x625);
IkReal x735=(x505*x619);
IkReal x736=(x500*x551);
IkReal x737=(x528*x573);
IkReal x738=(x501*x627);
IkReal x739=((0.2183)*gclwh10_5*x510);
IkReal x740=((0.2183)*gclwh8_5*x528);
IkReal x741=((0.10915)*gclwh6_5*x500);
IkReal x742=((0.2183)*gclwh6_5*x505);
IkReal x743=((0.10915)*gclwh8_5*x504);
IkReal x744=((0.10915)*gclwh10_5*x501);
IkReal x745=(x641*x642);
IkReal x746=(x505*x604);
IkReal x747=(x559*x639);
IkReal x748=(gclwh10_2*pz*x501);
IkReal x749=(x497*x525);
IkReal x750=(x504*x639);
IkReal x751=(gclwh4_3*pp*x546);
IkReal x752=(gclwh10_2*r22*x574);
IkReal x753=(x497*x580);
IkReal x754=(x510*x560);
IkReal x755=(x497*x631);
IkReal x756=(x508*x641);
IkReal x757=(x528*x618);
IkReal x758=(gclwh6_2*pz*x535);
IkReal x759=(x640*x641);
IkReal x760=(x510*x520);
IkReal x761=(x528*x545);
IkReal x762=(gclwh11_0*r22*x574);
IkReal x763=(x553*x574);
IkReal x764=(gclwh5_1*pp*x546);
IkReal x765=(x497*x615);
IkReal x766=(gclwh11_0*pz*x501);
IkReal x767=(gclwh9_0*pz*x504);
IkReal x768=(gclwh15_1*pp*x542);
IkReal x769=(gclwh7_0*pz*x535);
IkReal x770=(x497*x591);
IkReal x771=(x497*x581);
IkReal x772=(x505*x571);
IkReal x773=((0.10915)*gclwh7_7*x500);
IkReal x774=((0.2183)*gclwh9_7*x528);
IkReal x775=((0.2183)*gclwh11_7*x510);
IkReal x776=((0.10915)*gclwh9_7*x504);
IkReal x777=((0.2183)*gclwh7_7*x505);
IkReal x778=((0.10915)*gclwh11_7*x501);
IkReal x779=(x501*x526);
IkReal x780=(x500*x609);
IkReal x781=(x528*x548);
IkReal x782=(x500*x575);
IkReal x783=(x528*x628);
IkReal x784=(x501*x634);
IkReal x785=(x504*x576);
IkReal x786=(x505*x605);
IkReal x787=(x510*x614);
IkReal x788=((0.10915)*gclwh12_14*x500);
IkReal x789=(x528*x576);
IkReal x790=((0.10915)*gclwh4_14*x501);
IkReal x791=((0.10915)*gclwh14_14*x504);
IkReal x792=(x510*x634);
IkReal x793=(x505*x575);
IkReal x794=((0.09465)*gclwh4_8*x501);
IkReal x795=(x504*x523);
IkReal x796=(gclwh12_3*x725);
IkReal x797=(x510*x526);
IkReal x798=(x497*x558);
IkReal x799=(gclwh3_3*x725);
IkReal x800=(x496*x563);
IkReal x801=(gclwh3_2*pz*x535);
IkReal x802=(x497*x586);
IkReal x803=(x523*x559);
IkReal x804=((0.09465)*gclwh12_8*x500);
IkReal x805=(x496*x645);
IkReal x806=(gclwh1_2*pz*x559);
IkReal x807=(x505*x609);
IkReal x808=(x497*x578);
IkReal x809=(gclwh4_2*r22*x574);
IkReal x810=(gclwh4_8*npz*x497);
IkReal x811=(gclwh12_2*pz*x535);
IkReal x812=(x497*x512);
IkReal x813=(x528*x646);
IkReal x814=((0.09465)*gclwh14_8*x504);
IkReal x815=(gclwh12_8*npy*x497);
IkReal x816=(x496*x555);
IkReal x817=(x497*x503);
IkReal x818=(gclwh5_0*pz*x501);
IkReal x819=(gclwh13_9*npy*x497);
IkReal x820=(x567*x574);
IkReal x821=(x500*x536);
IkReal x822=((0.09465)*gclwh15_9*x504);
IkReal x823=(x535*x536);
IkReal x824=(x496*x572);
IkReal x825=(x510*x627);
IkReal x826=(gclwh2_0*pz*x535);
IkReal x827=(x497*x565);
IkReal x828=(x505*x551);
IkReal x829=(x497*x577);
IkReal x830=(gclwh0_1*r20*x496);
IkReal x831=(x534*x574);
IkReal x832=((0.09465)*gclwh5_9*x501);
IkReal x833=(x497*x518);
IkReal x834=((0.09465)*gclwh13_9*x500);
IkReal x835=(gclwh15_0*pz*x559);
IkReal x836=(x497*x499);
IkReal x837=(x528*x547);
IkReal x838=((0.10915)*gclwh15_15*x504);
IkReal x839=(x510*x623);
IkReal x840=(x505*x570);
IkReal x841=((0.10915)*gclwh13_15*x500);
IkReal x842=((0.10915)*gclwh5_15*x501);
IkReal x843=(x528*x633);
IkReal x844=(gclwh6_2*npy*x724);
IkReal x845=(gclwh6_2*x500*x539);
IkReal x846=(gclwh10_2*npz*x724);
IkReal x847=(gclwh8_2*npx*x724);
IkReal x848=(gclwh7_0*npy*x724);
IkReal x849=(gclwh9_0*npx*x724);
IkReal x850=(gclwh11_0*npz*x724);
IkReal x851=(gclwh7_0*x500*x539);
IkReal x852=(gclwh12_2*npy*x724);
IkReal x853=(gclwh3_2*npy*x724);
IkReal x854=(gclwh1_2*npx*x724);
IkReal x855=(gclwh14_3*x528*x561);
IkReal x856=(gclwh4_2*npz*x724);
IkReal x857=(gclwh4_3*x510*x561);
IkReal x858=(gclwh12_2*x500*x539);
IkReal x859=(gclwh1_2*x504*x539);
IkReal x860=(gclwh3_3*x505*x561);
IkReal x861=(gclwh4_2*x501*x539);
IkReal x862=(gclwh1_3*x528*x561);
IkReal x863=(gclwh3_2*x500*x539);
IkReal x864=(gclwh12_3*x505*x561);
IkReal x865=(gclwh14_2*npx*x724);
IkReal x866=(gclwh14_3*r20*x726);
IkReal x867=(gclwh0_0*npx*x724);
IkReal x868=(gclwh2_0*npy*x724);
IkReal x869=(gclwh5_1*x510*x561);
IkReal x870=(gclwh13_1*x505*x561);
IkReal x871=(gclwh15_0*npx*x724);
IkReal x872=(gclwh2_1*x505*x561);
IkReal x873=(gclwh0_1*x528*x561);
IkReal x874=(gclwh5_0*npz*x724);
IkReal x875=(gclwh13_0*npy*x724);
IkReal x876=(gclwh0_0*x504*x539);
IkReal x877=(gclwh15_0*x504*x539);
IkReal x878=(gclwh2_0*x500*x539);
IkReal x879=((1.0)*gclwh13_1*x725);
IkReal x880=(x624*x726);
IkReal x881=(gclwh15_1*x528*x561);
IkReal x882=(x657+x659);
IkReal x883=(x695+x697);
IkReal x884=(x682+x681);
IkReal x885=(x721+x722);
IkReal x886=(x678+x679+x680+x772);
IkReal x887=(x665+x664+x667+x746);
IkReal x888=(x702+x701+x797+x807);
IkReal x889=(x710+x709+x828+x825);
IkReal x890=(x650+x732+x731+x730);
IkReal x891=(x658+x739+x740+x741);
IkReal x892=(x699+x791+x793+x792);
IkReal x893=(x693+x786+x787+x785);
IkReal x894=(x683+x773+x775+x774);
IkReal x895=(x718+x838+x839+x840);
IkReal x896=(x713+x714+x717+x716+x837);
IkReal x897=(x706+x707+x704+x705+x813);
IkReal x898=(x673+x674+x675+x760+x761);
IkReal x899=(x669+x668+x670+x754+x757);
IkReal x900=(((x510*x601))+((gclwh14_11*x588))+(((0.3786)*x517))+((x505*x506))+((x504*x646)));
IkReal x901=(x691+x692+x782+x783+x784);
IkReal x902=(x651+x652+x735+x734+x733);
IkReal x903=(x694+x696+x790+x788+x789);
IkReal x904=(x720+x723+x841+x843+x842);
IkReal x905=(x660+x662+x744+x742+x743);
IkReal x906=(x649+x648+x727+x728+x729);
IkReal x907=(x686+x684+x777+x776+x778);
IkReal x908=(x653+x654+x655+x656+x737+x736+x738);
IkReal x909=(x689+x688+x687+x690+x779+x780+x781);
IkReal x910=(x677+x771+x770+x768+x769+x850+x851+x849);
IkReal x911=(x671+x755+x756+x753+x758+x845+x847+x846);
IkReal x912=(x672+x676+x759+x764+x765+x766+x767+x762+x763+x848);
IkReal x913=(x663+x666+x751+x750+x752+x747+x745+x748+x749+x844);
IkReal x914=(x712+x715+x878+x879+x872+x873+x874+x875+x876+x877+x881+x880+x834+x835+x836+x832+x833);
IkReal x915=(x497+x703+x700+x795+x794+x796+x799+x798+x852+x853+x856+x854+x855+x805+x804+x806+x801+x800+x803+x802);
IkReal x916=(x708+x857+x858+x859+x866+x865+x864+x863+x862+x861+x860+x814+x815+x812+x810+x811+x809+x808);
IkReal x917=(x497+x711+x869+x868+x867+x870+x871+x818+x819+x816+x817+x829+x823+x822+x821+x820+x827+x826+x824+x830+x831);
op[38]=((((0.8732)*gclwh4_14*x510))+(((-0.0039113345835)*x636))+(((0.0039113345835)*x564))+(((-1.0)*x501*x614))+(((0.8732)*gclwh12_14*x505))+(((-1.0)*gclwh8_12*x638))+(((-1.0)*gclwh10_12*x598))+(((-0.8732)*gclwh14_14*x528))+(((-0.0039113345835)*x541))+((x504*x628))+((gclwh6_12*x521))+(((-1.0)*x500*x605)));
op[39]=((-0.05940486)+((x501*x601))+((x500*x506))+((gclwh8_11*x600))+(((-1.0)*x504*x548))+(((-8.0)*gclwh4_11*x510))+(((0.7572)*x530))+(((-0.7572)*x517))+((gclwh12_11*x647))+(((-8.0)*gclwh12_11*x505))+(((-1.0)*gclwh14_11*x568))+((gclwh4_11*x617))+(((8.0)*gclwh14_11*x528)));
op[40]=((0.02168232)+(((-1.0)*x900))+x909);
op[41]=(((gclwh1_2*x569))+((gclwh3_2*x562))+(((-0.01239915)*x578))+((gclwh14_2*x569))+(((-0.131)*npx*x523))+(((-1.0)*gclwh12_2*x562))+(((-0.0655)*gclwh1_2*x504))+(((-1.0)*x893))+(((0.01239915)*x558))+(((0.131)*gclwh4_2*x510))+(((0.0655)*gclwh14_2*x504))+(((-0.0655)*gclwh12_2*x500))+(((0.131)*gclwh12_2*x505))+(((0.131)*gclwh1_2*x528))+(((-0.0655)*gclwh4_2*x501))+x901+(((-0.0655)*gclwh3_2*x500))+(((-0.01239915)*x512))+(((0.131)*gclwh3_2*x505))+(((-1.0)*gclwh4_2*x543)));
op[42]=((((-3.269)*gclwh13_0*x505))+(((-0.30941085)*x518))+(((-1.6345)*gclwh15_0*x504))+(((0.30941085)*x565))+(((3.269)*gclwh0_0*x528))+(((1.6345)*gclwh13_0*x500))+(((-1.0)*x906))+(((-1.6345)*gclwh0_0*x504))+(((0.30941085)*x577))+(((0.01464286847625)*x567))+((gclwh13_0*x643))+((gclwh2_0*x643))+(((-0.01464286847625)*x607))+(((0.01464286847625)*x534))+x890+(((3.269)*gclwh2_0*x505))+(((-1.6345)*gclwh2_0*x500))+(((3.269)*gclwh15_0*x528))+(((-3.269)*gclwh5_0*x510))+(((1.6345)*gclwh5_0*x501)));
op[43]=((1.31196768)+(((-1.0)*x902))+x908);
op[44]=((0.05940486)+(((0.7572)*gclwh11_10*rxp2_2))+(((-1.0)*gclwh15_10*x568))+(((-1.0)*x504*x573))+(((-8.0)*gclwh13_10*x505))+((x501*x625))+(((-0.7572)*x592))+((x500*x619))+(((8.0)*gclwh15_10*x528))+((gclwh13_10*x647))+((gclwh5_10*x617))+((gclwh9_10*x600))+(((-8.0)*gclwh5_10*x510)));
op[45]=(((x500*x596))+((x501*x516))+(((-1.0)*x504*x529))+(((0.8732)*gclwh15_15*x528))+(((-1.0)*gclwh7_13*x521))+((gclwh9_13*x638))+(((-0.8732)*gclwh13_15*x505))+(((-0.0039113345835)*x608))+(((0.0039113345835)*x589))+(((0.0039113345835)*x587))+((gclwh11_13*x598))+(((-0.8732)*gclwh5_15*x510)));
op[46]=((((0.131)*gclwh15_0*x528))+(((0.131)*gclwh2_0*x505))+(((-0.0655)*gclwh15_0*x504))+(((-0.0655)*gclwh0_0*x504))+(((-0.131)*gclwh5_0*x510))+(((0.00058678977375)*x534))+(((-0.131)*gclwh13_0*x505))+(((0.131)*gclwh0_0*x528))+((gclwh5_0*x543))+(((-1.0)*x890))+(((0.01239915)*x577))+((gclwh13_0*x562))+((gclwh2_0*x562))+(((-0.0655)*gclwh2_0*x500))+(((0.0655)*gclwh13_0*x500))+x906+(((0.0655)*gclwh5_0*x501))+(((-0.01239915)*x518))+(((-1.0)*gclwh15_0*x569))+(((0.01239915)*x565)));
op[47]=((0.02168232)+(((-1.0)*x908))+x902);
op[48]=(((gclwh10_12*x538))+(((-1.0)*gclwh12_8*x515))+((gclwh8_12*x527))+(((-1.0)*gclwh4_8*x519))+(((-1.6345)*gclwh10_12*x510))+(((-1.0)*x905))+(((0.81725)*gclwh8_12*x504))+(((-1.0)*x882))+((gclwh14_8*x595))+(((0.81725)*gclwh10_12*x501))+x661+(((1.6345)*gclwh6_12*x505))+(((-1.6345)*gclwh8_12*x528))+(((-1.0)*gclwh6_12*x533))+x891+(((-0.81725)*gclwh6_12*x500)));
op[49]=((((-1.0)*gclwh10_11*x501))+(((-1.0)*x911))+(((-0.12699240901125)*x566))+(((-1.0)*x887))+(((-0.12699240901125)*x642))+((gclwh6_11*x500))+x899+(((0.12699240901125)*x508))+x913+(((-1.0)*gclwh8_11*x504)));
op[50]=((0.17125635)+(((4.0)*gclwh10_11*x510))+((gclwh12_11*x552))+((gclwh6_11*x522))+(((-1.0)*x501*x560))+(((4.0)*gclwh8_11*x528))+(((-4.0)*gclwh6_11*x505))+(((-1.0)*gclwh14_11*x584))+((x500*x604))+((gclwh4_11*x579))+(((-1.0)*gclwh8_11*x588))+(((-1.0)*x504*x618))+(((-1.0)*gclwh10_11*x606)));
op[51]=((((0.14850585)*x580))+(((-0.160905)*x610))+(((-1.0)*gclwh8_2*x635))+(((0.160905)*x637))+(((-0.14850585)*x525))+((gclwh6_2*x502))+(((0.7845)*gclwh6_2*x500))+(((-1.0)*gclwh10_2*x622))+(((0.04132419)*gclwh4_14*rxp2_2))+(((0.160905)*x544))+(((-0.7845)*gclwh8_2*x504))+((gclwh12_14*x613))+(((0.14850585)*x631))+(((1.569)*gclwh10_2*x510))+(((-1.569)*gclwh6_2*x505))+(((-0.04132419)*x540))+(((1.569)*gclwh8_2*x528))+(((-0.7845)*gclwh10_2*x501)));
op[52]=((((-0.0655)*gclwh10_12*x510))+(((-0.0655)*gclwh8_12*x528))+(((0.0655)*gclwh6_12*x505))+(((-0.03275)*gclwh6_12*x500))+(((-1.0)*x905))+((gclwh4_8*x612))+(((0.03275)*gclwh8_12*x504))+((gclwh10_12*x593))+(((-1.0)*gclwh6_12*x590))+(((-1.0)*x661))+(((0.006199575)*x544))+(((0.03275)*gclwh10_12*x501))+(((-1.0)*gclwh14_8*x557))+x882+x891+((gclwh8_12*x603)));
op[53]=(((gclwh8_11*x504))+(((-1.0)*gclwh6_11*x500))+(((0.00076243651125)*x508))+(((-1.0)*x899))+(((-1.0)*x911))+((gclwh10_11*x501))+(((-0.00076243651125)*x566))+x887+x913+(((-1.0)*gclwh12_3*x513)));
op[54]=(((gclwh11_10*x501))+((gclwh9_10*x504))+(((-1.0)*x898))+(((-1.0)*x910))+(((-0.12699240901125)*x594))+(((-1.0)*gclwh7_10*x500))+(((-0.12699240901125)*x640))+(((0.12699240901125)*x602))+x886+x912);
op[55]=((((-1.0)*gclwh13_9*x515))+(((-1.6345)*gclwh9_13*x528))+(((0.81725)*gclwh11_13*x501))+(((0.81725)*gclwh9_13*x504))+(((-1.0)*gclwh5_9*x519))+(((-1.0)*x907))+(((-1.0)*gclwh7_13*x533))+(((-1.6345)*gclwh11_13*x510))+(((-1.0)*x884))+(((-0.81725)*gclwh7_13*x500))+((gclwh11_13*x538))+(((1.6345)*gclwh7_13*x505))+x685+((gclwh15_9*x595))+x894+((gclwh9_13*x527)));
op[56]=((((-1.0)*gclwh13_15*x613))+(((-0.7845)*gclwh11_0*x501))+(((0.14850585)*x581))+(((-0.00702803935125)*x553))+(((-1.569)*gclwh7_0*x505))+(((-1.0)*gclwh11_0*x622))+((gclwh7_0*x502))+(((0.160905)*x620))+(((-0.14850585)*x615))+(((1.569)*gclwh9_0*x528))+(((0.04132419)*gclwh15_15*rxp0_2))+(((-0.160905)*x626))+(((0.7845)*gclwh7_0*x500))+(((0.14850585)*x591))+(((-0.160905)*x531))+(((-0.7845)*gclwh9_0*x504))+(((1.569)*gclwh11_0*x510))+(((-0.04132419)*x549)));
op[57]=((0.17125635)+((gclwh13_10*x552))+((gclwh5_10*x579))+(((-1.0)*gclwh9_10*x588))+(((-1.0)*x504*x545))+(((-1.0)*gclwh11_10*x606))+(((-1.0)*gclwh15_10*x584))+((x500*x571))+(((-1.0)*x501*x520))+(((4.0)*gclwh11_10*x510))+((gclwh7_10*x522))+(((-4.0)*gclwh7_10*x505))+(((4.0)*gclwh9_10*x528)));
op[58]=((((-1.0)*gclwh11_10*x501))+((gclwh7_10*x500))+(((-1.0)*x910))+(((-1.0)*x886))+(((-1.0)*gclwh13_1*x513))+(((-1.0)*gclwh9_10*x504))+(((0.00076243651125)*x602))+x898+x912+(((-0.00076243651125)*x594)));
op[59]=((((-0.0655)*gclwh9_13*x528))+(((0.03275)*gclwh9_13*x504))+(((-1.0)*x685))+(((-0.03275)*gclwh7_13*x500))+(((-1.0)*x907))+(((-0.0655)*gclwh11_13*x510))+(((-1.0)*gclwh15_9*x557))+(((0.0655)*gclwh7_13*x505))+(((0.006199575)*x531))+(((-1.0)*gclwh7_13*x590))+x884+x894+((gclwh9_13*x603))+((gclwh13_9*x585))+((gclwh11_13*x593))+(((0.03275)*gclwh11_13*x501)));
op[60]=((((-1.0)*gclwh10_12*x519))+(((-1.0)*gclwh4_8*x538))+(((1.6345)*gclwh12_8*x505))+(((-1.0)*x903))+((gclwh6_12*x515))+(((-0.81725)*gclwh4_8*x501))+(((-0.007321434238125)*x524))+(((-1.0)*gclwh8_12*x595))+(((-0.81725)*gclwh12_8*x500))+((gclwh14_8*x527))+(((-1.0)*x698))+(((0.81725)*gclwh14_8*x504))+(((1.6345)*gclwh4_8*x510))+x883+x892+(((-1.6345)*gclwh14_8*x528)));
op[61]=((0.679811285)+((gclwh3_3*x632))+(((-0.66189404)*gclwh12_3*x500))+(((-1.0)*gclwh14_11*x504))+(((-0.00600991575645741)*x645))+(((1.341705325)*gclwh12_3*x505))+(((-1.0)*x916))+((gclwh14_3*x514))+(((-1.0)*x888))+(((0.66189404)*gclwh14_3*x504))+(((-0.66189404)*gclwh4_3*x501))+(((1.341705325)*gclwh3_3*x505))+((gclwh12_11*x500))+x897+(((-0.679811285)*gclwh3_3*x500))+(((-1.0)*gclwh12_3*x632))+(((1.341705325)*gclwh1_3*x528))+(((-1.341705325)*gclwh14_3*x528))+(((1.341705325)*gclwh4_3*x510))+(((-0.679811285)*gclwh1_3*x504))+x915+((gclwh4_11*x501))+((gclwh1_3*x514)));
op[62]=((0.07735732)+(((-1.0)*x900))+x909);
op[63]=(((x498*x586))+(((-1.569)*gclwh1_2*x528))+(((-1.0)*gclwh4_8*npz*x498))+(((-1.569)*gclwh12_2*x505))+(((-0.85)*gclwh14_8*x504))+(((0.7845)*gclwh12_2*x500))+(((0.85)*gclwh4_8*x501))+(((-1.569)*gclwh4_2*x510))+(((-1.0)*gclwh1_2*x635))+(((0.14850585)*x512))+(((-1.0)*x893))+(((0.7845)*gclwh3_2*x500))+(((0.14850585)*x578))+(((-0.14850585)*x558))+(((-0.7845)*gclwh14_2*x504))+((gclwh12_2*x502))+(((0.85)*gclwh12_8*x500))+(((1.569)*npx*x523))+(((0.007614829125)*x524))+(((0.7845)*gclwh1_2*x504))+(((-0.007614829125)*x616))+(((-1.0)*gclwh12_8*npy*x498))+(((0.7845)*gclwh4_2*x501))+x901+(((0.007614829125)*x630))+(((-1.0)*gclwh14_2*x635))+(((-1.0)*gclwh3_2*x502))+((gclwh4_2*x622))+(((-1.569)*gclwh3_2*x505)));
op[64]=((((0.0655)*gclwh14_8*x528))+(((-1.0)*gclwh14_8*x603))+(((-0.0655)*gclwh4_8*x510))+(((0.000293394886875)*x524))+(((-1.0)*x892))+(((0.03275)*gclwh12_8*x500))+((gclwh4_8*x593))+(((-0.0655)*gclwh12_8*x505))+(((-1.0)*gclwh8_12*x557))+((gclwh6_12*x585))+(((-1.0)*x698))+x883+(((-0.03275)*gclwh14_8*x504))+(((-1.0)*gclwh10_12*x612))+x903+(((0.03275)*gclwh4_8*x501)));
op[65]=((-0.012986285)+(((0.008055325)*gclwh3_3*x505))+(((3.60823078949063e-5)*x563))+(((-1.0)*gclwh12_11*x500))+(((0.00493096)*gclwh12_3*x500))+((gclwh14_11*x504))+(((-1.0)*x897))+((gclwh3_3*x582))+(((-1.0)*x916))+(((-1.0)*gclwh12_3*x582))+(((-1.0)*gclwh4_11*x501))+(((-0.008055325)*gclwh14_3*x528))+(((0.008055325)*gclwh12_3*x505))+(((0.008055325)*gclwh1_3*x528))+(((-0.00493096)*gclwh14_3*x504))+(((0.00493096)*gclwh4_3*x501))+(((-1.0)*gclwh4_3*x507))+x888+(((0.008055325)*gclwh4_3*x510))+(((-0.012986285)*gclwh3_3*x500))+x915+((gclwh14_3*x621))+(((-0.012986285)*gclwh1_3*x504)));
op[66]=((-0.679811285)+((gclwh0_1*x514))+((gclwh13_1*x632))+(((-1.0)*gclwh15_1*x514))+(((1.341705325)*gclwh15_1*x528))+(((1.341705325)*gclwh0_1*x528))+(((-1.0)*gclwh15_10*x504))+(((-1.0)*x914))+(((-0.679811285)*gclwh0_1*x504))+(((0.00600991575645741)*x572))+(((-1.0)*x889))+(((-0.66189404)*gclwh15_1*x504))+(((-1.341705325)*gclwh13_1*x505))+((gclwh5_10*x501))+(((-0.679811285)*gclwh2_1*x500))+(((0.66189404)*gclwh13_1*x500))+(((-1.341705325)*gclwh5_1*x510))+x896+((gclwh13_10*x500))+x917+(((0.66189404)*gclwh5_1*x501))+(((0.00600991575645741)*x624))+(((1.341705325)*gclwh2_1*x505)));
op[67]=((((0.81725)*gclwh13_9*x500))+((gclwh9_13*x595))+(((-1.0)*x503*x537))+(((-1.0)*x895))+((gclwh11_13*x519))+(((-1.0)*x885))+((gclwh13_9*x533))+(((0.81725)*gclwh5_9*x501))+(((-1.0)*gclwh15_9*x527))+((x499*x537))+x719+(((-0.81725)*gclwh15_9*x504))+((gclwh5_9*x538))+x904+(((-1.6345)*gclwh13_9*x505))+(((-1.0)*gclwh7_13*x515)));
op[68]=((((-1.0)*gclwh13_0*x502))+(((0.85)*gclwh13_9*x500))+(((-0.14850585)*x565))+(((-0.85)*gclwh15_9*x504))+(((-1.569)*gclwh0_0*x528))+(((-1.0)*gclwh13_9*npy*x498))+(((-1.569)*gclwh2_0*x505))+(((0.7845)*gclwh2_0*x500))+(((0.007614829125)*x599))+(((0.14850585)*x518))+(((-1.0)*x890))+(((-0.7845)*gclwh5_0*x501))+(((1.569)*gclwh5_0*x510))+(((0.00702803935125)*x607))+(((-0.00702803935125)*x567))+(((-0.14850585)*x577))+(((0.85)*gclwh5_9*x501))+(((0.007614829125)*x554))+(((-0.7845)*gclwh13_0*x500))+(((0.7845)*gclwh15_0*x504))+((x498*x499))+(((-1.569)*gclwh15_0*x528))+(((-0.007614829125)*x583))+(((-1.0)*gclwh2_0*x502))+(((1.569)*gclwh13_0*x505))+(((0.7845)*gclwh0_0*x504))+(((-1.0)*x498*x503))+x906+(((-0.00702803935125)*x534)));
op[69]=((0.07735732)+(((-1.0)*x908))+x902);
op[70]=((0.012986285)+((gclwh5_1*x507))+((gclwh0_1*x621))+((gclwh13_1*x582))+(((-1.0)*gclwh5_10*x501))+(((0.008055325)*gclwh0_1*x528))+(((-1.0)*x896))+(((-1.0)*x914))+(((-0.00493096)*gclwh13_1*x500))+(((3.60823078949063e-5)*x572))+(((0.00493096)*gclwh15_1*x504))+(((-0.012986285)*gclwh0_1*x504))+(((0.008055325)*gclwh2_1*x505))+(((-0.008055325)*gclwh5_1*x510))+(((-3.60823078949063e-5)*x555))+(((0.008055325)*gclwh15_1*x528))+(((-0.00493096)*gclwh5_1*x501))+x889+(((-1.0)*gclwh13_10*x500))+(((-0.012986285)*gclwh2_1*x500))+x917+(((-0.008055325)*gclwh13_1*x505))+((gclwh15_10*x504)));
op[71]=((((-1.0)*gclwh7_13*x585))+((gclwh9_13*x557))+(((0.0655)*gclwh13_9*x505))+((gclwh11_13*x612))+(((-1.0)*x904))+((x503*x611))+(((-1.0)*x885))+(((-0.03275)*gclwh13_9*x500))+(((0.03275)*gclwh15_9*x504))+(((-1.0)*x499*x611))+(((-1.0)*gclwh5_9*x593))+(((0.000293394886875)*x583))+x719+x895+(((-0.000293394886875)*x554))+(((-0.03275)*gclwh5_9*x501)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x918=htj1*htj1;
CheckValue<IkReal> x919=IKPowWithIntegerCheck(((1.0)+x918),-1);
if(!x919.valid){
continue;
}
cj1array[numsolutions]=((x919.value)*(((1.0)+(((-1.0)*x918)))));
CheckValue<IkReal> x920=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x920.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x920.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x921=htj2*htj2;
CheckValue<IkReal> x922=IKPowWithIntegerCheck(((1.0)+x921),-1);
if(!x922.valid){
continue;
}
cj2array[numsolutions]=((x922.value)*(((1.0)+(((-1.0)*x921)))));
CheckValue<IkReal> x923=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x923.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x923.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x924=htj3*htj3;
CheckValue<IkReal> x925=IKPowWithIntegerCheck(((1.0)+x924),-1);
if(!x925.valid){
continue;
}
cj3array[numsolutions]=((x925.value)*(((1.0)+(((-1.0)*x924)))));
CheckValue<IkReal> x926=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x926.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x926.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x927=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x927);
rxp1_0=(pz*r11);
rxp1_1=(r01*x927);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x928=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x928);
rxp1_0=(pz*r11);
rxp1_1=(r01*x928);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x929=IKPowWithIntegerCheck(r22,-1);
if(!x929.valid){
continue;
}
CheckValue<IkReal> x930=IKPowWithIntegerCheck(sj3,-1);
if(!x930.valid){
continue;
}
sj4array[0]=((x929.value)*(x930.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x931=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x931);
rxp1_0=(pz*r11);
rxp1_1=(r01*x931);
IkReal x932=((16.0)*sj4);
IkReal x933=(cj1*cj2);
IkReal x934=((4.0)*sj3);
IkReal x935=((8.0)*sj4);
IkReal x936=((4.0)*cj4);
IkReal x937=(sj1*sj2);
IkReal x938=((4.0)*sj4);
IkReal x939=(cj3*r02);
IkReal x940=((16.0)*sj3);
IkReal x941=((8.0)*sj3);
IkReal x942=((12.0)*cj4);
IkReal x943=((12.0)*sj4);
IkReal x944=(cj3*r12);
IkReal x945=(r11*x934);
IkReal x946=(r01*x934);
IkReal x947=(r01*x937);
IkReal x948=(cj3*cj4*r01);
IkReal x949=(cj3*cj4*r11);
IkReal x950=(cj3*r10*x936);
IkReal x951=(x943*x944);
IkReal x952=(cj3*r00*x936);
IkReal x953=(x939*x943);
IkReal x954=(r00*x937*x938);
IkReal x955=(r02*x937*x942);
IkReal x956=(r00*x933*x938);
IkReal x957=(r02*x933*x942);
IkReal x958=(r10*x937*x938);
IkReal x959=(r12*x933*x942);
IkReal x960=(r12*x937*x942);
IkReal x961=(r10*x933*x938);
IkReal x962=(x956+x945);
IkReal x963=(x958+x946);
IkReal x964=(x954+x950);
IkReal x965=(x957+x951);
IkReal x966=(x961+x952);
IkReal x967=(x960+x953);
j5eval[0]=((((0.5)*(IKabs((((r01*x932*x933))+(((-1.0)*x932*x947))+(((-1.0)*r10*x940))+(((-16.0)*x949)))))))+(((0.5)*(IKabs(((((-1.0)*r11*x932*x933))+(((-1.0)*r00*x940))+((r11*x932*x937))+(((-16.0)*x948)))))))+(((0.5)*(IKabs((x962+x955+(((-1.0)*x965))+(((-1.0)*x964)))))))+(((0.5)*(IKabs(((((-1.0)*r02*x933*x936))+((r02*x936*x937))+(((-1.0)*x938*x944))+x962+(((-1.0)*x964)))))))+(((0.5)*(IKabs((x963+x959+(((-1.0)*x967))+(((-1.0)*x966)))))))+(IKabs(((((-1.0)*r11*x933*x935))+(((-1.0)*r00*x941))+((r11*x935*x937))+(((-8.0)*x948)))))+(((0.5)*(IKabs(((((-1.0)*x938*x939))+((r12*x933*x936))+x963+(((-1.0)*x966))+(((-1.0)*r12*x936*x937)))))))+(((0.5)*(IKabs((x966+x959+(((-1.0)*x967))+(((-1.0)*x963)))))))+(IKabs((((r01*x933*x935))+(((-8.0)*x949))+(((-1.0)*r10*x941))+(((-1.0)*x935*x947)))))+(((0.5)*(IKabs((x964+x955+(((-1.0)*x962))+(((-1.0)*x965))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x968=(r10*sj3);
IkReal x969=(r01*sj4);
IkReal x970=(cj1*cj2);
IkReal x971=(cj3*cj4);
IkReal x972=(sj1*sj2);
IkReal x973=(cj4*r02);
IkReal x974=((4.0)*r11*sj3);
IkReal x975=(cj3*r12*sj4);
IkReal x976=((4.0)*r00*sj4);
IkReal x977=((4.0)*r10*x971);
IkReal x978=((12.0)*x975);
IkReal x979=((4.0)*x975);
IkReal x980=(x970*x976);
IkReal x981=(x972*x976);
IkReal x982=((12.0)*x972*x973);
IkReal x983=((12.0)*x970*x973);
IkReal x984=((4.0)*x972*x973);
IkReal x985=((4.0)*x970*x973);
IkReal x986=(x980+x974);
IkReal x987=(x981+x977);
IkReal x988=(x985+x979);
IkReal x989=(x983+x978);
IkReal x990=((((-8.0)*x969*x972))+(((-8.0)*x968))+(((8.0)*x969*x970))+(((-8.0)*r11*x971)));
op[0]=((((-1.0)*x988))+(((-1.0)*x987))+x984+x986);
op[1]=x990;
op[2]=((((-1.0)*x989))+(((-1.0)*x987))+x986+x982);
op[3]=((((16.0)*x969*x970))+(((-16.0)*r11*x971))+(((-16.0)*x969*x972))+(((-16.0)*x968)));
op[4]=((((-1.0)*x986))+(((-1.0)*x989))+x987+x982);
op[5]=x990;
op[6]=((((-1.0)*x986))+(((-1.0)*x988))+x984+x987);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x991=(cj1*cj2);
IkReal x992=((4.0)*cj4);
IkReal x993=(sj1*sj2);
IkReal x994=((4.0)*sj4);
IkReal x995=(r00*sj3);
IkReal x996=(cj3*r02);
IkReal x997=((4.0)*r01*sj3);
IkReal x998=((16.0)*r11*sj4);
IkReal x999=(cj3*cj4*r01);
IkReal x1000=((12.0)*cj4*r12);
IkReal x1001=((8.0)*r11*sj4);
IkReal x1002=(cj3*r00*x992);
IkReal x1003=((12.0)*sj4*x996);
IkReal x1004=(x994*x996);
IkReal x1005=(r10*x991*x994);
IkReal x1006=(r10*x993*x994);
IkReal x1007=(x1000*x991);
IkReal x1008=(x1000*x993);
IkReal x1009=(r12*x991*x992);
IkReal x1010=(r12*x992*x993);
IkReal x1011=(x1006+x997);
IkReal x1012=(x1005+x1002);
IkReal x1013=(x1010+x1004);
IkReal x1014=(x1008+x1003);
IkReal x1015=((((-1.0)*x1001*x991))+((x1001*x993))+(((-8.0)*x999))+(((-8.0)*x995)));
j5evalpoly[0]=(x1012+x1009+((x1015*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x1011))+(((-1.0)*x1013))+(((htj5*htj5*htj5*htj5)*((x1011+x1007+(((-1.0)*x1014))+(((-1.0)*x1012))))))+(((htj5*htj5*htj5)*((((x993*x998))+(((-1.0)*x991*x998))+(((-16.0)*x999))+(((-16.0)*x995))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1011+x1009+(((-1.0)*x1013))+(((-1.0)*x1012))))))+(((htj5*htj5)*((x1012+x1007+(((-1.0)*x1011))+(((-1.0)*x1014))))))+((htj5*x1015)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1016=(cj5*sj4);
IkReal x1017=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1016))+((r01*x1017)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1016))+((cj4*r12))+(((-1.0)*r11*x1017)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1016))+((r01*x1017))))+IKsqr((((r10*x1016))+((cj4*r12))+(((-1.0)*r11*x1017))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1016))+((r01*x1017))), (((r10*x1016))+((cj4*r12))+(((-1.0)*r11*x1017))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1018=IKcos(j0);
IkReal x1019=IKsin(j0);
IkReal x1020=(r02*sj4);
IkReal x1021=((1.0)*sj3);
IkReal x1022=(r12*sj4);
IkReal x1023=(cj3*cj4);
IkReal x1024=((1.0)*cj5);
IkReal x1025=(r11*sj5);
IkReal x1026=((1.0)*cj1);
IkReal x1027=((0.39225)*sj1);
IkReal x1028=(cj5*r01);
IkReal x1029=(r01*sj5);
IkReal x1030=(r00*sj5);
IkReal x1031=((1.0)*sj1);
IkReal x1032=((0.39225)*cj2);
IkReal x1033=(cj5*r11);
IkReal x1034=(r10*sj5);
IkReal x1035=((1.0)*cj4);
IkReal x1036=(sj2*x1018);
IkReal x1037=(sj2*x1019);
IkReal x1038=(cj4*cj5*sj3);
IkReal x1039=(cj1*x1018);
IkReal x1040=(cj2*x1018);
IkReal x1041=(cj1*x1019);
IkReal x1042=(cj2*x1019);
evalcond[0]=(x1018+((sj4*x1025))+(((-1.0)*r12*x1035))+(((-1.0)*r10*sj4*x1024)));
evalcond[1]=((((-1.0)*r00*sj4*x1024))+((sj4*x1029))+(((-1.0)*r02*x1035))+(((-1.0)*x1019)));
evalcond[2]=((((-1.0)*x1027*x1036))+(((0.425)*x1039))+(((-0.10915)*x1019))+(((-1.0)*px))+(((-0.09465)*x1030))+((x1032*x1039))+(((-0.09465)*x1028)));
evalcond[3]=((((-1.0)*x1027*x1037))+(((0.10915)*x1018))+(((-1.0)*py))+((x1032*x1041))+(((-0.09465)*x1034))+(((-0.09465)*x1033))+(((0.425)*x1041)));
evalcond[4]=(((sj1*x1036))+((x1023*x1029))+((sj3*x1030))+(((-1.0)*x1026*x1040))+(((-1.0)*r00*x1023*x1024))+((sj3*x1028))+((cj3*x1020)));
evalcond[5]=((((-1.0)*r10*x1023*x1024))+((sj1*x1037))+((x1023*x1025))+((sj3*x1033))+((sj3*x1034))+(((-1.0)*x1026*x1042))+((cj3*x1022)));
evalcond[6]=(((r00*x1038))+(((-1.0)*x1031*x1040))+((cj3*x1030))+(((-1.0)*x1026*x1036))+(((-1.0)*x1020*x1021))+(((-1.0)*cj4*x1021*x1029))+((cj3*x1028)));
evalcond[7]=(((r10*x1038))+(((-1.0)*x1031*x1042))+((cj3*x1034))+((cj3*x1033))+(((-1.0)*x1026*x1037))+(((-1.0)*x1021*x1022))+(((-1.0)*cj4*x1021*x1025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1043=IKPowWithIntegerCheck(cj3,-1);
if(!x1043.valid){
continue;
}
CheckValue<IkReal> x1044=IKPowWithIntegerCheck(r22,-1);
if(!x1044.valid){
continue;
}
sj4array[0]=((-1.0)*(x1043.value)*(x1044.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1045=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1045);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1045);
IkReal x1046=((16.0)*sj4);
IkReal x1047=(cj1*cj2);
IkReal x1048=((4.0)*sj3);
IkReal x1049=((8.0)*sj4);
IkReal x1050=((4.0)*cj4);
IkReal x1051=(sj1*sj2);
IkReal x1052=((4.0)*sj4);
IkReal x1053=(cj3*r02);
IkReal x1054=((16.0)*sj3);
IkReal x1055=((8.0)*sj3);
IkReal x1056=((12.0)*cj4);
IkReal x1057=((12.0)*sj4);
IkReal x1058=(cj3*r12);
IkReal x1059=(r11*x1048);
IkReal x1060=(r01*x1048);
IkReal x1061=(r01*x1051);
IkReal x1062=(cj3*cj4*r01);
IkReal x1063=(cj3*cj4*r11);
IkReal x1064=(cj3*r10*x1050);
IkReal x1065=(x1057*x1058);
IkReal x1066=(cj3*r00*x1050);
IkReal x1067=(x1053*x1057);
IkReal x1068=(r00*x1051*x1052);
IkReal x1069=(r02*x1051*x1056);
IkReal x1070=(r00*x1047*x1052);
IkReal x1071=(r02*x1047*x1056);
IkReal x1072=(r10*x1051*x1052);
IkReal x1073=(r12*x1047*x1056);
IkReal x1074=(r12*x1051*x1056);
IkReal x1075=(r10*x1047*x1052);
IkReal x1076=(x1059+x1070);
IkReal x1077=(x1072+x1060);
IkReal x1078=(x1068+x1064);
IkReal x1079=(x1071+x1065);
IkReal x1080=(x1075+x1066);
IkReal x1081=(x1074+x1067);
j5eval[0]=((((0.5)*(IKabs((x1076+x1069+(((-1.0)*x1079))+(((-1.0)*x1078)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x1054))+(((-16.0)*x1063))+((r01*x1046*x1047))+(((-1.0)*x1046*x1061)))))))+(((0.5)*(IKabs(((((-1.0)*x1052*x1053))+x1077+((r12*x1047*x1050))+(((-1.0)*r12*x1050*x1051))+(((-1.0)*x1080)))))))+(((0.5)*(IKabs((x1078+x1069+(((-1.0)*x1076))+(((-1.0)*x1079)))))))+(((0.5)*(IKabs((x1073+x1080+(((-1.0)*x1081))+(((-1.0)*x1077)))))))+(((0.5)*(IKabs(((((-1.0)*x1052*x1058))+x1076+((r02*x1050*x1051))+(((-1.0)*r02*x1047*x1050))+(((-1.0)*x1078)))))))+(IKabs((((r01*x1047*x1049))+(((-1.0)*r10*x1055))+(((-1.0)*x1049*x1061))+(((-8.0)*x1063)))))+(((0.5)*(IKabs(((((-1.0)*r00*x1054))+(((-1.0)*r11*x1046*x1047))+((r11*x1046*x1051))+(((-16.0)*x1062)))))))+(((0.5)*(IKabs((x1077+x1073+(((-1.0)*x1080))+(((-1.0)*x1081)))))))+(IKabs(((((-1.0)*r00*x1055))+(((-1.0)*r11*x1047*x1049))+((r11*x1049*x1051))+(((-8.0)*x1062))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1082=(r10*sj3);
IkReal x1083=(r01*sj4);
IkReal x1084=(cj1*cj2);
IkReal x1085=(cj3*cj4);
IkReal x1086=(sj1*sj2);
IkReal x1087=(cj4*r02);
IkReal x1088=((4.0)*r11*sj3);
IkReal x1089=(cj3*r12*sj4);
IkReal x1090=((4.0)*r00*sj4);
IkReal x1091=((4.0)*r10*x1085);
IkReal x1092=((12.0)*x1089);
IkReal x1093=((4.0)*x1089);
IkReal x1094=(x1084*x1090);
IkReal x1095=(x1086*x1090);
IkReal x1096=((12.0)*x1086*x1087);
IkReal x1097=((12.0)*x1084*x1087);
IkReal x1098=((4.0)*x1086*x1087);
IkReal x1099=((4.0)*x1084*x1087);
IkReal x1100=(x1094+x1088);
IkReal x1101=(x1095+x1091);
IkReal x1102=(x1093+x1099);
IkReal x1103=(x1097+x1092);
IkReal x1104=((((8.0)*x1083*x1084))+(((-8.0)*x1083*x1086))+(((-8.0)*r11*x1085))+(((-8.0)*x1082)));
op[0]=(x1100+x1098+(((-1.0)*x1102))+(((-1.0)*x1101)));
op[1]=x1104;
op[2]=(x1100+x1096+(((-1.0)*x1103))+(((-1.0)*x1101)));
op[3]=((((-16.0)*x1083*x1086))+(((16.0)*x1083*x1084))+(((-16.0)*x1082))+(((-16.0)*r11*x1085)));
op[4]=(x1101+x1096+(((-1.0)*x1100))+(((-1.0)*x1103)));
op[5]=x1104;
op[6]=(x1101+x1098+(((-1.0)*x1100))+(((-1.0)*x1102)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1105=(cj1*cj2);
IkReal x1106=((4.0)*cj4);
IkReal x1107=(sj1*sj2);
IkReal x1108=((4.0)*sj4);
IkReal x1109=(r00*sj3);
IkReal x1110=(cj3*r02);
IkReal x1111=((4.0)*r01*sj3);
IkReal x1112=((16.0)*r11*sj4);
IkReal x1113=(cj3*cj4*r01);
IkReal x1114=((12.0)*cj4*r12);
IkReal x1115=((8.0)*r11*sj4);
IkReal x1116=(cj3*r00*x1106);
IkReal x1117=((12.0)*sj4*x1110);
IkReal x1118=(x1108*x1110);
IkReal x1119=(r10*x1105*x1108);
IkReal x1120=(r10*x1107*x1108);
IkReal x1121=(x1105*x1114);
IkReal x1122=(x1107*x1114);
IkReal x1123=(r12*x1105*x1106);
IkReal x1124=(r12*x1106*x1107);
IkReal x1125=(x1111+x1120);
IkReal x1126=(x1116+x1119);
IkReal x1127=(x1118+x1124);
IkReal x1128=(x1117+x1122);
IkReal x1129=((((-8.0)*x1109))+(((-8.0)*x1113))+((x1107*x1115))+(((-1.0)*x1105*x1115)));
j5evalpoly[0]=(((htj5*x1129))+x1123+x1126+(((htj5*htj5*htj5*htj5)*((x1121+x1125+(((-1.0)*x1126))+(((-1.0)*x1128))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1123+x1125+(((-1.0)*x1127))+(((-1.0)*x1126))))))+((x1129*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5)*((x1121+x1126+(((-1.0)*x1125))+(((-1.0)*x1128))))))+(((-1.0)*x1127))+(((-1.0)*x1125))+(((htj5*htj5*htj5)*(((((-16.0)*x1113))+(((-16.0)*x1109))+((x1107*x1112))+(((-1.0)*x1105*x1112)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1130=(cj5*sj4);
IkReal x1131=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1131))+(((-1.0)*r00*x1130)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1131))+((r10*x1130))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1131))+(((-1.0)*r00*x1130))))+IKsqr(((((-1.0)*r11*x1131))+((r10*x1130))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1131))+(((-1.0)*r00*x1130))), ((((-1.0)*r11*x1131))+((r10*x1130))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1132=IKcos(j0);
IkReal x1133=IKsin(j0);
IkReal x1134=(r02*sj4);
IkReal x1135=((1.0)*sj3);
IkReal x1136=(r12*sj4);
IkReal x1137=(cj3*cj4);
IkReal x1138=((1.0)*cj5);
IkReal x1139=(r11*sj5);
IkReal x1140=((1.0)*cj1);
IkReal x1141=((0.39225)*sj1);
IkReal x1142=(cj5*r01);
IkReal x1143=(r01*sj5);
IkReal x1144=(r00*sj5);
IkReal x1145=((1.0)*sj1);
IkReal x1146=((0.39225)*cj2);
IkReal x1147=(cj5*r11);
IkReal x1148=(r10*sj5);
IkReal x1149=((1.0)*cj4);
IkReal x1150=(sj2*x1132);
IkReal x1151=(sj2*x1133);
IkReal x1152=(cj4*cj5*sj3);
IkReal x1153=(cj1*x1132);
IkReal x1154=(cj2*x1132);
IkReal x1155=(cj1*x1133);
IkReal x1156=(cj2*x1133);
evalcond[0]=(x1132+((sj4*x1139))+(((-1.0)*r12*x1149))+(((-1.0)*r10*sj4*x1138)));
evalcond[1]=(((sj4*x1143))+(((-1.0)*r02*x1149))+(((-1.0)*x1133))+(((-1.0)*r00*sj4*x1138)));
evalcond[2]=((((-1.0)*x1141*x1150))+((x1146*x1153))+(((0.425)*x1153))+(((-1.0)*px))+(((-0.10915)*x1133))+(((-0.09465)*x1144))+(((-0.09465)*x1142)));
evalcond[3]=((((-1.0)*x1141*x1151))+((x1146*x1155))+(((0.425)*x1155))+(((0.10915)*x1132))+(((-1.0)*py))+(((-0.09465)*x1148))+(((-0.09465)*x1147)));
evalcond[4]=((((-1.0)*r00*x1137*x1138))+((x1137*x1143))+((cj3*x1134))+(((-1.0)*x1140*x1154))+((sj3*x1142))+((sj3*x1144))+((sj1*x1150)));
evalcond[5]=(((cj3*x1136))+(((-1.0)*x1140*x1156))+(((-1.0)*r10*x1137*x1138))+((x1137*x1139))+((sj3*x1148))+((sj3*x1147))+((sj1*x1151)));
evalcond[6]=(((r00*x1152))+(((-1.0)*x1140*x1150))+((cj3*x1144))+((cj3*x1142))+(((-1.0)*x1134*x1135))+(((-1.0)*x1145*x1154))+(((-1.0)*cj4*x1135*x1143)));
evalcond[7]=((((-1.0)*cj4*x1135*x1139))+(((-1.0)*x1140*x1151))+((cj3*x1147))+((cj3*x1148))+(((-1.0)*x1135*x1136))+(((-1.0)*x1145*x1156))+((r10*x1152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1157=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1157);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1157);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1158=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1158);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1158);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1159=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1159);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1159);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1160=IKPowWithIntegerCheck(r22,-1);
if(!x1160.valid){
continue;
}
sj4array[0]=((-1.0)*(x1160.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1161=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1161);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1161);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1163 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1163.valid){
continue;
}
IkReal x1162=x1163.value;
j5array[0]=((-1.0)*x1162);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1162)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1164=(cj5*sj4);
IkReal x1165=(sj4*sj5);
if( IKabs((((r01*x1165))+(((-1.0)*r00*x1164)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1164))+(((-1.0)*r11*x1165)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1165))+(((-1.0)*r00*x1164))))+IKsqr((((r10*x1164))+(((-1.0)*r11*x1165))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1165))+(((-1.0)*r00*x1164))), (((r10*x1164))+(((-1.0)*r11*x1165))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1166=IKcos(j0);
IkReal x1167=IKsin(j0);
IkReal x1168=(cj5*r01);
IkReal x1169=(sj4*sj5);
IkReal x1170=(cj5*r11);
IkReal x1171=((0.425)*cj1);
IkReal x1172=(r00*sj5);
IkReal x1173=(r10*sj5);
IkReal x1174=((1.0)*cj1*sj2);
IkReal x1175=((1.0)*cj2*sj1);
IkReal x1176=((1.0)*cj5*sj4);
evalcond[0]=(x1166+((r11*x1169))+(((-1.0)*r10*x1176)));
evalcond[1]=(((r01*x1169))+(((-1.0)*r00*x1176))+(((-1.0)*x1167)));
evalcond[2]=(x1168+x1172+(((-1.0)*x1166*x1174))+(((-1.0)*x1166*x1175)));
evalcond[3]=(x1173+x1170+(((-1.0)*x1167*x1175))+(((-1.0)*x1167*x1174)));
evalcond[4]=((((-0.10915)*x1167))+((x1166*x1171))+(((-0.09465)*x1168))+(((-0.09465)*x1172))+(((-1.0)*px)));
evalcond[5]=((((-0.09465)*x1173))+(((-0.09465)*x1170))+(((0.10915)*x1166))+(((-1.0)*py))+((x1167*x1171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1177=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1177);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1177);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1178=IKPowWithIntegerCheck(r22,-1);
if(!x1178.valid){
continue;
}
sj4array[0]=((x1178.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1179=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1179);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1179);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1181 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1181.valid){
continue;
}
IkReal x1180=x1181.value;
j5array[0]=((-1.0)*x1180);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1180)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1182=(cj5*sj4);
IkReal x1183=(sj4*sj5);
if( IKabs((((r01*x1183))+(((-1.0)*r00*x1182)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1182))+(((-1.0)*r11*x1183)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1183))+(((-1.0)*r00*x1182))))+IKsqr((((r10*x1182))+(((-1.0)*r11*x1183))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1183))+(((-1.0)*r00*x1182))), (((r10*x1182))+(((-1.0)*r11*x1183))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1184=IKcos(j0);
IkReal x1185=IKsin(j0);
IkReal x1186=(sj4*sj5);
IkReal x1187=(cj5*r11);
IkReal x1188=((1.0)*sj5);
IkReal x1189=((0.425)*cj1);
IkReal x1190=((0.09465)*sj5);
IkReal x1191=((1.0)*cj5);
IkReal x1192=((1.0)*cj1*sj2);
IkReal x1193=((1.0)*cj2*sj1);
evalcond[0]=(x1184+((r11*x1186))+(((-1.0)*r10*sj4*x1191)));
evalcond[1]=((((-1.0)*r00*sj4*x1191))+((r01*x1186))+(((-1.0)*x1185)));
evalcond[2]=((((-1.0)*r00*x1190))+((x1184*x1189))+(((-0.09465)*cj5*r01))+(((-0.10915)*x1185))+(((-1.0)*px)));
evalcond[3]=((((-0.09465)*x1187))+((x1185*x1189))+(((0.10915)*x1184))+(((-1.0)*r10*x1190))+(((-1.0)*py)));
evalcond[4]=((((-1.0)*x1184*x1193))+(((-1.0)*x1184*x1192))+(((-1.0)*r00*x1188))+(((-1.0)*r01*x1191)));
evalcond[5]=((((-1.0)*r10*x1188))+(((-1.0)*x1185*x1192))+(((-1.0)*x1185*x1193))+(((-1.0)*x1187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1194=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1194);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1194);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1195=IKPowWithIntegerCheck(r22,-1);
if(!x1195.valid){
continue;
}
sj4array[0]=((x1195.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1196=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1196);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1196);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1198 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1198.valid){
continue;
}
IkReal x1197=x1198.value;
j5array[0]=((-1.0)*x1197);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1197)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1199=(cj5*sj4);
IkReal x1200=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1199))+((r01*x1200)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1199))+(((-1.0)*r11*x1200)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1199))+((r01*x1200))))+IKsqr((((r10*x1199))+(((-1.0)*r11*x1200))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1199))+((r01*x1200))), (((r10*x1199))+(((-1.0)*r11*x1200))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1201=IKcos(j0);
IkReal x1202=IKsin(j0);
IkReal x1203=(cj5*r01);
IkReal x1204=(sj4*sj5);
IkReal x1205=(r00*sj5);
IkReal x1206=(sj1*sj2);
IkReal x1207=(cj5*r11);
IkReal x1208=((0.39225)*cj2);
IkReal x1209=(r10*sj5);
IkReal x1210=((0.39225)*x1206);
IkReal x1211=(cj1*x1201);
IkReal x1212=((1.0)*x1202);
IkReal x1213=((1.0)*cj5*sj4);
IkReal x1214=(cj1*x1202);
evalcond[0]=(x1201+((r11*x1204))+(((-1.0)*r10*x1213)));
evalcond[1]=((((-1.0)*r00*x1213))+((r01*x1204))+(((-1.0)*x1212)));
evalcond[2]=(x1205+x1203+(((-1.0)*cj2*x1211))+((x1201*x1206)));
evalcond[3]=(x1209+x1207+((x1202*x1206))+(((-1.0)*cj1*cj2*x1212)));
evalcond[4]=((((0.425)*x1211))+(((-1.0)*x1201*x1210))+(((-0.10915)*x1202))+(((-1.0)*px))+((x1208*x1211))+(((-0.09465)*x1203))+(((-0.09465)*x1205)));
evalcond[5]=((((0.425)*x1214))+(((0.10915)*x1201))+(((-1.0)*x1202*x1210))+(((-1.0)*py))+((x1208*x1214))+(((-0.09465)*x1209))+(((-0.09465)*x1207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1215=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1215);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1215);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1216=IKPowWithIntegerCheck(r22,-1);
if(!x1216.valid){
continue;
}
sj4array[0]=((-1.0)*(x1216.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1217=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1217);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1217);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1219 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1219.valid){
continue;
}
IkReal x1218=x1219.value;
j5array[0]=((-1.0)*x1218);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1218)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1220=(cj5*sj4);
IkReal x1221=(sj4*sj5);
if( IKabs((((r01*x1221))+(((-1.0)*r00*x1220)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1221))+((r10*x1220)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1221))+(((-1.0)*r00*x1220))))+IKsqr(((((-1.0)*r11*x1221))+((r10*x1220))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1221))+(((-1.0)*r00*x1220))), ((((-1.0)*r11*x1221))+((r10*x1220))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1222=IKcos(j0);
IkReal x1223=IKsin(j0);
IkReal x1224=(sj4*sj5);
IkReal x1225=(cj5*r11);
IkReal x1226=(cj5*r01);
IkReal x1227=((1.0)*sj5);
IkReal x1228=((0.09465)*sj5);
IkReal x1229=(sj1*sj2);
IkReal x1230=((0.39225)*cj2);
IkReal x1231=((0.39225)*x1229);
IkReal x1232=((1.0)*x1223);
IkReal x1233=(cj1*x1222);
IkReal x1234=((1.0)*cj5*sj4);
IkReal x1235=(cj1*x1223);
evalcond[0]=(x1222+(((-1.0)*r10*x1234))+((r11*x1224)));
evalcond[1]=((((-1.0)*r00*x1234))+((r01*x1224))+(((-1.0)*x1232)));
evalcond[2]=((((-1.0)*r00*x1227))+(((-1.0)*x1226))+(((-1.0)*cj2*x1233))+((x1222*x1229)));
evalcond[3]=((((-1.0)*cj1*cj2*x1232))+(((-1.0)*x1225))+((x1223*x1229))+(((-1.0)*r10*x1227)));
evalcond[4]=((((-1.0)*r00*x1228))+(((-1.0)*x1222*x1231))+(((-1.0)*px))+(((-0.09465)*x1226))+(((0.425)*x1233))+((x1230*x1233))+(((-0.10915)*x1223)));
evalcond[5]=((((-1.0)*x1223*x1231))+(((-1.0)*py))+(((-0.09465)*x1225))+(((-1.0)*r10*x1228))+(((0.425)*x1235))+(((0.10915)*x1222))+((x1230*x1235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1236=IKPowWithIntegerCheck(r22,-1);
if(!x1236.valid){
continue;
}
CheckValue<IkReal> x1237=IKPowWithIntegerCheck(sj3,-1);
if(!x1237.valid){
continue;
}
sj4array[0]=((x1236.value)*(x1237.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1238=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1238);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1238);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1239=((4.0)*r01);
IkReal x1240=((16.0)*r00);
IkReal x1241=(cj3*sj2);
IkReal x1242=((8.0)*r00);
IkReal x1243=(cj2*cj3);
IkReal x1244=(cj4*r01);
IkReal x1245=((16.0)*cj1);
IkReal x1246=((8.0)*sj1);
IkReal x1247=((16.0)*sj1);
IkReal x1248=((8.0)*cj1);
IkReal x1249=(sj2*sj3);
IkReal x1250=(cj2*sj3);
IkReal x1251=(sj1*x1250);
IkReal x1252=((4.0)*cj4*r00);
IkReal x1253=(((sj1*x1239*x1241))+((x1239*x1251))+((cj1*x1239*x1249))+((sj1*x1249*x1252)));
IkReal x1254=(((cj1*x1241*x1252))+((cj1*x1250*x1252))+((sj1*x1243*x1252))+((cj1*x1239*x1243)));
IkReal x1255=((((-1.0)*x1253))+x1254);
IkReal x1256=(((sj1*x1241*x1242))+((x1244*x1248*x1250))+((x1243*x1244*x1246))+(((-1.0)*cj1*x1242*x1243))+((x1241*x1244*x1248))+(((-1.0)*x1244*x1246*x1249))+((cj1*x1242*x1249))+((x1242*x1251)));
IkReal x1257=((((-1.0)*x1254))+x1253);
op[0]=x1255;
op[1]=x1256;
op[2]=x1255;
op[3]=(((x1244*x1245*x1250))+((cj1*x1240*x1249))+((x1243*x1244*x1247))+((x1241*x1244*x1245))+(((-1.0)*x1244*x1247*x1249))+((sj1*x1240*x1241))+(((-1.0)*cj1*x1240*x1243))+((x1240*x1251)));
op[4]=x1257;
op[5]=x1256;
op[6]=x1257;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1258=(cj5*sj4);
IkReal x1259=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1258))+((r01*x1259)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1258))+(((-1.0)*r11*x1259)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1258))+((r01*x1259))))+IKsqr((((r10*x1258))+(((-1.0)*r11*x1259))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1258))+((r01*x1259))), (((r10*x1258))+(((-1.0)*r11*x1259))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1260=IKcos(j0);
IkReal x1261=IKsin(j0);
IkReal x1262=((0.39225)*sj1);
IkReal x1263=((1.0)*cj3);
IkReal x1264=((1.0)*cj1);
IkReal x1265=(r11*sj5);
IkReal x1266=(cj5*r01);
IkReal x1267=(cj5*r11);
IkReal x1268=(r01*sj5);
IkReal x1269=(cj3*cj4);
IkReal x1270=(r00*sj5);
IkReal x1271=((0.39225)*cj2);
IkReal x1272=((1.0)*sj1);
IkReal x1273=(r10*sj5);
IkReal x1274=(sj2*x1260);
IkReal x1275=(cj4*cj5*r00);
IkReal x1276=(cj1*x1261);
IkReal x1277=(sj2*x1261);
IkReal x1278=(cj4*cj5*r10);
IkReal x1279=((1.0)*cj4*sj3);
IkReal x1280=(cj1*x1260);
IkReal x1281=(cj2*x1260);
IkReal x1282=((1.0)*cj5*sj4);
evalcond[0]=(x1260+((sj4*x1265))+(((-1.0)*r10*x1282)));
evalcond[1]=(((sj4*x1268))+(((-1.0)*r00*x1282))+(((-1.0)*x1261)));
evalcond[2]=(((sj3*x1270))+((sj1*x1274))+(((-1.0)*x1264*x1281))+(((-1.0)*x1263*x1275))+((x1268*x1269))+((sj3*x1266)));
evalcond[3]=(((sj3*x1273))+((sj1*x1277))+(((-1.0)*x1263*x1278))+(((-1.0)*cj2*x1261*x1264))+((x1265*x1269))+((sj3*x1267)));
evalcond[4]=(((sj3*x1275))+(((-1.0)*x1268*x1279))+((cj3*x1266))+((cj3*x1270))+(((-1.0)*x1272*x1281))+(((-1.0)*x1264*x1274)));
evalcond[5]=(((sj3*x1278))+((cj3*x1267))+((cj3*x1273))+(((-1.0)*x1265*x1279))+(((-1.0)*cj2*x1261*x1272))+(((-1.0)*x1264*x1277)));
evalcond[6]=((((0.425)*x1280))+(((-0.09465)*x1270))+(((-0.10915)*x1261))+(((-0.09465)*x1266))+(((-1.0)*px))+(((-1.0)*x1262*x1274))+((x1271*x1280)));
evalcond[7]=((((-0.09465)*x1273))+(((-0.09465)*x1267))+(((0.10915)*x1260))+(((-1.0)*py))+(((0.425)*x1276))+((x1271*x1276))+(((-1.0)*x1262*x1277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1283=IKPowWithIntegerCheck(cj3,-1);
if(!x1283.valid){
continue;
}
CheckValue<IkReal> x1284=IKPowWithIntegerCheck(r22,-1);
if(!x1284.valid){
continue;
}
sj4array[0]=((-1.0)*(x1283.value)*(x1284.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1285=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1285);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1285);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1286=((4.0)*r01);
IkReal x1287=((16.0)*r00);
IkReal x1288=(cj3*sj2);
IkReal x1289=((8.0)*r00);
IkReal x1290=(cj2*cj3);
IkReal x1291=(cj4*r01);
IkReal x1292=((16.0)*cj1);
IkReal x1293=((8.0)*sj1);
IkReal x1294=((16.0)*sj1);
IkReal x1295=((8.0)*cj1);
IkReal x1296=(sj2*sj3);
IkReal x1297=(cj2*sj3);
IkReal x1298=(sj1*x1297);
IkReal x1299=((4.0)*cj4*r00);
IkReal x1300=(((sj1*x1286*x1288))+((cj1*x1286*x1296))+((x1286*x1298))+((sj1*x1296*x1299)));
IkReal x1301=(((cj1*x1286*x1290))+((cj1*x1297*x1299))+((cj1*x1288*x1299))+((sj1*x1290*x1299)));
IkReal x1302=(x1301+(((-1.0)*x1300)));
IkReal x1303=(((x1290*x1291*x1293))+((cj1*x1289*x1296))+((x1291*x1295*x1297))+(((-1.0)*x1291*x1293*x1296))+((sj1*x1288*x1289))+((x1288*x1291*x1295))+((x1289*x1298))+(((-1.0)*cj1*x1289*x1290)));
IkReal x1304=(x1300+(((-1.0)*x1301)));
op[0]=x1302;
op[1]=x1303;
op[2]=x1302;
op[3]=(((sj1*x1287*x1288))+((x1290*x1291*x1294))+((x1287*x1298))+(((-1.0)*x1291*x1294*x1296))+((x1291*x1292*x1297))+((cj1*x1287*x1296))+(((-1.0)*cj1*x1287*x1290))+((x1288*x1291*x1292)));
op[4]=x1304;
op[5]=x1303;
op[6]=x1304;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1305=(cj5*sj4);
IkReal x1306=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1305))+((r01*x1306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1305))+(((-1.0)*r11*x1306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1305))+((r01*x1306))))+IKsqr((((r10*x1305))+(((-1.0)*r11*x1306))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1305))+((r01*x1306))), (((r10*x1305))+(((-1.0)*r11*x1306))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1307=IKcos(j0);
IkReal x1308=IKsin(j0);
IkReal x1309=((0.39225)*sj1);
IkReal x1310=((1.0)*cj3);
IkReal x1311=((1.0)*cj1);
IkReal x1312=(r11*sj5);
IkReal x1313=(cj5*r01);
IkReal x1314=(cj5*r11);
IkReal x1315=(r01*sj5);
IkReal x1316=(cj3*cj4);
IkReal x1317=(r00*sj5);
IkReal x1318=((0.39225)*cj2);
IkReal x1319=((1.0)*sj1);
IkReal x1320=(r10*sj5);
IkReal x1321=(sj2*x1307);
IkReal x1322=(cj4*cj5*r00);
IkReal x1323=(cj1*x1308);
IkReal x1324=(sj2*x1308);
IkReal x1325=(cj4*cj5*r10);
IkReal x1326=((1.0)*cj4*sj3);
IkReal x1327=(cj1*x1307);
IkReal x1328=(cj2*x1307);
IkReal x1329=((1.0)*cj5*sj4);
evalcond[0]=(x1307+((sj4*x1312))+(((-1.0)*r10*x1329)));
evalcond[1]=((((-1.0)*x1308))+(((-1.0)*r00*x1329))+((sj4*x1315)));
evalcond[2]=(((sj3*x1317))+((sj3*x1313))+(((-1.0)*x1310*x1322))+((x1315*x1316))+(((-1.0)*x1311*x1328))+((sj1*x1321)));
evalcond[3]=(((sj3*x1314))+((sj3*x1320))+(((-1.0)*cj2*x1308*x1311))+(((-1.0)*x1310*x1325))+((x1312*x1316))+((sj1*x1324)));
evalcond[4]=((((-1.0)*x1319*x1328))+(((-1.0)*x1315*x1326))+((sj3*x1322))+((cj3*x1317))+((cj3*x1313))+(((-1.0)*x1311*x1321)));
evalcond[5]=((((-1.0)*x1312*x1326))+((sj3*x1325))+(((-1.0)*cj2*x1308*x1319))+((cj3*x1314))+((cj3*x1320))+(((-1.0)*x1311*x1324)));
evalcond[6]=((((-1.0)*x1309*x1321))+(((-0.10915)*x1308))+(((-1.0)*px))+(((-0.09465)*x1317))+(((-0.09465)*x1313))+(((0.425)*x1327))+((x1318*x1327)));
evalcond[7]=((((-1.0)*x1309*x1324))+(((0.10915)*x1307))+(((-1.0)*py))+(((-0.09465)*x1314))+(((-0.09465)*x1320))+(((0.425)*x1323))+((x1318*x1323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1332 = IKatan2WithCheck(IkReal(((-0.09465)*r21)),IkReal(((-0.09465)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1332.valid){
continue;
}
IkReal x1330=((1.0)*(x1332.value));
if((((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1333=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20)))))),-1);
if(!x1333.valid){
continue;
}
if( (((-1.0)*(x1333.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1333.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1331=((-1.0)*(IKasin(((-1.0)*(x1333.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2))))))));
j5array[0]=((((-1.0)*x1331))+(((-1.0)*x1330)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((1.0)*x1331))+(((-1.0)*x1330)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1334=cj5*cj5;
IkReal x1335=r21*r21;
IkReal x1336=(sj3*x1334);
IkReal x1337=(((sj3*(r22*r22)))+((x1336*(r20*r20)))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((sj3*x1335))+(((-1.0)*x1335*x1336)));
j4eval[0]=x1337;
j4eval[1]=IKsign(x1337);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1338=cj5*cj5;
IkReal x1339=r21*r21;
IkReal x1340=((1.0)*cj3);
IkReal x1341=(cj3*x1338);
IkReal x1342=(((x1339*x1341))+(((-1.0)*x1340*(r22*r22)))+(((-1.0)*x1339*x1340))+(((-1.0)*x1338*x1340*(r20*r20)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1342;
j4eval[1]=IKsign(x1342);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1343=cj1*cj1;
IkReal x1344=cj2*cj2;
IkReal x1345=(cj1*sj1*sj2);
IkReal x1346=(cj2*x1343);
IkReal x1347=(x1343*x1344);
j0eval[0]=((6.19369221392727)+x1343+(((-11.4971359451148)*cj2*x1345))+(((-5.74856797255738)*x1344))+(((12.4570625281677)*x1346))+(((11.4971359451148)*x1347))+(((-12.4570625281677)*x1345)));
j0eval[1]=IKsign(((66309514.0)+(((-61544025.0)*x1344))+(((133365000.0)*x1346))+(((123088050.0)*x1347))+(((-123088050.0)*cj2*x1345))+(((10705975.0)*x1343))+(((-133365000.0)*x1345))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1348=((1.0)*cj5);
IkReal x1349=((1.0)*sj5);
IkReal x1350=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1350;
j0eval[1]=((IKabs(((((-1.0)*r11*x1348))+(((-1.0)*r10*x1349)))))+(IKabs(((((-1.0)*r00*x1349))+(((-1.0)*r01*x1348))))));
j0eval[2]=IKsign(x1350);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1351=cj5*cj5;
IkReal x1352=r21*r21;
IkReal x1353=(sj1*sj2);
IkReal x1354=(r21*sj5);
IkReal x1355=(cj5*r20);
IkReal x1356=(cj1*cj2);
IkReal x1357=((((-1.0)*x1351*x1352))+x1352+((x1351*(r20*r20)))+(r22*r22)+(((-2.0)*x1354*x1355)));
j4eval[0]=x1357;
j4eval[1]=IKsign(x1357);
j4eval[2]=((IKabs((((x1355*x1356))+(((-1.0)*x1353*x1355))+((x1353*x1354))+(((-1.0)*x1354*x1356)))))+(IKabs((((r22*x1353))+(((-1.0)*r22*x1356))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1358=IKsin(j0);
IkReal x1359=IKcos(j0);
evalcond[0]=((((-0.10915)*x1358))+(((-1.0)*px))+(((0.425)*x1359)));
evalcond[1]=((((0.10915)*x1359))+(((-1.0)*py))+(((0.425)*x1358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1360=((1.0)*cj5);
IkReal x1361=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1360)));
j4eval[0]=x1361;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1360)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1361);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1362=((1.0)*cj5);
IkReal x1363=((((-1.0)*r11*x1362))+(((-1.0)*r10*sj5)));
j4eval[0]=x1363;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1362))))));
j4eval[2]=IKsign(x1363);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1364=cj5*cj5;
IkReal x1365=((1.0)*sj5);
IkReal x1366=(cj5*r20);
IkReal x1367=(r11*r21);
IkReal x1368=(x1367+((r10*r20*x1364))+((r12*r22))+(((-1.0)*r11*x1365*x1366))+(((-1.0)*cj5*r10*r21*x1365))+(((-1.0)*x1364*x1367)));
j4eval[0]=x1368;
j4eval[1]=IKsign(x1368);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1365))+((cj0*x1366)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1369=cj5*cj5;
IkReal x1370=((1.0)*sj5);
IkReal x1371=(cj5*r20);
IkReal x1372=(r11*r21);
CheckValue<IkReal> x1373=IKPowWithIntegerCheck(IKsign((x1372+((r10*r20*x1369))+((r12*r22))+(((-1.0)*r11*x1370*x1371))+(((-1.0)*cj5*r10*r21*x1370))+(((-1.0)*x1369*x1372)))),-1);
if(!x1373.valid){
continue;
}
CheckValue<IkReal> x1374 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1370))+((cj0*x1371)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1373.value)))+(x1374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1375=IKsin(j4);
IkReal x1376=IKcos(j4);
IkReal x1377=((1.0)*sj0);
IkReal x1378=(cj5*r00);
IkReal x1379=(r11*sj5);
IkReal x1380=(cj5*r10);
IkReal x1381=(r21*sj5);
IkReal x1382=(cj5*r20);
IkReal x1383=(r01*sj5);
IkReal x1384=((1.0)*x1376);
IkReal x1385=((1.0)*x1375);
evalcond[0]=((((-1.0)*x1382*x1385))+((x1375*x1381))+(((-1.0)*r22*x1384)));
evalcond[1]=(((x1376*x1382))+(((-1.0)*x1381*x1384))+(((-1.0)*r22*x1385)));
evalcond[2]=((((-1.0)*r12*x1384))+((x1375*x1379))+cj0+(((-1.0)*x1380*x1385)));
evalcond[3]=((((-1.0)*r02*x1384))+(((-1.0)*x1377))+((x1375*x1383))+(((-1.0)*x1378*x1385)));
evalcond[4]=(((x1376*x1378))+(((-1.0)*x1383*x1384))+(((-1.0)*r02*x1385))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1385))+(((-1.0)*x1377))+((x1376*x1380))+(((-1.0)*x1379*x1384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1386=((1.0)*cj5);
CheckValue<IkReal> x1387 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1387.valid){
continue;
}
CheckValue<IkReal> x1388=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1386))+(((-1.0)*r10*sj5)))),-1);
if(!x1388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1387.value)+(((1.5707963267949)*(x1388.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1389=IKsin(j4);
IkReal x1390=IKcos(j4);
IkReal x1391=((1.0)*sj0);
IkReal x1392=(cj5*r00);
IkReal x1393=(r11*sj5);
IkReal x1394=(cj5*r10);
IkReal x1395=(r21*sj5);
IkReal x1396=(cj5*r20);
IkReal x1397=(r01*sj5);
IkReal x1398=((1.0)*x1390);
IkReal x1399=((1.0)*x1389);
evalcond[0]=((((-1.0)*x1396*x1399))+(((-1.0)*r22*x1398))+((x1389*x1395)));
evalcond[1]=((((-1.0)*x1395*x1398))+((x1390*x1396))+(((-1.0)*r22*x1399)));
evalcond[2]=((((-1.0)*r12*x1398))+cj0+(((-1.0)*x1394*x1399))+((x1389*x1393)));
evalcond[3]=((((-1.0)*x1392*x1399))+(((-1.0)*r02*x1398))+((x1389*x1397))+(((-1.0)*x1391)));
evalcond[4]=((((-1.0)*r02*x1399))+(((-1.0)*x1397*x1398))+((x1390*x1392))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1399))+(((-1.0)*x1393*x1398))+((x1390*x1394))+(((-1.0)*x1391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1400=((1.0)*cj5);
CheckValue<IkReal> x1401 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1400)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1401.valid){
continue;
}
CheckValue<IkReal> x1402=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1400)))),-1);
if(!x1402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1401.value)+(((1.5707963267949)*(x1402.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1403=IKsin(j4);
IkReal x1404=IKcos(j4);
IkReal x1405=((1.0)*sj0);
IkReal x1406=(cj5*r00);
IkReal x1407=(r11*sj5);
IkReal x1408=(cj5*r10);
IkReal x1409=(r21*sj5);
IkReal x1410=(cj5*r20);
IkReal x1411=(r01*sj5);
IkReal x1412=((1.0)*x1404);
IkReal x1413=((1.0)*x1403);
evalcond[0]=((((-1.0)*r22*x1412))+((x1403*x1409))+(((-1.0)*x1410*x1413)));
evalcond[1]=((((-1.0)*r22*x1413))+((x1404*x1410))+(((-1.0)*x1409*x1412)));
evalcond[2]=(cj0+(((-1.0)*x1408*x1413))+((x1403*x1407))+(((-1.0)*r12*x1412)));
evalcond[3]=((((-1.0)*r02*x1412))+(((-1.0)*x1405))+(((-1.0)*x1406*x1413))+((x1403*x1411)));
evalcond[4]=((((-1.0)*r02*x1413))+(((-1.0)*x1411*x1412))+((x1404*x1406))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1405))+(((-1.0)*x1407*x1412))+(((-1.0)*r12*x1413))+((x1404*x1408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1414=IKsin(j0);
IkReal x1415=IKcos(j0);
evalcond[0]=((((-0.10915)*x1414))+(((0.425)*x1415))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x1415))+(((0.425)*x1414))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1416=((1.0)*cj5);
IkReal x1417=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1416)));
j4eval[0]=x1417;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1416)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1417);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1418=cj5*cj5;
IkReal x1419=((1.0)*r21);
IkReal x1420=(cj5*sj5);
IkReal x1421=((1.0)*r20);
IkReal x1422=((((-1.0)*r01*x1420*x1421))+(((-1.0)*r00*x1419*x1420))+((r01*r21))+((r00*r20*x1418))+((r02*r22))+(((-1.0)*r01*x1418*x1419)));
j4eval[0]=x1422;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1421)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1422);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1423=cj5*cj5;
IkReal x1424=(r21*sj5);
IkReal x1425=(r11*r21);
IkReal x1426=((1.0)*cj5*r20);
IkReal x1427=((((-1.0)*r11*sj5*x1426))+((r12*r22))+(((-1.0)*cj5*r10*x1424))+x1425+((r10*r20*x1423))+(((-1.0)*x1423*x1425)));
j4eval[0]=x1427;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1426))+((sj0*x1424)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1427);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1428=cj5*cj5;
IkReal x1429=(r21*sj5);
IkReal x1430=(r11*r21);
IkReal x1431=((1.0)*cj5*r20);
CheckValue<IkReal> x1432 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1431))+((sj0*x1429)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1432.valid){
continue;
}
CheckValue<IkReal> x1433=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1428*x1430))+(((-1.0)*r11*sj5*x1431))+((r12*r22))+(((-1.0)*cj5*r10*x1429))+x1430+((r10*r20*x1428)))),-1);
if(!x1433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1432.value)+(((1.5707963267949)*(x1433.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1434=IKsin(j4);
IkReal x1435=IKcos(j4);
IkReal x1436=(r11*sj5);
IkReal x1437=(cj5*r00);
IkReal x1438=(cj5*r10);
IkReal x1439=(r21*sj5);
IkReal x1440=(cj5*r20);
IkReal x1441=(r01*sj5);
IkReal x1442=((1.0)*x1435);
IkReal x1443=((1.0)*x1434);
evalcond[0]=((((-1.0)*r22*x1442))+((x1434*x1439))+(((-1.0)*x1440*x1443)));
evalcond[1]=((((-1.0)*r22*x1443))+((x1435*x1440))+(((-1.0)*x1439*x1442)));
evalcond[2]=(cj0+(((-1.0)*x1438*x1443))+(((-1.0)*r12*x1442))+((x1434*x1436)));
evalcond[3]=(cj0+((x1435*x1437))+(((-1.0)*x1441*x1442))+(((-1.0)*r02*x1443)));
evalcond[4]=(sj0+(((-1.0)*r12*x1443))+((x1435*x1438))+(((-1.0)*x1436*x1442)));
evalcond[5]=(((x1434*x1441))+(((-1.0)*sj0))+(((-1.0)*x1437*x1443))+(((-1.0)*r02*x1442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1444=cj5*cj5;
IkReal x1445=((1.0)*r21);
IkReal x1446=(cj5*sj5);
IkReal x1447=((1.0)*r20);
CheckValue<IkReal> x1448 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1447)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1448.valid){
continue;
}
CheckValue<IkReal> x1449=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1446*x1447))+((r00*r20*x1444))+((r01*r21))+(((-1.0)*r00*x1445*x1446))+(((-1.0)*r01*x1444*x1445))+((r02*r22)))),-1);
if(!x1449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1448.value)+(((1.5707963267949)*(x1449.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1450=IKsin(j4);
IkReal x1451=IKcos(j4);
IkReal x1452=(r11*sj5);
IkReal x1453=(cj5*r00);
IkReal x1454=(cj5*r10);
IkReal x1455=(r21*sj5);
IkReal x1456=(cj5*r20);
IkReal x1457=(r01*sj5);
IkReal x1458=((1.0)*x1451);
IkReal x1459=((1.0)*x1450);
evalcond[0]=((((-1.0)*r22*x1458))+((x1450*x1455))+(((-1.0)*x1456*x1459)));
evalcond[1]=((((-1.0)*r22*x1459))+(((-1.0)*x1455*x1458))+((x1451*x1456)));
evalcond[2]=(cj0+((x1450*x1452))+(((-1.0)*x1454*x1459))+(((-1.0)*r12*x1458)));
evalcond[3]=((((-1.0)*x1457*x1458))+cj0+(((-1.0)*r02*x1459))+((x1451*x1453)));
evalcond[4]=(sj0+(((-1.0)*x1452*x1458))+((x1451*x1454))+(((-1.0)*r12*x1459)));
evalcond[5]=((((-1.0)*sj0))+((x1450*x1457))+(((-1.0)*r02*x1458))+(((-1.0)*x1453*x1459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1460=((1.0)*cj5);
CheckValue<IkReal> x1461=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1460)))),-1);
if(!x1461.valid){
continue;
}
CheckValue<IkReal> x1462 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1461.value)))+(x1462.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1463=IKsin(j4);
IkReal x1464=IKcos(j4);
IkReal x1465=(r11*sj5);
IkReal x1466=(cj5*r00);
IkReal x1467=(cj5*r10);
IkReal x1468=(r21*sj5);
IkReal x1469=(cj5*r20);
IkReal x1470=(r01*sj5);
IkReal x1471=((1.0)*x1464);
IkReal x1472=((1.0)*x1463);
evalcond[0]=((((-1.0)*r22*x1471))+((x1463*x1468))+(((-1.0)*x1469*x1472)));
evalcond[1]=((((-1.0)*r22*x1472))+((x1464*x1469))+(((-1.0)*x1468*x1471)));
evalcond[2]=(((x1463*x1465))+cj0+(((-1.0)*r12*x1471))+(((-1.0)*x1467*x1472)));
evalcond[3]=((((-1.0)*x1470*x1471))+cj0+((x1464*x1466))+(((-1.0)*r02*x1472)));
evalcond[4]=(sj0+(((-1.0)*r12*x1472))+((x1464*x1467))+(((-1.0)*x1465*x1471)));
evalcond[5]=((((-1.0)*sj0))+((x1463*x1470))+(((-1.0)*r02*x1471))+(((-1.0)*x1466*x1472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1473=((1.0)*cj5);
IkReal x1474=((((-1.0)*r01*x1473))+(((-1.0)*r00*sj5)));
j4eval[0]=x1474;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1473))))));
j4eval[2]=IKsign(x1474);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1475=((1.0)*cj5);
IkReal x1476=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1475)));
j4eval[0]=x1476;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1475))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1476);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1477=cj5*cj5;
IkReal x1478=((1.0)*sj5);
IkReal x1479=(cj5*r20);
IkReal x1480=(r11*r21);
IkReal x1481=((((-1.0)*cj5*r10*r21*x1478))+(((-1.0)*x1477*x1480))+((r12*r22))+(((-1.0)*r11*x1478*x1479))+x1480+((r10*r20*x1477)));
j4eval[0]=x1481;
j4eval[1]=IKsign(x1481);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1478))+((cj0*x1479)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1482=cj5*cj5;
IkReal x1483=((1.0)*sj5);
IkReal x1484=(cj5*r20);
IkReal x1485=(r11*r21);
CheckValue<IkReal> x1486=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*cj5*r10*r21*x1483))+(((-1.0)*r11*x1483*x1484))+(((-1.0)*x1482*x1485))+x1485+((r10*r20*x1482)))),-1);
if(!x1486.valid){
continue;
}
CheckValue<IkReal> x1487 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1483))+((cj0*x1484)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1486.value)))+(x1487.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1488=IKsin(j4);
IkReal x1489=IKcos(j4);
IkReal x1490=((1.0)*sj0);
IkReal x1491=(cj5*r00);
IkReal x1492=(r11*sj5);
IkReal x1493=(cj5*r10);
IkReal x1494=(r21*sj5);
IkReal x1495=(cj5*r20);
IkReal x1496=(r01*sj5);
IkReal x1497=((1.0)*x1489);
IkReal x1498=((1.0)*x1488);
evalcond[0]=((((-1.0)*x1495*x1498))+(((-1.0)*r22*x1497))+((x1488*x1494)));
evalcond[1]=((((-1.0)*x1494*x1497))+((x1489*x1495))+(((-1.0)*r22*x1498)));
evalcond[2]=((((-1.0)*r12*x1497))+cj0+(((-1.0)*x1493*x1498))+((x1488*x1492)));
evalcond[3]=((((-1.0)*x1490))+(((-1.0)*r02*x1497))+(((-1.0)*x1491*x1498))+((x1488*x1496)));
evalcond[4]=(((x1489*x1491))+(((-1.0)*x1496*x1497))+(((-1.0)*r02*x1498))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1498))+((x1489*x1493))+(((-1.0)*x1490))+(((-1.0)*x1492*x1497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1499=((1.0)*cj5);
CheckValue<IkReal> x1500 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1499))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1500.valid){
continue;
}
CheckValue<IkReal> x1501=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1499)))),-1);
if(!x1501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1500.value)+(((1.5707963267949)*(x1501.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1502=IKsin(j4);
IkReal x1503=IKcos(j4);
IkReal x1504=((1.0)*sj0);
IkReal x1505=(cj5*r00);
IkReal x1506=(r11*sj5);
IkReal x1507=(cj5*r10);
IkReal x1508=(r21*sj5);
IkReal x1509=(cj5*r20);
IkReal x1510=(r01*sj5);
IkReal x1511=((1.0)*x1503);
IkReal x1512=((1.0)*x1502);
evalcond[0]=((((-1.0)*r22*x1511))+(((-1.0)*x1509*x1512))+((x1502*x1508)));
evalcond[1]=((((-1.0)*r22*x1512))+((x1503*x1509))+(((-1.0)*x1508*x1511)));
evalcond[2]=(cj0+(((-1.0)*x1507*x1512))+((x1502*x1506))+(((-1.0)*r12*x1511)));
evalcond[3]=((((-1.0)*x1504))+(((-1.0)*r02*x1511))+((x1502*x1510))+(((-1.0)*x1505*x1512)));
evalcond[4]=((((-1.0)*x1510*x1511))+(((-1.0)*r02*x1512))+((x1503*x1505))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1504))+(((-1.0)*x1506*x1511))+((x1503*x1507))+(((-1.0)*r12*x1512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1513=((1.0)*cj5);
CheckValue<IkReal> x1514=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1513))+(((-1.0)*r00*sj5)))),-1);
if(!x1514.valid){
continue;
}
CheckValue<IkReal> x1515 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1513))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1514.value)))+(x1515.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1516=IKsin(j4);
IkReal x1517=IKcos(j4);
IkReal x1518=((1.0)*sj0);
IkReal x1519=(cj5*r00);
IkReal x1520=(r11*sj5);
IkReal x1521=(cj5*r10);
IkReal x1522=(r21*sj5);
IkReal x1523=(cj5*r20);
IkReal x1524=(r01*sj5);
IkReal x1525=((1.0)*x1517);
IkReal x1526=((1.0)*x1516);
evalcond[0]=((((-1.0)*r22*x1525))+((x1516*x1522))+(((-1.0)*x1523*x1526)));
evalcond[1]=((((-1.0)*r22*x1526))+((x1517*x1523))+(((-1.0)*x1522*x1525)));
evalcond[2]=((((-1.0)*r12*x1525))+cj0+((x1516*x1520))+(((-1.0)*x1521*x1526)));
evalcond[3]=((((-1.0)*x1518))+(((-1.0)*x1519*x1526))+(((-1.0)*r02*x1525))+((x1516*x1524)));
evalcond[4]=((((-1.0)*x1524*x1525))+(((-1.0)*r02*x1526))+((x1517*x1519))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1526))+(((-1.0)*x1518))+((x1517*x1521))+(((-1.0)*x1520*x1525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1527=((1.0)*cj5);
IkReal x1528=((((-1.0)*r01*x1527))+(((-1.0)*r00*sj5)));
j4eval[0]=x1528;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1527))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1528);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1529=cj5*cj5;
IkReal x1530=((1.0)*r21);
IkReal x1531=(cj5*sj5);
IkReal x1532=((1.0)*r20);
IkReal x1533=(((r00*r20*x1529))+(((-1.0)*r01*x1531*x1532))+((r01*r21))+(((-1.0)*r01*x1529*x1530))+(((-1.0)*r00*x1530*x1531))+((r02*r22)));
j4eval[0]=x1533;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1532)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1533);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1534=cj5*cj5;
IkReal x1535=(r21*sj5);
IkReal x1536=(r11*r21);
IkReal x1537=((1.0)*cj5*r20);
IkReal x1538=(((r12*r22))+x1536+(((-1.0)*cj5*r10*x1535))+(((-1.0)*r11*sj5*x1537))+(((-1.0)*x1534*x1536))+((r10*r20*x1534)));
j4eval[0]=x1538;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1537))+((sj0*x1535))))));
j4eval[2]=IKsign(x1538);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1539=cj5*cj5;
IkReal x1540=(r21*sj5);
IkReal x1541=(r11*r21);
IkReal x1542=((1.0)*cj5*r20);
CheckValue<IkReal> x1543 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1540))+(((-1.0)*sj0*x1542)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1543.valid){
continue;
}
CheckValue<IkReal> x1544=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1539*x1541))+(((-1.0)*cj5*r10*x1540))+(((-1.0)*r11*sj5*x1542))+((r12*r22))+x1541+((r10*r20*x1539)))),-1);
if(!x1544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1543.value)+(((1.5707963267949)*(x1544.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1545=IKsin(j4);
IkReal x1546=IKcos(j4);
IkReal x1547=(r11*sj5);
IkReal x1548=(cj5*r00);
IkReal x1549=(cj5*r10);
IkReal x1550=(r21*sj5);
IkReal x1551=(cj5*r20);
IkReal x1552=(r01*sj5);
IkReal x1553=((1.0)*x1546);
IkReal x1554=((1.0)*x1545);
evalcond[0]=((((-1.0)*r22*x1553))+(((-1.0)*x1551*x1554))+((x1545*x1550)));
evalcond[1]=((((-1.0)*r22*x1554))+(((-1.0)*x1550*x1553))+((x1546*x1551)));
evalcond[2]=(cj0+(((-1.0)*x1549*x1554))+(((-1.0)*r12*x1553))+((x1545*x1547)));
evalcond[3]=(cj0+(((-1.0)*x1552*x1553))+(((-1.0)*r02*x1554))+((x1546*x1548)));
evalcond[4]=(sj0+((x1546*x1549))+(((-1.0)*r12*x1554))+(((-1.0)*x1547*x1553)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1553))+(((-1.0)*x1548*x1554))+((x1545*x1552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1555=cj5*cj5;
IkReal x1556=((1.0)*r21);
IkReal x1557=(cj5*sj5);
IkReal x1558=((1.0)*r20);
CheckValue<IkReal> x1559=IKPowWithIntegerCheck(IKsign((((r01*r21))+((r00*r20*x1555))+(((-1.0)*r01*x1555*x1556))+(((-1.0)*r00*x1556*x1557))+(((-1.0)*r01*x1557*x1558))+((r02*r22)))),-1);
if(!x1559.valid){
continue;
}
CheckValue<IkReal> x1560 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1559.value)))+(x1560.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1561=IKsin(j4);
IkReal x1562=IKcos(j4);
IkReal x1563=(r11*sj5);
IkReal x1564=(cj5*r00);
IkReal x1565=(cj5*r10);
IkReal x1566=(r21*sj5);
IkReal x1567=(cj5*r20);
IkReal x1568=(r01*sj5);
IkReal x1569=((1.0)*x1562);
IkReal x1570=((1.0)*x1561);
evalcond[0]=((((-1.0)*x1567*x1570))+(((-1.0)*r22*x1569))+((x1561*x1566)));
evalcond[1]=((((-1.0)*x1566*x1569))+(((-1.0)*r22*x1570))+((x1562*x1567)));
evalcond[2]=((((-1.0)*x1565*x1570))+cj0+((x1561*x1563))+(((-1.0)*r12*x1569)));
evalcond[3]=((((-1.0)*r02*x1570))+cj0+(((-1.0)*x1568*x1569))+((x1562*x1564)));
evalcond[4]=(sj0+(((-1.0)*x1563*x1569))+((x1562*x1565))+(((-1.0)*r12*x1570)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1569))+(((-1.0)*x1564*x1570))+((x1561*x1568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1571=((1.0)*cj5);
CheckValue<IkReal> x1572 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1571)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1572.valid){
continue;
}
CheckValue<IkReal> x1573=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1571)))),-1);
if(!x1573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1572.value)+(((1.5707963267949)*(x1573.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1574=IKsin(j4);
IkReal x1575=IKcos(j4);
IkReal x1576=(r11*sj5);
IkReal x1577=(cj5*r00);
IkReal x1578=(cj5*r10);
IkReal x1579=(r21*sj5);
IkReal x1580=(cj5*r20);
IkReal x1581=(r01*sj5);
IkReal x1582=((1.0)*x1575);
IkReal x1583=((1.0)*x1574);
evalcond[0]=((((-1.0)*x1580*x1583))+(((-1.0)*r22*x1582))+((x1574*x1579)));
evalcond[1]=(((x1575*x1580))+(((-1.0)*x1579*x1582))+(((-1.0)*r22*x1583)));
evalcond[2]=((((-1.0)*x1578*x1583))+cj0+(((-1.0)*r12*x1582))+((x1574*x1576)));
evalcond[3]=(cj0+(((-1.0)*r02*x1583))+((x1575*x1577))+(((-1.0)*x1581*x1582)));
evalcond[4]=(sj0+((x1575*x1578))+(((-1.0)*x1576*x1582))+(((-1.0)*r12*x1583)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1577*x1583))+(((-1.0)*r02*x1582))+((x1574*x1581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1584=IKcos(j0);
IkReal x1585=IKsin(j0);
evalcond[0]=((((-0.425)*x1584))+(((-1.0)*px))+(((-0.10915)*x1585)));
evalcond[1]=((((-0.425)*x1585))+(((-1.0)*py))+(((0.10915)*x1584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1586=((1.0)*cj5);
IkReal x1587=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1586)));
j4eval[0]=x1587;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1586))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1587);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1588=cj5*cj5;
IkReal x1589=((1.0)*r21);
IkReal x1590=(cj5*sj5);
IkReal x1591=((1.0)*r20);
IkReal x1592=(((r01*r21))+(((-1.0)*r01*x1590*x1591))+(((-1.0)*r00*x1589*x1590))+((r00*r20*x1588))+((r02*r22))+(((-1.0)*r01*x1588*x1589)));
j4eval[0]=x1592;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1591))))));
j4eval[2]=IKsign(x1592);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1593=cj5*cj5;
IkReal x1594=(r21*sj5);
IkReal x1595=(r11*r21);
IkReal x1596=((1.0)*cj5*r20);
IkReal x1597=(((r10*r20*x1593))+(((-1.0)*x1593*x1595))+((r12*r22))+x1595+(((-1.0)*r11*sj5*x1596))+(((-1.0)*cj5*r10*x1594)));
j4eval[0]=x1597;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1596))+((sj0*x1594))))));
j4eval[2]=IKsign(x1597);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1598=cj5*cj5;
IkReal x1599=(r21*sj5);
IkReal x1600=(r11*r21);
IkReal x1601=((1.0)*cj5*r20);
CheckValue<IkReal> x1602 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1601))+((sj0*x1599)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1602.valid){
continue;
}
CheckValue<IkReal> x1603=IKPowWithIntegerCheck(IKsign((((r10*r20*x1598))+x1600+(((-1.0)*r11*sj5*x1601))+(((-1.0)*x1598*x1600))+((r12*r22))+(((-1.0)*cj5*r10*x1599)))),-1);
if(!x1603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1602.value)+(((1.5707963267949)*(x1603.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1604=IKsin(j4);
IkReal x1605=IKcos(j4);
IkReal x1606=(r11*sj5);
IkReal x1607=(cj5*r00);
IkReal x1608=(cj5*r10);
IkReal x1609=(r21*sj5);
IkReal x1610=(cj5*r20);
IkReal x1611=(r01*sj5);
IkReal x1612=((1.0)*x1605);
IkReal x1613=((1.0)*x1604);
evalcond[0]=((((-1.0)*x1610*x1613))+(((-1.0)*r22*x1612))+((x1604*x1609)));
evalcond[1]=((((-1.0)*r22*x1613))+(((-1.0)*x1609*x1612))+((x1605*x1610)));
evalcond[2]=((((-1.0)*r12*x1612))+cj0+(((-1.0)*x1608*x1613))+((x1604*x1606)));
evalcond[3]=((((-1.0)*x1611*x1612))+cj0+(((-1.0)*r02*x1613))+((x1605*x1607)));
evalcond[4]=((((-1.0)*x1606*x1612))+(((-1.0)*r12*x1613))+sj0+((x1605*x1608)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1612))+((x1604*x1611))+(((-1.0)*x1607*x1613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1614=cj5*cj5;
IkReal x1615=((1.0)*r21);
IkReal x1616=(cj5*sj5);
IkReal x1617=((1.0)*r20);
CheckValue<IkReal> x1618=IKPowWithIntegerCheck(IKsign((((r00*r20*x1614))+(((-1.0)*r01*x1616*x1617))+(((-1.0)*r00*x1615*x1616))+((r01*r21))+(((-1.0)*r01*x1614*x1615))+((r02*r22)))),-1);
if(!x1618.valid){
continue;
}
CheckValue<IkReal> x1619 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1617)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1618.value)))+(x1619.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1620=IKsin(j4);
IkReal x1621=IKcos(j4);
IkReal x1622=(r11*sj5);
IkReal x1623=(cj5*r00);
IkReal x1624=(cj5*r10);
IkReal x1625=(r21*sj5);
IkReal x1626=(cj5*r20);
IkReal x1627=(r01*sj5);
IkReal x1628=((1.0)*x1621);
IkReal x1629=((1.0)*x1620);
evalcond[0]=(((x1620*x1625))+(((-1.0)*r22*x1628))+(((-1.0)*x1626*x1629)));
evalcond[1]=((((-1.0)*x1625*x1628))+(((-1.0)*r22*x1629))+((x1621*x1626)));
evalcond[2]=((((-1.0)*r12*x1628))+((x1620*x1622))+cj0+(((-1.0)*x1624*x1629)));
evalcond[3]=(cj0+(((-1.0)*r02*x1629))+(((-1.0)*x1627*x1628))+((x1621*x1623)));
evalcond[4]=((((-1.0)*r12*x1629))+sj0+(((-1.0)*x1622*x1628))+((x1621*x1624)));
evalcond[5]=(((x1620*x1627))+(((-1.0)*sj0))+(((-1.0)*r02*x1628))+(((-1.0)*x1623*x1629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1630=((1.0)*cj5);
CheckValue<IkReal> x1631=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1630))+(((-1.0)*r00*sj5)))),-1);
if(!x1631.valid){
continue;
}
CheckValue<IkReal> x1632 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1630)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1631.value)))+(x1632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1633=IKsin(j4);
IkReal x1634=IKcos(j4);
IkReal x1635=(r11*sj5);
IkReal x1636=(cj5*r00);
IkReal x1637=(cj5*r10);
IkReal x1638=(r21*sj5);
IkReal x1639=(cj5*r20);
IkReal x1640=(r01*sj5);
IkReal x1641=((1.0)*x1634);
IkReal x1642=((1.0)*x1633);
evalcond[0]=((((-1.0)*r22*x1641))+(((-1.0)*x1639*x1642))+((x1633*x1638)));
evalcond[1]=((((-1.0)*r22*x1642))+(((-1.0)*x1638*x1641))+((x1634*x1639)));
evalcond[2]=(cj0+(((-1.0)*r12*x1641))+(((-1.0)*x1637*x1642))+((x1633*x1635)));
evalcond[3]=(cj0+(((-1.0)*x1640*x1641))+((x1634*x1636))+(((-1.0)*r02*x1642)));
evalcond[4]=(sj0+(((-1.0)*x1635*x1641))+(((-1.0)*r12*x1642))+((x1634*x1637)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1636*x1642))+((x1633*x1640))+(((-1.0)*r02*x1641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1643=IKcos(j0);
IkReal x1644=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.425)*x1643))+(((-0.10915)*x1644)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x1643))+(((-0.425)*x1644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1645=((1.0)*cj5);
IkReal x1646=((((-1.0)*r01*x1645))+(((-1.0)*r00*sj5)));
j4eval[0]=x1646;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1645)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1646);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1647=((1.0)*cj5);
IkReal x1648=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1647)));
j4eval[0]=x1648;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1647))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1648);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1649=cj5*cj5;
IkReal x1650=((1.0)*sj5);
IkReal x1651=(cj5*r20);
IkReal x1652=(r11*r21);
IkReal x1653=((((-1.0)*r11*x1650*x1651))+(((-1.0)*cj5*r10*r21*x1650))+x1652+((r12*r22))+(((-1.0)*x1649*x1652))+((r10*r20*x1649)));
j4eval[0]=x1653;
j4eval[1]=IKsign(x1653);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1650))+((cj0*x1651)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1654=cj5*cj5;
IkReal x1655=((1.0)*sj5);
IkReal x1656=(cj5*r20);
IkReal x1657=(r11*r21);
CheckValue<IkReal> x1658 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1655))+((cj0*x1656)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1658.valid){
continue;
}
CheckValue<IkReal> x1659=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1655))+x1657+(((-1.0)*x1654*x1657))+((r12*r22))+(((-1.0)*r11*x1655*x1656))+((r10*r20*x1654)))),-1);
if(!x1659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1658.value)+(((1.5707963267949)*(x1659.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1660=IKsin(j4);
IkReal x1661=IKcos(j4);
IkReal x1662=((1.0)*sj0);
IkReal x1663=(cj5*r00);
IkReal x1664=(r11*sj5);
IkReal x1665=(cj5*r10);
IkReal x1666=(r21*sj5);
IkReal x1667=(cj5*r20);
IkReal x1668=(r01*sj5);
IkReal x1669=((1.0)*x1661);
IkReal x1670=((1.0)*x1660);
evalcond[0]=(((x1660*x1666))+(((-1.0)*x1667*x1670))+(((-1.0)*r22*x1669)));
evalcond[1]=(((x1661*x1667))+(((-1.0)*x1666*x1669))+(((-1.0)*r22*x1670)));
evalcond[2]=(((x1660*x1664))+cj0+(((-1.0)*r12*x1669))+(((-1.0)*x1665*x1670)));
evalcond[3]=(((x1660*x1668))+(((-1.0)*x1663*x1670))+(((-1.0)*x1662))+(((-1.0)*r02*x1669)));
evalcond[4]=((((-1.0)*r02*x1670))+(((-1.0)*x1668*x1669))+((x1661*x1663))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1670))+(((-1.0)*x1662))+((x1661*x1665))+(((-1.0)*x1664*x1669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1671=((1.0)*cj5);
CheckValue<IkReal> x1672=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1671)))),-1);
if(!x1672.valid){
continue;
}
CheckValue<IkReal> x1673 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1671))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1672.value)))+(x1673.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1674=IKsin(j4);
IkReal x1675=IKcos(j4);
IkReal x1676=((1.0)*sj0);
IkReal x1677=(cj5*r00);
IkReal x1678=(r11*sj5);
IkReal x1679=(cj5*r10);
IkReal x1680=(r21*sj5);
IkReal x1681=(cj5*r20);
IkReal x1682=(r01*sj5);
IkReal x1683=((1.0)*x1675);
IkReal x1684=((1.0)*x1674);
evalcond[0]=((((-1.0)*x1681*x1684))+(((-1.0)*r22*x1683))+((x1674*x1680)));
evalcond[1]=(((x1675*x1681))+(((-1.0)*r22*x1684))+(((-1.0)*x1680*x1683)));
evalcond[2]=((((-1.0)*r12*x1683))+((x1674*x1678))+cj0+(((-1.0)*x1679*x1684)));
evalcond[3]=((((-1.0)*x1677*x1684))+((x1674*x1682))+(((-1.0)*r02*x1683))+(((-1.0)*x1676)));
evalcond[4]=(((x1675*x1677))+(((-1.0)*x1682*x1683))+(((-1.0)*r02*x1684))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1684))+((x1675*x1679))+(((-1.0)*x1678*x1683))+(((-1.0)*x1676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1685=((1.0)*cj5);
CheckValue<IkReal> x1686 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1685)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1686.valid){
continue;
}
CheckValue<IkReal> x1687=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1685))+(((-1.0)*r00*sj5)))),-1);
if(!x1687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1686.value)+(((1.5707963267949)*(x1687.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1688=IKsin(j4);
IkReal x1689=IKcos(j4);
IkReal x1690=((1.0)*sj0);
IkReal x1691=(cj5*r00);
IkReal x1692=(r11*sj5);
IkReal x1693=(cj5*r10);
IkReal x1694=(r21*sj5);
IkReal x1695=(cj5*r20);
IkReal x1696=(r01*sj5);
IkReal x1697=((1.0)*x1689);
IkReal x1698=((1.0)*x1688);
evalcond[0]=((((-1.0)*r22*x1697))+((x1688*x1694))+(((-1.0)*x1695*x1698)));
evalcond[1]=((((-1.0)*x1694*x1697))+((x1689*x1695))+(((-1.0)*r22*x1698)));
evalcond[2]=(cj0+(((-1.0)*r12*x1697))+((x1688*x1692))+(((-1.0)*x1693*x1698)));
evalcond[3]=((((-1.0)*x1690))+(((-1.0)*x1691*x1698))+(((-1.0)*r02*x1697))+((x1688*x1696)));
evalcond[4]=((((-1.0)*x1696*x1697))+((x1689*x1691))+(((-1.0)*r02*x1698))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1692*x1697))+(((-1.0)*x1690))+(((-1.0)*r12*x1698))+((x1689*x1693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1699=((1.0)*cj5);
IkReal x1700=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1699)));
j4eval[0]=x1700;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1699))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1700);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1701=cj5*cj5;
IkReal x1702=((1.0)*r21);
IkReal x1703=(cj5*sj5);
IkReal x1704=((1.0)*r20);
IkReal x1705=((((-1.0)*r01*x1703*x1704))+(((-1.0)*r01*x1701*x1702))+((r01*r21))+((r00*r20*x1701))+(((-1.0)*r00*x1702*x1703))+((r02*r22)));
j4eval[0]=x1705;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1704))))));
j4eval[2]=IKsign(x1705);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1706=cj5*cj5;
IkReal x1707=(r21*sj5);
IkReal x1708=(r11*r21);
IkReal x1709=((1.0)*cj5*r20);
IkReal x1710=(x1708+((r12*r22))+(((-1.0)*r11*sj5*x1709))+((r10*r20*x1706))+(((-1.0)*x1706*x1708))+(((-1.0)*cj5*r10*x1707)));
j4eval[0]=x1710;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1709))+((sj0*x1707))))));
j4eval[2]=IKsign(x1710);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1711=cj5*cj5;
IkReal x1712=(r21*sj5);
IkReal x1713=(r11*r21);
IkReal x1714=((1.0)*cj5*r20);
CheckValue<IkReal> x1715=IKPowWithIntegerCheck(IKsign((x1713+(((-1.0)*r11*sj5*x1714))+((r10*r20*x1711))+((r12*r22))+(((-1.0)*x1711*x1713))+(((-1.0)*cj5*r10*x1712)))),-1);
if(!x1715.valid){
continue;
}
CheckValue<IkReal> x1716 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1714))+((sj0*x1712)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1715.value)))+(x1716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1717=IKsin(j4);
IkReal x1718=IKcos(j4);
IkReal x1719=(r11*sj5);
IkReal x1720=(cj5*r00);
IkReal x1721=(cj5*r10);
IkReal x1722=(r21*sj5);
IkReal x1723=(cj5*r20);
IkReal x1724=(r01*sj5);
IkReal x1725=((1.0)*x1718);
IkReal x1726=((1.0)*x1717);
evalcond[0]=((((-1.0)*r22*x1725))+((x1717*x1722))+(((-1.0)*x1723*x1726)));
evalcond[1]=((((-1.0)*r22*x1726))+(((-1.0)*x1722*x1725))+((x1718*x1723)));
evalcond[2]=(cj0+(((-1.0)*r12*x1725))+(((-1.0)*x1721*x1726))+((x1717*x1719)));
evalcond[3]=(cj0+((x1718*x1720))+(((-1.0)*x1724*x1725))+(((-1.0)*r02*x1726)));
evalcond[4]=(sj0+(((-1.0)*r12*x1726))+((x1718*x1721))+(((-1.0)*x1719*x1725)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1720*x1726))+((x1717*x1724))+(((-1.0)*r02*x1725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1727=cj5*cj5;
IkReal x1728=((1.0)*r21);
IkReal x1729=(cj5*sj5);
IkReal x1730=((1.0)*r20);
CheckValue<IkReal> x1731 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1730)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1731.valid){
continue;
}
CheckValue<IkReal> x1732=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1727*x1728))+(((-1.0)*r01*x1729*x1730))+(((-1.0)*r00*x1728*x1729))+((r01*r21))+((r02*r22))+((r00*r20*x1727)))),-1);
if(!x1732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1731.value)+(((1.5707963267949)*(x1732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1733=IKsin(j4);
IkReal x1734=IKcos(j4);
IkReal x1735=(r11*sj5);
IkReal x1736=(cj5*r00);
IkReal x1737=(cj5*r10);
IkReal x1738=(r21*sj5);
IkReal x1739=(cj5*r20);
IkReal x1740=(r01*sj5);
IkReal x1741=((1.0)*x1734);
IkReal x1742=((1.0)*x1733);
evalcond[0]=((((-1.0)*r22*x1741))+(((-1.0)*x1739*x1742))+((x1733*x1738)));
evalcond[1]=((((-1.0)*x1738*x1741))+(((-1.0)*r22*x1742))+((x1734*x1739)));
evalcond[2]=((((-1.0)*r12*x1741))+cj0+(((-1.0)*x1737*x1742))+((x1733*x1735)));
evalcond[3]=(cj0+(((-1.0)*x1740*x1741))+((x1734*x1736))+(((-1.0)*r02*x1742)));
evalcond[4]=((((-1.0)*r12*x1742))+sj0+(((-1.0)*x1735*x1741))+((x1734*x1737)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1736*x1742))+((x1733*x1740))+(((-1.0)*r02*x1741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1743=((1.0)*cj5);
CheckValue<IkReal> x1744 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1743)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1744.valid){
continue;
}
CheckValue<IkReal> x1745=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1743)))),-1);
if(!x1745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1744.value)+(((1.5707963267949)*(x1745.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1746=IKsin(j4);
IkReal x1747=IKcos(j4);
IkReal x1748=(r11*sj5);
IkReal x1749=(cj5*r00);
IkReal x1750=(cj5*r10);
IkReal x1751=(r21*sj5);
IkReal x1752=(cj5*r20);
IkReal x1753=(r01*sj5);
IkReal x1754=((1.0)*x1747);
IkReal x1755=((1.0)*x1746);
evalcond[0]=((((-1.0)*r22*x1754))+((x1746*x1751))+(((-1.0)*x1752*x1755)));
evalcond[1]=((((-1.0)*r22*x1755))+((x1747*x1752))+(((-1.0)*x1751*x1754)));
evalcond[2]=((((-1.0)*r12*x1754))+cj0+((x1746*x1748))+(((-1.0)*x1750*x1755)));
evalcond[3]=(cj0+((x1747*x1749))+(((-1.0)*x1753*x1754))+(((-1.0)*r02*x1755)));
evalcond[4]=((((-1.0)*x1748*x1754))+sj0+(((-1.0)*r12*x1755))+((x1747*x1750)));
evalcond[5]=((((-1.0)*sj0))+((x1746*x1753))+(((-1.0)*x1749*x1755))+(((-1.0)*r02*x1754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1756=((1.0)*cj5);
IkReal x1757=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1756)));
j4eval[0]=x1757;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1756)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1757);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1758=((1.0)*cj5);
IkReal x1759=((((-1.0)*r11*x1758))+(((-1.0)*r10*sj5)));
j4eval[0]=x1759;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1758))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1759);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1760=cj5*cj5;
IkReal x1761=((1.0)*sj5);
IkReal x1762=(cj5*r20);
IkReal x1763=(r11*r21);
IkReal x1764=(x1763+((r12*r22))+(((-1.0)*cj5*r10*r21*x1761))+(((-1.0)*r11*x1761*x1762))+((r10*r20*x1760))+(((-1.0)*x1760*x1763)));
j4eval[0]=x1764;
j4eval[1]=IKsign(x1764);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1761))+((cj0*x1762)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1765=cj5*cj5;
IkReal x1766=((1.0)*sj5);
IkReal x1767=(cj5*r20);
IkReal x1768=(r11*r21);
CheckValue<IkReal> x1769 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1766))+((cj0*x1767)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1769.valid){
continue;
}
CheckValue<IkReal> x1770=IKPowWithIntegerCheck(IKsign((x1768+((r12*r22))+(((-1.0)*r11*x1766*x1767))+(((-1.0)*cj5*r10*r21*x1766))+((r10*r20*x1765))+(((-1.0)*x1765*x1768)))),-1);
if(!x1770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1769.value)+(((1.5707963267949)*(x1770.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1771=IKsin(j4);
IkReal x1772=IKcos(j4);
IkReal x1773=((1.0)*sj0);
IkReal x1774=(cj5*r00);
IkReal x1775=(r11*sj5);
IkReal x1776=(cj5*r10);
IkReal x1777=(r21*sj5);
IkReal x1778=(cj5*r20);
IkReal x1779=(r01*sj5);
IkReal x1780=((1.0)*x1772);
IkReal x1781=((1.0)*x1771);
evalcond[0]=((((-1.0)*r22*x1780))+((x1771*x1777))+(((-1.0)*x1778*x1781)));
evalcond[1]=((((-1.0)*r22*x1781))+(((-1.0)*x1777*x1780))+((x1772*x1778)));
evalcond[2]=(cj0+((x1771*x1775))+(((-1.0)*r12*x1780))+(((-1.0)*x1776*x1781)));
evalcond[3]=(((x1771*x1779))+(((-1.0)*x1774*x1781))+(((-1.0)*x1773))+(((-1.0)*r02*x1780)));
evalcond[4]=((((-1.0)*x1779*x1780))+((x1772*x1774))+(((-1.0)*r02*x1781))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1775*x1780))+(((-1.0)*r12*x1781))+(((-1.0)*x1773))+((x1772*x1776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1782=((1.0)*cj5);
CheckValue<IkReal> x1783=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1782)))),-1);
if(!x1783.valid){
continue;
}
CheckValue<IkReal> x1784 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1782)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1783.value)))+(x1784.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1785=IKsin(j4);
IkReal x1786=IKcos(j4);
IkReal x1787=((1.0)*sj0);
IkReal x1788=(cj5*r00);
IkReal x1789=(r11*sj5);
IkReal x1790=(cj5*r10);
IkReal x1791=(r21*sj5);
IkReal x1792=(cj5*r20);
IkReal x1793=(r01*sj5);
IkReal x1794=((1.0)*x1786);
IkReal x1795=((1.0)*x1785);
evalcond[0]=((((-1.0)*x1792*x1795))+(((-1.0)*r22*x1794))+((x1785*x1791)));
evalcond[1]=((((-1.0)*r22*x1795))+((x1786*x1792))+(((-1.0)*x1791*x1794)));
evalcond[2]=((((-1.0)*x1790*x1795))+cj0+(((-1.0)*r12*x1794))+((x1785*x1789)));
evalcond[3]=((((-1.0)*x1787))+(((-1.0)*x1788*x1795))+((x1785*x1793))+(((-1.0)*r02*x1794)));
evalcond[4]=((((-1.0)*x1793*x1794))+((x1786*x1788))+(((-1.0)*r02*x1795))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1787))+(((-1.0)*r12*x1795))+(((-1.0)*x1789*x1794))+((x1786*x1790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1796=((1.0)*cj5);
CheckValue<IkReal> x1797 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1796))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1797.valid){
continue;
}
CheckValue<IkReal> x1798=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1796))+(((-1.0)*r00*sj5)))),-1);
if(!x1798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1797.value)+(((1.5707963267949)*(x1798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1799=IKsin(j4);
IkReal x1800=IKcos(j4);
IkReal x1801=((1.0)*sj0);
IkReal x1802=(cj5*r00);
IkReal x1803=(r11*sj5);
IkReal x1804=(cj5*r10);
IkReal x1805=(r21*sj5);
IkReal x1806=(cj5*r20);
IkReal x1807=(r01*sj5);
IkReal x1808=((1.0)*x1800);
IkReal x1809=((1.0)*x1799);
evalcond[0]=(((x1799*x1805))+(((-1.0)*x1806*x1809))+(((-1.0)*r22*x1808)));
evalcond[1]=(((x1800*x1806))+(((-1.0)*x1805*x1808))+(((-1.0)*r22*x1809)));
evalcond[2]=(((x1799*x1803))+cj0+(((-1.0)*x1804*x1809))+(((-1.0)*r12*x1808)));
evalcond[3]=(((x1799*x1807))+(((-1.0)*x1802*x1809))+(((-1.0)*x1801))+(((-1.0)*r02*x1808)));
evalcond[4]=(((x1800*x1802))+(((-1.0)*r02*x1809))+(((-1.0)*x1807*x1808))+(((-1.0)*cj0)));
evalcond[5]=(((x1800*x1804))+(((-1.0)*x1801))+(((-1.0)*r12*x1809))+(((-1.0)*x1803*x1808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1810=(sj1*sj2);
IkReal x1811=(cj5*r01);
IkReal x1812=(cj1*cj2);
IkReal x1813=(r00*sj5);
IkReal x1814=((20000.0)*px);
IkReal x1815=((8500.0)*cj1);
CheckValue<IkReal> x1816=IKPowWithIntegerCheck(((((2183.0)*x1810))+(((-2183.0)*x1812))),-1);
if(!x1816.valid){
continue;
}
CheckValue<IkReal> x1817=IKPowWithIntegerCheck((x1810+(((-1.0)*x1812))),-1);
if(!x1817.valid){
continue;
}
if( IKabs(((x1816.value)*(((((-1.0)*x1813*x1815))+(((5952.0)*x1810*x1813))+(((5952.0)*x1810*x1811))+(((-5952.0)*x1812*x1813))+(((-1.0)*x1811*x1815))+((x1812*x1814))+(((-1.0)*x1810*x1814))+(((-5952.0)*x1811*x1812)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1817.value)*(((((-1.0)*x1811))+(((-1.0)*x1813)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1816.value)*(((((-1.0)*x1813*x1815))+(((5952.0)*x1810*x1813))+(((5952.0)*x1810*x1811))+(((-5952.0)*x1812*x1813))+(((-1.0)*x1811*x1815))+((x1812*x1814))+(((-1.0)*x1810*x1814))+(((-5952.0)*x1811*x1812))))))+IKsqr(((x1817.value)*(((((-1.0)*x1811))+(((-1.0)*x1813))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1816.value)*(((((-1.0)*x1813*x1815))+(((5952.0)*x1810*x1813))+(((5952.0)*x1810*x1811))+(((-5952.0)*x1812*x1813))+(((-1.0)*x1811*x1815))+((x1812*x1814))+(((-1.0)*x1810*x1814))+(((-5952.0)*x1811*x1812))))), ((x1817.value)*(((((-1.0)*x1811))+(((-1.0)*x1813))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1818=IKcos(j0);
IkReal x1819=IKsin(j0);
IkReal x1820=(cj5*r01);
IkReal x1821=(cj5*r11);
IkReal x1822=(r00*sj5);
IkReal x1823=(sj1*sj2);
IkReal x1824=((0.39225)*cj2);
IkReal x1825=((1.0)*cj2);
IkReal x1826=(r10*sj5);
IkReal x1827=((0.39225)*x1823);
IkReal x1828=(cj1*x1818);
IkReal x1829=(cj1*x1819);
evalcond[0]=(((x1818*x1823))+(((-1.0)*x1825*x1828))+x1820+x1822);
evalcond[1]=(((x1819*x1823))+(((-1.0)*x1825*x1829))+x1826+x1821);
evalcond[2]=((((-0.09465)*x1820))+(((-0.09465)*x1822))+((x1824*x1828))+(((-1.0)*x1818*x1827))+(((-1.0)*px))+(((-0.10915)*x1819))+(((0.425)*x1828)));
evalcond[3]=((((-0.09465)*x1826))+(((-0.09465)*x1821))+((x1824*x1829))+(((-1.0)*x1819*x1827))+(((-1.0)*py))+(((0.10915)*x1818))+(((0.425)*x1829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1830=((1.0)*cj5);
IkReal x1831=((((-1.0)*r01*x1830))+(((-1.0)*r00*sj5)));
j4eval[0]=x1831;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1830)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1831);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1832=((1.0)*cj5);
IkReal x1833=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1832)));
j4eval[0]=x1833;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1832))))));
j4eval[2]=IKsign(x1833);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1834=((1.0)*sj0);
IkReal x1835=((1.0)*cj0);
IkReal x1836=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1836;
j4eval[1]=((IKabs(((((-1.0)*r02*x1835))+(((-1.0)*r12*x1834)))))+(IKabs(((((-1.0)*r11*sj5*x1834))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1835))))));
j4eval[2]=IKsign(x1836);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1837=((-1.0)*r20);
IkReal x1839 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1839)==0){
continue;
}
IkReal x1838=pow(x1839,-0.5);
CheckValue<IkReal> x1840 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1837),IKFAST_ATAN2_MAGTHRESH);
if(!x1840.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1840.value));
IkReal gconst79=(r21*x1838);
IkReal gconst80=(x1837*x1838);
CheckValue<IkReal> x1841 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1841.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1841.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1842=((-1.0)*r20);
IkReal x1843=x1838;
CheckValue<IkReal> x1845 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1842),IKFAST_ATAN2_MAGTHRESH);
if(!x1845.valid){
continue;
}
IkReal x1844=((-1.0)*(x1845.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1844;
IkReal gconst78=x1844;
IkReal gconst79=(r21*x1843);
IkReal gconst80=(x1842*x1843);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1846=((-1.0)*r20);
IkReal x1847=x1838;
CheckValue<IkReal> x1849 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1846),IKFAST_ATAN2_MAGTHRESH);
if(!x1849.valid){
continue;
}
IkReal x1848=((-1.0)*(x1849.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1848;
IkReal gconst78=x1848;
IkReal gconst79=(r21*x1847);
IkReal gconst80=(x1846*x1847);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1850=((-1.0)*r20);
IkReal x1851=x1838;
CheckValue<IkReal> x1853 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1850),IKFAST_ATAN2_MAGTHRESH);
if(!x1853.valid){
continue;
}
IkReal x1852=((-1.0)*(x1853.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1852;
IkReal gconst78=x1852;
IkReal gconst79=(r21*x1851);
IkReal gconst80=(x1850*x1851);
IkReal x1854=r22*r22;
CheckValue<IkReal> x1857=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1854))),-1);
if(!x1857.valid){
continue;
}
IkReal x1855=x1857.value;
IkReal x1856=(((x1855*(r21*r21*r21*r21)))+x1854+((x1855*(r20*r20*r20*r20)))+(((2.0)*x1855*(r20*r20)*(r21*r21))));
j4eval[0]=x1856;
j4eval[1]=IKsign(x1856);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1858=(sj1*sj2);
IkReal x1859=(gconst80*r20);
IkReal x1860=(gconst79*r21);
IkReal x1861=(cj1*cj2);
CheckValue<IkReal> x1862 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1861))+((r22*x1858)))),IkReal(((((-1.0)*x1858*x1859))+((x1859*x1861))+((x1858*x1860))+(((-1.0)*x1860*x1861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1862.valid){
continue;
}
CheckValue<IkReal> x1863=IKPowWithIntegerCheck(IKsign(((x1859*x1859)+(r22*r22)+(x1860*x1860)+(((-2.0)*x1859*x1860)))),-1);
if(!x1863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1862.value)+(((1.5707963267949)*(x1863.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1864=IKsin(j4);
IkReal x1865=IKcos(j4);
IkReal x1866=(gconst79*r01);
IkReal x1867=(gconst79*r21);
IkReal x1868=((1.0)*cj2);
IkReal x1869=(gconst79*r11);
IkReal x1870=((1.0)*sj0);
IkReal x1871=(cj1*sj2);
IkReal x1872=((1.0)*x1865);
IkReal x1873=(gconst80*x1865);
IkReal x1874=((1.0)*x1864);
IkReal x1875=(gconst80*x1874);
evalcond[0]=(((x1864*x1867))+(((-1.0)*r22*x1872))+(((-1.0)*r20*x1875)));
evalcond[1]=(((x1864*x1869))+cj0+(((-1.0)*r10*x1875))+(((-1.0)*r12*x1872)));
evalcond[2]=(((x1864*x1866))+(((-1.0)*x1870))+(((-1.0)*r02*x1872))+(((-1.0)*r00*x1875)));
evalcond[3]=((((-1.0)*r22*x1874))+((sj1*sj2))+((r20*x1873))+(((-1.0)*x1867*x1872))+(((-1.0)*cj1*x1868)));
evalcond[4]=((((-1.0)*cj0*x1871))+(((-1.0)*r02*x1874))+(((-1.0)*x1866*x1872))+(((-1.0)*cj0*sj1*x1868))+((r00*x1873)));
evalcond[5]=((((-1.0)*x1869*x1872))+(((-1.0)*x1870*x1871))+(((-1.0)*r12*x1874))+((r10*x1873))+(((-1.0)*sj0*sj1*x1868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1876=((1.0)*gconst80);
CheckValue<IkReal> x1877 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1876))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1877.valid){
continue;
}
CheckValue<IkReal> x1878=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x1876)))),-1);
if(!x1878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1877.value)+(((1.5707963267949)*(x1878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1879=IKsin(j4);
IkReal x1880=IKcos(j4);
IkReal x1881=(gconst79*r01);
IkReal x1882=(gconst79*r21);
IkReal x1883=((1.0)*cj2);
IkReal x1884=(gconst79*r11);
IkReal x1885=((1.0)*sj0);
IkReal x1886=(cj1*sj2);
IkReal x1887=((1.0)*x1880);
IkReal x1888=(gconst80*x1880);
IkReal x1889=((1.0)*x1879);
IkReal x1890=(gconst80*x1889);
evalcond[0]=(((x1879*x1882))+(((-1.0)*r22*x1887))+(((-1.0)*r20*x1890)));
evalcond[1]=(((x1879*x1884))+cj0+(((-1.0)*r12*x1887))+(((-1.0)*r10*x1890)));
evalcond[2]=(((x1879*x1881))+(((-1.0)*r02*x1887))+(((-1.0)*r00*x1890))+(((-1.0)*x1885)));
evalcond[3]=((((-1.0)*x1882*x1887))+((r20*x1888))+(((-1.0)*cj1*x1883))+(((-1.0)*r22*x1889))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj0*sj1*x1883))+(((-1.0)*cj0*x1886))+(((-1.0)*r02*x1889))+((r00*x1888))+(((-1.0)*x1881*x1887)));
evalcond[5]=((((-1.0)*sj0*sj1*x1883))+(((-1.0)*r12*x1889))+((r10*x1888))+(((-1.0)*x1884*x1887))+(((-1.0)*x1885*x1886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1891=((1.0)*gconst80);
CheckValue<IkReal> x1892 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1891))+((cj0*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1892.valid){
continue;
}
CheckValue<IkReal> x1893=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x1891)))),-1);
if(!x1893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1892.value)+(((1.5707963267949)*(x1893.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1894=IKsin(j4);
IkReal x1895=IKcos(j4);
IkReal x1896=(gconst79*r01);
IkReal x1897=(gconst79*r21);
IkReal x1898=((1.0)*cj2);
IkReal x1899=(gconst79*r11);
IkReal x1900=((1.0)*sj0);
IkReal x1901=(cj1*sj2);
IkReal x1902=((1.0)*x1895);
IkReal x1903=(gconst80*x1895);
IkReal x1904=((1.0)*x1894);
IkReal x1905=(gconst80*x1904);
evalcond[0]=((((-1.0)*r22*x1902))+(((-1.0)*r20*x1905))+((x1894*x1897)));
evalcond[1]=(cj0+(((-1.0)*r10*x1905))+(((-1.0)*r12*x1902))+((x1894*x1899)));
evalcond[2]=(((x1894*x1896))+(((-1.0)*r02*x1902))+(((-1.0)*x1900))+(((-1.0)*r00*x1905)));
evalcond[3]=((((-1.0)*cj1*x1898))+(((-1.0)*r22*x1904))+((sj1*sj2))+((r20*x1903))+(((-1.0)*x1897*x1902)));
evalcond[4]=(((r00*x1903))+(((-1.0)*cj0*sj1*x1898))+(((-1.0)*cj0*x1901))+(((-1.0)*x1896*x1902))+(((-1.0)*r02*x1904)));
evalcond[5]=((((-1.0)*x1899*x1902))+(((-1.0)*x1900*x1901))+(((-1.0)*sj0*sj1*x1898))+(((-1.0)*r12*x1904))+((r10*x1903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1906=((-1.0)*r21);
IkReal x1908 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1908)==0){
continue;
}
IkReal x1907=pow(x1908,-0.5);
CheckValue<IkReal> x1909 = IKatan2WithCheck(IkReal(x1906),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1909.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1909.value))));
IkReal gconst82=(x1906*x1907);
IkReal gconst83=((1.0)*r20*x1907);
CheckValue<IkReal> x1910 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1910.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1910.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1911=((-1.0)*r21);
CheckValue<IkReal> x1914 = IKatan2WithCheck(IkReal(x1911),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1914.valid){
continue;
}
IkReal x1912=((1.0)*(x1914.value));
IkReal x1913=x1907;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1912)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1912)));
IkReal gconst82=(x1911*x1913);
IkReal gconst83=((1.0)*r20*x1913);
IkReal x1915=r22*r22;
IkReal x1916=((1.0)*x1915);
CheckValue<IkReal> x1920=IKPowWithIntegerCheck(((-1.0)+x1915),-1);
if(!x1920.valid){
continue;
}
IkReal x1917=x1920.value;
if((((1.0)+(((-1.0)*x1916)))) < -0.00001)
continue;
IkReal x1918=IKsqrt(((1.0)+(((-1.0)*x1916))));
IkReal x1919=(cj0*x1917*x1918);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x1919+(((-1.0)*x1916*x1919))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1921=((-1.0)*r21);
CheckValue<IkReal> x1924 = IKatan2WithCheck(IkReal(x1921),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1924.valid){
continue;
}
IkReal x1922=((1.0)*(x1924.value));
IkReal x1923=x1907;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1922)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1922)));
IkReal gconst82=(x1921*x1923);
IkReal gconst83=((1.0)*r20*x1923);
IkReal x1925=r22*r22;
IkReal x1926=((1.0)*x1925);
CheckValue<IkReal> x1930=IKPowWithIntegerCheck(((-1.0)+x1925),-1);
if(!x1930.valid){
continue;
}
IkReal x1927=x1930.value;
if((((1.0)+(((-1.0)*x1926)))) < -0.00001)
continue;
IkReal x1928=IKsqrt(((1.0)+(((-1.0)*x1926))));
IkReal x1929=(sj0*x1927*x1928);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x1929+(((-1.0)*x1926*x1929))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1931=((-1.0)*r21);
CheckValue<IkReal> x1934 = IKatan2WithCheck(IkReal(x1931),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1934.valid){
continue;
}
IkReal x1932=((1.0)*(x1934.value));
IkReal x1933=x1907;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1932)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1932)));
IkReal gconst82=(x1931*x1933);
IkReal gconst83=((1.0)*r20*x1933);
IkReal x1935=r22*r22;
IkReal x1936=(r12*sj0);
IkReal x1937=(cj0*r02);
CheckValue<IkReal> x1941=IKPowWithIntegerCheck(((-1.0)+x1935),-1);
if(!x1941.valid){
continue;
}
IkReal x1938=x1941.value;
if((((1.0)+(((-1.0)*x1935)))) < -0.00001)
continue;
IkReal x1939=IKsqrt(((1.0)+(((-1.0)*x1935))));
IkReal x1940=(r22*x1938*x1939);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x1937*x1940))+((x1936*x1940)))))+(IKabs(((((-1.0)*x1936))+(((-1.0)*x1937))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1942=((1.0)*sj0);
IkReal x1943=((1.0)*cj0);
CheckValue<IkReal> x1944=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1944.valid){
continue;
}
CheckValue<IkReal> x1945 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1943))+(((-1.0)*r12*x1942)))),IkReal(((((-1.0)*gconst82*r01*x1943))+(((-1.0)*gconst82*r11*x1942))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1944.value)))+(x1945.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1946=IKsin(j4);
IkReal x1947=IKcos(j4);
IkReal x1948=(gconst82*r11);
IkReal x1949=((1.0)*cj2);
IkReal x1950=((1.0)*sj0);
IkReal x1951=(cj1*sj2);
IkReal x1952=((1.0)*x1947);
IkReal x1953=(gconst83*x1947);
IkReal x1954=(gconst82*x1946);
IkReal x1955=((1.0)*x1946);
evalcond[0]=((((-1.0)*r22*x1952))+((r21*x1954))+(((-1.0)*gconst83*r20*x1955)));
evalcond[1]=(cj0+((x1946*x1948))+(((-1.0)*gconst83*r10*x1955))+(((-1.0)*r12*x1952)));
evalcond[2]=((((-1.0)*x1950))+(((-1.0)*r02*x1952))+((r01*x1954))+(((-1.0)*gconst83*r00*x1955)));
evalcond[3]=((((-1.0)*r22*x1955))+((r20*x1953))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1952))+(((-1.0)*cj1*x1949)));
evalcond[4]=((((-1.0)*cj0*x1951))+(((-1.0)*r02*x1955))+(((-1.0)*gconst82*r01*x1952))+((r00*x1953))+(((-1.0)*cj0*sj1*x1949)));
evalcond[5]=((((-1.0)*sj0*sj1*x1949))+(((-1.0)*x1948*x1952))+(((-1.0)*x1950*x1951))+((r10*x1953))+(((-1.0)*r12*x1955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1956=((1.0)*gconst83);
CheckValue<IkReal> x1957 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1956)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1957.valid){
continue;
}
CheckValue<IkReal> x1958=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1956)))),-1);
if(!x1958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1957.value)+(((1.5707963267949)*(x1958.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1959=IKsin(j4);
IkReal x1960=IKcos(j4);
IkReal x1961=(gconst82*r11);
IkReal x1962=((1.0)*cj2);
IkReal x1963=((1.0)*sj0);
IkReal x1964=(cj1*sj2);
IkReal x1965=((1.0)*x1960);
IkReal x1966=(gconst83*x1960);
IkReal x1967=(gconst82*x1959);
IkReal x1968=((1.0)*x1959);
evalcond[0]=((((-1.0)*r22*x1965))+((r21*x1967))+(((-1.0)*gconst83*r20*x1968)));
evalcond[1]=(((x1959*x1961))+cj0+(((-1.0)*gconst83*r10*x1968))+(((-1.0)*r12*x1965)));
evalcond[2]=((((-1.0)*r02*x1965))+(((-1.0)*x1963))+((r01*x1967))+(((-1.0)*gconst83*r00*x1968)));
evalcond[3]=(((r20*x1966))+(((-1.0)*r22*x1968))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1965))+(((-1.0)*cj1*x1962)));
evalcond[4]=((((-1.0)*cj0*x1964))+(((-1.0)*cj0*sj1*x1962))+(((-1.0)*r02*x1968))+((r00*x1966))+(((-1.0)*gconst82*r01*x1965)));
evalcond[5]=((((-1.0)*sj0*sj1*x1962))+((r10*x1966))+(((-1.0)*x1961*x1965))+(((-1.0)*r12*x1968))+(((-1.0)*x1963*x1964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1969=((1.0)*gconst83);
CheckValue<IkReal> x1970 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1969))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1970.valid){
continue;
}
CheckValue<IkReal> x1971=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1969))+(((-1.0)*gconst82*r00)))),-1);
if(!x1971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1970.value)+(((1.5707963267949)*(x1971.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1972=IKsin(j4);
IkReal x1973=IKcos(j4);
IkReal x1974=(gconst82*r11);
IkReal x1975=((1.0)*cj2);
IkReal x1976=((1.0)*sj0);
IkReal x1977=(cj1*sj2);
IkReal x1978=((1.0)*x1973);
IkReal x1979=(gconst83*x1973);
IkReal x1980=(gconst82*x1972);
IkReal x1981=((1.0)*x1972);
evalcond[0]=((((-1.0)*r22*x1978))+((r21*x1980))+(((-1.0)*gconst83*r20*x1981)));
evalcond[1]=(cj0+((x1972*x1974))+(((-1.0)*gconst83*r10*x1981))+(((-1.0)*r12*x1978)));
evalcond[2]=((((-1.0)*gconst83*r00*x1981))+(((-1.0)*r02*x1978))+(((-1.0)*x1976))+((r01*x1980)));
evalcond[3]=(((r20*x1979))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1978))+(((-1.0)*cj1*x1975))+(((-1.0)*r22*x1981)));
evalcond[4]=((((-1.0)*cj0*x1977))+(((-1.0)*cj0*sj1*x1975))+(((-1.0)*r02*x1981))+((r00*x1979))+(((-1.0)*gconst82*r01*x1978)));
evalcond[5]=((((-1.0)*x1976*x1977))+(((-1.0)*sj0*sj1*x1975))+((r10*x1979))+(((-1.0)*x1974*x1978))+(((-1.0)*r12*x1981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1982=((-1.0)*r10);
IkReal x1984 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1984)==0){
continue;
}
IkReal x1983=pow(x1984,-0.5);
CheckValue<IkReal> x1985 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1982),IKFAST_ATAN2_MAGTHRESH);
if(!x1985.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1985.value));
IkReal gconst85=(r11*x1983);
IkReal gconst86=(x1982*x1983);
CheckValue<IkReal> x1986 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1986.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1986.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1987=((-1.0)*r10);
IkReal x1988=x1983;
CheckValue<IkReal> x1990 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1987),IKFAST_ATAN2_MAGTHRESH);
if(!x1990.valid){
continue;
}
IkReal x1989=((-1.0)*(x1990.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1989;
IkReal gconst84=x1989;
IkReal gconst85=(r11*x1988);
IkReal gconst86=(x1987*x1988);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1991=((1.0)*sj0);
IkReal x1992=((1.0)*gconst85);
CheckValue<IkReal> x1993=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1992)))),-1);
if(!x1993.valid){
continue;
}
CheckValue<IkReal> x1994 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1991)))),IkReal((((cj0*gconst86*r00))+((gconst86*r10*sj0))+(((-1.0)*cj0*r01*x1992))+(((-1.0)*gconst85*r11*x1991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1993.value)))+(x1994.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1995=IKsin(j4);
IkReal x1996=IKcos(j4);
IkReal x1997=(gconst85*r21);
IkReal x1998=(gconst86*r00);
IkReal x1999=(gconst86*r10);
IkReal x2000=((1.0)*cj2);
IkReal x2001=(gconst85*r11);
IkReal x2002=(gconst85*r01);
IkReal x2003=((1.0)*sj0);
IkReal x2004=(gconst86*r20);
IkReal x2005=(cj1*sj2);
IkReal x2006=((1.0)*x1996);
IkReal x2007=((1.0)*x1995);
evalcond[0]=((((-1.0)*r22*x2006))+(((-1.0)*x2004*x2007))+((x1995*x1997)));
evalcond[1]=(cj0+(((-1.0)*r12*x2006))+((x1995*x2001))+(((-1.0)*x1999*x2007)));
evalcond[2]=((((-1.0)*x1998*x2007))+(((-1.0)*r02*x2006))+(((-1.0)*x2003))+((x1995*x2002)));
evalcond[3]=((((-1.0)*r22*x2007))+((sj1*sj2))+(((-1.0)*cj1*x2000))+(((-1.0)*x1997*x2006))+((x1996*x2004)));
evalcond[4]=(((x1996*x1998))+(((-1.0)*x2002*x2006))+(((-1.0)*r02*x2007))+(((-1.0)*cj0*x2005))+(((-1.0)*cj0*sj1*x2000)));
evalcond[5]=(((x1996*x1999))+(((-1.0)*x2003*x2005))+(((-1.0)*r12*x2007))+(((-1.0)*sj0*sj1*x2000))+(((-1.0)*x2001*x2006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2008=((1.0)*gconst86);
CheckValue<IkReal> x2009 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x2008)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2009.valid){
continue;
}
CheckValue<IkReal> x2010=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2008))+(((-1.0)*gconst85*r00)))),-1);
if(!x2010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2009.value)+(((1.5707963267949)*(x2010.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2011=IKsin(j4);
IkReal x2012=IKcos(j4);
IkReal x2013=(gconst85*r21);
IkReal x2014=(gconst86*r00);
IkReal x2015=(gconst86*r10);
IkReal x2016=((1.0)*cj2);
IkReal x2017=(gconst85*r11);
IkReal x2018=(gconst85*r01);
IkReal x2019=((1.0)*sj0);
IkReal x2020=(gconst86*r20);
IkReal x2021=(cj1*sj2);
IkReal x2022=((1.0)*x2012);
IkReal x2023=((1.0)*x2011);
evalcond[0]=((((-1.0)*r22*x2022))+((x2011*x2013))+(((-1.0)*x2020*x2023)));
evalcond[1]=(cj0+(((-1.0)*r12*x2022))+((x2011*x2017))+(((-1.0)*x2015*x2023)));
evalcond[2]=((((-1.0)*x2019))+(((-1.0)*r02*x2022))+((x2011*x2018))+(((-1.0)*x2014*x2023)));
evalcond[3]=((((-1.0)*r22*x2023))+((sj1*sj2))+(((-1.0)*x2013*x2022))+((x2012*x2020))+(((-1.0)*cj1*x2016)));
evalcond[4]=((((-1.0)*cj0*sj1*x2016))+(((-1.0)*r02*x2023))+(((-1.0)*cj0*x2021))+((x2012*x2014))+(((-1.0)*x2018*x2022)));
evalcond[5]=((((-1.0)*r12*x2023))+(((-1.0)*x2017*x2022))+(((-1.0)*x2019*x2021))+((x2012*x2015))+(((-1.0)*sj0*sj1*x2016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2024=((-1.0)*r11);
IkReal x2026 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2026)==0){
continue;
}
IkReal x2025=pow(x2026,-0.5);
CheckValue<IkReal> x2027 = IKatan2WithCheck(IkReal(x2024),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2027.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2027.value))));
IkReal gconst88=(x2024*x2025);
IkReal gconst89=((1.0)*r10*x2025);
CheckValue<IkReal> x2028 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2028.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2028.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2029=((-1.0)*r11);
CheckValue<IkReal> x2032 = IKatan2WithCheck(IkReal(x2029),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2032.valid){
continue;
}
IkReal x2030=((1.0)*(x2032.value));
IkReal x2031=x2025;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2030)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2030)));
IkReal gconst88=(x2029*x2031);
IkReal gconst89=((1.0)*r10*x2031);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2033=((-1.0)*r11);
CheckValue<IkReal> x2036 = IKatan2WithCheck(IkReal(x2033),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2036.valid){
continue;
}
IkReal x2034=((1.0)*(x2036.value));
IkReal x2035=x2025;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2034)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2034)));
IkReal gconst88=(x2033*x2035);
IkReal gconst89=((1.0)*r10*x2035);
IkReal x2037=r12*r12;
IkReal x2038=((1.0)*sj0);
IkReal x2039=(cj0*r02);
IkReal x2040=x2025;
j4eval[0]=((IKabs(((((-1.0)*r12*x2038))+(((-1.0)*x2039)))))+(IKabs((((sj0*x2037*x2040))+((r12*x2039*x2040))+(((-1.0)*x2038*x2040))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2041=((-1.0)*r11);
CheckValue<IkReal> x2044 = IKatan2WithCheck(IkReal(x2041),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2044.valid){
continue;
}
IkReal x2042=((1.0)*(x2044.value));
IkReal x2043=x2025;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2042)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2042)));
IkReal gconst88=(x2041*x2043);
IkReal gconst89=((1.0)*r10*x2043);
IkReal x2045=r12*r12;
IkReal x2046=(cj1*cj2*r22);
IkReal x2047=(r22*sj1*sj2);
CheckValue<IkReal> x2051=IKPowWithIntegerCheck(((-1.0)+x2045),-1);
if(!x2051.valid){
continue;
}
IkReal x2048=x2051.value;
if((((1.0)+(((-1.0)*x2045)))) < -0.00001)
continue;
IkReal x2049=IKsqrt(((1.0)+(((-1.0)*x2045))));
IkReal x2050=(r12*x2048*x2049);
j4eval[0]=((IKabs(((((-1.0)*x2047*x2050))+((x2046*x2050)))))+(IKabs((x2047+(((-1.0)*x2046))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2052=(cj1*cj2);
IkReal x2053=(gconst89*r20);
IkReal x2054=(gconst88*r21);
IkReal x2055=(sj1*sj2);
CheckValue<IkReal> x2056=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2053*x2054))+(x2054*x2054)+(r22*r22)+(x2053*x2053))),-1);
if(!x2056.valid){
continue;
}
CheckValue<IkReal> x2057 = IKatan2WithCheck(IkReal((((r22*x2055))+(((-1.0)*r22*x2052)))),IkReal(((((-1.0)*x2053*x2055))+((x2052*x2053))+((x2054*x2055))+(((-1.0)*x2052*x2054)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2056.value)))+(x2057.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2058=IKsin(j4);
IkReal x2059=IKcos(j4);
IkReal x2060=((1.0)*sj0);
IkReal x2061=((1.0)*cj2);
IkReal x2062=(gconst89*r20);
IkReal x2063=(gconst89*r10);
IkReal x2064=(gconst89*r00);
IkReal x2065=(cj1*sj2);
IkReal x2066=((1.0)*x2059);
IkReal x2067=((1.0)*x2058);
IkReal x2068=(gconst88*x2058);
evalcond[0]=(((r21*x2068))+(((-1.0)*r22*x2066))+(((-1.0)*x2062*x2067)));
evalcond[1]=((((-1.0)*r12*x2066))+cj0+(((-1.0)*x2063*x2067))+((r11*x2068)));
evalcond[2]=((((-1.0)*r02*x2066))+(((-1.0)*x2064*x2067))+(((-1.0)*x2060))+((r01*x2068)));
evalcond[3]=((((-1.0)*gconst88*r21*x2066))+(((-1.0)*r22*x2067))+((x2059*x2062))+((sj1*sj2))+(((-1.0)*cj1*x2061)));
evalcond[4]=((((-1.0)*cj0*x2065))+(((-1.0)*r02*x2067))+((x2059*x2064))+(((-1.0)*cj0*sj1*x2061))+(((-1.0)*gconst88*r01*x2066)));
evalcond[5]=((((-1.0)*r12*x2067))+((x2059*x2063))+(((-1.0)*gconst88*r11*x2066))+(((-1.0)*cj2*sj1*x2060))+(((-1.0)*x2060*x2065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2069=((1.0)*sj0);
IkReal x2070=((1.0)*cj0);
CheckValue<IkReal> x2071 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2069))+(((-1.0)*r02*x2070)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r11*x2069))+(((-1.0)*gconst88*r01*x2070))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2071.valid){
continue;
}
CheckValue<IkReal> x2072=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2071.value)+(((1.5707963267949)*(x2072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2073=IKsin(j4);
IkReal x2074=IKcos(j4);
IkReal x2075=((1.0)*sj0);
IkReal x2076=((1.0)*cj2);
IkReal x2077=(gconst89*r20);
IkReal x2078=(gconst89*r10);
IkReal x2079=(gconst89*r00);
IkReal x2080=(cj1*sj2);
IkReal x2081=((1.0)*x2074);
IkReal x2082=((1.0)*x2073);
IkReal x2083=(gconst88*x2073);
evalcond[0]=((((-1.0)*r22*x2081))+(((-1.0)*x2077*x2082))+((r21*x2083)));
evalcond[1]=(cj0+(((-1.0)*x2078*x2082))+(((-1.0)*r12*x2081))+((r11*x2083)));
evalcond[2]=((((-1.0)*r02*x2081))+(((-1.0)*x2075))+((r01*x2083))+(((-1.0)*x2079*x2082)));
evalcond[3]=((((-1.0)*r22*x2082))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2081))+((x2074*x2077))+(((-1.0)*cj1*x2076)));
evalcond[4]=((((-1.0)*r02*x2082))+(((-1.0)*gconst88*r01*x2081))+(((-1.0)*cj0*x2080))+(((-1.0)*cj0*sj1*x2076))+((x2074*x2079)));
evalcond[5]=((((-1.0)*gconst88*r11*x2081))+(((-1.0)*r12*x2082))+((x2074*x2078))+(((-1.0)*x2075*x2080))+(((-1.0)*cj2*sj1*x2075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2084=((1.0)*gconst89);
CheckValue<IkReal> x2085=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2084))+(((-1.0)*gconst88*r00)))),-1);
if(!x2085.valid){
continue;
}
CheckValue<IkReal> x2086 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2084))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2085.value)))+(x2086.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2087=IKsin(j4);
IkReal x2088=IKcos(j4);
IkReal x2089=((1.0)*sj0);
IkReal x2090=((1.0)*cj2);
IkReal x2091=(gconst89*r20);
IkReal x2092=(gconst89*r10);
IkReal x2093=(gconst89*r00);
IkReal x2094=(cj1*sj2);
IkReal x2095=((1.0)*x2088);
IkReal x2096=((1.0)*x2087);
IkReal x2097=(gconst88*x2087);
evalcond[0]=((((-1.0)*x2091*x2096))+((r21*x2097))+(((-1.0)*r22*x2095)));
evalcond[1]=(cj0+(((-1.0)*x2092*x2096))+(((-1.0)*r12*x2095))+((r11*x2097)));
evalcond[2]=((((-1.0)*x2089))+((r01*x2097))+(((-1.0)*x2093*x2096))+(((-1.0)*r02*x2095)));
evalcond[3]=((((-1.0)*gconst88*r21*x2095))+((x2088*x2091))+((sj1*sj2))+(((-1.0)*cj1*x2090))+(((-1.0)*r22*x2096)));
evalcond[4]=((((-1.0)*gconst88*r01*x2095))+((x2088*x2093))+(((-1.0)*cj0*sj1*x2090))+(((-1.0)*r02*x2096))+(((-1.0)*cj0*x2094)));
evalcond[5]=((((-1.0)*gconst88*r11*x2095))+((x2088*x2092))+(((-1.0)*cj2*sj1*x2089))+(((-1.0)*x2089*x2094))+(((-1.0)*r12*x2096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2098=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2098;
j4eval[1]=IKsign(x2098);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2099=((1.0)*cj5);
IkReal x2100=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2099)));
j4eval[0]=x2100;
j4eval[1]=((IKabs(((((-1.0)*r20*x2099))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2100);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2101=cj5*cj5;
IkReal x2102=r11*r11;
IkReal x2103=(r11*sj5);
IkReal x2104=(cj5*r10);
IkReal x2105=((r12*r12)+x2102+((x2101*(r10*r10)))+(((-2.0)*x2103*x2104))+(((-1.0)*x2101*x2102)));
j4eval[0]=x2105;
j4eval[1]=IKsign(x2105);
j4eval[2]=((IKabs(r12))+(IKabs((x2104+(((-1.0)*x2103))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2106=cj5*cj5;
IkReal x2107=r11*r11;
IkReal x2108=(cj5*r10);
IkReal x2109=(r11*sj5);
CheckValue<IkReal> x2110=IKPowWithIntegerCheck(IKsign((((x2106*(r10*r10)))+(r12*r12)+(((-2.0)*x2108*x2109))+(((-1.0)*x2106*x2107))+x2107)),-1);
if(!x2110.valid){
continue;
}
CheckValue<IkReal> x2111 = IKatan2WithCheck(IkReal((x2108+(((-1.0)*x2109)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2110.value)))+(x2111.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2112=IKsin(j4);
IkReal x2113=IKcos(j4);
IkReal x2114=(cj5*r10);
IkReal x2115=(r01*sj5);
IkReal x2116=((1.0)*cj2);
IkReal x2117=(cj5*r00);
IkReal x2118=(cj5*r20);
IkReal x2119=((1.0)*x2113);
IkReal x2120=((1.0)*x2112);
IkReal x2121=(sj5*x2112);
evalcond[0]=((((-1.0)*x2118*x2120))+((r21*x2121))+(((-1.0)*r22*x2119)));
evalcond[1]=((((-1.0)*x2117*x2120))+(((-1.0)*r02*x2119))+((x2112*x2115)));
evalcond[2]=((((-1.0)*r11*sj5*x2119))+(((-1.0)*r12*x2120))+((x2113*x2114)));
evalcond[3]=((1.0)+((r11*x2121))+(((-1.0)*x2114*x2120))+(((-1.0)*r12*x2119)));
evalcond[4]=((((-1.0)*r21*sj5*x2119))+(((-1.0)*r22*x2120))+((sj1*sj2))+(((-1.0)*cj1*x2116))+((x2113*x2118)));
evalcond[5]=((((-1.0)*sj1*x2116))+(((-1.0)*r02*x2120))+(((-1.0)*cj1*sj2))+((x2113*x2117))+(((-1.0)*x2115*x2119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2122=((1.0)*cj5);
CheckValue<IkReal> x2123=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2122))+(((-1.0)*r00*sj5)))),-1);
if(!x2123.valid){
continue;
}
CheckValue<IkReal> x2124 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2122)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2123.value)))+(x2124.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2125=IKsin(j4);
IkReal x2126=IKcos(j4);
IkReal x2127=(cj5*r10);
IkReal x2128=(r01*sj5);
IkReal x2129=((1.0)*cj2);
IkReal x2130=(cj5*r00);
IkReal x2131=(cj5*r20);
IkReal x2132=((1.0)*x2126);
IkReal x2133=((1.0)*x2125);
IkReal x2134=(sj5*x2125);
evalcond[0]=((((-1.0)*r22*x2132))+((r21*x2134))+(((-1.0)*x2131*x2133)));
evalcond[1]=(((x2125*x2128))+(((-1.0)*x2130*x2133))+(((-1.0)*r02*x2132)));
evalcond[2]=((((-1.0)*r12*x2133))+(((-1.0)*r11*sj5*x2132))+((x2126*x2127)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2132))+((r11*x2134))+(((-1.0)*x2127*x2133)));
evalcond[4]=((((-1.0)*r22*x2133))+((sj1*sj2))+(((-1.0)*cj1*x2129))+(((-1.0)*r21*sj5*x2132))+((x2126*x2131)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x2126*x2130))+(((-1.0)*x2128*x2132))+(((-1.0)*sj1*x2129))+(((-1.0)*r02*x2133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2135=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2135.valid){
continue;
}
CheckValue<IkReal> x2136 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2135.value)))+(x2136.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2137=IKsin(j4);
IkReal x2138=IKcos(j4);
IkReal x2139=(cj5*r10);
IkReal x2140=(r01*sj5);
IkReal x2141=((1.0)*cj2);
IkReal x2142=(cj5*r00);
IkReal x2143=(cj5*r20);
IkReal x2144=((1.0)*x2138);
IkReal x2145=((1.0)*x2137);
IkReal x2146=(sj5*x2137);
evalcond[0]=((((-1.0)*x2143*x2145))+(((-1.0)*r22*x2144))+((r21*x2146)));
evalcond[1]=((((-1.0)*x2142*x2145))+(((-1.0)*r02*x2144))+((x2137*x2140)));
evalcond[2]=((((-1.0)*r11*sj5*x2144))+(((-1.0)*r12*x2145))+((x2138*x2139)));
evalcond[3]=((1.0)+((r11*x2146))+(((-1.0)*r12*x2144))+(((-1.0)*x2139*x2145)));
evalcond[4]=(((x2138*x2143))+((sj1*sj2))+(((-1.0)*r22*x2145))+(((-1.0)*cj1*x2141))+(((-1.0)*r21*sj5*x2144)));
evalcond[5]=(((x2138*x2142))+(((-1.0)*r02*x2145))+(((-1.0)*sj1*x2141))+(((-1.0)*cj1*sj2))+(((-1.0)*x2140*x2144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2147=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2147;
j4eval[1]=IKsign(x2147);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2148=((1.0)*cj5);
IkReal x2149=((((-1.0)*r21*x2148))+(((-1.0)*r20*sj5)));
j4eval[0]=x2149;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x2148)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2149);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2150=cj5*cj5;
IkReal x2151=r11*r11;
IkReal x2152=(cj5*r10);
IkReal x2153=(r11*sj5);
IkReal x2154=((((-1.0)*x2150*(r10*r10)))+((x2150*x2151))+(((2.0)*x2152*x2153))+(((-1.0)*(r12*r12)))+(((-1.0)*x2151)));
j4eval[0]=x2154;
j4eval[1]=((IKabs(r12))+(IKabs((x2152+(((-1.0)*x2153))))));
j4eval[2]=IKsign(x2154);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2155=cj5*cj5;
IkReal x2156=r11*r11;
IkReal x2157=(cj5*r10);
IkReal x2158=(r11*sj5);
CheckValue<IkReal> x2159 = IKatan2WithCheck(IkReal((x2157+(((-1.0)*x2158)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2159.valid){
continue;
}
CheckValue<IkReal> x2160=IKPowWithIntegerCheck(IKsign((((x2155*x2156))+(((-1.0)*(r12*r12)))+(((-1.0)*x2155*(r10*r10)))+(((2.0)*x2157*x2158))+(((-1.0)*x2156)))),-1);
if(!x2160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2159.value)+(((1.5707963267949)*(x2160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2161=IKsin(j4);
IkReal x2162=IKcos(j4);
IkReal x2163=(cj5*r10);
IkReal x2164=(r01*sj5);
IkReal x2165=(cj5*r00);
IkReal x2166=(cj5*r20);
IkReal x2167=((1.0)*x2162);
IkReal x2168=((1.0)*x2161);
IkReal x2169=(sj5*x2161);
evalcond[0]=(((r21*x2169))+(((-1.0)*x2166*x2168))+(((-1.0)*r22*x2167)));
evalcond[1]=(((x2161*x2164))+(((-1.0)*x2165*x2168))+(((-1.0)*r02*x2167)));
evalcond[2]=((((-1.0)*r11*sj5*x2167))+((x2162*x2163))+(((-1.0)*r12*x2168)));
evalcond[3]=((-1.0)+(((-1.0)*x2163*x2168))+(((-1.0)*r12*x2167))+((r11*x2169)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2164*x2167))+((x2162*x2165))+(((-1.0)*r02*x2168)));
evalcond[5]=((((-1.0)*r21*sj5*x2167))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2162*x2166))+(((-1.0)*r22*x2168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2170=((1.0)*cj5);
CheckValue<IkReal> x2171 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2170)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2171.valid){
continue;
}
CheckValue<IkReal> x2172=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2170))+(((-1.0)*r20*sj5)))),-1);
if(!x2172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2171.value)+(((1.5707963267949)*(x2172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2173=IKsin(j4);
IkReal x2174=IKcos(j4);
IkReal x2175=(cj5*r10);
IkReal x2176=(r01*sj5);
IkReal x2177=(cj5*r00);
IkReal x2178=(cj5*r20);
IkReal x2179=((1.0)*x2174);
IkReal x2180=((1.0)*x2173);
IkReal x2181=(sj5*x2173);
evalcond[0]=(((r21*x2181))+(((-1.0)*x2178*x2180))+(((-1.0)*r22*x2179)));
evalcond[1]=(((x2173*x2176))+(((-1.0)*r02*x2179))+(((-1.0)*x2177*x2180)));
evalcond[2]=(((x2174*x2175))+(((-1.0)*r11*sj5*x2179))+(((-1.0)*r12*x2180)));
evalcond[3]=((-1.0)+(((-1.0)*x2175*x2180))+((r11*x2181))+(((-1.0)*r12*x2179)));
evalcond[4]=((((-1.0)*x2176*x2179))+((cj2*sj1))+((cj1*sj2))+((x2174*x2177))+(((-1.0)*r02*x2180)));
evalcond[5]=((((-1.0)*r21*sj5*x2179))+((x2174*x2178))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2182 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2182.valid){
continue;
}
CheckValue<IkReal> x2183=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2182.value)+(((1.5707963267949)*(x2183.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2184=IKsin(j4);
IkReal x2185=IKcos(j4);
IkReal x2186=(cj5*r10);
IkReal x2187=(r01*sj5);
IkReal x2188=(cj5*r00);
IkReal x2189=(cj5*r20);
IkReal x2190=((1.0)*x2185);
IkReal x2191=((1.0)*x2184);
IkReal x2192=(sj5*x2184);
evalcond[0]=((((-1.0)*x2189*x2191))+((r21*x2192))+(((-1.0)*r22*x2190)));
evalcond[1]=((((-1.0)*x2188*x2191))+(((-1.0)*r02*x2190))+((x2184*x2187)));
evalcond[2]=((((-1.0)*r12*x2191))+(((-1.0)*r11*sj5*x2190))+((x2185*x2186)));
evalcond[3]=((-1.0)+(((-1.0)*x2186*x2191))+((r11*x2192))+(((-1.0)*r12*x2190)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2187*x2190))+((cj1*sj2))+(((-1.0)*r02*x2191))+((x2185*x2188)));
evalcond[5]=((((-1.0)*r21*sj5*x2190))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2191))+((x2185*x2189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2193=((-1.0)*r00);
IkReal x2195 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2195)==0){
continue;
}
IkReal x2194=pow(x2195,-0.5);
CheckValue<IkReal> x2196 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2193),IKFAST_ATAN2_MAGTHRESH);
if(!x2196.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2196.value));
IkReal gconst91=(r01*x2194);
IkReal gconst92=(x2193*x2194);
CheckValue<IkReal> x2197 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2197.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2197.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2198=((-1.0)*r00);
IkReal x2199=x2194;
CheckValue<IkReal> x2201 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2198),IKFAST_ATAN2_MAGTHRESH);
if(!x2201.valid){
continue;
}
IkReal x2200=((-1.0)*(x2201.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2200;
IkReal gconst90=x2200;
IkReal gconst91=(r01*x2199);
IkReal gconst92=(x2198*x2199);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2202=((1.0)*sj0);
IkReal x2203=((1.0)*cj0);
CheckValue<IkReal> x2204 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2202))+(((-1.0)*r02*x2203)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r01*x2203))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2204.valid){
continue;
}
CheckValue<IkReal> x2205=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2204.value)+(((1.5707963267949)*(x2205.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2206=IKsin(j4);
IkReal x2207=IKcos(j4);
IkReal x2208=((1.0)*cj2);
IkReal x2209=(gconst92*r00);
IkReal x2210=(gconst92*r20);
IkReal x2211=((1.0)*sj0);
IkReal x2212=(gconst92*r10);
IkReal x2213=(cj1*sj2);
IkReal x2214=((1.0)*x2207);
IkReal x2215=(gconst91*x2206);
IkReal x2216=((1.0)*x2206);
evalcond[0]=((((-1.0)*x2210*x2216))+(((-1.0)*r22*x2214))+((r21*x2215)));
evalcond[1]=(cj0+(((-1.0)*r12*x2214))+((r11*x2215))+(((-1.0)*x2212*x2216)));
evalcond[2]=(((r01*x2215))+(((-1.0)*x2211))+(((-1.0)*x2209*x2216))+(((-1.0)*r02*x2214)));
evalcond[3]=((((-1.0)*cj1*x2208))+(((-1.0)*r22*x2216))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2214))+((x2207*x2210)));
evalcond[4]=((((-1.0)*gconst91*r01*x2214))+(((-1.0)*cj0*sj1*x2208))+((x2207*x2209))+(((-1.0)*r02*x2216))+(((-1.0)*cj0*x2213)));
evalcond[5]=((((-1.0)*r12*x2216))+((x2207*x2212))+(((-1.0)*gconst91*r11*x2214))+(((-1.0)*x2211*x2213))+(((-1.0)*sj0*sj1*x2208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2217=((1.0)*gconst92);
CheckValue<IkReal> x2218 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2217))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2218.valid){
continue;
}
CheckValue<IkReal> x2219=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2217)))),-1);
if(!x2219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2218.value)+(((1.5707963267949)*(x2219.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2220=IKsin(j4);
IkReal x2221=IKcos(j4);
IkReal x2222=((1.0)*cj2);
IkReal x2223=(gconst92*r00);
IkReal x2224=(gconst92*r20);
IkReal x2225=((1.0)*sj0);
IkReal x2226=(gconst92*r10);
IkReal x2227=(cj1*sj2);
IkReal x2228=((1.0)*x2221);
IkReal x2229=(gconst91*x2220);
IkReal x2230=((1.0)*x2220);
evalcond[0]=((((-1.0)*x2224*x2230))+((r21*x2229))+(((-1.0)*r22*x2228)));
evalcond[1]=((((-1.0)*x2226*x2230))+cj0+(((-1.0)*r12*x2228))+((r11*x2229)));
evalcond[2]=((((-1.0)*x2223*x2230))+(((-1.0)*r02*x2228))+(((-1.0)*x2225))+((r01*x2229)));
evalcond[3]=((((-1.0)*gconst91*r21*x2228))+((sj1*sj2))+(((-1.0)*r22*x2230))+((x2221*x2224))+(((-1.0)*cj1*x2222)));
evalcond[4]=((((-1.0)*r02*x2230))+(((-1.0)*gconst91*r01*x2228))+(((-1.0)*cj0*x2227))+(((-1.0)*cj0*sj1*x2222))+((x2221*x2223)));
evalcond[5]=((((-1.0)*x2225*x2227))+(((-1.0)*sj0*sj1*x2222))+(((-1.0)*gconst91*r11*x2228))+(((-1.0)*r12*x2230))+((x2221*x2226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2231=((-1.0)*r01);
IkReal x2233 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2233)==0){
continue;
}
IkReal x2232=pow(x2233,-0.5);
CheckValue<IkReal> x2234 = IKatan2WithCheck(IkReal(x2231),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2234.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2234.value))));
IkReal gconst94=(x2231*x2232);
IkReal gconst95=((1.0)*r00*x2232);
CheckValue<IkReal> x2235 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2235.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2235.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2236=((-1.0)*r01);
CheckValue<IkReal> x2239 = IKatan2WithCheck(IkReal(x2236),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2239.valid){
continue;
}
IkReal x2237=((1.0)*(x2239.value));
IkReal x2238=x2232;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2237)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2237)));
IkReal gconst94=(x2236*x2238);
IkReal gconst95=((1.0)*r00*x2238);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2240=((-1.0)*r01);
CheckValue<IkReal> x2243 = IKatan2WithCheck(IkReal(x2240),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2243.valid){
continue;
}
IkReal x2241=((1.0)*(x2243.value));
IkReal x2242=x2232;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2241)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2241)));
IkReal gconst94=(x2240*x2242);
IkReal gconst95=((1.0)*r00*x2242);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2244=((-1.0)*r01);
CheckValue<IkReal> x2247 = IKatan2WithCheck(IkReal(x2244),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2247.valid){
continue;
}
IkReal x2245=((1.0)*(x2247.value));
IkReal x2246=x2232;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2245)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2245)));
IkReal gconst94=(x2244*x2246);
IkReal gconst95=((1.0)*r00*x2246);
IkReal x2248=r02*r02;
IkReal x2249=(r12*sj0);
IkReal x2250=((1.0)*cj0);
IkReal x2251=x2232;
j4eval[0]=((IKabs(((((-1.0)*x2249))+(((-1.0)*r02*x2250)))))+(IKabs((((r02*x2249*x2251))+((cj0*x2248*x2251))+(((-1.0)*x2250*x2251))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2252=((1.0)*sj0);
IkReal x2253=((1.0)*cj0);
CheckValue<IkReal> x2254=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2254.valid){
continue;
}
CheckValue<IkReal> x2255 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2253))+(((-1.0)*r12*x2252)))),IkReal(((((-1.0)*gconst94*r11*x2252))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2253))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2254.value)))+(x2255.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2256=IKsin(j4);
IkReal x2257=IKcos(j4);
IkReal x2258=(gconst94*r11);
IkReal x2259=((1.0)*cj2);
IkReal x2260=(gconst94*r21);
IkReal x2261=((1.0)*sj0);
IkReal x2262=(gconst94*r01);
IkReal x2263=(cj1*sj2);
IkReal x2264=((1.0)*x2257);
IkReal x2265=(gconst95*x2257);
IkReal x2266=((1.0)*x2256);
IkReal x2267=(gconst95*x2266);
evalcond[0]=(((x2256*x2260))+(((-1.0)*r20*x2267))+(((-1.0)*r22*x2264)));
evalcond[1]=(cj0+((x2256*x2258))+(((-1.0)*r10*x2267))+(((-1.0)*r12*x2264)));
evalcond[2]=(((x2256*x2262))+(((-1.0)*r00*x2267))+(((-1.0)*r02*x2264))+(((-1.0)*x2261)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2260*x2264))+(((-1.0)*r22*x2266))+((r20*x2265))+(((-1.0)*cj1*x2259)));
evalcond[4]=(((r00*x2265))+(((-1.0)*cj0*sj1*x2259))+(((-1.0)*r02*x2266))+(((-1.0)*cj0*x2263))+(((-1.0)*x2262*x2264)));
evalcond[5]=((((-1.0)*sj0*sj1*x2259))+(((-1.0)*x2258*x2264))+((r10*x2265))+(((-1.0)*x2261*x2263))+(((-1.0)*r12*x2266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2268=((1.0)*gconst95);
CheckValue<IkReal> x2269=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2268)))),-1);
if(!x2269.valid){
continue;
}
CheckValue<IkReal> x2270 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2268)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2269.value)))+(x2270.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2271=IKsin(j4);
IkReal x2272=IKcos(j4);
IkReal x2273=(gconst94*r11);
IkReal x2274=((1.0)*cj2);
IkReal x2275=(gconst94*r21);
IkReal x2276=((1.0)*sj0);
IkReal x2277=(gconst94*r01);
IkReal x2278=(cj1*sj2);
IkReal x2279=((1.0)*x2272);
IkReal x2280=(gconst95*x2272);
IkReal x2281=((1.0)*x2271);
IkReal x2282=(gconst95*x2281);
evalcond[0]=((((-1.0)*r22*x2279))+(((-1.0)*r20*x2282))+((x2271*x2275)));
evalcond[1]=(cj0+(((-1.0)*r10*x2282))+(((-1.0)*r12*x2279))+((x2271*x2273)));
evalcond[2]=((((-1.0)*r02*x2279))+(((-1.0)*x2276))+(((-1.0)*r00*x2282))+((x2271*x2277)));
evalcond[3]=((((-1.0)*x2275*x2279))+(((-1.0)*cj1*x2274))+((r20*x2280))+((sj1*sj2))+(((-1.0)*r22*x2281)));
evalcond[4]=((((-1.0)*r02*x2281))+(((-1.0)*cj0*sj1*x2274))+((r00*x2280))+(((-1.0)*cj0*x2278))+(((-1.0)*x2277*x2279)));
evalcond[5]=(((r10*x2280))+(((-1.0)*r12*x2281))+(((-1.0)*x2273*x2279))+(((-1.0)*sj0*sj1*x2274))+(((-1.0)*x2276*x2278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2283=((1.0)*gconst95);
CheckValue<IkReal> x2284=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2283)))),-1);
if(!x2284.valid){
continue;
}
CheckValue<IkReal> x2285 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r21))+(((-1.0)*cj0*r20*x2283)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2284.value)))+(x2285.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2286=IKsin(j4);
IkReal x2287=IKcos(j4);
IkReal x2288=(gconst94*r11);
IkReal x2289=((1.0)*cj2);
IkReal x2290=(gconst94*r21);
IkReal x2291=((1.0)*sj0);
IkReal x2292=(gconst94*r01);
IkReal x2293=(cj1*sj2);
IkReal x2294=((1.0)*x2287);
IkReal x2295=(gconst95*x2287);
IkReal x2296=((1.0)*x2286);
IkReal x2297=(gconst95*x2296);
evalcond[0]=(((x2286*x2290))+(((-1.0)*r22*x2294))+(((-1.0)*r20*x2297)));
evalcond[1]=(cj0+(((-1.0)*r12*x2294))+((x2286*x2288))+(((-1.0)*r10*x2297)));
evalcond[2]=((((-1.0)*r00*x2297))+(((-1.0)*r02*x2294))+((x2286*x2292))+(((-1.0)*x2291)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2289))+((r20*x2295))+(((-1.0)*x2290*x2294))+(((-1.0)*r22*x2296)));
evalcond[4]=((((-1.0)*r02*x2296))+(((-1.0)*x2292*x2294))+(((-1.0)*cj0*sj1*x2289))+(((-1.0)*cj0*x2293))+((r00*x2295)));
evalcond[5]=(((r10*x2295))+(((-1.0)*x2288*x2294))+(((-1.0)*r12*x2296))+(((-1.0)*x2291*x2293))+(((-1.0)*sj0*sj1*x2289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2298=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2298;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2298);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2299=((1.0)*cj5);
IkReal x2300=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2299)));
j4eval[0]=x2300;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2299))))));
j4eval[2]=IKsign(x2300);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2301=cj5*cj5;
IkReal x2302=r01*r01;
IkReal x2303=(r01*sj5);
IkReal x2304=(cj5*r00);
IkReal x2305=((((-1.0)*x2301*(r00*r00)))+(((2.0)*x2303*x2304))+(((-1.0)*x2302))+(((-1.0)*(r02*r02)))+((x2301*x2302)));
j4eval[0]=x2305;
j4eval[1]=IKsign(x2305);
j4eval[2]=((IKabs(((((-1.0)*x2303))+x2304)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2306=cj5*cj5;
IkReal x2307=r01*r01;
IkReal x2308=(r01*sj5);
IkReal x2309=(cj5*r00);
CheckValue<IkReal> x2310 = IKatan2WithCheck(IkReal(((((-1.0)*x2308))+x2309)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2310.valid){
continue;
}
CheckValue<IkReal> x2311=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2307))+((x2306*x2307))+(((-1.0)*x2306*(r00*r00)))+(((2.0)*x2308*x2309))+(((-1.0)*(r02*r02))))),-1);
if(!x2311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2310.value)+(((1.5707963267949)*(x2311.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2312=IKsin(j4);
IkReal x2313=IKcos(j4);
IkReal x2314=(cj5*r10);
IkReal x2315=(r01*sj5);
IkReal x2316=((1.0)*cj2);
IkReal x2317=(cj5*r00);
IkReal x2318=(cj5*r20);
IkReal x2319=((1.0)*x2313);
IkReal x2320=((1.0)*x2312);
IkReal x2321=(sj5*x2312);
evalcond[0]=((((-1.0)*r22*x2319))+(((-1.0)*x2318*x2320))+((r21*x2321)));
evalcond[1]=(((r11*x2321))+(((-1.0)*r12*x2319))+(((-1.0)*x2314*x2320)));
evalcond[2]=((((-1.0)*x2315*x2319))+(((-1.0)*r02*x2320))+((x2313*x2317)));
evalcond[3]=((-1.0)+((x2312*x2315))+(((-1.0)*x2317*x2320))+(((-1.0)*r02*x2319)));
evalcond[4]=((((-1.0)*r22*x2320))+((sj1*sj2))+(((-1.0)*cj1*x2316))+(((-1.0)*r21*sj5*x2319))+((x2313*x2318)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2319))+(((-1.0)*r12*x2320))+(((-1.0)*sj1*x2316))+((x2313*x2314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2322=((1.0)*cj5);
CheckValue<IkReal> x2323 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2323.valid){
continue;
}
CheckValue<IkReal> x2324=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2322)))),-1);
if(!x2324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2323.value)+(((1.5707963267949)*(x2324.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2325=IKsin(j4);
IkReal x2326=IKcos(j4);
IkReal x2327=(cj5*r10);
IkReal x2328=(r01*sj5);
IkReal x2329=((1.0)*cj2);
IkReal x2330=(cj5*r00);
IkReal x2331=(cj5*r20);
IkReal x2332=((1.0)*x2326);
IkReal x2333=((1.0)*x2325);
IkReal x2334=(sj5*x2325);
evalcond[0]=(((r21*x2334))+(((-1.0)*r22*x2332))+(((-1.0)*x2331*x2333)));
evalcond[1]=(((r11*x2334))+(((-1.0)*r12*x2332))+(((-1.0)*x2327*x2333)));
evalcond[2]=((((-1.0)*x2328*x2332))+(((-1.0)*r02*x2333))+((x2326*x2330)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2332))+((x2325*x2328))+(((-1.0)*x2330*x2333)));
evalcond[4]=((((-1.0)*r22*x2333))+((sj1*sj2))+(((-1.0)*cj1*x2329))+((x2326*x2331))+(((-1.0)*r21*sj5*x2332)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2332))+((x2326*x2327))+(((-1.0)*sj1*x2329))+(((-1.0)*r12*x2333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2335=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2335.valid){
continue;
}
CheckValue<IkReal> x2336 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2335.value)))+(x2336.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2337=IKsin(j4);
IkReal x2338=IKcos(j4);
IkReal x2339=(cj5*r10);
IkReal x2340=(r01*sj5);
IkReal x2341=((1.0)*cj2);
IkReal x2342=(cj5*r00);
IkReal x2343=(cj5*r20);
IkReal x2344=((1.0)*x2338);
IkReal x2345=((1.0)*x2337);
IkReal x2346=(sj5*x2337);
evalcond[0]=((((-1.0)*r22*x2344))+(((-1.0)*x2343*x2345))+((r21*x2346)));
evalcond[1]=((((-1.0)*x2339*x2345))+((r11*x2346))+(((-1.0)*r12*x2344)));
evalcond[2]=((((-1.0)*x2340*x2344))+((x2338*x2342))+(((-1.0)*r02*x2345)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2344))+((x2337*x2340))+(((-1.0)*x2342*x2345)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x2341))+((x2338*x2343))+(((-1.0)*r22*x2345))+(((-1.0)*r21*sj5*x2344)));
evalcond[5]=((((-1.0)*r11*sj5*x2344))+(((-1.0)*sj1*x2341))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2345))+((x2338*x2339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2347=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2347;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2347);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2348=((1.0)*cj5);
IkReal x2349=((((-1.0)*r21*x2348))+(((-1.0)*r20*sj5)));
j4eval[0]=x2349;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2348))))));
j4eval[2]=IKsign(x2349);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2350=cj5*cj5;
IkReal x2351=r01*r01;
IkReal x2352=(cj5*r00);
IkReal x2353=(r01*sj5);
IkReal x2354=(x2351+((x2350*(r00*r00)))+(r02*r02)+(((-2.0)*x2352*x2353))+(((-1.0)*x2350*x2351)));
j4eval[0]=x2354;
j4eval[1]=((IKabs((x2352+(((-1.0)*x2353)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2354);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2355=cj5*cj5;
IkReal x2356=r01*r01;
IkReal x2357=(r01*sj5);
IkReal x2358=(cj5*r00);
CheckValue<IkReal> x2359=IKPowWithIntegerCheck(IKsign((x2356+(((-1.0)*x2355*x2356))+((x2355*(r00*r00)))+(r02*r02)+(((-2.0)*x2357*x2358)))),-1);
if(!x2359.valid){
continue;
}
CheckValue<IkReal> x2360 = IKatan2WithCheck(IkReal((x2358+(((-1.0)*x2357)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2359.value)))+(x2360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2361=IKsin(j4);
IkReal x2362=IKcos(j4);
IkReal x2363=(cj5*r10);
IkReal x2364=(r01*sj5);
IkReal x2365=(cj5*r00);
IkReal x2366=(cj5*r20);
IkReal x2367=((1.0)*x2362);
IkReal x2368=((1.0)*x2361);
IkReal x2369=(sj5*x2361);
evalcond[0]=((((-1.0)*r22*x2367))+(((-1.0)*x2366*x2368))+((r21*x2369)));
evalcond[1]=(((r11*x2369))+(((-1.0)*r12*x2367))+(((-1.0)*x2363*x2368)));
evalcond[2]=((((-1.0)*x2364*x2367))+((x2362*x2365))+(((-1.0)*r02*x2368)));
evalcond[3]=((1.0)+((x2361*x2364))+(((-1.0)*x2365*x2368))+(((-1.0)*r02*x2367)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2367))+((cj1*sj2))+((x2362*x2363))+(((-1.0)*r12*x2368)));
evalcond[5]=((((-1.0)*r21*sj5*x2367))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2368))+((x2362*x2366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2370=((1.0)*cj5);
CheckValue<IkReal> x2371 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2370))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2371.valid){
continue;
}
CheckValue<IkReal> x2372=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2370))+(((-1.0)*r20*sj5)))),-1);
if(!x2372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2371.value)+(((1.5707963267949)*(x2372.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2373=IKsin(j4);
IkReal x2374=IKcos(j4);
IkReal x2375=(cj5*r10);
IkReal x2376=(r01*sj5);
IkReal x2377=(cj5*r00);
IkReal x2378=(cj5*r20);
IkReal x2379=((1.0)*x2374);
IkReal x2380=((1.0)*x2373);
IkReal x2381=(sj5*x2373);
evalcond[0]=((((-1.0)*x2378*x2380))+((r21*x2381))+(((-1.0)*r22*x2379)));
evalcond[1]=((((-1.0)*x2375*x2380))+(((-1.0)*r12*x2379))+((r11*x2381)));
evalcond[2]=((((-1.0)*r02*x2380))+(((-1.0)*x2376*x2379))+((x2374*x2377)));
evalcond[3]=((1.0)+((x2373*x2376))+(((-1.0)*r02*x2379))+(((-1.0)*x2377*x2380)));
evalcond[4]=((((-1.0)*r12*x2380))+(((-1.0)*r11*sj5*x2379))+((cj2*sj1))+((cj1*sj2))+((x2374*x2375)));
evalcond[5]=((((-1.0)*r21*sj5*x2379))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2380))+((x2374*x2378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2382 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2382.valid){
continue;
}
CheckValue<IkReal> x2383=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2382.value)+(((1.5707963267949)*(x2383.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2384=IKsin(j4);
IkReal x2385=IKcos(j4);
IkReal x2386=(cj5*r10);
IkReal x2387=(r01*sj5);
IkReal x2388=(cj5*r00);
IkReal x2389=(cj5*r20);
IkReal x2390=((1.0)*x2385);
IkReal x2391=((1.0)*x2384);
IkReal x2392=(sj5*x2384);
evalcond[0]=((((-1.0)*x2389*x2391))+(((-1.0)*r22*x2390))+((r21*x2392)));
evalcond[1]=((((-1.0)*x2386*x2391))+((r11*x2392))+(((-1.0)*r12*x2390)));
evalcond[2]=((((-1.0)*r02*x2391))+((x2385*x2388))+(((-1.0)*x2387*x2390)));
evalcond[3]=((1.0)+((x2384*x2387))+(((-1.0)*r02*x2390))+(((-1.0)*x2388*x2391)));
evalcond[4]=(((cj2*sj1))+((x2385*x2386))+((cj1*sj2))+(((-1.0)*r11*sj5*x2390))+(((-1.0)*r12*x2391)));
evalcond[5]=(((x2385*x2389))+(((-1.0)*r21*sj5*x2390))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2393=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2393);
rxp1_1=(px*r21);
rxp1_2=(r11*x2393);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2394=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2394);
rxp1_1=(px*r21);
rxp1_2=(r11*x2394);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2395=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2395);
rxp1_1=(px*r21);
rxp1_2=(r11*x2395);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2398=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2398.valid){
continue;
}
IkReal x2396=x2398.value;
IkReal x2397=(sj0*x2396);
cj4array[0]=(((cj2*sj1*x2397))+((cj1*sj2*x2397)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2399=IKsin(j4);
IkReal x2400=IKcos(j4);
IkReal x2401=(cj5*r20);
IkReal x2402=(r21*sj5);
IkReal x2403=((1.0)*x2399);
IkReal x2404=((1.0)*x2400);
evalcond[0]=((-1.0)*r02*x2399);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2404)));
evalcond[2]=((((-1.0)*x2401*x2403))+((x2399*x2402)));
evalcond[3]=(((r11*sj5*x2399))+(((-1.0)*cj5*r10*x2403)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2402*x2404))+((x2400*x2401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2406=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2406.valid){
continue;
}
IkReal x2405=x2406.value;
cj4array[0]=(((cj1*cj2*x2405))+(((-1.0)*sj1*sj2*x2405)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2407=IKsin(j4);
IkReal x2408=IKcos(j4);
IkReal x2409=(r11*sj5);
IkReal x2410=((1.0)*sj0);
IkReal x2411=((1.0)*x2408);
IkReal x2412=((1.0)*cj5*x2407);
evalcond[0]=((-1.0)*r02*x2407);
evalcond[1]=((((-1.0)*r02*x2411))+(((-1.0)*x2410)));
evalcond[2]=((((-1.0)*r20*x2412))+((r21*sj5*x2407)));
evalcond[3]=((((-1.0)*r10*x2412))+((x2407*x2409)));
evalcond[4]=((((-1.0)*cj1*sj2*x2410))+(((-1.0)*cj2*sj1*x2410))+((cj5*r10*x2408))+(((-1.0)*x2409*x2411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2413=IKPowWithIntegerCheck(r02,-1);
if(!x2413.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2413.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2414=IKsin(j4);
IkReal x2415=IKcos(j4);
IkReal x2416=((1.0)*sj0);
IkReal x2417=(cj5*x2415);
IkReal x2418=(sj5*x2414);
IkReal x2419=((1.0)*sj5*x2415);
IkReal x2420=((1.0)*cj5*x2414);
evalcond[0]=((-1.0)*r02*x2414);
evalcond[1]=(((r21*x2418))+(((-1.0)*r20*x2420)));
evalcond[2]=(((r11*x2418))+(((-1.0)*r10*x2420)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2417))+(((-1.0)*r21*x2419)));
evalcond[4]=((((-1.0)*cj1*sj2*x2416))+((r10*x2417))+(((-1.0)*r11*x2419))+(((-1.0)*cj2*sj1*x2416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2421=((1.0)*sj0);
IkReal x2422=((1.0)*cj0);
CheckValue<IkReal> x2423=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2423.valid){
continue;
}
CheckValue<IkReal> x2424 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2422))+(((-1.0)*r12*x2421)))),IkReal(((((-1.0)*r11*sj5*x2421))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x2422))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2423.value)))+(x2424.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2425=IKsin(j4);
IkReal x2426=IKcos(j4);
IkReal x2427=(cj5*r10);
IkReal x2428=(r01*sj5);
IkReal x2429=((1.0)*cj2);
IkReal x2430=(cj5*r00);
IkReal x2431=((1.0)*sj0);
IkReal x2432=(cj5*r20);
IkReal x2433=(cj1*sj2);
IkReal x2434=((1.0)*x2426);
IkReal x2435=((1.0)*x2425);
IkReal x2436=(sj5*x2425);
evalcond[0]=((((-1.0)*r22*x2434))+(((-1.0)*x2432*x2435))+((r21*x2436)));
evalcond[1]=(((r11*x2436))+cj0+(((-1.0)*x2427*x2435))+(((-1.0)*r12*x2434)));
evalcond[2]=((((-1.0)*x2431))+(((-1.0)*x2430*x2435))+(((-1.0)*r02*x2434))+((x2425*x2428)));
evalcond[3]=((((-1.0)*r22*x2435))+(((-1.0)*r21*sj5*x2434))+((sj1*sj2))+((x2426*x2432))+(((-1.0)*cj1*x2429)));
evalcond[4]=((((-1.0)*cj0*x2433))+(((-1.0)*cj0*sj1*x2429))+(((-1.0)*r02*x2435))+(((-1.0)*x2428*x2434))+((x2426*x2430)));
evalcond[5]=(((x2426*x2427))+(((-1.0)*x2431*x2433))+(((-1.0)*r11*sj5*x2434))+(((-1.0)*sj0*sj1*x2429))+(((-1.0)*r12*x2435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2437=((1.0)*cj5);
CheckValue<IkReal> x2438=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2437)))),-1);
if(!x2438.valid){
continue;
}
CheckValue<IkReal> x2439 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2437)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2438.value)))+(x2439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2440=IKsin(j4);
IkReal x2441=IKcos(j4);
IkReal x2442=(cj5*r10);
IkReal x2443=(r01*sj5);
IkReal x2444=((1.0)*cj2);
IkReal x2445=(cj5*r00);
IkReal x2446=((1.0)*sj0);
IkReal x2447=(cj5*r20);
IkReal x2448=(cj1*sj2);
IkReal x2449=((1.0)*x2441);
IkReal x2450=((1.0)*x2440);
IkReal x2451=(sj5*x2440);
evalcond[0]=((((-1.0)*x2447*x2450))+(((-1.0)*r22*x2449))+((r21*x2451)));
evalcond[1]=((((-1.0)*x2442*x2450))+cj0+(((-1.0)*r12*x2449))+((r11*x2451)));
evalcond[2]=(((x2440*x2443))+(((-1.0)*x2445*x2450))+(((-1.0)*x2446))+(((-1.0)*r02*x2449)));
evalcond[3]=((((-1.0)*r21*sj5*x2449))+((sj1*sj2))+(((-1.0)*r22*x2450))+(((-1.0)*cj1*x2444))+((x2441*x2447)));
evalcond[4]=((((-1.0)*x2443*x2449))+(((-1.0)*cj0*x2448))+(((-1.0)*cj0*sj1*x2444))+(((-1.0)*r02*x2450))+((x2441*x2445)));
evalcond[5]=((((-1.0)*r11*sj5*x2449))+(((-1.0)*x2446*x2448))+(((-1.0)*r12*x2450))+((x2441*x2442))+(((-1.0)*sj0*sj1*x2444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2452=((1.0)*cj5);
CheckValue<IkReal> x2453 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2452)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2453.valid){
continue;
}
CheckValue<IkReal> x2454=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2452)))),-1);
if(!x2454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2453.value)+(((1.5707963267949)*(x2454.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2455=IKsin(j4);
IkReal x2456=IKcos(j4);
IkReal x2457=(cj5*r10);
IkReal x2458=(r01*sj5);
IkReal x2459=((1.0)*cj2);
IkReal x2460=(cj5*r00);
IkReal x2461=((1.0)*sj0);
IkReal x2462=(cj5*r20);
IkReal x2463=(cj1*sj2);
IkReal x2464=((1.0)*x2456);
IkReal x2465=((1.0)*x2455);
IkReal x2466=(sj5*x2455);
evalcond[0]=((((-1.0)*r22*x2464))+((r21*x2466))+(((-1.0)*x2462*x2465)));
evalcond[1]=(cj0+(((-1.0)*x2457*x2465))+(((-1.0)*r12*x2464))+((r11*x2466)));
evalcond[2]=((((-1.0)*x2460*x2465))+(((-1.0)*x2461))+((x2455*x2458))+(((-1.0)*r02*x2464)));
evalcond[3]=((((-1.0)*r22*x2465))+((sj1*sj2))+(((-1.0)*r21*sj5*x2464))+((x2456*x2462))+(((-1.0)*cj1*x2459)));
evalcond[4]=((((-1.0)*cj0*x2463))+(((-1.0)*cj0*sj1*x2459))+((x2456*x2460))+(((-1.0)*r02*x2465))+(((-1.0)*x2458*x2464)));
evalcond[5]=((((-1.0)*r11*sj5*x2464))+(((-1.0)*r12*x2465))+((x2456*x2457))+(((-1.0)*sj0*sj1*x2459))+(((-1.0)*x2461*x2463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2467=cj5*cj5;
IkReal x2468=r21*r21;
IkReal x2469=(sj1*sj2);
IkReal x2470=(r21*sj5);
IkReal x2471=(cj1*cj2);
IkReal x2472=(cj5*r20);
CheckValue<IkReal> x2473=IKPowWithIntegerCheck(IKsign((x2468+(r22*r22)+(((-2.0)*x2470*x2472))+((x2467*(r20*r20)))+(((-1.0)*x2467*x2468)))),-1);
if(!x2473.valid){
continue;
}
CheckValue<IkReal> x2474 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2471))+((r22*x2469)))),IkReal((((x2471*x2472))+(((-1.0)*x2470*x2471))+(((-1.0)*x2469*x2472))+((x2469*x2470)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2473.value)))+(x2474.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2475=IKsin(j4);
IkReal x2476=IKcos(j4);
IkReal x2477=(r21*sj5);
IkReal x2478=(cj5*r20);
IkReal x2479=((1.0)*x2476);
IkReal x2480=((1.0)*x2475);
evalcond[0]=((((-1.0)*r22*x2479))+(((-1.0)*x2478*x2480))+((x2475*x2477)));
evalcond[1]=((((-1.0)*r22*x2480))+(((-1.0)*x2477*x2479))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2476*x2478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2481=(cj5*sj4);
IkReal x2482=(sj4*sj5);
if( IKabs((((r01*x2482))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2481)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2481))+((cj4*r12))+(((-1.0)*r11*x2482)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2482))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2481))))+IKsqr((((r10*x2481))+((cj4*r12))+(((-1.0)*r11*x2482))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x2482))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2481))), (((r10*x2481))+((cj4*r12))+(((-1.0)*r11*x2482))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2483=IKcos(j0);
IkReal x2484=IKsin(j0);
IkReal x2485=(cj4*cj5);
IkReal x2486=(cj5*r01);
IkReal x2487=((1.0)*cj1);
IkReal x2488=((0.39225)*sj1);
IkReal x2489=(r11*sj5);
IkReal x2490=((1.0)*sj4);
IkReal x2491=((0.39225)*cj2);
IkReal x2492=((1.0)*sj1);
IkReal x2493=(r00*sj5);
IkReal x2494=(cj5*r11);
IkReal x2495=((1.0)*cj4);
IkReal x2496=(r01*sj5);
IkReal x2497=(r10*sj5);
IkReal x2498=(sj2*x2483);
IkReal x2499=(sj2*x2484);
IkReal x2500=(cj1*x2483);
IkReal x2501=(cj1*x2484);
IkReal x2502=(cj2*x2483);
IkReal x2503=(cj2*x2484);
evalcond[0]=(x2483+(((-1.0)*cj5*r10*x2490))+((sj4*x2489))+(((-1.0)*r12*x2495)));
evalcond[1]=((((-1.0)*x2484))+(((-1.0)*cj5*r00*x2490))+(((-1.0)*r02*x2495))+((sj4*x2496)));
evalcond[2]=(((sj1*x2498))+x2486+x2493+(((-1.0)*x2487*x2502)));
evalcond[3]=(((sj1*x2499))+x2494+x2497+(((-1.0)*x2487*x2503)));
evalcond[4]=((((-1.0)*x2495*x2496))+(((-1.0)*x2492*x2502))+(((-1.0)*r02*x2490))+(((-1.0)*x2487*x2498))+((r00*x2485)));
evalcond[5]=((((-1.0)*x2492*x2503))+(((-1.0)*x2489*x2495))+(((-1.0)*x2487*x2499))+((r10*x2485))+(((-1.0)*r12*x2490)));
evalcond[6]=((((0.425)*x2500))+(((-0.10915)*x2484))+(((-0.09465)*x2486))+(((-1.0)*px))+(((-0.09465)*x2493))+(((-1.0)*x2488*x2498))+((x2491*x2500)));
evalcond[7]=((((0.425)*x2501))+(((-1.0)*py))+(((-0.09465)*x2494))+(((-0.09465)*x2497))+(((-1.0)*x2488*x2499))+((x2491*x2501))+(((0.10915)*x2483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2504=((1.0)*cj5);
IkReal x2505=((1.0)*sj5);
CheckValue<IkReal> x2506 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2504))+(((-1.0)*r10*x2505)))),IkReal(((((-1.0)*r00*x2505))+(((-1.0)*r01*x2504)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2506.valid){
continue;
}
CheckValue<IkReal> x2507=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2507.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2506.value)+(((1.5707963267949)*(x2507.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2508=IKcos(j0);
IkReal x2509=IKsin(j0);
IkReal x2510=(cj5*r01);
IkReal x2511=(cj5*r11);
IkReal x2512=(r00*sj5);
IkReal x2513=(sj1*sj2);
IkReal x2514=((0.39225)*cj2);
IkReal x2515=((1.0)*cj2);
IkReal x2516=(r10*sj5);
IkReal x2517=((0.39225)*x2513);
IkReal x2518=(cj1*x2508);
IkReal x2519=(cj1*x2509);
evalcond[0]=(x2510+x2512+(((-1.0)*x2515*x2518))+((x2508*x2513)));
evalcond[1]=(x2516+x2511+(((-1.0)*x2515*x2519))+((x2509*x2513)));
evalcond[2]=((((-1.0)*x2508*x2517))+(((-0.10915)*x2509))+((x2514*x2518))+(((0.425)*x2518))+(((-1.0)*px))+(((-0.09465)*x2510))+(((-0.09465)*x2512)));
evalcond[3]=(((x2514*x2519))+(((0.425)*x2519))+(((-1.0)*py))+(((-0.09465)*x2516))+(((-0.09465)*x2511))+(((-1.0)*x2509*x2517))+(((0.10915)*x2508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2520=((1.0)*cj5);
IkReal x2521=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2520)));
j4eval[0]=x2521;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2520)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2521);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2522=((1.0)*cj5);
IkReal x2523=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2522)));
j4eval[0]=x2523;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2522))))));
j4eval[2]=IKsign(x2523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2524=((1.0)*sj0);
IkReal x2525=((1.0)*cj0);
IkReal x2526=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2526;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2525))+(((-1.0)*r11*sj5*x2524)))))+(IKabs(((((-1.0)*r12*x2524))+(((-1.0)*r02*x2525))))));
j4eval[2]=IKsign(x2526);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2527=((-1.0)*r20);
IkReal x2529 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2529)==0){
continue;
}
IkReal x2528=pow(x2529,-0.5);
CheckValue<IkReal> x2530 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2527),IKFAST_ATAN2_MAGTHRESH);
if(!x2530.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2530.value));
IkReal gconst79=(r21*x2528);
IkReal gconst80=(x2527*x2528);
CheckValue<IkReal> x2531 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2531.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2531.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2532=((-1.0)*r20);
IkReal x2533=x2528;
CheckValue<IkReal> x2535 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2532),IKFAST_ATAN2_MAGTHRESH);
if(!x2535.valid){
continue;
}
IkReal x2534=((-1.0)*(x2535.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2534;
IkReal gconst78=x2534;
IkReal gconst79=(r21*x2533);
IkReal gconst80=(x2532*x2533);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2536=((-1.0)*r20);
IkReal x2537=x2528;
CheckValue<IkReal> x2539 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2536),IKFAST_ATAN2_MAGTHRESH);
if(!x2539.valid){
continue;
}
IkReal x2538=((-1.0)*(x2539.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2538;
IkReal gconst78=x2538;
IkReal gconst79=(r21*x2537);
IkReal gconst80=(x2536*x2537);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2540=((-1.0)*r20);
IkReal x2541=x2528;
CheckValue<IkReal> x2543 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2540),IKFAST_ATAN2_MAGTHRESH);
if(!x2543.valid){
continue;
}
IkReal x2542=((-1.0)*(x2543.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2542;
IkReal gconst78=x2542;
IkReal gconst79=(r21*x2541);
IkReal gconst80=(x2540*x2541);
IkReal x2544=r22*r22;
CheckValue<IkReal> x2547=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2544))),-1);
if(!x2547.valid){
continue;
}
IkReal x2545=x2547.value;
IkReal x2546=((((2.0)*x2545*(r20*r20)*(r21*r21)))+x2544+((x2545*(r20*r20*r20*r20)))+((x2545*(r21*r21*r21*r21))));
j4eval[0]=x2546;
j4eval[1]=IKsign(x2546);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2548=(sj1*sj2);
IkReal x2549=(gconst80*r20);
IkReal x2550=(gconst79*r21);
IkReal x2551=(cj1*cj2);
CheckValue<IkReal> x2552 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2551))+((r22*x2548)))),IkReal(((((-1.0)*x2550*x2551))+((x2549*x2551))+((x2548*x2550))+(((-1.0)*x2548*x2549)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2552.valid){
continue;
}
CheckValue<IkReal> x2553=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2549*x2549)+(((-2.0)*x2549*x2550))+(x2550*x2550))),-1);
if(!x2553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2552.value)+(((1.5707963267949)*(x2553.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2554=IKsin(j4);
IkReal x2555=IKcos(j4);
IkReal x2556=(gconst79*r01);
IkReal x2557=(gconst79*r21);
IkReal x2558=((1.0)*cj2);
IkReal x2559=(gconst79*r11);
IkReal x2560=((1.0)*sj0);
IkReal x2561=(cj1*sj2);
IkReal x2562=((1.0)*x2555);
IkReal x2563=(gconst80*x2555);
IkReal x2564=((1.0)*x2554);
IkReal x2565=(gconst80*x2564);
evalcond[0]=((((-1.0)*r22*x2562))+(((-1.0)*r20*x2565))+((x2554*x2557)));
evalcond[1]=(cj0+((x2554*x2559))+(((-1.0)*r12*x2562))+(((-1.0)*r10*x2565)));
evalcond[2]=((((-1.0)*r00*x2565))+(((-1.0)*r02*x2562))+(((-1.0)*x2560))+((x2554*x2556)));
evalcond[3]=((((-1.0)*r22*x2564))+(((-1.0)*x2557*x2562))+((sj1*sj2))+((r20*x2563))+(((-1.0)*cj1*x2558)));
evalcond[4]=((((-1.0)*cj0*x2561))+((r00*x2563))+(((-1.0)*cj0*sj1*x2558))+(((-1.0)*x2556*x2562))+(((-1.0)*r02*x2564)));
evalcond[5]=(((r10*x2563))+(((-1.0)*x2560*x2561))+(((-1.0)*x2559*x2562))+(((-1.0)*sj0*sj1*x2558))+(((-1.0)*r12*x2564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2566=((1.0)*gconst80);
CheckValue<IkReal> x2567 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2566))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2567.valid){
continue;
}
CheckValue<IkReal> x2568=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x2566)))),-1);
if(!x2568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2567.value)+(((1.5707963267949)*(x2568.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2569=IKsin(j4);
IkReal x2570=IKcos(j4);
IkReal x2571=(gconst79*r01);
IkReal x2572=(gconst79*r21);
IkReal x2573=((1.0)*cj2);
IkReal x2574=(gconst79*r11);
IkReal x2575=((1.0)*sj0);
IkReal x2576=(cj1*sj2);
IkReal x2577=((1.0)*x2570);
IkReal x2578=(gconst80*x2570);
IkReal x2579=((1.0)*x2569);
IkReal x2580=(gconst80*x2579);
evalcond[0]=((((-1.0)*r20*x2580))+(((-1.0)*r22*x2577))+((x2569*x2572)));
evalcond[1]=((((-1.0)*r12*x2577))+cj0+((x2569*x2574))+(((-1.0)*r10*x2580)));
evalcond[2]=((((-1.0)*r00*x2580))+(((-1.0)*x2575))+(((-1.0)*r02*x2577))+((x2569*x2571)));
evalcond[3]=(((sj1*sj2))+((r20*x2578))+(((-1.0)*cj1*x2573))+(((-1.0)*r22*x2579))+(((-1.0)*x2572*x2577)));
evalcond[4]=((((-1.0)*x2571*x2577))+(((-1.0)*cj0*x2576))+((r00*x2578))+(((-1.0)*r02*x2579))+(((-1.0)*cj0*sj1*x2573)));
evalcond[5]=((((-1.0)*x2575*x2576))+((r10*x2578))+(((-1.0)*r12*x2579))+(((-1.0)*sj0*sj1*x2573))+(((-1.0)*x2574*x2577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2581=((1.0)*gconst80);
CheckValue<IkReal> x2582=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2581))+(((-1.0)*gconst79*r00)))),-1);
if(!x2582.valid){
continue;
}
CheckValue<IkReal> x2583 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2581)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2582.value)))+(x2583.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2584=IKsin(j4);
IkReal x2585=IKcos(j4);
IkReal x2586=(gconst79*r01);
IkReal x2587=(gconst79*r21);
IkReal x2588=((1.0)*cj2);
IkReal x2589=(gconst79*r11);
IkReal x2590=((1.0)*sj0);
IkReal x2591=(cj1*sj2);
IkReal x2592=((1.0)*x2585);
IkReal x2593=(gconst80*x2585);
IkReal x2594=((1.0)*x2584);
IkReal x2595=(gconst80*x2594);
evalcond[0]=(((x2584*x2587))+(((-1.0)*r22*x2592))+(((-1.0)*r20*x2595)));
evalcond[1]=(((x2584*x2589))+cj0+(((-1.0)*r12*x2592))+(((-1.0)*r10*x2595)));
evalcond[2]=(((x2584*x2586))+(((-1.0)*r00*x2595))+(((-1.0)*r02*x2592))+(((-1.0)*x2590)));
evalcond[3]=((((-1.0)*cj1*x2588))+(((-1.0)*r22*x2594))+((sj1*sj2))+((r20*x2593))+(((-1.0)*x2587*x2592)));
evalcond[4]=(((r00*x2593))+(((-1.0)*cj0*x2591))+(((-1.0)*r02*x2594))+(((-1.0)*x2586*x2592))+(((-1.0)*cj0*sj1*x2588)));
evalcond[5]=((((-1.0)*x2590*x2591))+(((-1.0)*sj0*sj1*x2588))+((r10*x2593))+(((-1.0)*x2589*x2592))+(((-1.0)*r12*x2594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2596=((-1.0)*r21);
IkReal x2598 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2598)==0){
continue;
}
IkReal x2597=pow(x2598,-0.5);
CheckValue<IkReal> x2599 = IKatan2WithCheck(IkReal(x2596),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2599.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2599.value))));
IkReal gconst82=(x2596*x2597);
IkReal gconst83=((1.0)*r20*x2597);
CheckValue<IkReal> x2600 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2600.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2600.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2601=((-1.0)*r21);
CheckValue<IkReal> x2604 = IKatan2WithCheck(IkReal(x2601),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2604.valid){
continue;
}
IkReal x2602=((1.0)*(x2604.value));
IkReal x2603=x2597;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2602)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2602)));
IkReal gconst82=(x2601*x2603);
IkReal gconst83=((1.0)*r20*x2603);
IkReal x2605=r22*r22;
IkReal x2606=((1.0)*x2605);
CheckValue<IkReal> x2610=IKPowWithIntegerCheck(((-1.0)+x2605),-1);
if(!x2610.valid){
continue;
}
IkReal x2607=x2610.value;
if((((1.0)+(((-1.0)*x2606)))) < -0.00001)
continue;
IkReal x2608=IKsqrt(((1.0)+(((-1.0)*x2606))));
IkReal x2609=(cj0*x2607*x2608);
j4eval[0]=((IKabs(((((-1.0)*x2606*x2609))+x2609)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2611=((-1.0)*r21);
CheckValue<IkReal> x2614 = IKatan2WithCheck(IkReal(x2611),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2614.valid){
continue;
}
IkReal x2612=((1.0)*(x2614.value));
IkReal x2613=x2597;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2612)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2612)));
IkReal gconst82=(x2611*x2613);
IkReal gconst83=((1.0)*r20*x2613);
IkReal x2615=r22*r22;
IkReal x2616=((1.0)*x2615);
CheckValue<IkReal> x2620=IKPowWithIntegerCheck(((-1.0)+x2615),-1);
if(!x2620.valid){
continue;
}
IkReal x2617=x2620.value;
if((((1.0)+(((-1.0)*x2616)))) < -0.00001)
continue;
IkReal x2618=IKsqrt(((1.0)+(((-1.0)*x2616))));
IkReal x2619=(sj0*x2617*x2618);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x2616*x2619))+x2619))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2621=((-1.0)*r21);
CheckValue<IkReal> x2624 = IKatan2WithCheck(IkReal(x2621),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2624.valid){
continue;
}
IkReal x2622=((1.0)*(x2624.value));
IkReal x2623=x2597;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2622)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2622)));
IkReal gconst82=(x2621*x2623);
IkReal gconst83=((1.0)*r20*x2623);
IkReal x2625=r22*r22;
IkReal x2626=(r12*sj0);
IkReal x2627=(cj0*r02);
CheckValue<IkReal> x2631=IKPowWithIntegerCheck(((-1.0)+x2625),-1);
if(!x2631.valid){
continue;
}
IkReal x2628=x2631.value;
if((((1.0)+(((-1.0)*x2625)))) < -0.00001)
continue;
IkReal x2629=IKsqrt(((1.0)+(((-1.0)*x2625))));
IkReal x2630=(r22*x2628*x2629);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x2626))+(((-1.0)*x2627)))))+(IKabs((((x2627*x2630))+((x2626*x2630))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2632=((1.0)*sj0);
IkReal x2633=((1.0)*cj0);
CheckValue<IkReal> x2634=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2634.valid){
continue;
}
CheckValue<IkReal> x2635 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2633))+(((-1.0)*r12*x2632)))),IkReal(((((-1.0)*gconst82*r11*x2632))+(((-1.0)*gconst82*r01*x2633))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2634.value)))+(x2635.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2636=IKsin(j4);
IkReal x2637=IKcos(j4);
IkReal x2638=(gconst82*r11);
IkReal x2639=((1.0)*cj2);
IkReal x2640=((1.0)*sj0);
IkReal x2641=(cj1*sj2);
IkReal x2642=((1.0)*x2637);
IkReal x2643=(gconst83*x2637);
IkReal x2644=(gconst82*x2636);
IkReal x2645=((1.0)*x2636);
evalcond[0]=((((-1.0)*gconst83*r20*x2645))+(((-1.0)*r22*x2642))+((r21*x2644)));
evalcond[1]=((((-1.0)*r12*x2642))+cj0+(((-1.0)*gconst83*r10*x2645))+((x2636*x2638)));
evalcond[2]=((((-1.0)*r02*x2642))+((r01*x2644))+(((-1.0)*x2640))+(((-1.0)*gconst83*r00*x2645)));
evalcond[3]=((((-1.0)*r22*x2645))+(((-1.0)*cj1*x2639))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2642))+((r20*x2643)));
evalcond[4]=((((-1.0)*cj0*sj1*x2639))+(((-1.0)*r02*x2645))+(((-1.0)*gconst82*r01*x2642))+((r00*x2643))+(((-1.0)*cj0*x2641)));
evalcond[5]=((((-1.0)*sj0*sj1*x2639))+(((-1.0)*r12*x2645))+((r10*x2643))+(((-1.0)*x2640*x2641))+(((-1.0)*x2638*x2642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2646=((1.0)*gconst83);
CheckValue<IkReal> x2647 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x2646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2647.valid){
continue;
}
CheckValue<IkReal> x2648=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2646))+(((-1.0)*gconst82*r10)))),-1);
if(!x2648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2647.value)+(((1.5707963267949)*(x2648.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2649=IKsin(j4);
IkReal x2650=IKcos(j4);
IkReal x2651=(gconst82*r11);
IkReal x2652=((1.0)*cj2);
IkReal x2653=((1.0)*sj0);
IkReal x2654=(cj1*sj2);
IkReal x2655=((1.0)*x2650);
IkReal x2656=(gconst83*x2650);
IkReal x2657=(gconst82*x2649);
IkReal x2658=((1.0)*x2649);
evalcond[0]=((((-1.0)*r22*x2655))+(((-1.0)*gconst83*r20*x2658))+((r21*x2657)));
evalcond[1]=(((x2649*x2651))+cj0+(((-1.0)*r12*x2655))+(((-1.0)*gconst83*r10*x2658)));
evalcond[2]=((((-1.0)*r02*x2655))+((r01*x2657))+(((-1.0)*x2653))+(((-1.0)*gconst83*r00*x2658)));
evalcond[3]=((((-1.0)*r22*x2658))+(((-1.0)*cj1*x2652))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2655))+((r20*x2656)));
evalcond[4]=((((-1.0)*r02*x2658))+(((-1.0)*cj0*sj1*x2652))+(((-1.0)*gconst82*r01*x2655))+((r00*x2656))+(((-1.0)*cj0*x2654)));
evalcond[5]=((((-1.0)*x2651*x2655))+(((-1.0)*r12*x2658))+((r10*x2656))+(((-1.0)*sj0*sj1*x2652))+(((-1.0)*x2653*x2654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2659=((1.0)*gconst83);
CheckValue<IkReal> x2660 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2659)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2660.valid){
continue;
}
CheckValue<IkReal> x2661=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2659))+(((-1.0)*gconst82*r00)))),-1);
if(!x2661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2660.value)+(((1.5707963267949)*(x2661.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2662=IKsin(j4);
IkReal x2663=IKcos(j4);
IkReal x2664=(gconst82*r11);
IkReal x2665=((1.0)*cj2);
IkReal x2666=((1.0)*sj0);
IkReal x2667=(cj1*sj2);
IkReal x2668=((1.0)*x2663);
IkReal x2669=(gconst83*x2663);
IkReal x2670=(gconst82*x2662);
IkReal x2671=((1.0)*x2662);
evalcond[0]=(((r21*x2670))+(((-1.0)*r22*x2668))+(((-1.0)*gconst83*r20*x2671)));
evalcond[1]=((((-1.0)*r12*x2668))+cj0+((x2662*x2664))+(((-1.0)*gconst83*r10*x2671)));
evalcond[2]=((((-1.0)*r02*x2668))+(((-1.0)*x2666))+((r01*x2670))+(((-1.0)*gconst83*r00*x2671)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2665))+(((-1.0)*gconst82*r21*x2668))+(((-1.0)*r22*x2671))+((r20*x2669)));
evalcond[4]=((((-1.0)*cj0*x2667))+(((-1.0)*cj0*sj1*x2665))+(((-1.0)*gconst82*r01*x2668))+(((-1.0)*r02*x2671))+((r00*x2669)));
evalcond[5]=((((-1.0)*r12*x2671))+(((-1.0)*sj0*sj1*x2665))+((r10*x2669))+(((-1.0)*x2664*x2668))+(((-1.0)*x2666*x2667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2672=((-1.0)*r10);
IkReal x2674 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2674)==0){
continue;
}
IkReal x2673=pow(x2674,-0.5);
CheckValue<IkReal> x2675 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2672),IKFAST_ATAN2_MAGTHRESH);
if(!x2675.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2675.value));
IkReal gconst85=(r11*x2673);
IkReal gconst86=(x2672*x2673);
CheckValue<IkReal> x2676 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2676.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2676.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2677=((-1.0)*r10);
IkReal x2678=x2673;
CheckValue<IkReal> x2680 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2677),IKFAST_ATAN2_MAGTHRESH);
if(!x2680.valid){
continue;
}
IkReal x2679=((-1.0)*(x2680.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2679;
IkReal gconst84=x2679;
IkReal gconst85=(r11*x2678);
IkReal gconst86=(x2677*x2678);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2681=((1.0)*sj0);
IkReal x2682=((1.0)*gconst85);
CheckValue<IkReal> x2683 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2681))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst85*r11*x2681))+((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2682))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2683.valid){
continue;
}
CheckValue<IkReal> x2684=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2682)))),-1);
if(!x2684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2683.value)+(((1.5707963267949)*(x2684.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2685=IKsin(j4);
IkReal x2686=IKcos(j4);
IkReal x2687=(gconst85*r21);
IkReal x2688=(gconst86*r00);
IkReal x2689=(gconst86*r10);
IkReal x2690=((1.0)*cj2);
IkReal x2691=(gconst85*r11);
IkReal x2692=(gconst85*r01);
IkReal x2693=((1.0)*sj0);
IkReal x2694=(gconst86*r20);
IkReal x2695=(cj1*sj2);
IkReal x2696=((1.0)*x2686);
IkReal x2697=((1.0)*x2685);
evalcond[0]=((((-1.0)*r22*x2696))+((x2685*x2687))+(((-1.0)*x2694*x2697)));
evalcond[1]=(cj0+(((-1.0)*x2689*x2697))+((x2685*x2691))+(((-1.0)*r12*x2696)));
evalcond[2]=((((-1.0)*r02*x2696))+(((-1.0)*x2688*x2697))+(((-1.0)*x2693))+((x2685*x2692)));
evalcond[3]=((((-1.0)*cj1*x2690))+((sj1*sj2))+(((-1.0)*r22*x2697))+((x2686*x2694))+(((-1.0)*x2687*x2696)));
evalcond[4]=((((-1.0)*x2692*x2696))+(((-1.0)*cj0*x2695))+(((-1.0)*r02*x2697))+(((-1.0)*cj0*sj1*x2690))+((x2686*x2688)));
evalcond[5]=((((-1.0)*x2691*x2696))+((x2686*x2689))+(((-1.0)*r12*x2697))+(((-1.0)*x2693*x2695))+(((-1.0)*sj0*sj1*x2690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2698=((1.0)*gconst86);
CheckValue<IkReal> x2699=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r00))+(((-1.0)*r01*x2698)))),-1);
if(!x2699.valid){
continue;
}
CheckValue<IkReal> x2700 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x2698)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2699.value)))+(x2700.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2701=IKsin(j4);
IkReal x2702=IKcos(j4);
IkReal x2703=(gconst85*r21);
IkReal x2704=(gconst86*r00);
IkReal x2705=(gconst86*r10);
IkReal x2706=((1.0)*cj2);
IkReal x2707=(gconst85*r11);
IkReal x2708=(gconst85*r01);
IkReal x2709=((1.0)*sj0);
IkReal x2710=(gconst86*r20);
IkReal x2711=(cj1*sj2);
IkReal x2712=((1.0)*x2702);
IkReal x2713=((1.0)*x2701);
evalcond[0]=((((-1.0)*r22*x2712))+(((-1.0)*x2710*x2713))+((x2701*x2703)));
evalcond[1]=(cj0+(((-1.0)*r12*x2712))+((x2701*x2707))+(((-1.0)*x2705*x2713)));
evalcond[2]=((((-1.0)*x2704*x2713))+(((-1.0)*r02*x2712))+(((-1.0)*x2709))+((x2701*x2708)));
evalcond[3]=(((x2702*x2710))+((sj1*sj2))+(((-1.0)*x2703*x2712))+(((-1.0)*cj1*x2706))+(((-1.0)*r22*x2713)));
evalcond[4]=((((-1.0)*r02*x2713))+(((-1.0)*x2708*x2712))+(((-1.0)*cj0*sj1*x2706))+((x2702*x2704))+(((-1.0)*cj0*x2711)));
evalcond[5]=((((-1.0)*x2709*x2711))+(((-1.0)*sj0*sj1*x2706))+((x2702*x2705))+(((-1.0)*r12*x2713))+(((-1.0)*x2707*x2712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2714=((-1.0)*r11);
IkReal x2716 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2716)==0){
continue;
}
IkReal x2715=pow(x2716,-0.5);
CheckValue<IkReal> x2717 = IKatan2WithCheck(IkReal(x2714),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2717.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2717.value))));
IkReal gconst88=(x2714*x2715);
IkReal gconst89=((1.0)*r10*x2715);
CheckValue<IkReal> x2718 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2718.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2718.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2719=((-1.0)*r11);
CheckValue<IkReal> x2722 = IKatan2WithCheck(IkReal(x2719),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2722.valid){
continue;
}
IkReal x2720=((1.0)*(x2722.value));
IkReal x2721=x2715;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2720)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2720)));
IkReal gconst88=(x2719*x2721);
IkReal gconst89=((1.0)*r10*x2721);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2723=((-1.0)*r11);
CheckValue<IkReal> x2726 = IKatan2WithCheck(IkReal(x2723),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2726.valid){
continue;
}
IkReal x2724=((1.0)*(x2726.value));
IkReal x2725=x2715;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2724)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2724)));
IkReal gconst88=(x2723*x2725);
IkReal gconst89=((1.0)*r10*x2725);
IkReal x2727=r12*r12;
IkReal x2728=((1.0)*sj0);
IkReal x2729=(cj0*r02);
IkReal x2730=x2715;
j4eval[0]=((IKabs(((((-1.0)*x2729))+(((-1.0)*r12*x2728)))))+(IKabs(((((-1.0)*x2728*x2730))+((r12*x2729*x2730))+((sj0*x2727*x2730))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2731=((-1.0)*r11);
CheckValue<IkReal> x2734 = IKatan2WithCheck(IkReal(x2731),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2734.valid){
continue;
}
IkReal x2732=((1.0)*(x2734.value));
IkReal x2733=x2715;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2732)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2732)));
IkReal gconst88=(x2731*x2733);
IkReal gconst89=((1.0)*r10*x2733);
IkReal x2735=r12*r12;
IkReal x2736=(cj1*cj2*r22);
IkReal x2737=(r22*sj1*sj2);
CheckValue<IkReal> x2741=IKPowWithIntegerCheck(((-1.0)+x2735),-1);
if(!x2741.valid){
continue;
}
IkReal x2738=x2741.value;
if((((1.0)+(((-1.0)*x2735)))) < -0.00001)
continue;
IkReal x2739=IKsqrt(((1.0)+(((-1.0)*x2735))));
IkReal x2740=(r12*x2738*x2739);
j4eval[0]=((IKabs(((((-1.0)*x2737*x2740))+((x2736*x2740)))))+(IKabs((x2737+(((-1.0)*x2736))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2742=(cj1*cj2);
IkReal x2743=(gconst89*r20);
IkReal x2744=(gconst88*r21);
IkReal x2745=(sj1*sj2);
CheckValue<IkReal> x2746=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2744*x2744)+(((-2.0)*x2743*x2744))+(x2743*x2743))),-1);
if(!x2746.valid){
continue;
}
CheckValue<IkReal> x2747 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2742))+((r22*x2745)))),IkReal(((((-1.0)*x2742*x2744))+((x2742*x2743))+(((-1.0)*x2743*x2745))+((x2744*x2745)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2746.value)))+(x2747.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2748=IKsin(j4);
IkReal x2749=IKcos(j4);
IkReal x2750=((1.0)*sj0);
IkReal x2751=((1.0)*cj2);
IkReal x2752=(gconst89*r20);
IkReal x2753=(gconst89*r10);
IkReal x2754=(gconst89*r00);
IkReal x2755=(cj1*sj2);
IkReal x2756=((1.0)*x2749);
IkReal x2757=((1.0)*x2748);
IkReal x2758=(gconst88*x2748);
evalcond[0]=((((-1.0)*r22*x2756))+(((-1.0)*x2752*x2757))+((r21*x2758)));
evalcond[1]=(((r11*x2758))+cj0+(((-1.0)*x2753*x2757))+(((-1.0)*r12*x2756)));
evalcond[2]=(((r01*x2758))+(((-1.0)*x2754*x2757))+(((-1.0)*x2750))+(((-1.0)*r02*x2756)));
evalcond[3]=(((x2749*x2752))+(((-1.0)*r22*x2757))+(((-1.0)*gconst88*r21*x2756))+((sj1*sj2))+(((-1.0)*cj1*x2751)));
evalcond[4]=((((-1.0)*gconst88*r01*x2756))+((x2749*x2754))+(((-1.0)*cj0*x2755))+(((-1.0)*cj0*sj1*x2751))+(((-1.0)*r02*x2757)));
evalcond[5]=(((x2749*x2753))+(((-1.0)*gconst88*r11*x2756))+(((-1.0)*cj2*sj1*x2750))+(((-1.0)*x2750*x2755))+(((-1.0)*r12*x2757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2759=((1.0)*sj0);
IkReal x2760=((1.0)*cj0);
CheckValue<IkReal> x2761 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2760))+(((-1.0)*r12*x2759)))),IkReal(((((-1.0)*gconst88*r11*x2759))+(((-1.0)*gconst88*r01*x2760))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2761.valid){
continue;
}
CheckValue<IkReal> x2762=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2761.value)+(((1.5707963267949)*(x2762.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2763=IKsin(j4);
IkReal x2764=IKcos(j4);
IkReal x2765=((1.0)*sj0);
IkReal x2766=((1.0)*cj2);
IkReal x2767=(gconst89*r20);
IkReal x2768=(gconst89*r10);
IkReal x2769=(gconst89*r00);
IkReal x2770=(cj1*sj2);
IkReal x2771=((1.0)*x2764);
IkReal x2772=((1.0)*x2763);
IkReal x2773=(gconst88*x2763);
evalcond[0]=((((-1.0)*x2767*x2772))+((r21*x2773))+(((-1.0)*r22*x2771)));
evalcond[1]=((((-1.0)*x2768*x2772))+((r11*x2773))+cj0+(((-1.0)*r12*x2771)));
evalcond[2]=(((r01*x2773))+(((-1.0)*x2769*x2772))+(((-1.0)*r02*x2771))+(((-1.0)*x2765)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*gconst88*r21*x2771))+(((-1.0)*cj1*x2766))+((x2764*x2767))+(((-1.0)*r22*x2772)));
evalcond[4]=((((-1.0)*cj0*x2770))+(((-1.0)*r02*x2772))+(((-1.0)*gconst88*r01*x2771))+(((-1.0)*cj0*sj1*x2766))+((x2764*x2769)));
evalcond[5]=((((-1.0)*gconst88*r11*x2771))+(((-1.0)*r12*x2772))+(((-1.0)*cj2*sj1*x2765))+((x2764*x2768))+(((-1.0)*x2765*x2770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2774=((1.0)*gconst89);
CheckValue<IkReal> x2775=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2774))+(((-1.0)*gconst88*r00)))),-1);
if(!x2775.valid){
continue;
}
CheckValue<IkReal> x2776 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2774))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2775.value)))+(x2776.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2777=IKsin(j4);
IkReal x2778=IKcos(j4);
IkReal x2779=((1.0)*sj0);
IkReal x2780=((1.0)*cj2);
IkReal x2781=(gconst89*r20);
IkReal x2782=(gconst89*r10);
IkReal x2783=(gconst89*r00);
IkReal x2784=(cj1*sj2);
IkReal x2785=((1.0)*x2778);
IkReal x2786=((1.0)*x2777);
IkReal x2787=(gconst88*x2777);
evalcond[0]=(((r21*x2787))+(((-1.0)*x2781*x2786))+(((-1.0)*r22*x2785)));
evalcond[1]=((((-1.0)*r12*x2785))+cj0+(((-1.0)*x2782*x2786))+((r11*x2787)));
evalcond[2]=((((-1.0)*x2783*x2786))+(((-1.0)*x2779))+((r01*x2787))+(((-1.0)*r02*x2785)));
evalcond[3]=((((-1.0)*cj1*x2780))+((x2778*x2781))+(((-1.0)*gconst88*r21*x2785))+((sj1*sj2))+(((-1.0)*r22*x2786)));
evalcond[4]=(((x2778*x2783))+(((-1.0)*cj0*sj1*x2780))+(((-1.0)*cj0*x2784))+(((-1.0)*gconst88*r01*x2785))+(((-1.0)*r02*x2786)));
evalcond[5]=((((-1.0)*r12*x2786))+((x2778*x2782))+(((-1.0)*cj2*sj1*x2779))+(((-1.0)*gconst88*r11*x2785))+(((-1.0)*x2779*x2784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2788=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2788;
j4eval[1]=IKsign(x2788);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2789=((1.0)*cj5);
IkReal x2790=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2789)));
j4eval[0]=x2790;
j4eval[1]=((IKabs(((((-1.0)*r20*x2789))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2790);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2791=cj5*cj5;
IkReal x2792=r11*r11;
IkReal x2793=(r11*sj5);
IkReal x2794=(cj5*r10);
IkReal x2795=(x2792+(r12*r12)+(((-1.0)*x2791*x2792))+(((-2.0)*x2793*x2794))+((x2791*(r10*r10))));
j4eval[0]=x2795;
j4eval[1]=IKsign(x2795);
j4eval[2]=((IKabs(r12))+(IKabs((x2794+(((-1.0)*x2793))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2796=cj5*cj5;
IkReal x2797=r11*r11;
IkReal x2798=(cj5*r10);
IkReal x2799=(r11*sj5);
CheckValue<IkReal> x2800=IKPowWithIntegerCheck(IKsign((x2797+(r12*r12)+(((-1.0)*x2796*x2797))+((x2796*(r10*r10)))+(((-2.0)*x2798*x2799)))),-1);
if(!x2800.valid){
continue;
}
CheckValue<IkReal> x2801 = IKatan2WithCheck(IkReal((x2798+(((-1.0)*x2799)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2800.value)))+(x2801.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2802=IKsin(j4);
IkReal x2803=IKcos(j4);
IkReal x2804=(cj5*r10);
IkReal x2805=(r01*sj5);
IkReal x2806=((1.0)*cj2);
IkReal x2807=(cj5*r00);
IkReal x2808=(cj5*r20);
IkReal x2809=((1.0)*x2803);
IkReal x2810=((1.0)*x2802);
IkReal x2811=(sj5*x2802);
evalcond[0]=(((r21*x2811))+(((-1.0)*r22*x2809))+(((-1.0)*x2808*x2810)));
evalcond[1]=((((-1.0)*x2807*x2810))+((x2802*x2805))+(((-1.0)*r02*x2809)));
evalcond[2]=((((-1.0)*r12*x2810))+((x2803*x2804))+(((-1.0)*r11*sj5*x2809)));
evalcond[3]=((1.0)+(((-1.0)*x2804*x2810))+(((-1.0)*r12*x2809))+((r11*x2811)));
evalcond[4]=((((-1.0)*r21*sj5*x2809))+(((-1.0)*cj1*x2806))+((sj1*sj2))+(((-1.0)*r22*x2810))+((x2803*x2808)));
evalcond[5]=((((-1.0)*sj1*x2806))+(((-1.0)*r02*x2810))+(((-1.0)*x2805*x2809))+(((-1.0)*cj1*sj2))+((x2803*x2807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2812=((1.0)*cj5);
CheckValue<IkReal> x2813=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2812)))),-1);
if(!x2813.valid){
continue;
}
CheckValue<IkReal> x2814 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2812)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2813.value)))+(x2814.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2815=IKsin(j4);
IkReal x2816=IKcos(j4);
IkReal x2817=(cj5*r10);
IkReal x2818=(r01*sj5);
IkReal x2819=((1.0)*cj2);
IkReal x2820=(cj5*r00);
IkReal x2821=(cj5*r20);
IkReal x2822=((1.0)*x2816);
IkReal x2823=((1.0)*x2815);
IkReal x2824=(sj5*x2815);
evalcond[0]=((((-1.0)*x2821*x2823))+((r21*x2824))+(((-1.0)*r22*x2822)));
evalcond[1]=((((-1.0)*x2820*x2823))+(((-1.0)*r02*x2822))+((x2815*x2818)));
evalcond[2]=((((-1.0)*r12*x2823))+(((-1.0)*r11*sj5*x2822))+((x2816*x2817)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2822))+(((-1.0)*x2817*x2823))+((r11*x2824)));
evalcond[4]=((((-1.0)*cj1*x2819))+((sj1*sj2))+(((-1.0)*r22*x2823))+(((-1.0)*r21*sj5*x2822))+((x2816*x2821)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x2823))+(((-1.0)*sj1*x2819))+(((-1.0)*x2818*x2822))+((x2816*x2820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2825=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2825.valid){
continue;
}
CheckValue<IkReal> x2826 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2825.value)))+(x2826.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2827=IKsin(j4);
IkReal x2828=IKcos(j4);
IkReal x2829=(cj5*r10);
IkReal x2830=(r01*sj5);
IkReal x2831=((1.0)*cj2);
IkReal x2832=(cj5*r00);
IkReal x2833=(cj5*r20);
IkReal x2834=((1.0)*x2828);
IkReal x2835=((1.0)*x2827);
IkReal x2836=(sj5*x2827);
evalcond[0]=((((-1.0)*x2833*x2835))+(((-1.0)*r22*x2834))+((r21*x2836)));
evalcond[1]=(((x2827*x2830))+(((-1.0)*x2832*x2835))+(((-1.0)*r02*x2834)));
evalcond[2]=(((x2828*x2829))+(((-1.0)*r12*x2835))+(((-1.0)*r11*sj5*x2834)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2834))+((r11*x2836))+(((-1.0)*x2829*x2835)));
evalcond[4]=((((-1.0)*cj1*x2831))+(((-1.0)*r21*sj5*x2834))+((x2828*x2833))+((sj1*sj2))+(((-1.0)*r22*x2835)));
evalcond[5]=((((-1.0)*sj1*x2831))+((x2828*x2832))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2835))+(((-1.0)*x2830*x2834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2837=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2837;
j4eval[1]=IKsign(x2837);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2838=((1.0)*cj5);
IkReal x2839=((((-1.0)*r21*x2838))+(((-1.0)*r20*sj5)));
j4eval[0]=x2839;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2838))+((r01*sj5))))));
j4eval[2]=IKsign(x2839);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2840=cj5*cj5;
IkReal x2841=r11*r11;
IkReal x2842=(cj5*r10);
IkReal x2843=(r11*sj5);
IkReal x2844=(((x2840*x2841))+(((-1.0)*(r12*r12)))+(((-1.0)*x2840*(r10*r10)))+(((-1.0)*x2841))+(((2.0)*x2842*x2843)));
j4eval[0]=x2844;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2843))+x2842))));
j4eval[2]=IKsign(x2844);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2845=cj5*cj5;
IkReal x2846=r11*r11;
IkReal x2847=(cj5*r10);
IkReal x2848=(r11*sj5);
CheckValue<IkReal> x2849 = IKatan2WithCheck(IkReal(((((-1.0)*x2848))+x2847)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2849.valid){
continue;
}
CheckValue<IkReal> x2850=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2845*(r10*r10)))+(((2.0)*x2847*x2848))+(((-1.0)*(r12*r12)))+((x2845*x2846))+(((-1.0)*x2846)))),-1);
if(!x2850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2849.value)+(((1.5707963267949)*(x2850.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2851=IKsin(j4);
IkReal x2852=IKcos(j4);
IkReal x2853=(cj5*r10);
IkReal x2854=(r01*sj5);
IkReal x2855=(cj5*r00);
IkReal x2856=(cj5*r20);
IkReal x2857=((1.0)*x2852);
IkReal x2858=((1.0)*x2851);
IkReal x2859=(sj5*x2851);
evalcond[0]=(((r21*x2859))+(((-1.0)*x2856*x2858))+(((-1.0)*r22*x2857)));
evalcond[1]=((((-1.0)*r02*x2857))+((x2851*x2854))+(((-1.0)*x2855*x2858)));
evalcond[2]=((((-1.0)*r11*sj5*x2857))+(((-1.0)*r12*x2858))+((x2852*x2853)));
evalcond[3]=((-1.0)+((r11*x2859))+(((-1.0)*r12*x2857))+(((-1.0)*x2853*x2858)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2852*x2855))+(((-1.0)*r02*x2858))+(((-1.0)*x2854*x2857)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2852*x2856))+(((-1.0)*r22*x2858))+(((-1.0)*r21*sj5*x2857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2860=((1.0)*cj5);
CheckValue<IkReal> x2861=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2860))+(((-1.0)*r20*sj5)))),-1);
if(!x2861.valid){
continue;
}
CheckValue<IkReal> x2862 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2860)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2861.value)))+(x2862.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2863=IKsin(j4);
IkReal x2864=IKcos(j4);
IkReal x2865=(cj5*r10);
IkReal x2866=(r01*sj5);
IkReal x2867=(cj5*r00);
IkReal x2868=(cj5*r20);
IkReal x2869=((1.0)*x2864);
IkReal x2870=((1.0)*x2863);
IkReal x2871=(sj5*x2863);
evalcond[0]=((((-1.0)*r22*x2869))+(((-1.0)*x2868*x2870))+((r21*x2871)));
evalcond[1]=((((-1.0)*r02*x2869))+((x2863*x2866))+(((-1.0)*x2867*x2870)));
evalcond[2]=((((-1.0)*r11*sj5*x2869))+(((-1.0)*r12*x2870))+((x2864*x2865)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2869))+(((-1.0)*x2865*x2870))+((r11*x2871)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2870))+((cj1*sj2))+(((-1.0)*x2866*x2869))+((x2864*x2867)));
evalcond[5]=((((-1.0)*r22*x2870))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2869))+((x2864*x2868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2872 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2872.valid){
continue;
}
CheckValue<IkReal> x2873=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2872.value)+(((1.5707963267949)*(x2873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2874=IKsin(j4);
IkReal x2875=IKcos(j4);
IkReal x2876=(cj5*r10);
IkReal x2877=(r01*sj5);
IkReal x2878=(cj5*r00);
IkReal x2879=(cj5*r20);
IkReal x2880=((1.0)*x2875);
IkReal x2881=((1.0)*x2874);
IkReal x2882=(sj5*x2874);
evalcond[0]=((((-1.0)*r22*x2880))+((r21*x2882))+(((-1.0)*x2879*x2881)));
evalcond[1]=((((-1.0)*r02*x2880))+((x2874*x2877))+(((-1.0)*x2878*x2881)));
evalcond[2]=((((-1.0)*r11*sj5*x2880))+((x2875*x2876))+(((-1.0)*r12*x2881)));
evalcond[3]=((-1.0)+((r11*x2882))+(((-1.0)*x2876*x2881))+(((-1.0)*r12*x2880)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2881))+((cj1*sj2))+((x2875*x2878))+(((-1.0)*x2877*x2880)));
evalcond[5]=((((-1.0)*r22*x2881))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2875*x2879))+(((-1.0)*r21*sj5*x2880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2883=((-1.0)*r00);
IkReal x2885 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2885)==0){
continue;
}
IkReal x2884=pow(x2885,-0.5);
CheckValue<IkReal> x2886 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2883),IKFAST_ATAN2_MAGTHRESH);
if(!x2886.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2886.value));
IkReal gconst91=(r01*x2884);
IkReal gconst92=(x2883*x2884);
CheckValue<IkReal> x2887 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2887.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2887.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2888=((-1.0)*r00);
IkReal x2889=x2884;
CheckValue<IkReal> x2891 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2888),IKFAST_ATAN2_MAGTHRESH);
if(!x2891.valid){
continue;
}
IkReal x2890=((-1.0)*(x2891.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2890;
IkReal gconst90=x2890;
IkReal gconst91=(r01*x2889);
IkReal gconst92=(x2888*x2889);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2892=((1.0)*sj0);
IkReal x2893=((1.0)*cj0);
CheckValue<IkReal> x2894=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2894.valid){
continue;
}
CheckValue<IkReal> x2895 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2893))+(((-1.0)*r12*x2892)))),IkReal(((((-1.0)*gconst91*r11*x2892))+((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2893)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2894.value)))+(x2895.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2896=IKsin(j4);
IkReal x2897=IKcos(j4);
IkReal x2898=((1.0)*cj2);
IkReal x2899=(gconst92*r00);
IkReal x2900=(gconst92*r20);
IkReal x2901=((1.0)*sj0);
IkReal x2902=(gconst92*r10);
IkReal x2903=(cj1*sj2);
IkReal x2904=((1.0)*x2897);
IkReal x2905=(gconst91*x2896);
IkReal x2906=((1.0)*x2896);
evalcond[0]=((((-1.0)*x2900*x2906))+((r21*x2905))+(((-1.0)*r22*x2904)));
evalcond[1]=((((-1.0)*x2902*x2906))+cj0+(((-1.0)*r12*x2904))+((r11*x2905)));
evalcond[2]=((((-1.0)*r02*x2904))+((r01*x2905))+(((-1.0)*x2901))+(((-1.0)*x2899*x2906)));
evalcond[3]=(((sj1*sj2))+((x2897*x2900))+(((-1.0)*cj1*x2898))+(((-1.0)*gconst91*r21*x2904))+(((-1.0)*r22*x2906)));
evalcond[4]=((((-1.0)*r02*x2906))+(((-1.0)*cj0*x2903))+(((-1.0)*cj0*sj1*x2898))+((x2897*x2899))+(((-1.0)*gconst91*r01*x2904)));
evalcond[5]=((((-1.0)*sj0*sj1*x2898))+(((-1.0)*x2901*x2903))+(((-1.0)*gconst91*r11*x2904))+((x2897*x2902))+(((-1.0)*r12*x2906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2907=((1.0)*gconst92);
CheckValue<IkReal> x2908=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2907)))),-1);
if(!x2908.valid){
continue;
}
CheckValue<IkReal> x2909 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2907)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2908.value)))+(x2909.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2910=IKsin(j4);
IkReal x2911=IKcos(j4);
IkReal x2912=((1.0)*cj2);
IkReal x2913=(gconst92*r00);
IkReal x2914=(gconst92*r20);
IkReal x2915=((1.0)*sj0);
IkReal x2916=(gconst92*r10);
IkReal x2917=(cj1*sj2);
IkReal x2918=((1.0)*x2911);
IkReal x2919=(gconst91*x2910);
IkReal x2920=((1.0)*x2910);
evalcond[0]=((((-1.0)*x2914*x2920))+((r21*x2919))+(((-1.0)*r22*x2918)));
evalcond[1]=(((r11*x2919))+cj0+(((-1.0)*x2916*x2920))+(((-1.0)*r12*x2918)));
evalcond[2]=(((r01*x2919))+(((-1.0)*r02*x2918))+(((-1.0)*x2913*x2920))+(((-1.0)*x2915)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2912))+((x2911*x2914))+(((-1.0)*r22*x2920))+(((-1.0)*gconst91*r21*x2918)));
evalcond[4]=((((-1.0)*cj0*sj1*x2912))+(((-1.0)*r02*x2920))+(((-1.0)*gconst91*r01*x2918))+((x2911*x2913))+(((-1.0)*cj0*x2917)));
evalcond[5]=((((-1.0)*x2915*x2917))+(((-1.0)*gconst91*r11*x2918))+(((-1.0)*r12*x2920))+((x2911*x2916))+(((-1.0)*sj0*sj1*x2912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2921=((-1.0)*r01);
IkReal x2923 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2923)==0){
continue;
}
IkReal x2922=pow(x2923,-0.5);
CheckValue<IkReal> x2924 = IKatan2WithCheck(IkReal(x2921),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2924.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2924.value))));
IkReal gconst94=(x2921*x2922);
IkReal gconst95=((1.0)*r00*x2922);
CheckValue<IkReal> x2925 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2925.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2925.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2926=((-1.0)*r01);
CheckValue<IkReal> x2929 = IKatan2WithCheck(IkReal(x2926),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2929.valid){
continue;
}
IkReal x2927=((1.0)*(x2929.value));
IkReal x2928=x2922;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2927)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2927)));
IkReal gconst94=(x2926*x2928);
IkReal gconst95=((1.0)*r00*x2928);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2930=((-1.0)*r01);
CheckValue<IkReal> x2933 = IKatan2WithCheck(IkReal(x2930),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2933.valid){
continue;
}
IkReal x2931=((1.0)*(x2933.value));
IkReal x2932=x2922;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2931)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2931)));
IkReal gconst94=(x2930*x2932);
IkReal gconst95=((1.0)*r00*x2932);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2934=((-1.0)*r01);
CheckValue<IkReal> x2937 = IKatan2WithCheck(IkReal(x2934),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2937.valid){
continue;
}
IkReal x2935=((1.0)*(x2937.value));
IkReal x2936=x2922;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2935)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2935)));
IkReal gconst94=(x2934*x2936);
IkReal gconst95=((1.0)*r00*x2936);
IkReal x2938=r02*r02;
IkReal x2939=(r12*sj0);
IkReal x2940=((1.0)*cj0);
IkReal x2941=x2922;
j4eval[0]=((IKabs(((((-1.0)*x2940*x2941))+((cj0*x2938*x2941))+((r02*x2939*x2941)))))+(IKabs(((((-1.0)*r02*x2940))+(((-1.0)*x2939))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2942=((1.0)*sj0);
IkReal x2943=((1.0)*cj0);
CheckValue<IkReal> x2944=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2944.valid){
continue;
}
CheckValue<IkReal> x2945 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2942))+(((-1.0)*r02*x2943)))),IkReal(((((-1.0)*gconst94*r01*x2943))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r11*x2942))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2944.value)))+(x2945.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2946=IKsin(j4);
IkReal x2947=IKcos(j4);
IkReal x2948=(gconst94*r11);
IkReal x2949=((1.0)*cj2);
IkReal x2950=(gconst94*r21);
IkReal x2951=((1.0)*sj0);
IkReal x2952=(gconst94*r01);
IkReal x2953=(cj1*sj2);
IkReal x2954=((1.0)*x2947);
IkReal x2955=(gconst95*x2947);
IkReal x2956=((1.0)*x2946);
IkReal x2957=(gconst95*x2956);
evalcond[0]=(((x2946*x2950))+(((-1.0)*r20*x2957))+(((-1.0)*r22*x2954)));
evalcond[1]=(((x2946*x2948))+(((-1.0)*r10*x2957))+cj0+(((-1.0)*r12*x2954)));
evalcond[2]=((((-1.0)*r02*x2954))+((x2946*x2952))+(((-1.0)*x2951))+(((-1.0)*r00*x2957)));
evalcond[3]=(((sj1*sj2))+((r20*x2955))+(((-1.0)*cj1*x2949))+(((-1.0)*r22*x2956))+(((-1.0)*x2950*x2954)));
evalcond[4]=((((-1.0)*r02*x2956))+(((-1.0)*x2952*x2954))+(((-1.0)*cj0*x2953))+((r00*x2955))+(((-1.0)*cj0*sj1*x2949)));
evalcond[5]=((((-1.0)*x2948*x2954))+((r10*x2955))+(((-1.0)*x2951*x2953))+(((-1.0)*r12*x2956))+(((-1.0)*sj0*sj1*x2949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2958=((1.0)*gconst95);
CheckValue<IkReal> x2959 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2958)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2959.valid){
continue;
}
CheckValue<IkReal> x2960=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2958)))),-1);
if(!x2960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2959.value)+(((1.5707963267949)*(x2960.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2961=IKsin(j4);
IkReal x2962=IKcos(j4);
IkReal x2963=(gconst94*r11);
IkReal x2964=((1.0)*cj2);
IkReal x2965=(gconst94*r21);
IkReal x2966=((1.0)*sj0);
IkReal x2967=(gconst94*r01);
IkReal x2968=(cj1*sj2);
IkReal x2969=((1.0)*x2962);
IkReal x2970=(gconst95*x2962);
IkReal x2971=((1.0)*x2961);
IkReal x2972=(gconst95*x2971);
evalcond[0]=((((-1.0)*r20*x2972))+((x2961*x2965))+(((-1.0)*r22*x2969)));
evalcond[1]=(cj0+((x2961*x2963))+(((-1.0)*r10*x2972))+(((-1.0)*r12*x2969)));
evalcond[2]=((((-1.0)*r00*x2972))+((x2961*x2967))+(((-1.0)*r02*x2969))+(((-1.0)*x2966)));
evalcond[3]=((((-1.0)*x2965*x2969))+((sj1*sj2))+(((-1.0)*r22*x2971))+(((-1.0)*cj1*x2964))+((r20*x2970)));
evalcond[4]=((((-1.0)*r02*x2971))+(((-1.0)*x2967*x2969))+(((-1.0)*cj0*x2968))+((r00*x2970))+(((-1.0)*cj0*sj1*x2964)));
evalcond[5]=((((-1.0)*x2963*x2969))+(((-1.0)*r12*x2971))+((r10*x2970))+(((-1.0)*sj0*sj1*x2964))+(((-1.0)*x2966*x2968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2973=((1.0)*gconst95);
CheckValue<IkReal> x2974=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2973)))),-1);
if(!x2974.valid){
continue;
}
CheckValue<IkReal> x2975 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r21))+(((-1.0)*cj0*r20*x2973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2974.value)))+(x2975.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2976=IKsin(j4);
IkReal x2977=IKcos(j4);
IkReal x2978=(gconst94*r11);
IkReal x2979=((1.0)*cj2);
IkReal x2980=(gconst94*r21);
IkReal x2981=((1.0)*sj0);
IkReal x2982=(gconst94*r01);
IkReal x2983=(cj1*sj2);
IkReal x2984=((1.0)*x2977);
IkReal x2985=(gconst95*x2977);
IkReal x2986=((1.0)*x2976);
IkReal x2987=(gconst95*x2986);
evalcond[0]=(((x2976*x2980))+(((-1.0)*r20*x2987))+(((-1.0)*r22*x2984)));
evalcond[1]=(cj0+(((-1.0)*r10*x2987))+(((-1.0)*r12*x2984))+((x2976*x2978)));
evalcond[2]=(((x2976*x2982))+(((-1.0)*r00*x2987))+(((-1.0)*x2981))+(((-1.0)*r02*x2984)));
evalcond[3]=(((sj1*sj2))+((r20*x2985))+(((-1.0)*x2980*x2984))+(((-1.0)*r22*x2986))+(((-1.0)*cj1*x2979)));
evalcond[4]=((((-1.0)*x2982*x2984))+(((-1.0)*cj0*x2983))+((r00*x2985))+(((-1.0)*r02*x2986))+(((-1.0)*cj0*sj1*x2979)));
evalcond[5]=((((-1.0)*x2978*x2984))+(((-1.0)*x2981*x2983))+(((-1.0)*r12*x2986))+(((-1.0)*sj0*sj1*x2979))+((r10*x2985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2988=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2988;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2988);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2989=((1.0)*cj5);
IkReal x2990=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2989)));
j4eval[0]=x2990;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2989)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2990);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2991=cj5*cj5;
IkReal x2992=r01*r01;
IkReal x2993=(r01*sj5);
IkReal x2994=(cj5*r00);
IkReal x2995=((((-1.0)*x2991*(r00*r00)))+(((-1.0)*(r02*r02)))+((x2991*x2992))+(((-1.0)*x2992))+(((2.0)*x2993*x2994)));
j4eval[0]=x2995;
j4eval[1]=IKsign(x2995);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2993))+x2994))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2996=cj5*cj5;
IkReal x2997=r01*r01;
IkReal x2998=(r01*sj5);
IkReal x2999=(cj5*r00);
CheckValue<IkReal> x3000 = IKatan2WithCheck(IkReal(((((-1.0)*x2998))+x2999)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3000.valid){
continue;
}
CheckValue<IkReal> x3001=IKPowWithIntegerCheck(IKsign((((x2996*x2997))+(((-1.0)*(r02*r02)))+(((-1.0)*x2997))+(((-1.0)*x2996*(r00*r00)))+(((2.0)*x2998*x2999)))),-1);
if(!x3001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3000.value)+(((1.5707963267949)*(x3001.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3002=IKsin(j4);
IkReal x3003=IKcos(j4);
IkReal x3004=(cj5*r10);
IkReal x3005=(r01*sj5);
IkReal x3006=((1.0)*cj2);
IkReal x3007=(cj5*r00);
IkReal x3008=(cj5*r20);
IkReal x3009=((1.0)*x3003);
IkReal x3010=((1.0)*x3002);
IkReal x3011=(sj5*x3002);
evalcond[0]=((((-1.0)*r22*x3009))+((r21*x3011))+(((-1.0)*x3008*x3010)));
evalcond[1]=((((-1.0)*x3004*x3010))+(((-1.0)*r12*x3009))+((r11*x3011)));
evalcond[2]=((((-1.0)*r02*x3010))+((x3003*x3007))+(((-1.0)*x3005*x3009)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3009))+((x3002*x3005))+(((-1.0)*x3007*x3010)));
evalcond[4]=((((-1.0)*r21*sj5*x3009))+(((-1.0)*r22*x3010))+((sj1*sj2))+((x3003*x3008))+(((-1.0)*cj1*x3006)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x3003*x3004))+(((-1.0)*r11*sj5*x3009))+(((-1.0)*r12*x3010))+(((-1.0)*sj1*x3006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3012=((1.0)*cj5);
CheckValue<IkReal> x3013 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3013.valid){
continue;
}
CheckValue<IkReal> x3014=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3012)))),-1);
if(!x3014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3013.value)+(((1.5707963267949)*(x3014.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3015=IKsin(j4);
IkReal x3016=IKcos(j4);
IkReal x3017=(cj5*r10);
IkReal x3018=(r01*sj5);
IkReal x3019=((1.0)*cj2);
IkReal x3020=(cj5*r00);
IkReal x3021=(cj5*r20);
IkReal x3022=((1.0)*x3016);
IkReal x3023=((1.0)*x3015);
IkReal x3024=(sj5*x3015);
evalcond[0]=((((-1.0)*x3021*x3023))+((r21*x3024))+(((-1.0)*r22*x3022)));
evalcond[1]=((((-1.0)*r12*x3022))+((r11*x3024))+(((-1.0)*x3017*x3023)));
evalcond[2]=((((-1.0)*x3018*x3022))+((x3016*x3020))+(((-1.0)*r02*x3023)));
evalcond[3]=((-1.0)+((x3015*x3018))+(((-1.0)*x3020*x3023))+(((-1.0)*r02*x3022)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x3019))+((x3016*x3021))+(((-1.0)*r22*x3023))+(((-1.0)*r21*sj5*x3022)));
evalcond[5]=((((-1.0)*r12*x3023))+((x3016*x3017))+(((-1.0)*r11*sj5*x3022))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3025=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3025.valid){
continue;
}
CheckValue<IkReal> x3026 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3025.value)))+(x3026.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3027=IKsin(j4);
IkReal x3028=IKcos(j4);
IkReal x3029=(cj5*r10);
IkReal x3030=(r01*sj5);
IkReal x3031=((1.0)*cj2);
IkReal x3032=(cj5*r00);
IkReal x3033=(cj5*r20);
IkReal x3034=((1.0)*x3028);
IkReal x3035=((1.0)*x3027);
IkReal x3036=(sj5*x3027);
evalcond[0]=(((r21*x3036))+(((-1.0)*x3033*x3035))+(((-1.0)*r22*x3034)));
evalcond[1]=((((-1.0)*x3029*x3035))+((r11*x3036))+(((-1.0)*r12*x3034)));
evalcond[2]=(((x3028*x3032))+(((-1.0)*x3030*x3034))+(((-1.0)*r02*x3035)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3034))+(((-1.0)*x3032*x3035))+((x3027*x3030)));
evalcond[4]=((((-1.0)*cj1*x3031))+((x3028*x3033))+(((-1.0)*r21*sj5*x3034))+((sj1*sj2))+(((-1.0)*r22*x3035)));
evalcond[5]=(((x3028*x3029))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3035))+(((-1.0)*r11*sj5*x3034))+(((-1.0)*sj1*x3031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3037=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3037;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3038=((1.0)*cj5);
IkReal x3039=((((-1.0)*r21*x3038))+(((-1.0)*r20*sj5)));
j4eval[0]=x3039;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x3038)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3040=cj5*cj5;
IkReal x3041=r01*r01;
IkReal x3042=(cj5*r00);
IkReal x3043=(r01*sj5);
IkReal x3044=(x3041+(((-1.0)*x3040*x3041))+(r02*r02)+((x3040*(r00*r00)))+(((-2.0)*x3042*x3043)));
j4eval[0]=x3044;
j4eval[1]=((IKabs((x3042+(((-1.0)*x3043)))))+(IKabs(r02)));
j4eval[2]=IKsign(x3044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3045=cj5*cj5;
IkReal x3046=r01*r01;
IkReal x3047=(r01*sj5);
IkReal x3048=(cj5*r00);
CheckValue<IkReal> x3049 = IKatan2WithCheck(IkReal((x3048+(((-1.0)*x3047)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3049.valid){
continue;
}
CheckValue<IkReal> x3050=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3047*x3048))+(((-1.0)*x3045*x3046))+x3046+((x3045*(r00*r00)))+(r02*r02))),-1);
if(!x3050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3049.value)+(((1.5707963267949)*(x3050.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3051=IKsin(j4);
IkReal x3052=IKcos(j4);
IkReal x3053=(cj5*r10);
IkReal x3054=(r01*sj5);
IkReal x3055=(cj5*r00);
IkReal x3056=(cj5*r20);
IkReal x3057=((1.0)*x3052);
IkReal x3058=((1.0)*x3051);
IkReal x3059=(sj5*x3051);
evalcond[0]=((((-1.0)*x3056*x3058))+((r21*x3059))+(((-1.0)*r22*x3057)));
evalcond[1]=((((-1.0)*x3053*x3058))+((r11*x3059))+(((-1.0)*r12*x3057)));
evalcond[2]=((((-1.0)*r02*x3058))+((x3052*x3055))+(((-1.0)*x3054*x3057)));
evalcond[3]=((1.0)+(((-1.0)*x3055*x3058))+((x3051*x3054))+(((-1.0)*r02*x3057)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x3052*x3053))+(((-1.0)*r12*x3058))+(((-1.0)*r11*sj5*x3057)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3052*x3056))+(((-1.0)*r21*sj5*x3057))+(((-1.0)*r22*x3058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3060=((1.0)*cj5);
CheckValue<IkReal> x3061=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3060))+(((-1.0)*r20*sj5)))),-1);
if(!x3061.valid){
continue;
}
CheckValue<IkReal> x3062 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x3060))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3061.value)))+(x3062.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3063=IKsin(j4);
IkReal x3064=IKcos(j4);
IkReal x3065=(cj5*r10);
IkReal x3066=(r01*sj5);
IkReal x3067=(cj5*r00);
IkReal x3068=(cj5*r20);
IkReal x3069=((1.0)*x3064);
IkReal x3070=((1.0)*x3063);
IkReal x3071=(sj5*x3063);
evalcond[0]=((((-1.0)*r22*x3069))+((r21*x3071))+(((-1.0)*x3068*x3070)));
evalcond[1]=((((-1.0)*r12*x3069))+(((-1.0)*x3065*x3070))+((r11*x3071)));
evalcond[2]=((((-1.0)*x3066*x3069))+(((-1.0)*r02*x3070))+((x3064*x3067)));
evalcond[3]=((1.0)+(((-1.0)*x3067*x3070))+(((-1.0)*r02*x3069))+((x3063*x3066)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x3069))+((cj1*sj2))+(((-1.0)*r12*x3070))+((x3064*x3065)));
evalcond[5]=((((-1.0)*r21*sj5*x3069))+(((-1.0)*r22*x3070))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3064*x3068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3072 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3072.valid){
continue;
}
CheckValue<IkReal> x3073=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3072.value)+(((1.5707963267949)*(x3073.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3074=IKsin(j4);
IkReal x3075=IKcos(j4);
IkReal x3076=(cj5*r10);
IkReal x3077=(r01*sj5);
IkReal x3078=(cj5*r00);
IkReal x3079=(cj5*r20);
IkReal x3080=((1.0)*x3075);
IkReal x3081=((1.0)*x3074);
IkReal x3082=(sj5*x3074);
evalcond[0]=((((-1.0)*x3079*x3081))+((r21*x3082))+(((-1.0)*r22*x3080)));
evalcond[1]=(((r11*x3082))+(((-1.0)*x3076*x3081))+(((-1.0)*r12*x3080)));
evalcond[2]=(((x3075*x3078))+(((-1.0)*x3077*x3080))+(((-1.0)*r02*x3081)));
evalcond[3]=((1.0)+(((-1.0)*x3078*x3081))+(((-1.0)*r02*x3080))+((x3074*x3077)));
evalcond[4]=(((cj2*sj1))+((x3075*x3076))+((cj1*sj2))+(((-1.0)*r12*x3081))+(((-1.0)*r11*sj5*x3080)));
evalcond[5]=(((x3075*x3079))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3080))+(((-1.0)*r22*x3081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3083=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3083);
rxp1_1=(px*r21);
rxp1_2=(r11*x3083);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3084=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3084);
rxp1_1=(px*r21);
rxp1_2=(r11*x3084);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3085=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3085);
rxp1_1=(px*r21);
rxp1_2=(r11*x3085);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3088=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3088.valid){
continue;
}
IkReal x3086=x3088.value;
IkReal x3087=(sj0*x3086);
cj4array[0]=(((cj2*sj1*x3087))+((cj1*sj2*x3087)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3089=IKsin(j4);
IkReal x3090=IKcos(j4);
IkReal x3091=(cj5*r20);
IkReal x3092=(r21*sj5);
IkReal x3093=((1.0)*x3089);
IkReal x3094=((1.0)*x3090);
evalcond[0]=((-1.0)*r02*x3089);
evalcond[1]=((((-1.0)*r02*x3094))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x3091*x3093))+((x3089*x3092)));
evalcond[3]=(((r11*sj5*x3089))+(((-1.0)*cj5*r10*x3093)));
evalcond[4]=((((-1.0)*x3092*x3094))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3090*x3091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3096=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3096.valid){
continue;
}
IkReal x3095=x3096.value;
cj4array[0]=(((cj1*cj2*x3095))+(((-1.0)*sj1*sj2*x3095)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3097=IKsin(j4);
IkReal x3098=IKcos(j4);
IkReal x3099=(r11*sj5);
IkReal x3100=((1.0)*sj0);
IkReal x3101=((1.0)*x3098);
IkReal x3102=((1.0)*cj5*x3097);
evalcond[0]=((-1.0)*r02*x3097);
evalcond[1]=((((-1.0)*x3100))+(((-1.0)*r02*x3101)));
evalcond[2]=((((-1.0)*r20*x3102))+((r21*sj5*x3097)));
evalcond[3]=((((-1.0)*r10*x3102))+((x3097*x3099)));
evalcond[4]=((((-1.0)*cj1*sj2*x3100))+(((-1.0)*cj2*sj1*x3100))+((cj5*r10*x3098))+(((-1.0)*x3099*x3101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3103=IKPowWithIntegerCheck(r02,-1);
if(!x3103.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3103.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3104=IKsin(j4);
IkReal x3105=IKcos(j4);
IkReal x3106=((1.0)*sj0);
IkReal x3107=(cj5*x3105);
IkReal x3108=(sj5*x3104);
IkReal x3109=((1.0)*sj5*x3105);
IkReal x3110=((1.0)*cj5*x3104);
evalcond[0]=((-1.0)*r02*x3104);
evalcond[1]=((((-1.0)*r20*x3110))+((r21*x3108)));
evalcond[2]=(((r11*x3108))+(((-1.0)*r10*x3110)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x3107))+(((-1.0)*r21*x3109)));
evalcond[4]=((((-1.0)*cj1*sj2*x3106))+(((-1.0)*cj2*sj1*x3106))+(((-1.0)*r11*x3109))+((r10*x3107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3111=((1.0)*sj0);
IkReal x3112=((1.0)*cj0);
CheckValue<IkReal> x3113 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3112))+(((-1.0)*r12*x3111)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3111))+(((-1.0)*r01*sj5*x3112)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3113.valid){
continue;
}
CheckValue<IkReal> x3114=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3113.value)+(((1.5707963267949)*(x3114.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3115=IKsin(j4);
IkReal x3116=IKcos(j4);
IkReal x3117=(cj5*r10);
IkReal x3118=(r01*sj5);
IkReal x3119=((1.0)*cj2);
IkReal x3120=(cj5*r00);
IkReal x3121=((1.0)*sj0);
IkReal x3122=(cj5*r20);
IkReal x3123=(cj1*sj2);
IkReal x3124=((1.0)*x3116);
IkReal x3125=((1.0)*x3115);
IkReal x3126=(sj5*x3115);
evalcond[0]=(((r21*x3126))+(((-1.0)*x3122*x3125))+(((-1.0)*r22*x3124)));
evalcond[1]=(cj0+(((-1.0)*x3117*x3125))+(((-1.0)*r12*x3124))+((r11*x3126)));
evalcond[2]=((((-1.0)*r02*x3124))+(((-1.0)*x3120*x3125))+(((-1.0)*x3121))+((x3115*x3118)));
evalcond[3]=(((x3116*x3122))+(((-1.0)*r21*sj5*x3124))+(((-1.0)*cj1*x3119))+((sj1*sj2))+(((-1.0)*r22*x3125)));
evalcond[4]=(((x3116*x3120))+(((-1.0)*r02*x3125))+(((-1.0)*cj0*x3123))+(((-1.0)*cj0*sj1*x3119))+(((-1.0)*x3118*x3124)));
evalcond[5]=((((-1.0)*sj0*sj1*x3119))+(((-1.0)*r12*x3125))+(((-1.0)*x3121*x3123))+(((-1.0)*r11*sj5*x3124))+((x3116*x3117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3127=((1.0)*cj5);
CheckValue<IkReal> x3128 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3127))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3128.valid){
continue;
}
CheckValue<IkReal> x3129=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3127)))),-1);
if(!x3129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3128.value)+(((1.5707963267949)*(x3129.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3130=IKsin(j4);
IkReal x3131=IKcos(j4);
IkReal x3132=(cj5*r10);
IkReal x3133=(r01*sj5);
IkReal x3134=((1.0)*cj2);
IkReal x3135=(cj5*r00);
IkReal x3136=((1.0)*sj0);
IkReal x3137=(cj5*r20);
IkReal x3138=(cj1*sj2);
IkReal x3139=((1.0)*x3131);
IkReal x3140=((1.0)*x3130);
IkReal x3141=(sj5*x3130);
evalcond[0]=(((r21*x3141))+(((-1.0)*r22*x3139))+(((-1.0)*x3137*x3140)));
evalcond[1]=(cj0+((r11*x3141))+(((-1.0)*r12*x3139))+(((-1.0)*x3132*x3140)));
evalcond[2]=((((-1.0)*r02*x3139))+((x3130*x3133))+(((-1.0)*x3135*x3140))+(((-1.0)*x3136)));
evalcond[3]=(((x3131*x3137))+(((-1.0)*r22*x3140))+(((-1.0)*r21*sj5*x3139))+((sj1*sj2))+(((-1.0)*cj1*x3134)));
evalcond[4]=(((x3131*x3135))+(((-1.0)*cj0*sj1*x3134))+(((-1.0)*x3133*x3139))+(((-1.0)*cj0*x3138))+(((-1.0)*r02*x3140)));
evalcond[5]=(((x3131*x3132))+(((-1.0)*r12*x3140))+(((-1.0)*x3136*x3138))+(((-1.0)*r11*sj5*x3139))+(((-1.0)*sj0*sj1*x3134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3142=((1.0)*cj5);
CheckValue<IkReal> x3143=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3142)))),-1);
if(!x3143.valid){
continue;
}
CheckValue<IkReal> x3144 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3142)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3143.value)))+(x3144.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3145=IKsin(j4);
IkReal x3146=IKcos(j4);
IkReal x3147=(cj5*r10);
IkReal x3148=(r01*sj5);
IkReal x3149=((1.0)*cj2);
IkReal x3150=(cj5*r00);
IkReal x3151=((1.0)*sj0);
IkReal x3152=(cj5*r20);
IkReal x3153=(cj1*sj2);
IkReal x3154=((1.0)*x3146);
IkReal x3155=((1.0)*x3145);
IkReal x3156=(sj5*x3145);
evalcond[0]=((((-1.0)*r22*x3154))+((r21*x3156))+(((-1.0)*x3152*x3155)));
evalcond[1]=(cj0+((r11*x3156))+(((-1.0)*r12*x3154))+(((-1.0)*x3147*x3155)));
evalcond[2]=((((-1.0)*x3151))+(((-1.0)*x3150*x3155))+((x3145*x3148))+(((-1.0)*r02*x3154)));
evalcond[3]=((((-1.0)*cj1*x3149))+(((-1.0)*r22*x3155))+((sj1*sj2))+(((-1.0)*r21*sj5*x3154))+((x3146*x3152)));
evalcond[4]=((((-1.0)*x3148*x3154))+(((-1.0)*cj0*sj1*x3149))+(((-1.0)*r02*x3155))+(((-1.0)*cj0*x3153))+((x3146*x3150)));
evalcond[5]=(((x3146*x3147))+(((-1.0)*sj0*sj1*x3149))+(((-1.0)*r11*sj5*x3154))+(((-1.0)*r12*x3155))+(((-1.0)*x3151*x3153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3157=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3157;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3157);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3158=r21*r21;
IkReal x3159=cj5*cj5;
IkReal x3160=(sj1*sj2);
IkReal x3161=(r21*sj5);
IkReal x3162=(cj5*r20);
IkReal x3163=(cj1*cj2);
IkReal x3164=((((-1.0)*x3158))+(((-1.0)*x3159*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*x3161*x3162))+((x3158*x3159)));
j4eval[0]=x3164;
j4eval[1]=((IKabs((((r22*x3160))+(((-1.0)*r22*x3163)))))+(IKabs((((x3162*x3163))+(((-1.0)*x3160*x3162))+((x3160*x3161))+(((-1.0)*x3161*x3163))))));
j4eval[2]=IKsign(x3164);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3165=IKsin(j0);
IkReal x3166=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x3165))+(((0.425)*x3166)));
evalcond[1]=((((0.10915)*x3166))+(((-1.0)*py))+(((0.425)*x3165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3167=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3167;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3167);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3168=((1.0)*cj5);
IkReal x3169=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3168)));
j4eval[0]=x3169;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3168)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3169);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3170=((1.0)*cj5);
IkReal x3171=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3170)));
j4eval[0]=x3171;
j4eval[1]=IKsign(x3171);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3170))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3172=((1.0)*cj5);
CheckValue<IkReal> x3173 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3172))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3173.valid){
continue;
}
CheckValue<IkReal> x3174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3172)))),-1);
if(!x3174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3173.value)+(((1.5707963267949)*(x3174.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3175=IKcos(j4);
IkReal x3176=IKsin(j4);
IkReal x3177=((1.0)*sj0);
IkReal x3178=(cj5*r00);
IkReal x3179=(cj5*r10);
IkReal x3180=(cj5*r20);
IkReal x3181=((1.0)*x3175);
IkReal x3182=((1.0)*x3176);
IkReal x3183=(sj5*x3175);
IkReal x3184=(sj5*x3176);
evalcond[0]=((((-1.0)*x3180*x3181))+((r22*x3176))+((r21*x3183)));
evalcond[1]=((((-1.0)*x3180*x3182))+(((-1.0)*r22*x3181))+((r21*x3184)));
evalcond[2]=(cj0+(((-1.0)*x3179*x3182))+((r11*x3184))+(((-1.0)*r12*x3181)));
evalcond[3]=(((r01*x3183))+((r02*x3176))+(((-1.0)*x3178*x3181))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3179*x3181))+(((-1.0)*x3177))+((r11*x3183))+((r12*x3176)));
evalcond[5]=((((-1.0)*r02*x3181))+((r01*x3184))+(((-1.0)*x3177))+(((-1.0)*x3178*x3182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3185=((1.0)*cj5);
CheckValue<IkReal> x3186=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3185)))),-1);
if(!x3186.valid){
continue;
}
CheckValue<IkReal> x3187 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3185))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3186.value)))+(x3187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3188=IKcos(j4);
IkReal x3189=IKsin(j4);
IkReal x3190=((1.0)*sj0);
IkReal x3191=(cj5*r00);
IkReal x3192=(cj5*r10);
IkReal x3193=(cj5*r20);
IkReal x3194=((1.0)*x3188);
IkReal x3195=((1.0)*x3189);
IkReal x3196=(sj5*x3188);
IkReal x3197=(sj5*x3189);
evalcond[0]=(((r22*x3189))+((r21*x3196))+(((-1.0)*x3193*x3194)));
evalcond[1]=((((-1.0)*r22*x3194))+((r21*x3197))+(((-1.0)*x3193*x3195)));
evalcond[2]=(cj0+(((-1.0)*x3192*x3195))+((r11*x3197))+(((-1.0)*r12*x3194)));
evalcond[3]=((((-1.0)*x3191*x3194))+((r01*x3196))+(((-1.0)*cj0))+((r02*x3189)));
evalcond[4]=((((-1.0)*x3192*x3194))+((r12*x3189))+((r11*x3196))+(((-1.0)*x3190)));
evalcond[5]=((((-1.0)*x3191*x3195))+((r01*x3197))+(((-1.0)*r02*x3194))+(((-1.0)*x3190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3198 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3198.valid){
continue;
}
CheckValue<IkReal> x3199=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3198.value)+(((1.5707963267949)*(x3199.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3200=IKcos(j4);
IkReal x3201=IKsin(j4);
IkReal x3202=((1.0)*sj0);
IkReal x3203=(cj5*r00);
IkReal x3204=(cj5*r10);
IkReal x3205=(cj5*r20);
IkReal x3206=((1.0)*x3200);
IkReal x3207=((1.0)*x3201);
IkReal x3208=(sj5*x3200);
IkReal x3209=(sj5*x3201);
evalcond[0]=(((r22*x3201))+((r21*x3208))+(((-1.0)*x3205*x3206)));
evalcond[1]=((((-1.0)*r22*x3206))+((r21*x3209))+(((-1.0)*x3205*x3207)));
evalcond[2]=((((-1.0)*x3204*x3207))+cj0+((r11*x3209))+(((-1.0)*r12*x3206)));
evalcond[3]=(((r01*x3208))+(((-1.0)*x3203*x3206))+((r02*x3201))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3204*x3206))+((r11*x3208))+((r12*x3201))+(((-1.0)*x3202)));
evalcond[5]=((((-1.0)*r02*x3206))+((r01*x3209))+(((-1.0)*x3203*x3207))+(((-1.0)*x3202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3210=IKsin(j0);
IkReal x3211=IKcos(j0);
evalcond[0]=((((-0.10915)*x3210))+(((-1.0)*px))+(((0.425)*x3211)));
evalcond[1]=((((0.10915)*x3211))+(((-1.0)*py))+(((0.425)*x3210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3212=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3212;
j4eval[1]=IKsign(x3212);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3213=((1.0)*cj5);
IkReal x3214=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3213)));
j4eval[0]=x3214;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3213)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3214);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3215=cj5*cj5;
IkReal x3216=((1.0)*r20);
IkReal x3217=(r01*r21);
IkReal x3218=(r21*sj5);
IkReal x3219=(((cj5*r01*r20*sj5))+((cj5*r00*x3218))+(((-1.0)*r02*r22))+((x3215*x3217))+(((-1.0)*x3217))+(((-1.0)*r00*x3215*x3216)));
j4eval[0]=x3219;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3216))+((cj0*x3218)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3219);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3220=cj5*cj5;
IkReal x3221=((1.0)*r20);
IkReal x3222=(r01*r21);
IkReal x3223=(r21*sj5);
CheckValue<IkReal> x3224=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3223))+((x3220*x3222))+(((-1.0)*x3222))+(((-1.0)*r00*x3220*x3221)))),-1);
if(!x3224.valid){
continue;
}
CheckValue<IkReal> x3225 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3223))+(((-1.0)*cj0*cj5*x3221)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3224.value)))+(x3225.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3226=IKcos(j4);
IkReal x3227=IKsin(j4);
IkReal x3228=(cj5*r00);
IkReal x3229=(cj5*r10);
IkReal x3230=(cj5*r20);
IkReal x3231=((1.0)*x3226);
IkReal x3232=((1.0)*x3227);
IkReal x3233=(sj5*x3226);
IkReal x3234=(sj5*x3227);
evalcond[0]=((((-1.0)*x3230*x3231))+((r22*x3227))+((r21*x3233)));
evalcond[1]=((((-1.0)*x3230*x3232))+(((-1.0)*r22*x3231))+((r21*x3234)));
evalcond[2]=(cj0+((r02*x3227))+((r01*x3233))+(((-1.0)*x3228*x3231)));
evalcond[3]=((((-1.0)*x3229*x3231))+((r12*x3227))+sj0+((r11*x3233)));
evalcond[4]=((((-1.0)*x3229*x3232))+cj0+((r11*x3234))+(((-1.0)*r12*x3231)));
evalcond[5]=((((-1.0)*r02*x3231))+(((-1.0)*sj0))+((r01*x3234))+(((-1.0)*x3228*x3232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3235=((1.0)*cj5);
CheckValue<IkReal> x3236 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3235)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3236.valid){
continue;
}
CheckValue<IkReal> x3237=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3235)))),-1);
if(!x3237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3236.value)+(((1.5707963267949)*(x3237.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3238=IKcos(j4);
IkReal x3239=IKsin(j4);
IkReal x3240=(cj5*r00);
IkReal x3241=(cj5*r10);
IkReal x3242=(cj5*r20);
IkReal x3243=((1.0)*x3238);
IkReal x3244=((1.0)*x3239);
IkReal x3245=(sj5*x3238);
IkReal x3246=(sj5*x3239);
evalcond[0]=(((r21*x3245))+((r22*x3239))+(((-1.0)*x3242*x3243)));
evalcond[1]=(((r21*x3246))+(((-1.0)*x3242*x3244))+(((-1.0)*r22*x3243)));
evalcond[2]=(((r01*x3245))+cj0+(((-1.0)*x3240*x3243))+((r02*x3239)));
evalcond[3]=(sj0+((r12*x3239))+(((-1.0)*x3241*x3243))+((r11*x3245)));
evalcond[4]=(cj0+(((-1.0)*r12*x3243))+(((-1.0)*x3241*x3244))+((r11*x3246)));
evalcond[5]=(((r01*x3246))+(((-1.0)*sj0))+(((-1.0)*x3240*x3244))+(((-1.0)*r02*x3243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3247 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3247.valid){
continue;
}
CheckValue<IkReal> x3248=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3247.value)+(((1.5707963267949)*(x3248.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3249=IKcos(j4);
IkReal x3250=IKsin(j4);
IkReal x3251=(cj5*r00);
IkReal x3252=(cj5*r10);
IkReal x3253=(cj5*r20);
IkReal x3254=((1.0)*x3249);
IkReal x3255=((1.0)*x3250);
IkReal x3256=(sj5*x3249);
IkReal x3257=(sj5*x3250);
evalcond[0]=((((-1.0)*x3253*x3254))+((r21*x3256))+((r22*x3250)));
evalcond[1]=((((-1.0)*x3253*x3255))+((r21*x3257))+(((-1.0)*r22*x3254)));
evalcond[2]=(cj0+((r02*x3250))+((r01*x3256))+(((-1.0)*x3251*x3254)));
evalcond[3]=(((r12*x3250))+sj0+((r11*x3256))+(((-1.0)*x3252*x3254)));
evalcond[4]=(cj0+((r11*x3257))+(((-1.0)*x3252*x3255))+(((-1.0)*r12*x3254)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3254))+((r01*x3257))+(((-1.0)*x3251*x3255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3258=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3258;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3258);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3259=((1.0)*cj5);
IkReal x3260=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3259)));
j4eval[0]=x3260;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3259))))));
j4eval[2]=IKsign(x3260);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3261=((1.0)*cj5);
IkReal x3262=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3261)));
j4eval[0]=x3262;
j4eval[1]=IKsign(x3262);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3261)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3263=((1.0)*cj5);
CheckValue<IkReal> x3264 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3263)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3264.valid){
continue;
}
CheckValue<IkReal> x3265=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3263)))),-1);
if(!x3265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3264.value)+(((1.5707963267949)*(x3265.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3266=IKcos(j4);
IkReal x3267=IKsin(j4);
IkReal x3268=((1.0)*sj0);
IkReal x3269=(cj5*r00);
IkReal x3270=(cj5*r10);
IkReal x3271=(cj5*r20);
IkReal x3272=((1.0)*x3266);
IkReal x3273=((1.0)*x3267);
IkReal x3274=(sj5*x3266);
IkReal x3275=(sj5*x3267);
evalcond[0]=(((r21*x3274))+(((-1.0)*x3271*x3272))+((r22*x3267)));
evalcond[1]=(((r21*x3275))+(((-1.0)*x3271*x3273))+(((-1.0)*r22*x3272)));
evalcond[2]=((((-1.0)*r12*x3272))+cj0+((r11*x3275))+(((-1.0)*x3270*x3273)));
evalcond[3]=(((r01*x3274))+((r02*x3267))+(((-1.0)*x3269*x3272))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3268))+((r11*x3274))+((r12*x3267))+(((-1.0)*x3270*x3272)));
evalcond[5]=(((r01*x3275))+(((-1.0)*x3268))+(((-1.0)*x3269*x3273))+(((-1.0)*r02*x3272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3276=((1.0)*cj5);
CheckValue<IkReal> x3277 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3276)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3277.valid){
continue;
}
CheckValue<IkReal> x3278=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3276)))),-1);
if(!x3278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3277.value)+(((1.5707963267949)*(x3278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3279=IKcos(j4);
IkReal x3280=IKsin(j4);
IkReal x3281=((1.0)*sj0);
IkReal x3282=(cj5*r00);
IkReal x3283=(cj5*r10);
IkReal x3284=(cj5*r20);
IkReal x3285=((1.0)*x3279);
IkReal x3286=((1.0)*x3280);
IkReal x3287=(sj5*x3279);
IkReal x3288=(sj5*x3280);
evalcond[0]=(((r22*x3280))+((r21*x3287))+(((-1.0)*x3284*x3285)));
evalcond[1]=((((-1.0)*r22*x3285))+((r21*x3288))+(((-1.0)*x3284*x3286)));
evalcond[2]=((((-1.0)*r12*x3285))+cj0+(((-1.0)*x3283*x3286))+((r11*x3288)));
evalcond[3]=(((r02*x3280))+(((-1.0)*x3282*x3285))+(((-1.0)*cj0))+((r01*x3287)));
evalcond[4]=((((-1.0)*x3281))+(((-1.0)*x3283*x3285))+((r11*x3287))+((r12*x3280)));
evalcond[5]=((((-1.0)*x3281))+(((-1.0)*x3282*x3286))+(((-1.0)*r02*x3285))+((r01*x3288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3289 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3289.valid){
continue;
}
CheckValue<IkReal> x3290=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3289.value)+(((1.5707963267949)*(x3290.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3291=IKcos(j4);
IkReal x3292=IKsin(j4);
IkReal x3293=((1.0)*sj0);
IkReal x3294=(cj5*r00);
IkReal x3295=(cj5*r10);
IkReal x3296=(cj5*r20);
IkReal x3297=((1.0)*x3291);
IkReal x3298=((1.0)*x3292);
IkReal x3299=(sj5*x3291);
IkReal x3300=(sj5*x3292);
evalcond[0]=(((r21*x3299))+((r22*x3292))+(((-1.0)*x3296*x3297)));
evalcond[1]=(((r21*x3300))+(((-1.0)*r22*x3297))+(((-1.0)*x3296*x3298)));
evalcond[2]=((((-1.0)*r12*x3297))+cj0+((r11*x3300))+(((-1.0)*x3295*x3298)));
evalcond[3]=(((r01*x3299))+((r02*x3292))+(((-1.0)*x3294*x3297))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3293))+(((-1.0)*x3295*x3297))+((r11*x3299))+((r12*x3292)));
evalcond[5]=((((-1.0)*x3293))+(((-1.0)*r02*x3297))+(((-1.0)*x3294*x3298))+((r01*x3300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3301=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3301;
j4eval[1]=IKsign(x3301);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3302=((1.0)*cj5);
IkReal x3303=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3302)));
j4eval[0]=x3303;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3302)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3303);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3304=cj5*cj5;
IkReal x3305=((1.0)*r20);
IkReal x3306=(r01*r21);
IkReal x3307=(r21*sj5);
IkReal x3308=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x3304*x3305))+((cj5*r00*x3307))+(((-1.0)*r02*r22))+((x3304*x3306))+(((-1.0)*x3306)));
j4eval[0]=x3308;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3307))+(((-1.0)*cj0*cj5*x3305))))));
j4eval[2]=IKsign(x3308);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3309=cj5*cj5;
IkReal x3310=((1.0)*r20);
IkReal x3311=(r01*r21);
IkReal x3312=(r21*sj5);
CheckValue<IkReal> x3313=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x3309*x3310))+(((-1.0)*r02*r22))+((cj5*r00*x3312))+(((-1.0)*x3311))+((x3309*x3311)))),-1);
if(!x3313.valid){
continue;
}
CheckValue<IkReal> x3314 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3312))+(((-1.0)*cj0*cj5*x3310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3313.value)))+(x3314.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3315=IKcos(j4);
IkReal x3316=IKsin(j4);
IkReal x3317=(cj5*r00);
IkReal x3318=(cj5*r10);
IkReal x3319=(cj5*r20);
IkReal x3320=((1.0)*x3315);
IkReal x3321=((1.0)*x3316);
IkReal x3322=(sj5*x3315);
IkReal x3323=(sj5*x3316);
evalcond[0]=((((-1.0)*x3319*x3320))+((r22*x3316))+((r21*x3322)));
evalcond[1]=((((-1.0)*x3319*x3321))+((r21*x3323))+(((-1.0)*r22*x3320)));
evalcond[2]=(cj0+((r01*x3322))+((r02*x3316))+(((-1.0)*x3317*x3320)));
evalcond[3]=(sj0+((r11*x3322))+((r12*x3316))+(((-1.0)*x3318*x3320)));
evalcond[4]=(cj0+((r11*x3323))+(((-1.0)*x3318*x3321))+(((-1.0)*r12*x3320)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3320))+((r01*x3323))+(((-1.0)*x3317*x3321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3324=((1.0)*cj5);
CheckValue<IkReal> x3325=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3324)))),-1);
if(!x3325.valid){
continue;
}
CheckValue<IkReal> x3326 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3324)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3325.value)))+(x3326.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3327=IKcos(j4);
IkReal x3328=IKsin(j4);
IkReal x3329=(cj5*r00);
IkReal x3330=(cj5*r10);
IkReal x3331=(cj5*r20);
IkReal x3332=((1.0)*x3327);
IkReal x3333=((1.0)*x3328);
IkReal x3334=(sj5*x3327);
IkReal x3335=(sj5*x3328);
evalcond[0]=(((r22*x3328))+((r21*x3334))+(((-1.0)*x3331*x3332)));
evalcond[1]=(((r21*x3335))+(((-1.0)*x3331*x3333))+(((-1.0)*r22*x3332)));
evalcond[2]=(cj0+((r01*x3334))+((r02*x3328))+(((-1.0)*x3329*x3332)));
evalcond[3]=(((r12*x3328))+sj0+(((-1.0)*x3330*x3332))+((r11*x3334)));
evalcond[4]=((((-1.0)*x3330*x3333))+cj0+((r11*x3335))+(((-1.0)*r12*x3332)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3332))+((r01*x3335))+(((-1.0)*x3329*x3333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3336 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3336.valid){
continue;
}
CheckValue<IkReal> x3337=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3336.value)+(((1.5707963267949)*(x3337.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3338=IKcos(j4);
IkReal x3339=IKsin(j4);
IkReal x3340=(cj5*r00);
IkReal x3341=(cj5*r10);
IkReal x3342=(cj5*r20);
IkReal x3343=((1.0)*x3338);
IkReal x3344=((1.0)*x3339);
IkReal x3345=(sj5*x3338);
IkReal x3346=(sj5*x3339);
evalcond[0]=(((r21*x3345))+((r22*x3339))+(((-1.0)*x3342*x3343)));
evalcond[1]=(((r21*x3346))+(((-1.0)*x3342*x3344))+(((-1.0)*r22*x3343)));
evalcond[2]=((((-1.0)*x3340*x3343))+cj0+((r02*x3339))+((r01*x3345)));
evalcond[3]=(sj0+(((-1.0)*x3341*x3343))+((r12*x3339))+((r11*x3345)));
evalcond[4]=(cj0+(((-1.0)*x3341*x3344))+(((-1.0)*r12*x3343))+((r11*x3346)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3340*x3344))+(((-1.0)*r02*x3343))+((r01*x3346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3347=IKcos(j0);
IkReal x3348=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.425)*x3347))+(((-0.10915)*x3348)));
evalcond[1]=((((-1.0)*py))+(((-0.425)*x3348))+(((0.10915)*x3347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3349=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3349;
j4eval[1]=IKsign(x3349);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3350=((1.0)*cj5);
IkReal x3351=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3350)));
j4eval[0]=x3351;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3350))))));
j4eval[2]=IKsign(x3351);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3352=cj5*cj5;
IkReal x3353=((1.0)*r20);
IkReal x3354=(r01*r21);
IkReal x3355=(r21*sj5);
IkReal x3356=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3355))+((x3352*x3354))+(((-1.0)*r00*x3352*x3353))+(((-1.0)*x3354)));
j4eval[0]=x3356;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3353))+((cj0*x3355)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3356);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3357=cj5*cj5;
IkReal x3358=((1.0)*r20);
IkReal x3359=(r01*r21);
IkReal x3360=(r21*sj5);
CheckValue<IkReal> x3361 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3360))+(((-1.0)*cj0*cj5*x3358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3361.valid){
continue;
}
CheckValue<IkReal> x3362=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x3357*x3358))+(((-1.0)*r02*r22))+((cj5*r00*x3360))+((x3357*x3359))+(((-1.0)*x3359)))),-1);
if(!x3362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3361.value)+(((1.5707963267949)*(x3362.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3363=IKcos(j4);
IkReal x3364=IKsin(j4);
IkReal x3365=(cj5*r00);
IkReal x3366=(cj5*r10);
IkReal x3367=(cj5*r20);
IkReal x3368=((1.0)*x3363);
IkReal x3369=((1.0)*x3364);
IkReal x3370=(sj5*x3363);
IkReal x3371=(sj5*x3364);
evalcond[0]=(((r22*x3364))+(((-1.0)*x3367*x3368))+((r21*x3370)));
evalcond[1]=((((-1.0)*r22*x3368))+(((-1.0)*x3367*x3369))+((r21*x3371)));
evalcond[2]=(((r01*x3370))+((r02*x3364))+cj0+(((-1.0)*x3365*x3368)));
evalcond[3]=(sj0+(((-1.0)*x3366*x3368))+((r12*x3364))+((r11*x3370)));
evalcond[4]=((((-1.0)*r12*x3368))+cj0+(((-1.0)*x3366*x3369))+((r11*x3371)));
evalcond[5]=(((r01*x3371))+(((-1.0)*sj0))+(((-1.0)*r02*x3368))+(((-1.0)*x3365*x3369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3372=((1.0)*cj5);
CheckValue<IkReal> x3373 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3372)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3373.valid){
continue;
}
CheckValue<IkReal> x3374=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3372)))),-1);
if(!x3374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3373.value)+(((1.5707963267949)*(x3374.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3375=IKcos(j4);
IkReal x3376=IKsin(j4);
IkReal x3377=(cj5*r00);
IkReal x3378=(cj5*r10);
IkReal x3379=(cj5*r20);
IkReal x3380=((1.0)*x3375);
IkReal x3381=((1.0)*x3376);
IkReal x3382=(sj5*x3375);
IkReal x3383=(sj5*x3376);
evalcond[0]=(((r22*x3376))+((r21*x3382))+(((-1.0)*x3379*x3380)));
evalcond[1]=((((-1.0)*r22*x3380))+((r21*x3383))+(((-1.0)*x3379*x3381)));
evalcond[2]=(((r01*x3382))+cj0+(((-1.0)*x3377*x3380))+((r02*x3376)));
evalcond[3]=(((r12*x3376))+(((-1.0)*x3378*x3380))+sj0+((r11*x3382)));
evalcond[4]=((((-1.0)*x3378*x3381))+cj0+((r11*x3383))+(((-1.0)*r12*x3380)));
evalcond[5]=(((r01*x3383))+(((-1.0)*sj0))+(((-1.0)*x3377*x3381))+(((-1.0)*r02*x3380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3384 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3384.valid){
continue;
}
CheckValue<IkReal> x3385=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3384.value)+(((1.5707963267949)*(x3385.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3386=IKcos(j4);
IkReal x3387=IKsin(j4);
IkReal x3388=(cj5*r00);
IkReal x3389=(cj5*r10);
IkReal x3390=(cj5*r20);
IkReal x3391=((1.0)*x3386);
IkReal x3392=((1.0)*x3387);
IkReal x3393=(sj5*x3386);
IkReal x3394=(sj5*x3387);
evalcond[0]=(((r21*x3393))+((r22*x3387))+(((-1.0)*x3390*x3391)));
evalcond[1]=((((-1.0)*r22*x3391))+((r21*x3394))+(((-1.0)*x3390*x3392)));
evalcond[2]=(cj0+((r01*x3393))+((r02*x3387))+(((-1.0)*x3388*x3391)));
evalcond[3]=(sj0+(((-1.0)*x3389*x3391))+((r11*x3393))+((r12*x3387)));
evalcond[4]=(cj0+(((-1.0)*x3389*x3392))+((r11*x3394))+(((-1.0)*r12*x3391)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3394))+(((-1.0)*r02*x3391))+(((-1.0)*x3388*x3392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3395=IKcos(j0);
IkReal x3396=IKsin(j0);
evalcond[0]=((((-0.10915)*x3396))+(((-1.0)*px))+(((-0.425)*x3395)));
evalcond[1]=((((-1.0)*py))+(((-0.425)*x3396))+(((0.10915)*x3395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3397=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3397;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3397);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3398=((1.0)*cj5);
IkReal x3399=((((-1.0)*r01*x3398))+(((-1.0)*r00*sj5)));
j4eval[0]=x3399;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3398)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3399);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3400=((1.0)*cj5);
IkReal x3401=((((-1.0)*r01*x3400))+(((-1.0)*r00*sj5)));
j4eval[0]=x3401;
j4eval[1]=IKsign(x3401);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x3400))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3402=((1.0)*cj5);
CheckValue<IkReal> x3403=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3402))+(((-1.0)*r00*sj5)))),-1);
if(!x3403.valid){
continue;
}
CheckValue<IkReal> x3404 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3402))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3403.value)))+(x3404.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3405=IKcos(j4);
IkReal x3406=IKsin(j4);
IkReal x3407=((1.0)*sj0);
IkReal x3408=(cj5*r00);
IkReal x3409=(cj5*r10);
IkReal x3410=(cj5*r20);
IkReal x3411=((1.0)*x3405);
IkReal x3412=((1.0)*x3406);
IkReal x3413=(sj5*x3405);
IkReal x3414=(sj5*x3406);
evalcond[0]=(((r22*x3406))+((r21*x3413))+(((-1.0)*x3410*x3411)));
evalcond[1]=((((-1.0)*r22*x3411))+((r21*x3414))+(((-1.0)*x3410*x3412)));
evalcond[2]=(cj0+((r11*x3414))+(((-1.0)*r12*x3411))+(((-1.0)*x3409*x3412)));
evalcond[3]=(((r02*x3406))+(((-1.0)*x3408*x3411))+((r01*x3413))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3413))+((r12*x3406))+(((-1.0)*x3409*x3411))+(((-1.0)*x3407)));
evalcond[5]=((((-1.0)*r02*x3411))+(((-1.0)*x3408*x3412))+((r01*x3414))+(((-1.0)*x3407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3415=((1.0)*cj5);
CheckValue<IkReal> x3416=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3415)))),-1);
if(!x3416.valid){
continue;
}
CheckValue<IkReal> x3417 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3415)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3416.value)))+(x3417.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3418=IKcos(j4);
IkReal x3419=IKsin(j4);
IkReal x3420=((1.0)*sj0);
IkReal x3421=(cj5*r00);
IkReal x3422=(cj5*r10);
IkReal x3423=(cj5*r20);
IkReal x3424=((1.0)*x3418);
IkReal x3425=((1.0)*x3419);
IkReal x3426=(sj5*x3418);
IkReal x3427=(sj5*x3419);
evalcond[0]=(((r22*x3419))+((r21*x3426))+(((-1.0)*x3423*x3424)));
evalcond[1]=((((-1.0)*r22*x3424))+((r21*x3427))+(((-1.0)*x3423*x3425)));
evalcond[2]=((((-1.0)*r12*x3424))+cj0+(((-1.0)*x3422*x3425))+((r11*x3427)));
evalcond[3]=(((r02*x3419))+(((-1.0)*x3421*x3424))+(((-1.0)*cj0))+((r01*x3426)));
evalcond[4]=(((r12*x3419))+(((-1.0)*x3420))+(((-1.0)*x3422*x3424))+((r11*x3426)));
evalcond[5]=((((-1.0)*x3420))+(((-1.0)*x3421*x3425))+(((-1.0)*r02*x3424))+((r01*x3427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3428 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3428.valid){
continue;
}
CheckValue<IkReal> x3429=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3428.value)+(((1.5707963267949)*(x3429.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3430=IKcos(j4);
IkReal x3431=IKsin(j4);
IkReal x3432=((1.0)*sj0);
IkReal x3433=(cj5*r00);
IkReal x3434=(cj5*r10);
IkReal x3435=(cj5*r20);
IkReal x3436=((1.0)*x3430);
IkReal x3437=((1.0)*x3431);
IkReal x3438=(sj5*x3430);
IkReal x3439=(sj5*x3431);
evalcond[0]=((((-1.0)*x3435*x3436))+((r21*x3438))+((r22*x3431)));
evalcond[1]=((((-1.0)*x3435*x3437))+(((-1.0)*r22*x3436))+((r21*x3439)));
evalcond[2]=((((-1.0)*r12*x3436))+cj0+(((-1.0)*x3434*x3437))+((r11*x3439)));
evalcond[3]=(((r01*x3438))+(((-1.0)*x3433*x3436))+((r02*x3431))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3432))+(((-1.0)*x3434*x3436))+((r12*x3431))+((r11*x3438)));
evalcond[5]=(((r01*x3439))+(((-1.0)*x3433*x3437))+(((-1.0)*x3432))+(((-1.0)*r02*x3436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3440=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3440;
j4eval[1]=IKsign(x3440);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3441=((1.0)*cj5);
IkReal x3442=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3441)));
j4eval[0]=x3442;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3441))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3442);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3443=cj5*cj5;
IkReal x3444=((1.0)*r20);
IkReal x3445=(r01*r21);
IkReal x3446=(r21*sj5);
IkReal x3447=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3443*x3444))+(((-1.0)*x3445))+((x3443*x3445))+((cj5*r00*x3446)));
j4eval[0]=x3447;
j4eval[1]=((IKabs((((cj0*x3446))+(((-1.0)*cj0*cj5*x3444)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3447);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3448=cj5*cj5;
IkReal x3449=((1.0)*r20);
IkReal x3450=(r01*r21);
IkReal x3451=(r21*sj5);
CheckValue<IkReal> x3452=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3448*x3449))+((x3448*x3450))+(((-1.0)*x3450))+((cj5*r00*x3451)))),-1);
if(!x3452.valid){
continue;
}
CheckValue<IkReal> x3453 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3449))+((cj0*x3451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3452.value)))+(x3453.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3454=IKcos(j4);
IkReal x3455=IKsin(j4);
IkReal x3456=(cj5*r00);
IkReal x3457=(cj5*r10);
IkReal x3458=(cj5*r20);
IkReal x3459=((1.0)*x3454);
IkReal x3460=((1.0)*x3455);
IkReal x3461=(sj5*x3454);
IkReal x3462=(sj5*x3455);
evalcond[0]=(((r22*x3455))+(((-1.0)*x3458*x3459))+((r21*x3461)));
evalcond[1]=((((-1.0)*x3458*x3460))+((r21*x3462))+(((-1.0)*r22*x3459)));
evalcond[2]=(cj0+((r01*x3461))+((r02*x3455))+(((-1.0)*x3456*x3459)));
evalcond[3]=(sj0+((r12*x3455))+(((-1.0)*x3457*x3459))+((r11*x3461)));
evalcond[4]=(cj0+((r11*x3462))+(((-1.0)*r12*x3459))+(((-1.0)*x3457*x3460)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3462))+(((-1.0)*x3456*x3460))+(((-1.0)*r02*x3459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3463=((1.0)*cj5);
CheckValue<IkReal> x3464=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3463)))),-1);
if(!x3464.valid){
continue;
}
CheckValue<IkReal> x3465 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3463)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3464.value)))+(x3465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3466=IKcos(j4);
IkReal x3467=IKsin(j4);
IkReal x3468=(cj5*r00);
IkReal x3469=(cj5*r10);
IkReal x3470=(cj5*r20);
IkReal x3471=((1.0)*x3466);
IkReal x3472=((1.0)*x3467);
IkReal x3473=(sj5*x3466);
IkReal x3474=(sj5*x3467);
evalcond[0]=(((r21*x3473))+(((-1.0)*x3470*x3471))+((r22*x3467)));
evalcond[1]=((((-1.0)*r22*x3471))+((r21*x3474))+(((-1.0)*x3470*x3472)));
evalcond[2]=(cj0+((r01*x3473))+(((-1.0)*x3468*x3471))+((r02*x3467)));
evalcond[3]=(sj0+((r12*x3467))+(((-1.0)*x3469*x3471))+((r11*x3473)));
evalcond[4]=(cj0+(((-1.0)*r12*x3471))+(((-1.0)*x3469*x3472))+((r11*x3474)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3471))+((r01*x3474))+(((-1.0)*x3468*x3472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3475 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3475.valid){
continue;
}
CheckValue<IkReal> x3476=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3475.value)+(((1.5707963267949)*(x3476.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3477=IKcos(j4);
IkReal x3478=IKsin(j4);
IkReal x3479=(cj5*r00);
IkReal x3480=(cj5*r10);
IkReal x3481=(cj5*r20);
IkReal x3482=((1.0)*x3477);
IkReal x3483=((1.0)*x3478);
IkReal x3484=(sj5*x3477);
IkReal x3485=(sj5*x3478);
evalcond[0]=((((-1.0)*x3481*x3482))+((r21*x3484))+((r22*x3478)));
evalcond[1]=((((-1.0)*x3481*x3483))+(((-1.0)*r22*x3482))+((r21*x3485)));
evalcond[2]=(cj0+(((-1.0)*x3479*x3482))+((r01*x3484))+((r02*x3478)));
evalcond[3]=(sj0+((r12*x3478))+((r11*x3484))+(((-1.0)*x3480*x3482)));
evalcond[4]=(cj0+(((-1.0)*r12*x3482))+((r11*x3485))+(((-1.0)*x3480*x3483)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3482))+(((-1.0)*x3479*x3483))+((r01*x3485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3486=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3486;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3486);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3487=((1.0)*cj5);
IkReal x3488=((((-1.0)*r01*x3487))+(((-1.0)*r00*sj5)));
j4eval[0]=x3488;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3487))))));
j4eval[2]=IKsign(x3488);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3489=((1.0)*cj5);
IkReal x3490=((((-1.0)*r01*x3489))+(((-1.0)*r00*sj5)));
j4eval[0]=x3490;
j4eval[1]=IKsign(x3490);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3489))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3491=((1.0)*cj5);
CheckValue<IkReal> x3492 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3491))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3492.valid){
continue;
}
CheckValue<IkReal> x3493=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3491)))),-1);
if(!x3493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3492.value)+(((1.5707963267949)*(x3493.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3494=IKcos(j4);
IkReal x3495=IKsin(j4);
IkReal x3496=((1.0)*sj0);
IkReal x3497=(cj5*r00);
IkReal x3498=(cj5*r10);
IkReal x3499=(cj5*r20);
IkReal x3500=((1.0)*x3494);
IkReal x3501=((1.0)*x3495);
IkReal x3502=(sj5*x3494);
IkReal x3503=(sj5*x3495);
evalcond[0]=(((r22*x3495))+(((-1.0)*x3499*x3500))+((r21*x3502)));
evalcond[1]=((((-1.0)*r22*x3500))+(((-1.0)*x3499*x3501))+((r21*x3503)));
evalcond[2]=((((-1.0)*r12*x3500))+cj0+(((-1.0)*x3498*x3501))+((r11*x3503)));
evalcond[3]=(((r01*x3502))+((r02*x3495))+(((-1.0)*x3497*x3500))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3496))+(((-1.0)*x3498*x3500))+((r11*x3502))+((r12*x3495)));
evalcond[5]=(((r01*x3503))+(((-1.0)*x3496))+(((-1.0)*r02*x3500))+(((-1.0)*x3497*x3501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3504=((1.0)*cj5);
CheckValue<IkReal> x3505=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3504)))),-1);
if(!x3505.valid){
continue;
}
CheckValue<IkReal> x3506 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3504)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3505.value)))+(x3506.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3507=IKcos(j4);
IkReal x3508=IKsin(j4);
IkReal x3509=((1.0)*sj0);
IkReal x3510=(cj5*r00);
IkReal x3511=(cj5*r10);
IkReal x3512=(cj5*r20);
IkReal x3513=((1.0)*x3507);
IkReal x3514=((1.0)*x3508);
IkReal x3515=(sj5*x3507);
IkReal x3516=(sj5*x3508);
evalcond[0]=((((-1.0)*x3512*x3513))+((r21*x3515))+((r22*x3508)));
evalcond[1]=((((-1.0)*x3512*x3514))+((r21*x3516))+(((-1.0)*r22*x3513)));
evalcond[2]=(cj0+(((-1.0)*x3511*x3514))+((r11*x3516))+(((-1.0)*r12*x3513)));
evalcond[3]=(((r01*x3515))+(((-1.0)*x3510*x3513))+((r02*x3508))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3511*x3513))+(((-1.0)*x3509))+((r12*x3508))+((r11*x3515)));
evalcond[5]=((((-1.0)*r02*x3513))+((r01*x3516))+(((-1.0)*x3509))+(((-1.0)*x3510*x3514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3517 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3517.valid){
continue;
}
CheckValue<IkReal> x3518=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3517.value)+(((1.5707963267949)*(x3518.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3519=IKcos(j4);
IkReal x3520=IKsin(j4);
IkReal x3521=((1.0)*sj0);
IkReal x3522=(cj5*r00);
IkReal x3523=(cj5*r10);
IkReal x3524=(cj5*r20);
IkReal x3525=((1.0)*x3519);
IkReal x3526=((1.0)*x3520);
IkReal x3527=(sj5*x3519);
IkReal x3528=(sj5*x3520);
evalcond[0]=((((-1.0)*x3524*x3525))+((r21*x3527))+((r22*x3520)));
evalcond[1]=((((-1.0)*x3524*x3526))+((r21*x3528))+(((-1.0)*r22*x3525)));
evalcond[2]=(cj0+((r11*x3528))+(((-1.0)*r12*x3525))+(((-1.0)*x3523*x3526)));
evalcond[3]=((((-1.0)*x3522*x3525))+((r01*x3527))+((r02*x3520))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3521))+((r11*x3527))+((r12*x3520))+(((-1.0)*x3523*x3525)));
evalcond[5]=((((-1.0)*x3522*x3526))+(((-1.0)*r02*x3525))+((r01*x3528))+(((-1.0)*x3521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3529=(r00*sj5);
IkReal x3530=(cj5*r01);
IkReal x3531=(sj1*sj2);
IkReal x3532=(cj1*cj2);
IkReal x3533=((20000.0)*px);
IkReal x3534=((8500.0)*cj1);
IkReal x3535=((9738.0)*x3532);
CheckValue<IkReal> x3536=IKPowWithIntegerCheck(((((-2183.0)*x3532))+(((2183.0)*x3531))),-1);
if(!x3536.valid){
continue;
}
CheckValue<IkReal> x3537=IKPowWithIntegerCheck((x3531+(((-1.0)*x3532))),-1);
if(!x3537.valid){
continue;
}
if( IKabs(((x3536.value)*(((((-9738.0)*x3530*x3531))+(((-1.0)*x3531*x3533))+(((-9738.0)*x3529*x3531))+((x3532*x3533))+((x3529*x3535))+((x3529*x3534))+((x3530*x3534))+((x3530*x3535)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3537.value)*((x3530+x3529)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3536.value)*(((((-9738.0)*x3530*x3531))+(((-1.0)*x3531*x3533))+(((-9738.0)*x3529*x3531))+((x3532*x3533))+((x3529*x3535))+((x3529*x3534))+((x3530*x3534))+((x3530*x3535))))))+IKsqr(((x3537.value)*((x3530+x3529))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3536.value)*(((((-9738.0)*x3530*x3531))+(((-1.0)*x3531*x3533))+(((-9738.0)*x3529*x3531))+((x3532*x3533))+((x3529*x3535))+((x3529*x3534))+((x3530*x3534))+((x3530*x3535))))), ((x3537.value)*((x3530+x3529))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3538=IKcos(j0);
IkReal x3539=IKsin(j0);
IkReal x3540=(cj5*r11);
IkReal x3541=(cj5*r01);
IkReal x3542=((1.0)*sj5);
IkReal x3543=((0.09465)*sj5);
IkReal x3544=(sj1*sj2);
IkReal x3545=((0.39225)*cj2);
IkReal x3546=((1.0)*cj2);
IkReal x3547=((0.39225)*x3544);
IkReal x3548=(cj1*x3538);
IkReal x3549=(cj1*x3539);
evalcond[0]=((((-1.0)*r00*x3542))+((x3538*x3544))+(((-1.0)*x3541))+(((-1.0)*x3546*x3548)));
evalcond[1]=(((x3539*x3544))+(((-1.0)*r10*x3542))+(((-1.0)*x3540))+(((-1.0)*x3546*x3549)));
evalcond[2]=((((-0.09465)*x3541))+(((0.425)*x3548))+(((-1.0)*x3538*x3547))+(((-1.0)*r00*x3543))+(((-1.0)*px))+(((-0.10915)*x3539))+((x3545*x3548)));
evalcond[3]=((((-0.09465)*x3540))+(((-1.0)*x3539*x3547))+(((0.425)*x3549))+(((-1.0)*r10*x3543))+(((-1.0)*py))+(((0.10915)*x3538))+((x3545*x3549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3550=((1.0)*cj5);
IkReal x3551=((((-1.0)*r01*x3550))+(((-1.0)*r00*sj5)));
j4eval[0]=x3551;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3550)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3551);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3552=((1.0)*cj5);
IkReal x3553=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3552)));
j4eval[0]=x3553;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3552))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x3553);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3554=((1.0)*sj0);
IkReal x3555=((1.0)*cj0);
IkReal x3556=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3556;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x3555))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3554)))))+(IKabs(((((-1.0)*r12*x3554))+(((-1.0)*r02*x3555))))));
j4eval[2]=IKsign(x3556);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3557=((-1.0)*r20);
IkReal x3559 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3559)==0){
continue;
}
IkReal x3558=pow(x3559,-0.5);
CheckValue<IkReal> x3560 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3557),IKFAST_ATAN2_MAGTHRESH);
if(!x3560.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3560.value));
IkReal gconst97=(r21*x3558);
IkReal gconst98=(x3557*x3558);
CheckValue<IkReal> x3561 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3561.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3561.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3562=((-1.0)*r20);
IkReal x3563=x3558;
CheckValue<IkReal> x3565 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3562),IKFAST_ATAN2_MAGTHRESH);
if(!x3565.valid){
continue;
}
IkReal x3564=((-1.0)*(x3565.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3564;
IkReal gconst96=x3564;
IkReal gconst97=(r21*x3563);
IkReal gconst98=(x3562*x3563);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3566=((-1.0)*r20);
IkReal x3567=x3558;
CheckValue<IkReal> x3569 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3566),IKFAST_ATAN2_MAGTHRESH);
if(!x3569.valid){
continue;
}
IkReal x3568=((-1.0)*(x3569.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3568;
IkReal gconst96=x3568;
IkReal gconst97=(r21*x3567);
IkReal gconst98=(x3566*x3567);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3570=((-1.0)*r20);
IkReal x3571=x3558;
CheckValue<IkReal> x3573 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3570),IKFAST_ATAN2_MAGTHRESH);
if(!x3573.valid){
continue;
}
IkReal x3572=((-1.0)*(x3573.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3572;
IkReal gconst96=x3572;
IkReal gconst97=(r21*x3571);
IkReal gconst98=(x3570*x3571);
IkReal x3574=((1.0)*(r22*r22));
CheckValue<IkReal> x3578=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3574))),-1);
if(!x3578.valid){
continue;
}
IkReal x3575=x3578.value;
IkReal x3576=((1.0)*x3575);
IkReal x3577=((((-1.0)*x3576*(r20*r20*r20*r20)))+(((-1.0)*x3574))+(((-2.0)*x3575*(r20*r20)*(r21*r21)))+(((-1.0)*x3576*(r21*r21*r21*r21))));
j4eval[0]=x3577;
j4eval[1]=IKsign(x3577);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3579=(cj1*cj2);
IkReal x3580=(gconst98*r20);
IkReal x3581=(sj1*sj2);
IkReal x3582=(gconst97*r21);
CheckValue<IkReal> x3583=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3580*x3580)))+(((2.0)*x3580*x3582))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3582*x3582))))),-1);
if(!x3583.valid){
continue;
}
CheckValue<IkReal> x3584 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3579))+((r22*x3581)))),IkReal((((x3579*x3580))+(((-1.0)*x3580*x3581))+(((-1.0)*x3579*x3582))+((x3581*x3582)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3583.value)))+(x3584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3585=IKsin(j4);
IkReal x3586=IKcos(j4);
IkReal x3587=(gconst98*r10);
IkReal x3588=(gconst97*r21);
IkReal x3589=(gconst98*r20);
IkReal x3590=((1.0)*cj2);
IkReal x3591=((1.0)*sj0);
IkReal x3592=(gconst98*r00);
IkReal x3593=(cj1*sj2);
IkReal x3594=((1.0)*x3586);
IkReal x3595=((1.0)*x3585);
IkReal x3596=(gconst97*x3585);
IkReal x3597=(gconst97*x3586);
evalcond[0]=((((-1.0)*x3589*x3595))+((x3585*x3588))+(((-1.0)*r22*x3594)));
evalcond[1]=((((-1.0)*x3587*x3595))+cj0+((r11*x3596))+(((-1.0)*r12*x3594)));
evalcond[2]=((((-1.0)*r02*x3594))+((r01*x3596))+(((-1.0)*x3592*x3595))+(((-1.0)*x3591)));
evalcond[3]=((((-1.0)*cj1*x3590))+(((-1.0)*x3589*x3594))+((x3586*x3588))+((sj1*sj2))+((r22*x3585)));
evalcond[4]=(((r02*x3585))+(((-1.0)*cj0*x3593))+((r01*x3597))+(((-1.0)*x3592*x3594))+(((-1.0)*cj0*sj1*x3590)));
evalcond[5]=((((-1.0)*x3587*x3594))+((r12*x3585))+((r11*x3597))+(((-1.0)*x3591*x3593))+(((-1.0)*sj0*sj1*x3590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3598=((1.0)*gconst98);
CheckValue<IkReal> x3599=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3598))+(((-1.0)*gconst97*r10)))),-1);
if(!x3599.valid){
continue;
}
CheckValue<IkReal> x3600 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3598)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3599.value)))+(x3600.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3601=IKsin(j4);
IkReal x3602=IKcos(j4);
IkReal x3603=(gconst98*r10);
IkReal x3604=(gconst97*r21);
IkReal x3605=(gconst98*r20);
IkReal x3606=((1.0)*cj2);
IkReal x3607=((1.0)*sj0);
IkReal x3608=(gconst98*r00);
IkReal x3609=(cj1*sj2);
IkReal x3610=((1.0)*x3602);
IkReal x3611=((1.0)*x3601);
IkReal x3612=(gconst97*x3601);
IkReal x3613=(gconst97*x3602);
evalcond[0]=((((-1.0)*x3605*x3611))+(((-1.0)*r22*x3610))+((x3601*x3604)));
evalcond[1]=(((r11*x3612))+cj0+(((-1.0)*r12*x3610))+(((-1.0)*x3603*x3611)));
evalcond[2]=((((-1.0)*r02*x3610))+((r01*x3612))+(((-1.0)*x3608*x3611))+(((-1.0)*x3607)));
evalcond[3]=((((-1.0)*x3605*x3610))+((r22*x3601))+((sj1*sj2))+((x3602*x3604))+(((-1.0)*cj1*x3606)));
evalcond[4]=(((r02*x3601))+((r01*x3613))+(((-1.0)*x3608*x3610))+(((-1.0)*cj0*x3609))+(((-1.0)*cj0*sj1*x3606)));
evalcond[5]=(((r11*x3613))+(((-1.0)*x3603*x3610))+(((-1.0)*x3607*x3609))+(((-1.0)*sj0*sj1*x3606))+((r12*x3601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3614=((1.0)*gconst98);
CheckValue<IkReal> x3615 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x3614)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3615.valid){
continue;
}
CheckValue<IkReal> x3616=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3614))+(((-1.0)*gconst97*r00)))),-1);
if(!x3616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3615.value)+(((1.5707963267949)*(x3616.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3617=IKsin(j4);
IkReal x3618=IKcos(j4);
IkReal x3619=(gconst98*r10);
IkReal x3620=(gconst97*r21);
IkReal x3621=(gconst98*r20);
IkReal x3622=((1.0)*cj2);
IkReal x3623=((1.0)*sj0);
IkReal x3624=(gconst98*r00);
IkReal x3625=(cj1*sj2);
IkReal x3626=((1.0)*x3618);
IkReal x3627=((1.0)*x3617);
IkReal x3628=(gconst97*x3617);
IkReal x3629=(gconst97*x3618);
evalcond[0]=((((-1.0)*x3621*x3627))+(((-1.0)*r22*x3626))+((x3617*x3620)));
evalcond[1]=(cj0+(((-1.0)*r12*x3626))+((r11*x3628))+(((-1.0)*x3619*x3627)));
evalcond[2]=((((-1.0)*x3623))+(((-1.0)*x3624*x3627))+((r01*x3628))+(((-1.0)*r02*x3626)));
evalcond[3]=((((-1.0)*x3621*x3626))+((x3618*x3620))+((r22*x3617))+((sj1*sj2))+(((-1.0)*cj1*x3622)));
evalcond[4]=((((-1.0)*x3624*x3626))+((r02*x3617))+((r01*x3629))+(((-1.0)*cj0*x3625))+(((-1.0)*cj0*sj1*x3622)));
evalcond[5]=((((-1.0)*x3623*x3625))+((r11*x3629))+(((-1.0)*x3619*x3626))+(((-1.0)*sj0*sj1*x3622))+((r12*x3617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3630=((-1.0)*r21);
IkReal x3632 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3632)==0){
continue;
}
IkReal x3631=pow(x3632,-0.5);
CheckValue<IkReal> x3633 = IKatan2WithCheck(IkReal(x3630),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3633.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3633.value))));
IkReal gconst100=(x3630*x3631);
IkReal gconst101=((1.0)*r20*x3631);
CheckValue<IkReal> x3634 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3634.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3634.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3635=((-1.0)*r21);
CheckValue<IkReal> x3638 = IKatan2WithCheck(IkReal(x3635),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3638.valid){
continue;
}
IkReal x3636=((1.0)*(x3638.value));
IkReal x3637=x3631;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3636)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3636)));
IkReal gconst100=(x3635*x3637);
IkReal gconst101=((1.0)*r20*x3637);
IkReal x3639=r22*r22;
IkReal x3640=((1.0)*x3639);
CheckValue<IkReal> x3644=IKPowWithIntegerCheck(((-1.0)+x3639),-1);
if(!x3644.valid){
continue;
}
IkReal x3641=x3644.value;
if((((1.0)+(((-1.0)*x3640)))) < -0.00001)
continue;
IkReal x3642=IKsqrt(((1.0)+(((-1.0)*x3640))));
IkReal x3643=(cj0*x3641*x3642);
j4eval[0]=((IKabs(((((-1.0)*x3640*x3643))+x3643)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3645=((-1.0)*r21);
CheckValue<IkReal> x3648 = IKatan2WithCheck(IkReal(x3645),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3648.valid){
continue;
}
IkReal x3646=((1.0)*(x3648.value));
IkReal x3647=x3631;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3646)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3646)));
IkReal gconst100=(x3645*x3647);
IkReal gconst101=((1.0)*r20*x3647);
IkReal x3649=r22*r22;
IkReal x3650=((1.0)*x3649);
CheckValue<IkReal> x3654=IKPowWithIntegerCheck(((-1.0)+x3649),-1);
if(!x3654.valid){
continue;
}
IkReal x3651=x3654.value;
if((((1.0)+(((-1.0)*x3650)))) < -0.00001)
continue;
IkReal x3652=IKsqrt(((1.0)+(((-1.0)*x3650))));
IkReal x3653=(sj0*x3651*x3652);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3653+(((-1.0)*x3650*x3653))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3655=((-1.0)*r21);
CheckValue<IkReal> x3658 = IKatan2WithCheck(IkReal(x3655),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3658.valid){
continue;
}
IkReal x3656=((1.0)*(x3658.value));
IkReal x3657=x3631;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3656)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3656)));
IkReal gconst100=(x3655*x3657);
IkReal gconst101=((1.0)*r20*x3657);
IkReal x3659=r22*r22;
IkReal x3660=(r12*sj0);
IkReal x3661=(cj0*r02);
CheckValue<IkReal> x3665=IKPowWithIntegerCheck(((-1.0)+x3659),-1);
if(!x3665.valid){
continue;
}
IkReal x3662=x3665.value;
if((((1.0)+(((-1.0)*x3659)))) < -0.00001)
continue;
IkReal x3663=IKsqrt(((1.0)+(((-1.0)*x3659))));
IkReal x3664=(r22*x3662*x3663);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x3661))+(((-1.0)*x3660)))))+(IKabs((((x3660*x3664))+((x3661*x3664))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3666=((1.0)*sj0);
IkReal x3667=((1.0)*gconst100);
CheckValue<IkReal> x3668=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3667))+(((-1.0)*gconst101*r21)))),-1);
if(!x3668.valid){
continue;
}
CheckValue<IkReal> x3669 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3666)))),IkReal(((((-1.0)*gconst100*r11*x3666))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x3667)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3668.value)))+(x3669.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3670=IKsin(j4);
IkReal x3671=IKcos(j4);
IkReal x3672=(gconst101*r20);
IkReal x3673=(gconst101*r10);
IkReal x3674=((1.0)*cj2);
IkReal x3675=(gconst101*r00);
IkReal x3676=((1.0)*sj0);
IkReal x3677=(cj1*sj2);
IkReal x3678=((1.0)*x3671);
IkReal x3679=((1.0)*x3670);
IkReal x3680=(gconst100*x3670);
IkReal x3681=(gconst100*x3671);
evalcond[0]=(((r21*x3680))+(((-1.0)*x3672*x3679))+(((-1.0)*r22*x3678)));
evalcond[1]=(cj0+(((-1.0)*x3673*x3679))+(((-1.0)*r12*x3678))+((r11*x3680)));
evalcond[2]=(((r01*x3680))+(((-1.0)*r02*x3678))+(((-1.0)*x3676))+(((-1.0)*x3675*x3679)));
evalcond[3]=(((r21*x3681))+((sj1*sj2))+(((-1.0)*x3672*x3678))+((r22*x3670))+(((-1.0)*cj1*x3674)));
evalcond[4]=(((r01*x3681))+(((-1.0)*cj0*x3677))+((r02*x3670))+(((-1.0)*cj0*sj1*x3674))+(((-1.0)*x3675*x3678)));
evalcond[5]=((((-1.0)*x3676*x3677))+((r12*x3670))+(((-1.0)*x3673*x3678))+((r11*x3681))+(((-1.0)*sj0*sj1*x3674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3682=((1.0)*gconst101);
CheckValue<IkReal> x3683=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3682)))),-1);
if(!x3683.valid){
continue;
}
CheckValue<IkReal> x3684 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3682))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3683.value)))+(x3684.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3685=IKsin(j4);
IkReal x3686=IKcos(j4);
IkReal x3687=(gconst101*r20);
IkReal x3688=(gconst101*r10);
IkReal x3689=((1.0)*cj2);
IkReal x3690=(gconst101*r00);
IkReal x3691=((1.0)*sj0);
IkReal x3692=(cj1*sj2);
IkReal x3693=((1.0)*x3686);
IkReal x3694=((1.0)*x3685);
IkReal x3695=(gconst100*x3685);
IkReal x3696=(gconst100*x3686);
evalcond[0]=((((-1.0)*r22*x3693))+(((-1.0)*x3687*x3694))+((r21*x3695)));
evalcond[1]=((((-1.0)*x3688*x3694))+cj0+(((-1.0)*r12*x3693))+((r11*x3695)));
evalcond[2]=(((r01*x3695))+(((-1.0)*r02*x3693))+(((-1.0)*x3691))+(((-1.0)*x3690*x3694)));
evalcond[3]=((((-1.0)*x3687*x3693))+((sj1*sj2))+((r21*x3696))+(((-1.0)*cj1*x3689))+((r22*x3685)));
evalcond[4]=(((r01*x3696))+(((-1.0)*cj0*x3692))+((r02*x3685))+(((-1.0)*cj0*sj1*x3689))+(((-1.0)*x3690*x3693)));
evalcond[5]=((((-1.0)*x3688*x3693))+(((-1.0)*sj0*sj1*x3689))+((r12*x3685))+((r11*x3696))+(((-1.0)*x3691*x3692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3697=((1.0)*gconst101);
CheckValue<IkReal> x3698=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3697)))),-1);
if(!x3698.valid){
continue;
}
CheckValue<IkReal> x3699 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3697)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3698.value)))+(x3699.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3700=IKsin(j4);
IkReal x3701=IKcos(j4);
IkReal x3702=(gconst101*r20);
IkReal x3703=(gconst101*r10);
IkReal x3704=((1.0)*cj2);
IkReal x3705=(gconst101*r00);
IkReal x3706=((1.0)*sj0);
IkReal x3707=(cj1*sj2);
IkReal x3708=((1.0)*x3701);
IkReal x3709=((1.0)*x3700);
IkReal x3710=(gconst100*x3700);
IkReal x3711=(gconst100*x3701);
evalcond[0]=(((r21*x3710))+(((-1.0)*x3702*x3709))+(((-1.0)*r22*x3708)));
evalcond[1]=(((r11*x3710))+cj0+(((-1.0)*x3703*x3709))+(((-1.0)*r12*x3708)));
evalcond[2]=((((-1.0)*r02*x3708))+(((-1.0)*x3705*x3709))+(((-1.0)*x3706))+((r01*x3710)));
evalcond[3]=((((-1.0)*cj1*x3704))+((sj1*sj2))+((r21*x3711))+(((-1.0)*x3702*x3708))+((r22*x3700)));
evalcond[4]=((((-1.0)*cj0*x3707))+(((-1.0)*cj0*sj1*x3704))+(((-1.0)*x3705*x3708))+((r01*x3711))+((r02*x3700)));
evalcond[5]=(((r11*x3711))+((r12*x3700))+(((-1.0)*x3703*x3708))+(((-1.0)*x3706*x3707))+(((-1.0)*sj0*sj1*x3704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3712=((-1.0)*r10);
IkReal x3714 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3714)==0){
continue;
}
IkReal x3713=pow(x3714,-0.5);
CheckValue<IkReal> x3715 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3712),IKFAST_ATAN2_MAGTHRESH);
if(!x3715.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3715.value));
IkReal gconst103=(r11*x3713);
IkReal gconst104=(x3712*x3713);
CheckValue<IkReal> x3716 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3716.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3716.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3717=((-1.0)*r10);
IkReal x3718=x3713;
CheckValue<IkReal> x3720 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3717),IKFAST_ATAN2_MAGTHRESH);
if(!x3720.valid){
continue;
}
IkReal x3719=((-1.0)*(x3720.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3719;
IkReal gconst102=x3719;
IkReal gconst103=(r11*x3718);
IkReal gconst104=(x3717*x3718);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3721=((1.0)*sj0);
IkReal x3722=((1.0)*gconst103);
CheckValue<IkReal> x3723=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3722)))),-1);
if(!x3723.valid){
continue;
}
CheckValue<IkReal> x3724 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3721))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3722))+((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x3721))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3723.value)))+(x3724.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3725=IKsin(j4);
IkReal x3726=IKcos(j4);
IkReal x3727=(gconst103*r11);
IkReal x3728=((1.0)*cj2);
IkReal x3729=((1.0)*sj0);
IkReal x3730=(cj1*sj2);
IkReal x3731=((1.0)*x3726);
IkReal x3732=(gconst103*x3726);
IkReal x3733=(gconst103*x3725);
IkReal x3734=((1.0)*gconst104*x3725);
evalcond[0]=((((-1.0)*r20*x3734))+(((-1.0)*r22*x3731))+((r21*x3733)));
evalcond[1]=(cj0+((x3725*x3727))+(((-1.0)*r12*x3731))+(((-1.0)*r10*x3734)));
evalcond[2]=(((r01*x3733))+(((-1.0)*x3729))+(((-1.0)*r00*x3734))+(((-1.0)*r02*x3731)));
evalcond[3]=((((-1.0)*cj1*x3728))+((r22*x3725))+((sj1*sj2))+(((-1.0)*gconst104*r20*x3731))+((r21*x3732)));
evalcond[4]=((((-1.0)*gconst104*r00*x3731))+((r01*x3732))+(((-1.0)*cj0*x3730))+((r02*x3725))+(((-1.0)*cj0*sj1*x3728)));
evalcond[5]=((((-1.0)*sj0*sj1*x3728))+((x3726*x3727))+((r12*x3725))+(((-1.0)*x3729*x3730))+(((-1.0)*gconst104*r10*x3731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3735=((1.0)*gconst104);
CheckValue<IkReal> x3736 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3735))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3736.valid){
continue;
}
CheckValue<IkReal> x3737=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3735)))),-1);
if(!x3737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3736.value)+(((1.5707963267949)*(x3737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3738=IKsin(j4);
IkReal x3739=IKcos(j4);
IkReal x3740=(gconst103*r11);
IkReal x3741=((1.0)*cj2);
IkReal x3742=((1.0)*sj0);
IkReal x3743=(cj1*sj2);
IkReal x3744=((1.0)*x3739);
IkReal x3745=(gconst103*x3739);
IkReal x3746=(gconst103*x3738);
IkReal x3747=((1.0)*gconst104*x3738);
evalcond[0]=((((-1.0)*r22*x3744))+(((-1.0)*r20*x3747))+((r21*x3746)));
evalcond[1]=(cj0+(((-1.0)*r12*x3744))+(((-1.0)*r10*x3747))+((x3738*x3740)));
evalcond[2]=(((r01*x3746))+(((-1.0)*r00*x3747))+(((-1.0)*x3742))+(((-1.0)*r02*x3744)));
evalcond[3]=((((-1.0)*gconst104*r20*x3744))+((sj1*sj2))+((r22*x3738))+((r21*x3745))+(((-1.0)*cj1*x3741)));
evalcond[4]=((((-1.0)*gconst104*r00*x3744))+((r01*x3745))+(((-1.0)*cj0*x3743))+((r02*x3738))+(((-1.0)*cj0*sj1*x3741)));
evalcond[5]=((((-1.0)*sj0*sj1*x3741))+((r12*x3738))+(((-1.0)*x3742*x3743))+(((-1.0)*gconst104*r10*x3744))+((x3739*x3740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3748=((-1.0)*r11);
IkReal x3750 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3750)==0){
continue;
}
IkReal x3749=pow(x3750,-0.5);
CheckValue<IkReal> x3751 = IKatan2WithCheck(IkReal(x3748),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3751.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3751.value))));
IkReal gconst106=(x3748*x3749);
IkReal gconst107=((1.0)*r10*x3749);
CheckValue<IkReal> x3752 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3752.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3752.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3753=((-1.0)*r11);
CheckValue<IkReal> x3756 = IKatan2WithCheck(IkReal(x3753),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3756.valid){
continue;
}
IkReal x3754=((1.0)*(x3756.value));
IkReal x3755=x3749;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3754)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3754)));
IkReal gconst106=(x3753*x3755);
IkReal gconst107=((1.0)*r10*x3755);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3757=((-1.0)*r11);
CheckValue<IkReal> x3760 = IKatan2WithCheck(IkReal(x3757),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3760.valid){
continue;
}
IkReal x3758=((1.0)*(x3760.value));
IkReal x3759=x3749;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3758)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3758)));
IkReal gconst106=(x3757*x3759);
IkReal gconst107=((1.0)*r10*x3759);
IkReal x3761=r12*r12;
IkReal x3762=((1.0)*sj0);
IkReal x3763=(cj0*r02);
IkReal x3764=x3749;
j4eval[0]=((IKabs(((((-1.0)*x3763))+(((-1.0)*r12*x3762)))))+(IKabs(((((-1.0)*x3762*x3764))+((r12*x3763*x3764))+((sj0*x3761*x3764))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3765=((-1.0)*r11);
CheckValue<IkReal> x3768 = IKatan2WithCheck(IkReal(x3765),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3768.valid){
continue;
}
IkReal x3766=((1.0)*(x3768.value));
IkReal x3767=x3749;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3766)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3766)));
IkReal gconst106=(x3765*x3767);
IkReal gconst107=((1.0)*r10*x3767);
IkReal x3769=r12*r12;
IkReal x3770=((1.0)+(((-1.0)*x3769)));
IkReal x3771=(r22*sj1*sj2);
IkReal x3772=(cj1*cj2*r22);
CheckValue<IkReal> x3779=IKPowWithIntegerCheck(x3770,-1);
if(!x3779.valid){
continue;
}
IkReal x3773=x3779.value;
CheckValue<IkReal> x3780=IKPowWithIntegerCheck(((-1.0)+x3769),-1);
if(!x3780.valid){
continue;
}
IkReal x3774=x3780.value;
IkReal x3775=((1.0)*x3773);
if((x3770) < -0.00001)
continue;
IkReal x3776=IKsqrt(x3770);
IkReal x3777=(r12*x3774*x3776);
IkReal x3778=((((-2.0)*r10*r11*r20*r21*x3773))+(((-1.0)*x3775*(r10*r10)*(r20*r20)))+(((-1.0)*x3775*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22))));
j4eval[0]=x3778;
j4eval[1]=((IKabs(((((-1.0)*x3771*x3777))+((x3772*x3777)))))+(IKabs(((((-1.0)*x3772))+x3771))));
j4eval[2]=IKsign(x3778);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3781=(sj1*sj2);
IkReal x3782=(gconst106*r21);
IkReal x3783=(gconst107*r20);
IkReal x3784=(cj1*cj2);
CheckValue<IkReal> x3785 = IKatan2WithCheck(IkReal((((r22*x3781))+(((-1.0)*r22*x3784)))),IkReal(((((-1.0)*x3782*x3784))+((x3781*x3782))+(((-1.0)*x3781*x3783))+((x3783*x3784)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3785.valid){
continue;
}
CheckValue<IkReal> x3786=IKPowWithIntegerCheck(IKsign(((((2.0)*x3782*x3783))+(((-1.0)*(x3782*x3782)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3783*x3783))))),-1);
if(!x3786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3785.value)+(((1.5707963267949)*(x3786.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3787=IKsin(j4);
IkReal x3788=IKcos(j4);
IkReal x3789=(gconst107*r10);
IkReal x3790=(gconst107*r00);
IkReal x3791=((1.0)*cj2);
IkReal x3792=(gconst107*r20);
IkReal x3793=((1.0)*sj0);
IkReal x3794=(cj1*sj2);
IkReal x3795=((1.0)*x3788);
IkReal x3796=(gconst106*x3788);
IkReal x3797=(gconst106*x3787);
IkReal x3798=((1.0)*x3787);
evalcond[0]=(((r21*x3797))+(((-1.0)*r22*x3795))+(((-1.0)*x3792*x3798)));
evalcond[1]=((((-1.0)*r12*x3795))+cj0+(((-1.0)*x3789*x3798))+((r11*x3797)));
evalcond[2]=((((-1.0)*x3793))+(((-1.0)*x3790*x3798))+(((-1.0)*r02*x3795))+((r01*x3797)));
evalcond[3]=(((r21*x3796))+((r22*x3787))+((sj1*sj2))+(((-1.0)*cj1*x3791))+(((-1.0)*x3792*x3795)));
evalcond[4]=(((r02*x3787))+(((-1.0)*cj0*sj1*x3791))+(((-1.0)*x3790*x3795))+(((-1.0)*cj0*x3794))+((r01*x3796)));
evalcond[5]=((((-1.0)*sj0*sj1*x3791))+((r12*x3787))+(((-1.0)*x3789*x3795))+((r11*x3796))+(((-1.0)*x3793*x3794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3799=((1.0)*sj0);
IkReal x3800=((1.0)*gconst106);
CheckValue<IkReal> x3801=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3800)))),-1);
if(!x3801.valid){
continue;
}
CheckValue<IkReal> x3802 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3799))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3800))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x3799))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3801.value)))+(x3802.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3803=IKsin(j4);
IkReal x3804=IKcos(j4);
IkReal x3805=(gconst107*r10);
IkReal x3806=(gconst107*r00);
IkReal x3807=((1.0)*cj2);
IkReal x3808=(gconst107*r20);
IkReal x3809=((1.0)*sj0);
IkReal x3810=(cj1*sj2);
IkReal x3811=((1.0)*x3804);
IkReal x3812=(gconst106*x3804);
IkReal x3813=(gconst106*x3803);
IkReal x3814=((1.0)*x3803);
evalcond[0]=((((-1.0)*r22*x3811))+((r21*x3813))+(((-1.0)*x3808*x3814)));
evalcond[1]=((((-1.0)*r12*x3811))+cj0+((r11*x3813))+(((-1.0)*x3805*x3814)));
evalcond[2]=((((-1.0)*r02*x3811))+(((-1.0)*x3809))+((r01*x3813))+(((-1.0)*x3806*x3814)));
evalcond[3]=(((r21*x3812))+((r22*x3803))+(((-1.0)*x3808*x3811))+((sj1*sj2))+(((-1.0)*cj1*x3807)));
evalcond[4]=((((-1.0)*cj0*x3810))+((r02*x3803))+(((-1.0)*cj0*sj1*x3807))+((r01*x3812))+(((-1.0)*x3806*x3811)));
evalcond[5]=((((-1.0)*sj0*sj1*x3807))+((r11*x3812))+((r12*x3803))+(((-1.0)*x3809*x3810))+(((-1.0)*x3805*x3811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3815=((1.0)*gconst107);
CheckValue<IkReal> x3816=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3815))+(((-1.0)*gconst106*r00)))),-1);
if(!x3816.valid){
continue;
}
CheckValue<IkReal> x3817 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x3815)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3816.value)))+(x3817.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3818=IKsin(j4);
IkReal x3819=IKcos(j4);
IkReal x3820=(gconst107*r10);
IkReal x3821=(gconst107*r00);
IkReal x3822=((1.0)*cj2);
IkReal x3823=(gconst107*r20);
IkReal x3824=((1.0)*sj0);
IkReal x3825=(cj1*sj2);
IkReal x3826=((1.0)*x3819);
IkReal x3827=(gconst106*x3819);
IkReal x3828=(gconst106*x3818);
IkReal x3829=((1.0)*x3818);
evalcond[0]=((((-1.0)*r22*x3826))+(((-1.0)*x3823*x3829))+((r21*x3828)));
evalcond[1]=((((-1.0)*r12*x3826))+cj0+((r11*x3828))+(((-1.0)*x3820*x3829)));
evalcond[2]=((((-1.0)*r02*x3826))+(((-1.0)*x3824))+(((-1.0)*x3821*x3829))+((r01*x3828)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3822))+(((-1.0)*x3823*x3826))+((r22*x3818))+((r21*x3827)));
evalcond[4]=((((-1.0)*cj0*x3825))+(((-1.0)*x3821*x3826))+((r02*x3818))+(((-1.0)*cj0*sj1*x3822))+((r01*x3827)));
evalcond[5]=(((r12*x3818))+(((-1.0)*sj0*sj1*x3822))+(((-1.0)*x3824*x3825))+((r11*x3827))+(((-1.0)*x3820*x3826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3830=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3830;
j4eval[1]=IKsign(x3830);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3831=((1.0)*cj5);
IkReal x3832=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3831)));
j4eval[0]=x3832;
j4eval[1]=((IKabs(((((-1.0)*r20*x3831))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3832);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3833=(sj1*sj2);
IkReal x3834=(cj5*r10);
IkReal x3835=(r11*sj5);
IkReal x3836=(cj1*cj2);
IkReal x3837=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3837;
j4eval[1]=((IKabs(((((-1.0)*r12*x3833))+((r12*x3836)))))+(IKabs((((x3834*x3836))+(((-1.0)*x3833*x3834))+((x3833*x3835))+(((-1.0)*x3835*x3836))))));
j4eval[2]=IKsign(x3837);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3838=(sj1*sj2);
IkReal x3839=(cj5*r10);
IkReal x3840=(r11*sj5);
IkReal x3841=(cj1*cj2);
CheckValue<IkReal> x3842=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3842.valid){
continue;
}
CheckValue<IkReal> x3843 = IKatan2WithCheck(IkReal((((x3839*x3841))+((x3838*x3840))+(((-1.0)*x3838*x3839))+(((-1.0)*x3840*x3841)))),IkReal((((r12*x3841))+(((-1.0)*r12*x3838)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3842.value)))+(x3843.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3844=IKcos(j4);
IkReal x3845=IKsin(j4);
IkReal x3846=(cj5*r00);
IkReal x3847=(cj5*r10);
IkReal x3848=(r21*sj5);
IkReal x3849=((1.0)*cj2);
IkReal x3850=(cj5*r20);
IkReal x3851=((1.0)*x3844);
IkReal x3852=((1.0)*x3845);
IkReal x3853=(sj5*x3845);
IkReal x3854=(sj5*x3844);
evalcond[0]=(((r12*x3845))+((r11*x3854))+(((-1.0)*x3847*x3851)));
evalcond[1]=((((-1.0)*x3850*x3852))+((x3845*x3848))+(((-1.0)*r22*x3851)));
evalcond[2]=(((r01*x3853))+(((-1.0)*x3846*x3852))+(((-1.0)*r02*x3851)));
evalcond[3]=((1.0)+((r11*x3853))+(((-1.0)*r12*x3851))+(((-1.0)*x3847*x3852)));
evalcond[4]=((((-1.0)*x3850*x3851))+((sj1*sj2))+((x3844*x3848))+(((-1.0)*cj1*x3849))+((r22*x3845)));
evalcond[5]=((((-1.0)*sj1*x3849))+(((-1.0)*cj1*sj2))+((r01*x3854))+(((-1.0)*x3846*x3851))+((r02*x3845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3855=((1.0)*cj5);
CheckValue<IkReal> x3856 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3855))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3856.valid){
continue;
}
CheckValue<IkReal> x3857=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3855)))),-1);
if(!x3857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3856.value)+(((1.5707963267949)*(x3857.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3858=IKcos(j4);
IkReal x3859=IKsin(j4);
IkReal x3860=(cj5*r00);
IkReal x3861=(cj5*r10);
IkReal x3862=(r21*sj5);
IkReal x3863=((1.0)*cj2);
IkReal x3864=(cj5*r20);
IkReal x3865=((1.0)*x3858);
IkReal x3866=((1.0)*x3859);
IkReal x3867=(sj5*x3859);
IkReal x3868=(sj5*x3858);
evalcond[0]=(((r11*x3868))+(((-1.0)*x3861*x3865))+((r12*x3859)));
evalcond[1]=((((-1.0)*x3864*x3866))+((x3859*x3862))+(((-1.0)*r22*x3865)));
evalcond[2]=((((-1.0)*x3860*x3866))+(((-1.0)*r02*x3865))+((r01*x3867)));
evalcond[3]=((1.0)+((r11*x3867))+(((-1.0)*x3861*x3866))+(((-1.0)*r12*x3865)));
evalcond[4]=((((-1.0)*x3864*x3865))+((sj1*sj2))+(((-1.0)*cj1*x3863))+((x3858*x3862))+((r22*x3859)));
evalcond[5]=((((-1.0)*x3860*x3865))+((r02*x3859))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3863))+((r01*x3868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3869=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3869.valid){
continue;
}
CheckValue<IkReal> x3870 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3869.value)))+(x3870.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3871=IKcos(j4);
IkReal x3872=IKsin(j4);
IkReal x3873=(cj5*r00);
IkReal x3874=(cj5*r10);
IkReal x3875=(r21*sj5);
IkReal x3876=((1.0)*cj2);
IkReal x3877=(cj5*r20);
IkReal x3878=((1.0)*x3871);
IkReal x3879=((1.0)*x3872);
IkReal x3880=(sj5*x3872);
IkReal x3881=(sj5*x3871);
evalcond[0]=(((r11*x3881))+(((-1.0)*x3874*x3878))+((r12*x3872)));
evalcond[1]=((((-1.0)*x3877*x3879))+((x3872*x3875))+(((-1.0)*r22*x3878)));
evalcond[2]=((((-1.0)*x3873*x3879))+(((-1.0)*r02*x3878))+((r01*x3880)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3878))+((r11*x3880))+(((-1.0)*x3874*x3879)));
evalcond[4]=((((-1.0)*x3877*x3878))+((x3871*x3875))+((sj1*sj2))+(((-1.0)*cj1*x3876))+((r22*x3872)));
evalcond[5]=((((-1.0)*x3873*x3878))+(((-1.0)*cj1*sj2))+((r01*x3881))+(((-1.0)*sj1*x3876))+((r02*x3872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3882=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3882;
j4eval[1]=IKsign(x3882);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3883=((1.0)*cj5);
IkReal x3884=((((-1.0)*r21*x3883))+(((-1.0)*r20*sj5)));
j4eval[0]=x3884;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x3883)))))+(IKabs(r02)));
j4eval[2]=IKsign(x3884);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3885=cj5*cj5;
IkReal x3886=r11*r11;
IkReal x3887=(r11*sj5);
IkReal x3888=(cj5*r10);
IkReal x3889=((r12*r12)+(((-2.0)*x3887*x3888))+(((-1.0)*x3885*x3886))+x3886+((x3885*(r10*r10))));
j4eval[0]=x3889;
j4eval[1]=IKsign(x3889);
j4eval[2]=((IKabs(((((-1.0)*x3888))+x3887)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3890=cj5*cj5;
IkReal x3891=r11*r11;
IkReal x3892=(cj5*r10);
IkReal x3893=(r11*sj5);
CheckValue<IkReal> x3894 = IKatan2WithCheck(IkReal(((((-1.0)*x3892))+x3893)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3894.valid){
continue;
}
CheckValue<IkReal> x3895=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3892*x3893))+(r12*r12)+(((-1.0)*x3890*x3891))+x3891+((x3890*(r10*r10))))),-1);
if(!x3895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3894.value)+(((1.5707963267949)*(x3895.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3896=IKcos(j4);
IkReal x3897=IKsin(j4);
IkReal x3898=(cj5*r00);
IkReal x3899=(cj5*r10);
IkReal x3900=(r21*sj5);
IkReal x3901=(cj5*r20);
IkReal x3902=((1.0)*x3896);
IkReal x3903=((1.0)*x3897);
IkReal x3904=(sj5*x3897);
IkReal x3905=(sj5*x3896);
evalcond[0]=((((-1.0)*x3899*x3902))+((r12*x3897))+((r11*x3905)));
evalcond[1]=((((-1.0)*x3901*x3903))+((x3897*x3900))+(((-1.0)*r22*x3902)));
evalcond[2]=(((r01*x3904))+(((-1.0)*x3898*x3903))+(((-1.0)*r02*x3902)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3902))+(((-1.0)*x3899*x3903))+((r11*x3904)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x3905))+(((-1.0)*x3898*x3902))+((r02*x3897)));
evalcond[5]=((((-1.0)*x3901*x3902))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3897))+((x3896*x3900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3906=((1.0)*cj5);
CheckValue<IkReal> x3907 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3907.valid){
continue;
}
CheckValue<IkReal> x3908=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3906))+(((-1.0)*r20*sj5)))),-1);
if(!x3908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3907.value)+(((1.5707963267949)*(x3908.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3909=IKcos(j4);
IkReal x3910=IKsin(j4);
IkReal x3911=(cj5*r00);
IkReal x3912=(cj5*r10);
IkReal x3913=(r21*sj5);
IkReal x3914=(cj5*r20);
IkReal x3915=((1.0)*x3909);
IkReal x3916=((1.0)*x3910);
IkReal x3917=(sj5*x3910);
IkReal x3918=(sj5*x3909);
evalcond[0]=((((-1.0)*x3912*x3915))+((r11*x3918))+((r12*x3910)));
evalcond[1]=((((-1.0)*x3914*x3916))+(((-1.0)*r22*x3915))+((x3910*x3913)));
evalcond[2]=((((-1.0)*x3911*x3916))+(((-1.0)*r02*x3915))+((r01*x3917)));
evalcond[3]=((-1.0)+(((-1.0)*x3912*x3916))+((r11*x3917))+(((-1.0)*r12*x3915)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3911*x3915))+((cj1*sj2))+((r01*x3918))+((r02*x3910)));
evalcond[5]=((((-1.0)*x3914*x3915))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3909*x3913))+((r22*x3910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3919 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3919.valid){
continue;
}
CheckValue<IkReal> x3920=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3919.value)+(((1.5707963267949)*(x3920.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3921=IKcos(j4);
IkReal x3922=IKsin(j4);
IkReal x3923=(cj5*r00);
IkReal x3924=(cj5*r10);
IkReal x3925=(r21*sj5);
IkReal x3926=(cj5*r20);
IkReal x3927=((1.0)*x3921);
IkReal x3928=((1.0)*x3922);
IkReal x3929=(sj5*x3922);
IkReal x3930=(sj5*x3921);
evalcond[0]=(((r12*x3922))+(((-1.0)*x3924*x3927))+((r11*x3930)));
evalcond[1]=((((-1.0)*x3926*x3928))+(((-1.0)*r22*x3927))+((x3922*x3925)));
evalcond[2]=((((-1.0)*r02*x3927))+(((-1.0)*x3923*x3928))+((r01*x3929)));
evalcond[3]=((-1.0)+((r11*x3929))+(((-1.0)*x3924*x3928))+(((-1.0)*r12*x3927)));
evalcond[4]=(((cj2*sj1))+((r01*x3930))+((cj1*sj2))+((r02*x3922))+(((-1.0)*x3923*x3927)));
evalcond[5]=(((x3921*x3925))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3926*x3927))+((r22*x3922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3931=((-1.0)*r00);
IkReal x3933 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3933)==0){
continue;
}
IkReal x3932=pow(x3933,-0.5);
CheckValue<IkReal> x3934 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3931),IKFAST_ATAN2_MAGTHRESH);
if(!x3934.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3934.value));
IkReal gconst109=(r01*x3932);
IkReal gconst110=(x3931*x3932);
CheckValue<IkReal> x3935 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3935.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3935.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3936=((-1.0)*r00);
IkReal x3937=x3932;
CheckValue<IkReal> x3939 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3936),IKFAST_ATAN2_MAGTHRESH);
if(!x3939.valid){
continue;
}
IkReal x3938=((-1.0)*(x3939.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3938;
IkReal gconst108=x3938;
IkReal gconst109=(r01*x3937);
IkReal gconst110=(x3936*x3937);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3940=((1.0)*sj0);
IkReal x3941=((1.0)*gconst109);
CheckValue<IkReal> x3942 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3940)))),IkReal(((((-1.0)*cj0*r01*x3941))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x3940)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3942.valid){
continue;
}
CheckValue<IkReal> x3943=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3941))+(((-1.0)*gconst110*r21)))),-1);
if(!x3943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3942.value)+(((1.5707963267949)*(x3943.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3944=IKsin(j4);
IkReal x3945=IKcos(j4);
IkReal x3946=(gconst109*r21);
IkReal x3947=((1.0)*cj2);
IkReal x3948=((1.0)*sj0);
IkReal x3949=(cj1*sj2);
IkReal x3950=((1.0)*x3945);
IkReal x3951=(gconst109*x3944);
IkReal x3952=(gconst109*x3945);
IkReal x3953=((1.0)*gconst110*x3944);
evalcond[0]=((((-1.0)*r22*x3950))+(((-1.0)*r20*x3953))+((x3944*x3946)));
evalcond[1]=(cj0+(((-1.0)*r12*x3950))+((r11*x3951))+(((-1.0)*r10*x3953)));
evalcond[2]=(((r01*x3951))+(((-1.0)*r00*x3953))+(((-1.0)*x3948))+(((-1.0)*r02*x3950)));
evalcond[3]=(((r22*x3944))+(((-1.0)*cj1*x3947))+((sj1*sj2))+(((-1.0)*gconst110*r20*x3950))+((x3945*x3946)));
evalcond[4]=((((-1.0)*cj0*x3949))+((r01*x3952))+(((-1.0)*cj0*sj1*x3947))+(((-1.0)*gconst110*r00*x3950))+((r02*x3944)));
evalcond[5]=((((-1.0)*x3948*x3949))+((r11*x3952))+((r12*x3944))+(((-1.0)*sj0*sj1*x3947))+(((-1.0)*gconst110*r10*x3950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3954=((1.0)*gconst110);
CheckValue<IkReal> x3955=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3954))+(((-1.0)*gconst109*r10)))),-1);
if(!x3955.valid){
continue;
}
CheckValue<IkReal> x3956 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3954))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3955.value)))+(x3956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3957=IKsin(j4);
IkReal x3958=IKcos(j4);
IkReal x3959=(gconst109*r21);
IkReal x3960=((1.0)*cj2);
IkReal x3961=((1.0)*sj0);
IkReal x3962=(cj1*sj2);
IkReal x3963=((1.0)*x3958);
IkReal x3964=(gconst109*x3957);
IkReal x3965=(gconst109*x3958);
IkReal x3966=((1.0)*gconst110*x3957);
evalcond[0]=((((-1.0)*r20*x3966))+((x3957*x3959))+(((-1.0)*r22*x3963)));
evalcond[1]=(cj0+((r11*x3964))+(((-1.0)*r10*x3966))+(((-1.0)*r12*x3963)));
evalcond[2]=((((-1.0)*x3961))+(((-1.0)*r02*x3963))+((r01*x3964))+(((-1.0)*r00*x3966)));
evalcond[3]=((((-1.0)*gconst110*r20*x3963))+((x3958*x3959))+((sj1*sj2))+((r22*x3957))+(((-1.0)*cj1*x3960)));
evalcond[4]=((((-1.0)*cj0*x3962))+(((-1.0)*gconst110*r00*x3963))+(((-1.0)*cj0*sj1*x3960))+((r02*x3957))+((r01*x3965)));
evalcond[5]=((((-1.0)*gconst110*r10*x3963))+((r11*x3965))+(((-1.0)*x3961*x3962))+(((-1.0)*sj0*sj1*x3960))+((r12*x3957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3967=((-1.0)*r01);
IkReal x3969 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3969)==0){
continue;
}
IkReal x3968=pow(x3969,-0.5);
CheckValue<IkReal> x3970 = IKatan2WithCheck(IkReal(x3967),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3970.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3970.value))));
IkReal gconst112=(x3967*x3968);
IkReal gconst113=((1.0)*r00*x3968);
CheckValue<IkReal> x3971 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3971.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3971.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3972=((-1.0)*r01);
CheckValue<IkReal> x3975 = IKatan2WithCheck(IkReal(x3972),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3975.valid){
continue;
}
IkReal x3973=((1.0)*(x3975.value));
IkReal x3974=x3968;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3973)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3973)));
IkReal gconst112=(x3972*x3974);
IkReal gconst113=((1.0)*r00*x3974);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3976=((-1.0)*r01);
CheckValue<IkReal> x3979 = IKatan2WithCheck(IkReal(x3976),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3979.valid){
continue;
}
IkReal x3977=((1.0)*(x3979.value));
IkReal x3978=x3968;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3977)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3977)));
IkReal gconst112=(x3976*x3978);
IkReal gconst113=((1.0)*r00*x3978);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3980=((-1.0)*r01);
CheckValue<IkReal> x3983 = IKatan2WithCheck(IkReal(x3980),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3983.valid){
continue;
}
IkReal x3981=((1.0)*(x3983.value));
IkReal x3982=x3968;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3981)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3981)));
IkReal gconst112=(x3980*x3982);
IkReal gconst113=((1.0)*r00*x3982);
IkReal x3984=r02*r02;
IkReal x3985=(r12*sj0);
IkReal x3986=((1.0)*cj0);
IkReal x3987=x3968;
j4eval[0]=((IKabs(((((-1.0)*r02*x3986))+(((-1.0)*x3985)))))+(IKabs((((r02*x3985*x3987))+((cj0*x3984*x3987))+(((-1.0)*x3986*x3987))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3988=((1.0)*sj0);
IkReal x3989=((1.0)*gconst112);
CheckValue<IkReal> x3990 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3988))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x3989))+(((-1.0)*gconst112*r11*x3988)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3990.valid){
continue;
}
CheckValue<IkReal> x3991=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3989))+(((-1.0)*gconst113*r21)))),-1);
if(!x3991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3990.value)+(((1.5707963267949)*(x3991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3992=IKsin(j4);
IkReal x3993=IKcos(j4);
IkReal x3994=(gconst113*r20);
IkReal x3995=(gconst112*r21);
IkReal x3996=((1.0)*cj2);
IkReal x3997=(gconst113*r00);
IkReal x3998=(gconst113*r10);
IkReal x3999=((1.0)*sj0);
IkReal x4000=(cj1*sj2);
IkReal x4001=((1.0)*x3993);
IkReal x4002=((1.0)*x3992);
IkReal x4003=(gconst112*x3993);
IkReal x4004=(gconst112*x3992);
evalcond[0]=((((-1.0)*r22*x4001))+(((-1.0)*x3994*x4002))+((x3992*x3995)));
evalcond[1]=((((-1.0)*x3998*x4002))+cj0+(((-1.0)*r12*x4001))+((r11*x4004)));
evalcond[2]=((((-1.0)*r02*x4001))+(((-1.0)*x3999))+((r01*x4004))+(((-1.0)*x3997*x4002)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x3994*x4001))+((r22*x3992))+((x3993*x3995))+(((-1.0)*cj1*x3996)));
evalcond[4]=((((-1.0)*cj0*x4000))+((r01*x4003))+(((-1.0)*cj0*sj1*x3996))+((r02*x3992))+(((-1.0)*x3997*x4001)));
evalcond[5]=((((-1.0)*x3998*x4001))+(((-1.0)*x3999*x4000))+((r12*x3992))+(((-1.0)*sj0*sj1*x3996))+((r11*x4003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4005=((1.0)*gconst113);
CheckValue<IkReal> x4006=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4005))+(((-1.0)*gconst112*r10)))),-1);
if(!x4006.valid){
continue;
}
CheckValue<IkReal> x4007 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4005)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4006.value)))+(x4007.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4008=IKsin(j4);
IkReal x4009=IKcos(j4);
IkReal x4010=(gconst113*r20);
IkReal x4011=(gconst112*r21);
IkReal x4012=((1.0)*cj2);
IkReal x4013=(gconst113*r00);
IkReal x4014=(gconst113*r10);
IkReal x4015=((1.0)*sj0);
IkReal x4016=(cj1*sj2);
IkReal x4017=((1.0)*x4009);
IkReal x4018=((1.0)*x4008);
IkReal x4019=(gconst112*x4009);
IkReal x4020=(gconst112*x4008);
evalcond[0]=((((-1.0)*r22*x4017))+((x4008*x4011))+(((-1.0)*x4010*x4018)));
evalcond[1]=((((-1.0)*r12*x4017))+cj0+(((-1.0)*x4014*x4018))+((r11*x4020)));
evalcond[2]=((((-1.0)*x4013*x4018))+((r01*x4020))+(((-1.0)*r02*x4017))+(((-1.0)*x4015)));
evalcond[3]=((((-1.0)*cj1*x4012))+((sj1*sj2))+((r22*x4008))+((x4009*x4011))+(((-1.0)*x4010*x4017)));
evalcond[4]=((((-1.0)*cj0*x4016))+(((-1.0)*x4013*x4017))+(((-1.0)*cj0*sj1*x4012))+((r01*x4019))+((r02*x4008)));
evalcond[5]=(((r12*x4008))+(((-1.0)*sj0*sj1*x4012))+(((-1.0)*x4014*x4017))+(((-1.0)*x4015*x4016))+((r11*x4019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4021=((1.0)*gconst113);
CheckValue<IkReal> x4022 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4022.valid){
continue;
}
CheckValue<IkReal> x4023=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4021))+(((-1.0)*gconst112*r00)))),-1);
if(!x4023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4022.value)+(((1.5707963267949)*(x4023.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4024=IKsin(j4);
IkReal x4025=IKcos(j4);
IkReal x4026=(gconst113*r20);
IkReal x4027=(gconst112*r21);
IkReal x4028=((1.0)*cj2);
IkReal x4029=(gconst113*r00);
IkReal x4030=(gconst113*r10);
IkReal x4031=((1.0)*sj0);
IkReal x4032=(cj1*sj2);
IkReal x4033=((1.0)*x4025);
IkReal x4034=((1.0)*x4024);
IkReal x4035=(gconst112*x4025);
IkReal x4036=(gconst112*x4024);
evalcond[0]=((((-1.0)*r22*x4033))+(((-1.0)*x4026*x4034))+((x4024*x4027)));
evalcond[1]=(cj0+(((-1.0)*x4030*x4034))+(((-1.0)*r12*x4033))+((r11*x4036)));
evalcond[2]=(((r01*x4036))+(((-1.0)*x4029*x4034))+(((-1.0)*x4031))+(((-1.0)*r02*x4033)));
evalcond[3]=((((-1.0)*x4026*x4033))+((sj1*sj2))+(((-1.0)*cj1*x4028))+((x4025*x4027))+((r22*x4024)));
evalcond[4]=((((-1.0)*cj0*x4032))+(((-1.0)*cj0*sj1*x4028))+((r01*x4035))+(((-1.0)*x4029*x4033))+((r02*x4024)));
evalcond[5]=((((-1.0)*x4031*x4032))+(((-1.0)*sj0*sj1*x4028))+(((-1.0)*x4030*x4033))+((r12*x4024))+((r11*x4035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4037=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4037;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4038=((1.0)*cj5);
IkReal x4039=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4038)));
j4eval[0]=x4039;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4038))))));
j4eval[2]=IKsign(x4039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4040=cj5*cj5;
IkReal x4041=r01*r01;
IkReal x4042=(cj5*r00);
IkReal x4043=(r01*sj5);
IkReal x4044=((((-2.0)*x4042*x4043))+((x4040*(r00*r00)))+x4041+(((-1.0)*x4040*x4041))+(r02*r02));
j4eval[0]=x4044;
j4eval[1]=IKsign(x4044);
j4eval[2]=((IKabs(r02))+(IKabs((x4043+(((-1.0)*x4042))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4045=cj5*cj5;
IkReal x4046=r01*r01;
IkReal x4047=(r01*sj5);
IkReal x4048=(cj5*r00);
CheckValue<IkReal> x4049=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4045*x4046))+(((-2.0)*x4047*x4048))+x4046+((x4045*(r00*r00)))+(r02*r02))),-1);
if(!x4049.valid){
continue;
}
CheckValue<IkReal> x4050 = IKatan2WithCheck(IkReal((x4047+(((-1.0)*x4048)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4049.value)))+(x4050.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4051=IKcos(j4);
IkReal x4052=IKsin(j4);
IkReal x4053=(cj5*r00);
IkReal x4054=(cj5*r10);
IkReal x4055=(r21*sj5);
IkReal x4056=((1.0)*cj2);
IkReal x4057=(cj5*r20);
IkReal x4058=((1.0)*x4051);
IkReal x4059=((1.0)*x4052);
IkReal x4060=(sj5*x4052);
IkReal x4061=(sj5*x4051);
evalcond[0]=(((r02*x4052))+(((-1.0)*x4053*x4058))+((r01*x4061)));
evalcond[1]=((((-1.0)*x4057*x4059))+(((-1.0)*r22*x4058))+((x4052*x4055)));
evalcond[2]=((((-1.0)*r12*x4058))+((r11*x4060))+(((-1.0)*x4054*x4059)));
evalcond[3]=((-1.0)+(((-1.0)*x4053*x4059))+(((-1.0)*r02*x4058))+((r01*x4060)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x4057*x4058))+((x4051*x4055))+(((-1.0)*cj1*x4056))+((r22*x4052)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4061))+((r12*x4052))+(((-1.0)*x4054*x4058))+(((-1.0)*sj1*x4056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4062=((1.0)*cj5);
CheckValue<IkReal> x4063 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4062))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4063.valid){
continue;
}
CheckValue<IkReal> x4064=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4062)))),-1);
if(!x4064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4063.value)+(((1.5707963267949)*(x4064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4065=IKcos(j4);
IkReal x4066=IKsin(j4);
IkReal x4067=(cj5*r00);
IkReal x4068=(cj5*r10);
IkReal x4069=(r21*sj5);
IkReal x4070=((1.0)*cj2);
IkReal x4071=(cj5*r20);
IkReal x4072=((1.0)*x4065);
IkReal x4073=((1.0)*x4066);
IkReal x4074=(sj5*x4066);
IkReal x4075=(sj5*x4065);
evalcond[0]=((((-1.0)*x4067*x4072))+((r02*x4066))+((r01*x4075)));
evalcond[1]=((((-1.0)*x4071*x4073))+(((-1.0)*r22*x4072))+((x4066*x4069)));
evalcond[2]=((((-1.0)*x4068*x4073))+(((-1.0)*r12*x4072))+((r11*x4074)));
evalcond[3]=((-1.0)+(((-1.0)*x4067*x4073))+(((-1.0)*r02*x4072))+((r01*x4074)));
evalcond[4]=((((-1.0)*x4071*x4072))+((sj1*sj2))+(((-1.0)*cj1*x4070))+((x4065*x4069))+((r22*x4066)));
evalcond[5]=((((-1.0)*x4068*x4072))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4070))+((r12*x4066))+((r11*x4075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4076=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4076.valid){
continue;
}
CheckValue<IkReal> x4077 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4076.value)))+(x4077.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4078=IKcos(j4);
IkReal x4079=IKsin(j4);
IkReal x4080=(cj5*r00);
IkReal x4081=(cj5*r10);
IkReal x4082=(r21*sj5);
IkReal x4083=((1.0)*cj2);
IkReal x4084=(cj5*r20);
IkReal x4085=((1.0)*x4078);
IkReal x4086=((1.0)*x4079);
IkReal x4087=(sj5*x4079);
IkReal x4088=(sj5*x4078);
evalcond[0]=(((r01*x4088))+((r02*x4079))+(((-1.0)*x4080*x4085)));
evalcond[1]=(((x4079*x4082))+(((-1.0)*r22*x4085))+(((-1.0)*x4084*x4086)));
evalcond[2]=((((-1.0)*r12*x4085))+((r11*x4087))+(((-1.0)*x4081*x4086)));
evalcond[3]=((-1.0)+((r01*x4087))+(((-1.0)*r02*x4085))+(((-1.0)*x4080*x4086)));
evalcond[4]=(((r22*x4079))+((sj1*sj2))+(((-1.0)*cj1*x4083))+(((-1.0)*x4084*x4085))+((x4078*x4082)));
evalcond[5]=(((r12*x4079))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4083))+((r11*x4088))+(((-1.0)*x4081*x4085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4089=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4089;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4089);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4090=((1.0)*cj5);
IkReal x4091=((((-1.0)*r21*x4090))+(((-1.0)*r20*sj5)));
j4eval[0]=x4091;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4090))+((r11*sj5))))));
j4eval[2]=IKsign(x4091);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4092=cj5*cj5;
IkReal x4093=r01*r01;
IkReal x4094=(r01*sj5);
IkReal x4095=(cj5*r00);
IkReal x4096=((((2.0)*x4094*x4095))+(((-1.0)*x4092*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x4093))+((x4092*x4093)));
j4eval[0]=x4096;
j4eval[1]=IKsign(x4096);
j4eval[2]=((IKabs((x4094+(((-1.0)*x4095)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4097=cj5*cj5;
IkReal x4098=r01*r01;
IkReal x4099=(r01*sj5);
IkReal x4100=(cj5*r00);
CheckValue<IkReal> x4101 = IKatan2WithCheck(IkReal(((((-1.0)*x4100))+x4099)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4101.valid){
continue;
}
CheckValue<IkReal> x4102=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x4099*x4100))+((x4097*x4098))+(((-1.0)*x4098))+(((-1.0)*x4097*(r00*r00))))),-1);
if(!x4102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4101.value)+(((1.5707963267949)*(x4102.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4103=IKcos(j4);
IkReal x4104=IKsin(j4);
IkReal x4105=(cj5*r00);
IkReal x4106=(cj5*r10);
IkReal x4107=(r21*sj5);
IkReal x4108=(cj5*r20);
IkReal x4109=((1.0)*x4103);
IkReal x4110=((1.0)*x4104);
IkReal x4111=(sj5*x4104);
IkReal x4112=(sj5*x4103);
evalcond[0]=((((-1.0)*x4105*x4109))+((r02*x4104))+((r01*x4112)));
evalcond[1]=((((-1.0)*r22*x4109))+(((-1.0)*x4108*x4110))+((x4104*x4107)));
evalcond[2]=((((-1.0)*r12*x4109))+((r11*x4111))+(((-1.0)*x4106*x4110)));
evalcond[3]=((1.0)+(((-1.0)*x4105*x4110))+((r01*x4111))+(((-1.0)*r02*x4109)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4106*x4109))+((r12*x4104))+((r11*x4112)));
evalcond[5]=(((r22*x4104))+((x4103*x4107))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4108*x4109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4113=((1.0)*cj5);
CheckValue<IkReal> x4114 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4113)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4114.valid){
continue;
}
CheckValue<IkReal> x4115=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4113))+(((-1.0)*r20*sj5)))),-1);
if(!x4115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4114.value)+(((1.5707963267949)*(x4115.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4116=IKcos(j4);
IkReal x4117=IKsin(j4);
IkReal x4118=(cj5*r00);
IkReal x4119=(cj5*r10);
IkReal x4120=(r21*sj5);
IkReal x4121=(cj5*r20);
IkReal x4122=((1.0)*x4116);
IkReal x4123=((1.0)*x4117);
IkReal x4124=(sj5*x4117);
IkReal x4125=(sj5*x4116);
evalcond[0]=(((r02*x4117))+(((-1.0)*x4118*x4122))+((r01*x4125)));
evalcond[1]=((((-1.0)*r22*x4122))+(((-1.0)*x4121*x4123))+((x4117*x4120)));
evalcond[2]=((((-1.0)*r12*x4122))+(((-1.0)*x4119*x4123))+((r11*x4124)));
evalcond[3]=((1.0)+(((-1.0)*x4118*x4123))+(((-1.0)*r02*x4122))+((r01*x4124)));
evalcond[4]=(((r12*x4117))+((cj2*sj1))+(((-1.0)*x4119*x4122))+((cj1*sj2))+((r11*x4125)));
evalcond[5]=(((x4116*x4120))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4121*x4122))+((r22*x4117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4126 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4126.valid){
continue;
}
CheckValue<IkReal> x4127=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4126.value)+(((1.5707963267949)*(x4127.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4128=IKcos(j4);
IkReal x4129=IKsin(j4);
IkReal x4130=(cj5*r00);
IkReal x4131=(cj5*r10);
IkReal x4132=(r21*sj5);
IkReal x4133=(cj5*r20);
IkReal x4134=((1.0)*x4128);
IkReal x4135=((1.0)*x4129);
IkReal x4136=(sj5*x4129);
IkReal x4137=(sj5*x4128);
evalcond[0]=((((-1.0)*x4130*x4134))+((r02*x4129))+((r01*x4137)));
evalcond[1]=(((x4129*x4132))+(((-1.0)*x4133*x4135))+(((-1.0)*r22*x4134)));
evalcond[2]=((((-1.0)*x4131*x4135))+((r11*x4136))+(((-1.0)*r12*x4134)));
evalcond[3]=((1.0)+(((-1.0)*x4130*x4135))+((r01*x4136))+(((-1.0)*r02*x4134)));
evalcond[4]=(((r12*x4129))+((cj2*sj1))+(((-1.0)*x4131*x4134))+((cj1*sj2))+((r11*x4137)));
evalcond[5]=(((x4128*x4132))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4133*x4134))+((r22*x4129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4138=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4138);
rxp1_1=(px*r21);
rxp1_2=(r11*x4138);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4139=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4139);
rxp1_1=(px*r21);
rxp1_2=(r11*x4139);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4140=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4140);
rxp1_1=(px*r21);
rxp1_2=(r11*x4140);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4143=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4143.valid){
continue;
}
IkReal x4141=x4143.value;
IkReal x4142=(sj0*x4141);
cj4array[0]=(((cj1*sj2*x4142))+((cj2*sj1*x4142)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4144=IKsin(j4);
IkReal x4145=IKcos(j4);
IkReal x4146=(r21*sj5);
IkReal x4147=((1.0)*cj5*r20);
evalcond[0]=(r02*x4144);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4145)));
evalcond[2]=((((-1.0)*x4144*x4147))+((x4144*x4146)));
evalcond[3]=((((-1.0)*cj5*r10*x4144))+((r11*sj5*x4144)));
evalcond[4]=(((x4145*x4146))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4145*x4147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4149=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4149.valid){
continue;
}
IkReal x4148=x4149.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4148))+((cj1*cj2*x4148)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4150=IKsin(j4);
IkReal x4151=IKcos(j4);
IkReal x4152=((1.0)*sj0);
IkReal x4153=((1.0)*cj5);
IkReal x4154=(sj5*x4150);
evalcond[0]=(r02*x4150);
evalcond[1]=((((-1.0)*x4152))+(((-1.0)*r02*x4151)));
evalcond[2]=(((r21*x4154))+(((-1.0)*r20*x4150*x4153)));
evalcond[3]=((((-1.0)*r10*x4150*x4153))+((r11*x4154)));
evalcond[4]=((((-1.0)*r10*x4151*x4153))+((r11*sj5*x4151))+(((-1.0)*cj1*sj2*x4152))+(((-1.0)*cj2*sj1*x4152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4155=IKPowWithIntegerCheck(r02,-1);
if(!x4155.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4155.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4156=IKsin(j4);
IkReal x4157=IKcos(j4);
IkReal x4158=((1.0)*cj1);
IkReal x4159=(r21*sj5);
IkReal x4160=((1.0)*cj5);
IkReal x4161=(r11*sj5);
evalcond[0]=(r02*x4156);
evalcond[1]=((((-1.0)*r20*x4156*x4160))+((x4156*x4159)));
evalcond[2]=((((-1.0)*r10*x4156*x4160))+((x4156*x4161)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r20*x4157*x4160))+((x4157*x4159))+(((-1.0)*cj2*x4158)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x4158))+((x4157*x4161))+(((-1.0)*r10*x4157*x4160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4162=((1.0)*sj0);
IkReal x4163=((1.0)*cj0);
CheckValue<IkReal> x4164 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4163))+(((-1.0)*r12*x4162)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4163))+(((-1.0)*r11*sj5*x4162)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4164.valid){
continue;
}
CheckValue<IkReal> x4165=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4164.value)+(((1.5707963267949)*(x4165.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4166=IKsin(j4);
IkReal x4167=IKcos(j4);
IkReal x4168=(cj5*r00);
IkReal x4169=(cj5*r10);
IkReal x4170=(r21*sj5);
IkReal x4171=((1.0)*cj2);
IkReal x4172=((1.0)*sj0);
IkReal x4173=(cj1*sj2);
IkReal x4174=(cj5*r20);
IkReal x4175=((1.0)*x4167);
IkReal x4176=((1.0)*x4166);
IkReal x4177=(sj5*x4166);
IkReal x4178=(sj5*x4167);
evalcond[0]=((((-1.0)*x4174*x4176))+(((-1.0)*r22*x4175))+((x4166*x4170)));
evalcond[1]=(((r11*x4177))+cj0+(((-1.0)*x4169*x4176))+(((-1.0)*r12*x4175)));
evalcond[2]=((((-1.0)*x4172))+(((-1.0)*x4168*x4176))+((r01*x4177))+(((-1.0)*r02*x4175)));
evalcond[3]=(((r22*x4166))+(((-1.0)*cj1*x4171))+((sj1*sj2))+(((-1.0)*x4174*x4175))+((x4167*x4170)));
evalcond[4]=((((-1.0)*x4168*x4175))+(((-1.0)*cj0*x4173))+((r02*x4166))+((r01*x4178))+(((-1.0)*cj0*sj1*x4171)));
evalcond[5]=(((r11*x4178))+(((-1.0)*x4172*x4173))+(((-1.0)*x4169*x4175))+(((-1.0)*sj0*sj1*x4171))+((r12*x4166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4179=((1.0)*cj5);
CheckValue<IkReal> x4180=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4179)))),-1);
if(!x4180.valid){
continue;
}
CheckValue<IkReal> x4181 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4179)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4180.value)))+(x4181.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4182=IKsin(j4);
IkReal x4183=IKcos(j4);
IkReal x4184=(cj5*r00);
IkReal x4185=(cj5*r10);
IkReal x4186=(r21*sj5);
IkReal x4187=((1.0)*cj2);
IkReal x4188=((1.0)*sj0);
IkReal x4189=(cj1*sj2);
IkReal x4190=(cj5*r20);
IkReal x4191=((1.0)*x4183);
IkReal x4192=((1.0)*x4182);
IkReal x4193=(sj5*x4182);
IkReal x4194=(sj5*x4183);
evalcond[0]=((((-1.0)*x4190*x4192))+((x4182*x4186))+(((-1.0)*r22*x4191)));
evalcond[1]=((((-1.0)*r12*x4191))+((r11*x4193))+cj0+(((-1.0)*x4185*x4192)));
evalcond[2]=((((-1.0)*x4188))+(((-1.0)*r02*x4191))+((r01*x4193))+(((-1.0)*x4184*x4192)));
evalcond[3]=((((-1.0)*cj1*x4187))+((sj1*sj2))+((r22*x4182))+((x4183*x4186))+(((-1.0)*x4190*x4191)));
evalcond[4]=(((r02*x4182))+(((-1.0)*cj0*sj1*x4187))+(((-1.0)*cj0*x4189))+((r01*x4194))+(((-1.0)*x4184*x4191)));
evalcond[5]=(((r12*x4182))+((r11*x4194))+(((-1.0)*x4185*x4191))+(((-1.0)*sj0*sj1*x4187))+(((-1.0)*x4188*x4189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4195=((1.0)*cj5);
CheckValue<IkReal> x4196=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4195))+(((-1.0)*r00*sj5)))),-1);
if(!x4196.valid){
continue;
}
CheckValue<IkReal> x4197 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4195))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4196.value)))+(x4197.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4198=IKsin(j4);
IkReal x4199=IKcos(j4);
IkReal x4200=(cj5*r00);
IkReal x4201=(cj5*r10);
IkReal x4202=(r21*sj5);
IkReal x4203=((1.0)*cj2);
IkReal x4204=((1.0)*sj0);
IkReal x4205=(cj1*sj2);
IkReal x4206=(cj5*r20);
IkReal x4207=((1.0)*x4199);
IkReal x4208=((1.0)*x4198);
IkReal x4209=(sj5*x4198);
IkReal x4210=(sj5*x4199);
evalcond[0]=(((x4198*x4202))+(((-1.0)*x4206*x4208))+(((-1.0)*r22*x4207)));
evalcond[1]=(((r11*x4209))+(((-1.0)*r12*x4207))+cj0+(((-1.0)*x4201*x4208)));
evalcond[2]=((((-1.0)*r02*x4207))+(((-1.0)*x4204))+((r01*x4209))+(((-1.0)*x4200*x4208)));
evalcond[3]=(((x4199*x4202))+(((-1.0)*x4206*x4207))+((sj1*sj2))+((r22*x4198))+(((-1.0)*cj1*x4203)));
evalcond[4]=(((r02*x4198))+(((-1.0)*cj0*x4205))+(((-1.0)*cj0*sj1*x4203))+((r01*x4210))+(((-1.0)*x4200*x4207)));
evalcond[5]=(((r12*x4198))+(((-1.0)*x4201*x4207))+((r11*x4210))+(((-1.0)*sj0*sj1*x4203))+(((-1.0)*x4204*x4205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4211=r21*r21;
IkReal x4212=cj5*cj5;
IkReal x4213=(sj1*sj2);
IkReal x4214=(r21*sj5);
IkReal x4215=(cj1*cj2);
IkReal x4216=(cj5*r20);
CheckValue<IkReal> x4217=IKPowWithIntegerCheck(IKsign(((((2.0)*x4214*x4216))+(((-1.0)*(r22*r22)))+(((-1.0)*x4211))+(((-1.0)*x4212*(r20*r20)))+((x4211*x4212)))),-1);
if(!x4217.valid){
continue;
}
CheckValue<IkReal> x4218 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4215))+((r22*x4213)))),IkReal((((x4215*x4216))+((x4213*x4214))+(((-1.0)*x4214*x4215))+(((-1.0)*x4213*x4216)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4217.value)))+(x4218.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4219=IKsin(j4);
IkReal x4220=IKcos(j4);
IkReal x4221=(r21*sj5);
IkReal x4222=(cj5*r20);
IkReal x4223=((1.0)*x4220);
evalcond[0]=((((-1.0)*x4219*x4222))+(((-1.0)*r22*x4223))+((x4219*x4221)));
evalcond[1]=(((r22*x4219))+((x4220*x4221))+(((-1.0)*cj1*cj2))+(((-1.0)*x4222*x4223))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4224=(cj5*sj4);
IkReal x4225=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x4225))+(((-1.0)*r00*x4224)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x4224))+(((-1.0)*r11*x4225))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x4225))+(((-1.0)*r00*x4224))))+IKsqr((((r10*x4224))+(((-1.0)*r11*x4225))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x4225))+(((-1.0)*r00*x4224))), (((r10*x4224))+(((-1.0)*r11*x4225))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4226=IKcos(j0);
IkReal x4227=IKsin(j0);
IkReal x4228=((1.0)*cj1);
IkReal x4229=((0.39225)*sj1);
IkReal x4230=(r11*sj5);
IkReal x4231=(cj5*r11);
IkReal x4232=((1.0)*sj5);
IkReal x4233=((1.0)*sj1);
IkReal x4234=((0.09465)*sj5);
IkReal x4235=((1.0)*cj5);
IkReal x4236=((0.425)*cj1);
IkReal x4237=((1.0)*cj4);
IkReal x4238=(r01*sj5);
IkReal x4239=(sj2*x4226);
IkReal x4240=(sj2*x4227);
IkReal x4241=(cj4*x4235);
IkReal x4242=((0.39225)*cj1*cj2);
IkReal x4243=(cj2*x4226);
IkReal x4244=(cj2*x4227);
evalcond[0]=(((sj4*x4230))+(((-1.0)*r12*x4237))+(((-1.0)*r10*sj4*x4235))+x4226);
evalcond[1]=(((sj4*x4238))+(((-1.0)*x4227))+(((-1.0)*r00*sj4*x4235))+(((-1.0)*r02*x4237)));
evalcond[2]=((((-1.0)*r01*x4235))+((sj1*x4239))+(((-1.0)*r00*x4232))+(((-1.0)*x4228*x4243)));
evalcond[3]=(((sj1*x4240))+(((-1.0)*x4231))+(((-1.0)*r10*x4232))+(((-1.0)*x4228*x4244)));
evalcond[4]=(((cj4*x4238))+(((-1.0)*x4233*x4243))+((r02*sj4))+(((-1.0)*x4228*x4239))+(((-1.0)*r00*x4241)));
evalcond[5]=(((cj4*x4230))+(((-1.0)*x4233*x4244))+((r12*sj4))+(((-1.0)*r10*x4241))+(((-1.0)*x4228*x4240)));
evalcond[6]=((((-0.09465)*cj5*r01))+(((-0.10915)*x4227))+((x4226*x4242))+((x4226*x4236))+(((-1.0)*px))+(((-1.0)*x4229*x4239))+(((-1.0)*r00*x4234)));
evalcond[7]=((((-0.09465)*x4231))+(((0.10915)*x4226))+(((-1.0)*r10*x4234))+((x4227*x4242))+((x4227*x4236))+(((-1.0)*py))+(((-1.0)*x4229*x4240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4245 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4245.valid){
continue;
}
CheckValue<IkReal> x4246=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4246.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4245.value)+(((1.5707963267949)*(x4246.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4247=IKcos(j0);
IkReal x4248=IKsin(j0);
IkReal x4249=(cj5*r11);
IkReal x4250=(cj5*r01);
IkReal x4251=((1.0)*sj5);
IkReal x4252=((0.09465)*sj5);
IkReal x4253=(sj1*sj2);
IkReal x4254=((0.39225)*cj2);
IkReal x4255=((1.0)*cj2);
IkReal x4256=((0.39225)*x4253);
IkReal x4257=(cj1*x4247);
IkReal x4258=(cj1*x4248);
evalcond[0]=(((x4247*x4253))+(((-1.0)*x4255*x4257))+(((-1.0)*x4250))+(((-1.0)*r00*x4251)));
evalcond[1]=((((-1.0)*x4255*x4258))+((x4248*x4253))+(((-1.0)*r10*x4251))+(((-1.0)*x4249)));
evalcond[2]=((((0.425)*x4257))+(((-0.10915)*x4248))+(((-1.0)*px))+(((-0.09465)*x4250))+(((-1.0)*x4247*x4256))+(((-1.0)*r00*x4252))+((x4254*x4257)));
evalcond[3]=((((0.10915)*x4247))+(((0.425)*x4258))+(((-1.0)*py))+(((-1.0)*x4248*x4256))+(((-1.0)*r10*x4252))+((x4254*x4258))+(((-0.09465)*x4249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4259=((1.0)*cj5);
IkReal x4260=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4259)));
j4eval[0]=x4260;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4259)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4260);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4261=((1.0)*cj5);
IkReal x4262=((((-1.0)*r11*x4261))+(((-1.0)*r10*sj5)));
j4eval[0]=x4262;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4261))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x4262);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4263=((1.0)*sj0);
IkReal x4264=((1.0)*cj0);
IkReal x4265=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4265;
j4eval[1]=((IKabs(((((-1.0)*r12*x4263))+(((-1.0)*r02*x4264)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x4264))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4263))))));
j4eval[2]=IKsign(x4265);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4266=((-1.0)*r20);
IkReal x4268 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4268)==0){
continue;
}
IkReal x4267=pow(x4268,-0.5);
CheckValue<IkReal> x4269 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4266),IKFAST_ATAN2_MAGTHRESH);
if(!x4269.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4269.value));
IkReal gconst97=(r21*x4267);
IkReal gconst98=(x4266*x4267);
CheckValue<IkReal> x4270 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4270.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4270.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4271=((-1.0)*r20);
IkReal x4272=x4267;
CheckValue<IkReal> x4274 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4271),IKFAST_ATAN2_MAGTHRESH);
if(!x4274.valid){
continue;
}
IkReal x4273=((-1.0)*(x4274.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4273;
IkReal gconst96=x4273;
IkReal gconst97=(r21*x4272);
IkReal gconst98=(x4271*x4272);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4275=((-1.0)*r20);
IkReal x4276=x4267;
CheckValue<IkReal> x4278 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4275),IKFAST_ATAN2_MAGTHRESH);
if(!x4278.valid){
continue;
}
IkReal x4277=((-1.0)*(x4278.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4277;
IkReal gconst96=x4277;
IkReal gconst97=(r21*x4276);
IkReal gconst98=(x4275*x4276);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4279=((-1.0)*r20);
IkReal x4280=x4267;
CheckValue<IkReal> x4282 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4279),IKFAST_ATAN2_MAGTHRESH);
if(!x4282.valid){
continue;
}
IkReal x4281=((-1.0)*(x4282.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4281;
IkReal gconst96=x4281;
IkReal gconst97=(r21*x4280);
IkReal gconst98=(x4279*x4280);
IkReal x4283=((1.0)*(r22*r22));
CheckValue<IkReal> x4287=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4283))),-1);
if(!x4287.valid){
continue;
}
IkReal x4284=x4287.value;
IkReal x4285=((1.0)*x4284);
IkReal x4286=((((-1.0)*x4283))+(((-1.0)*x4285*(r21*r21*r21*r21)))+(((-1.0)*x4285*(r20*r20*r20*r20)))+(((-2.0)*x4284*(r20*r20)*(r21*r21))));
j4eval[0]=x4286;
j4eval[1]=IKsign(x4286);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4288=(cj1*cj2);
IkReal x4289=(gconst98*r20);
IkReal x4290=(sj1*sj2);
IkReal x4291=(gconst97*r21);
CheckValue<IkReal> x4292 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4288))+((r22*x4290)))),IkReal(((((-1.0)*x4288*x4291))+(((-1.0)*x4289*x4290))+((x4290*x4291))+((x4288*x4289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4292.valid){
continue;
}
CheckValue<IkReal> x4293=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4289*x4289)))+(((-1.0)*(x4291*x4291)))+(((-1.0)*(r22*r22)))+(((2.0)*x4289*x4291)))),-1);
if(!x4293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4292.value)+(((1.5707963267949)*(x4293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4294=IKsin(j4);
IkReal x4295=IKcos(j4);
IkReal x4296=(gconst98*r10);
IkReal x4297=(gconst97*r21);
IkReal x4298=(gconst98*r20);
IkReal x4299=((1.0)*cj2);
IkReal x4300=((1.0)*sj0);
IkReal x4301=(gconst98*r00);
IkReal x4302=(cj1*sj2);
IkReal x4303=((1.0)*x4295);
IkReal x4304=((1.0)*x4294);
IkReal x4305=(gconst97*x4294);
IkReal x4306=(gconst97*x4295);
evalcond[0]=((((-1.0)*r22*x4303))+(((-1.0)*x4298*x4304))+((x4294*x4297)));
evalcond[1]=((((-1.0)*r12*x4303))+(((-1.0)*x4296*x4304))+((r11*x4305))+cj0);
evalcond[2]=(((r01*x4305))+(((-1.0)*x4301*x4304))+(((-1.0)*r02*x4303))+(((-1.0)*x4300)));
evalcond[3]=(((sj1*sj2))+((x4295*x4297))+((r22*x4294))+(((-1.0)*x4298*x4303))+(((-1.0)*cj1*x4299)));
evalcond[4]=((((-1.0)*cj0*sj1*x4299))+(((-1.0)*cj0*x4302))+((r01*x4306))+(((-1.0)*x4301*x4303))+((r02*x4294)));
evalcond[5]=((((-1.0)*x4296*x4303))+((r11*x4306))+((r12*x4294))+(((-1.0)*x4300*x4302))+(((-1.0)*sj0*sj1*x4299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4307=((1.0)*gconst98);
CheckValue<IkReal> x4308 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4307)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4308.valid){
continue;
}
CheckValue<IkReal> x4309=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4307))+(((-1.0)*gconst97*r10)))),-1);
if(!x4309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4308.value)+(((1.5707963267949)*(x4309.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4310=IKsin(j4);
IkReal x4311=IKcos(j4);
IkReal x4312=(gconst98*r10);
IkReal x4313=(gconst97*r21);
IkReal x4314=(gconst98*r20);
IkReal x4315=((1.0)*cj2);
IkReal x4316=((1.0)*sj0);
IkReal x4317=(gconst98*r00);
IkReal x4318=(cj1*sj2);
IkReal x4319=((1.0)*x4311);
IkReal x4320=((1.0)*x4310);
IkReal x4321=(gconst97*x4310);
IkReal x4322=(gconst97*x4311);
evalcond[0]=(((x4310*x4313))+(((-1.0)*r22*x4319))+(((-1.0)*x4314*x4320)));
evalcond[1]=(cj0+(((-1.0)*x4312*x4320))+((r11*x4321))+(((-1.0)*r12*x4319)));
evalcond[2]=((((-1.0)*x4317*x4320))+(((-1.0)*x4316))+(((-1.0)*r02*x4319))+((r01*x4321)));
evalcond[3]=((((-1.0)*cj1*x4315))+((x4311*x4313))+((sj1*sj2))+(((-1.0)*x4314*x4319))+((r22*x4310)));
evalcond[4]=((((-1.0)*cj0*x4318))+(((-1.0)*x4317*x4319))+(((-1.0)*cj0*sj1*x4315))+((r02*x4310))+((r01*x4322)));
evalcond[5]=((((-1.0)*x4312*x4319))+((r12*x4310))+(((-1.0)*x4316*x4318))+(((-1.0)*sj0*sj1*x4315))+((r11*x4322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4323=((1.0)*gconst98);
CheckValue<IkReal> x4324=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4323))+(((-1.0)*gconst97*r00)))),-1);
if(!x4324.valid){
continue;
}
CheckValue<IkReal> x4325 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4323))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4324.value)))+(x4325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4326=IKsin(j4);
IkReal x4327=IKcos(j4);
IkReal x4328=(gconst98*r10);
IkReal x4329=(gconst97*r21);
IkReal x4330=(gconst98*r20);
IkReal x4331=((1.0)*cj2);
IkReal x4332=((1.0)*sj0);
IkReal x4333=(gconst98*r00);
IkReal x4334=(cj1*sj2);
IkReal x4335=((1.0)*x4327);
IkReal x4336=((1.0)*x4326);
IkReal x4337=(gconst97*x4326);
IkReal x4338=(gconst97*x4327);
evalcond[0]=((((-1.0)*x4330*x4336))+((x4326*x4329))+(((-1.0)*r22*x4335)));
evalcond[1]=(cj0+(((-1.0)*r12*x4335))+((r11*x4337))+(((-1.0)*x4328*x4336)));
evalcond[2]=(((r01*x4337))+(((-1.0)*x4333*x4336))+(((-1.0)*r02*x4335))+(((-1.0)*x4332)));
evalcond[3]=((((-1.0)*x4330*x4335))+((x4327*x4329))+((sj1*sj2))+(((-1.0)*cj1*x4331))+((r22*x4326)));
evalcond[4]=(((r01*x4338))+(((-1.0)*x4333*x4335))+(((-1.0)*cj0*sj1*x4331))+((r02*x4326))+(((-1.0)*cj0*x4334)));
evalcond[5]=((((-1.0)*x4332*x4334))+(((-1.0)*sj0*sj1*x4331))+((r12*x4326))+((r11*x4338))+(((-1.0)*x4328*x4335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4339=((-1.0)*r21);
IkReal x4341 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4341)==0){
continue;
}
IkReal x4340=pow(x4341,-0.5);
CheckValue<IkReal> x4342 = IKatan2WithCheck(IkReal(x4339),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4342.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4342.value))));
IkReal gconst100=(x4339*x4340);
IkReal gconst101=((1.0)*r20*x4340);
CheckValue<IkReal> x4343 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4343.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4343.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4344=((-1.0)*r21);
CheckValue<IkReal> x4347 = IKatan2WithCheck(IkReal(x4344),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4347.valid){
continue;
}
IkReal x4345=((1.0)*(x4347.value));
IkReal x4346=x4340;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4345)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4345)));
IkReal gconst100=(x4344*x4346);
IkReal gconst101=((1.0)*r20*x4346);
IkReal x4348=r22*r22;
IkReal x4349=((1.0)*x4348);
CheckValue<IkReal> x4353=IKPowWithIntegerCheck(((-1.0)+x4348),-1);
if(!x4353.valid){
continue;
}
IkReal x4350=x4353.value;
if((((1.0)+(((-1.0)*x4349)))) < -0.00001)
continue;
IkReal x4351=IKsqrt(((1.0)+(((-1.0)*x4349))));
IkReal x4352=(cj0*x4350*x4351);
j4eval[0]=((IKabs(((((-1.0)*x4349*x4352))+x4352)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4354=((-1.0)*r21);
CheckValue<IkReal> x4357 = IKatan2WithCheck(IkReal(x4354),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4357.valid){
continue;
}
IkReal x4355=((1.0)*(x4357.value));
IkReal x4356=x4340;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4355)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4355)));
IkReal gconst100=(x4354*x4356);
IkReal gconst101=((1.0)*r20*x4356);
IkReal x4358=r22*r22;
IkReal x4359=((1.0)*x4358);
CheckValue<IkReal> x4363=IKPowWithIntegerCheck(((-1.0)+x4358),-1);
if(!x4363.valid){
continue;
}
IkReal x4360=x4363.value;
if((((1.0)+(((-1.0)*x4359)))) < -0.00001)
continue;
IkReal x4361=IKsqrt(((1.0)+(((-1.0)*x4359))));
IkReal x4362=(sj0*x4360*x4361);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4359*x4362))+x4362))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4364=((-1.0)*r21);
CheckValue<IkReal> x4367 = IKatan2WithCheck(IkReal(x4364),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4367.valid){
continue;
}
IkReal x4365=((1.0)*(x4367.value));
IkReal x4366=x4340;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4365)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4365)));
IkReal gconst100=(x4364*x4366);
IkReal gconst101=((1.0)*r20*x4366);
IkReal x4368=r22*r22;
IkReal x4369=(r12*sj0);
IkReal x4370=(cj0*r02);
CheckValue<IkReal> x4374=IKPowWithIntegerCheck(((-1.0)+x4368),-1);
if(!x4374.valid){
continue;
}
IkReal x4371=x4374.value;
if((((1.0)+(((-1.0)*x4368)))) < -0.00001)
continue;
IkReal x4372=IKsqrt(((1.0)+(((-1.0)*x4368))));
IkReal x4373=(r22*x4371*x4372);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4370))+(((-1.0)*x4369)))))+(IKabs((((x4370*x4373))+((x4369*x4373))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4375=((1.0)*sj0);
IkReal x4376=((1.0)*gconst100);
CheckValue<IkReal> x4377=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4376))+(((-1.0)*gconst101*r21)))),-1);
if(!x4377.valid){
continue;
}
CheckValue<IkReal> x4378 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4375)))),IkReal((((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x4376))+(((-1.0)*gconst100*r11*x4375)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4377.value)))+(x4378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4379=IKsin(j4);
IkReal x4380=IKcos(j4);
IkReal x4381=(gconst101*r20);
IkReal x4382=(gconst101*r10);
IkReal x4383=((1.0)*cj2);
IkReal x4384=(gconst101*r00);
IkReal x4385=((1.0)*sj0);
IkReal x4386=(cj1*sj2);
IkReal x4387=((1.0)*x4380);
IkReal x4388=((1.0)*x4379);
IkReal x4389=(gconst100*x4379);
IkReal x4390=(gconst100*x4380);
evalcond[0]=((((-1.0)*x4381*x4388))+(((-1.0)*r22*x4387))+((r21*x4389)));
evalcond[1]=((((-1.0)*r12*x4387))+cj0+(((-1.0)*x4382*x4388))+((r11*x4389)));
evalcond[2]=((((-1.0)*r02*x4387))+(((-1.0)*x4384*x4388))+(((-1.0)*x4385))+((r01*x4389)));
evalcond[3]=(((r22*x4379))+(((-1.0)*x4381*x4387))+((sj1*sj2))+((r21*x4390))+(((-1.0)*cj1*x4383)));
evalcond[4]=(((r01*x4390))+((r02*x4379))+(((-1.0)*cj0*sj1*x4383))+(((-1.0)*x4384*x4387))+(((-1.0)*cj0*x4386)));
evalcond[5]=(((r12*x4379))+(((-1.0)*x4382*x4387))+((r11*x4390))+(((-1.0)*x4385*x4386))+(((-1.0)*sj0*sj1*x4383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4391=((1.0)*gconst101);
CheckValue<IkReal> x4392=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4391))+(((-1.0)*gconst100*r10)))),-1);
if(!x4392.valid){
continue;
}
CheckValue<IkReal> x4393 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4391))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4392.value)))+(x4393.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4394=IKsin(j4);
IkReal x4395=IKcos(j4);
IkReal x4396=(gconst101*r20);
IkReal x4397=(gconst101*r10);
IkReal x4398=((1.0)*cj2);
IkReal x4399=(gconst101*r00);
IkReal x4400=((1.0)*sj0);
IkReal x4401=(cj1*sj2);
IkReal x4402=((1.0)*x4395);
IkReal x4403=((1.0)*x4394);
IkReal x4404=(gconst100*x4394);
IkReal x4405=(gconst100*x4395);
evalcond[0]=(((r21*x4404))+(((-1.0)*x4396*x4403))+(((-1.0)*r22*x4402)));
evalcond[1]=(((r11*x4404))+cj0+(((-1.0)*r12*x4402))+(((-1.0)*x4397*x4403)));
evalcond[2]=(((r01*x4404))+(((-1.0)*r02*x4402))+(((-1.0)*x4399*x4403))+(((-1.0)*x4400)));
evalcond[3]=(((r21*x4405))+((r22*x4394))+(((-1.0)*x4396*x4402))+((sj1*sj2))+(((-1.0)*cj1*x4398)));
evalcond[4]=((((-1.0)*cj0*sj1*x4398))+(((-1.0)*cj0*x4401))+((r02*x4394))+((r01*x4405))+(((-1.0)*x4399*x4402)));
evalcond[5]=((((-1.0)*sj0*sj1*x4398))+((r11*x4405))+(((-1.0)*x4400*x4401))+(((-1.0)*x4397*x4402))+((r12*x4394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4406=((1.0)*gconst101);
CheckValue<IkReal> x4407=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4406)))),-1);
if(!x4407.valid){
continue;
}
CheckValue<IkReal> x4408 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4406))+((cj0*gconst100*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4407.value)))+(x4408.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4409=IKsin(j4);
IkReal x4410=IKcos(j4);
IkReal x4411=(gconst101*r20);
IkReal x4412=(gconst101*r10);
IkReal x4413=((1.0)*cj2);
IkReal x4414=(gconst101*r00);
IkReal x4415=((1.0)*sj0);
IkReal x4416=(cj1*sj2);
IkReal x4417=((1.0)*x4410);
IkReal x4418=((1.0)*x4409);
IkReal x4419=(gconst100*x4409);
IkReal x4420=(gconst100*x4410);
evalcond[0]=(((r21*x4419))+(((-1.0)*x4411*x4418))+(((-1.0)*r22*x4417)));
evalcond[1]=(((r11*x4419))+cj0+(((-1.0)*r12*x4417))+(((-1.0)*x4412*x4418)));
evalcond[2]=(((r01*x4419))+(((-1.0)*r02*x4417))+(((-1.0)*x4415))+(((-1.0)*x4414*x4418)));
evalcond[3]=(((r22*x4409))+((sj1*sj2))+(((-1.0)*x4411*x4417))+((r21*x4420))+(((-1.0)*cj1*x4413)));
evalcond[4]=((((-1.0)*cj0*sj1*x4413))+(((-1.0)*cj0*x4416))+(((-1.0)*x4414*x4417))+((r01*x4420))+((r02*x4409)));
evalcond[5]=(((r12*x4409))+(((-1.0)*x4412*x4417))+(((-1.0)*x4415*x4416))+(((-1.0)*sj0*sj1*x4413))+((r11*x4420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4421=((-1.0)*r10);
IkReal x4423 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4423)==0){
continue;
}
IkReal x4422=pow(x4423,-0.5);
CheckValue<IkReal> x4424 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4421),IKFAST_ATAN2_MAGTHRESH);
if(!x4424.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4424.value));
IkReal gconst103=(r11*x4422);
IkReal gconst104=(x4421*x4422);
CheckValue<IkReal> x4425 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4425.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4425.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4426=((-1.0)*r10);
IkReal x4427=x4422;
CheckValue<IkReal> x4429 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4426),IKFAST_ATAN2_MAGTHRESH);
if(!x4429.valid){
continue;
}
IkReal x4428=((-1.0)*(x4429.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4428;
IkReal gconst102=x4428;
IkReal gconst103=(r11*x4427);
IkReal gconst104=(x4426*x4427);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4430=((1.0)*sj0);
IkReal x4431=((1.0)*gconst103);
CheckValue<IkReal> x4432 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4430)))),IkReal(((((-1.0)*gconst103*r11*x4430))+(((-1.0)*cj0*r01*x4431))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4432.valid){
continue;
}
CheckValue<IkReal> x4433=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4431)))),-1);
if(!x4433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4432.value)+(((1.5707963267949)*(x4433.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4434=IKsin(j4);
IkReal x4435=IKcos(j4);
IkReal x4436=(gconst103*r11);
IkReal x4437=((1.0)*cj2);
IkReal x4438=((1.0)*sj0);
IkReal x4439=(cj1*sj2);
IkReal x4440=((1.0)*x4435);
IkReal x4441=(gconst103*x4435);
IkReal x4442=(gconst103*x4434);
IkReal x4443=((1.0)*gconst104*x4434);
evalcond[0]=(((r21*x4442))+(((-1.0)*r22*x4440))+(((-1.0)*r20*x4443)));
evalcond[1]=(cj0+(((-1.0)*r12*x4440))+((x4434*x4436))+(((-1.0)*r10*x4443)));
evalcond[2]=(((r01*x4442))+(((-1.0)*x4438))+(((-1.0)*r02*x4440))+(((-1.0)*r00*x4443)));
evalcond[3]=(((r22*x4434))+((r21*x4441))+((sj1*sj2))+(((-1.0)*cj1*x4437))+(((-1.0)*gconst104*r20*x4440)));
evalcond[4]=((((-1.0)*gconst104*r00*x4440))+((r01*x4441))+(((-1.0)*cj0*x4439))+(((-1.0)*cj0*sj1*x4437))+((r02*x4434)));
evalcond[5]=(((x4435*x4436))+((r12*x4434))+(((-1.0)*x4438*x4439))+(((-1.0)*gconst104*r10*x4440))+(((-1.0)*sj0*sj1*x4437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4444=((1.0)*gconst104);
CheckValue<IkReal> x4445=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x4444)))),-1);
if(!x4445.valid){
continue;
}
CheckValue<IkReal> x4446 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4444))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4445.value)))+(x4446.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4447=IKsin(j4);
IkReal x4448=IKcos(j4);
IkReal x4449=(gconst103*r11);
IkReal x4450=((1.0)*cj2);
IkReal x4451=((1.0)*sj0);
IkReal x4452=(cj1*sj2);
IkReal x4453=((1.0)*x4448);
IkReal x4454=(gconst103*x4448);
IkReal x4455=(gconst103*x4447);
IkReal x4456=((1.0)*gconst104*x4447);
evalcond[0]=(((r21*x4455))+(((-1.0)*r22*x4453))+(((-1.0)*r20*x4456)));
evalcond[1]=(cj0+(((-1.0)*r12*x4453))+(((-1.0)*r10*x4456))+((x4447*x4449)));
evalcond[2]=((((-1.0)*x4451))+((r01*x4455))+(((-1.0)*r02*x4453))+(((-1.0)*r00*x4456)));
evalcond[3]=((((-1.0)*gconst104*r20*x4453))+((r21*x4454))+((sj1*sj2))+(((-1.0)*cj1*x4450))+((r22*x4447)));
evalcond[4]=((((-1.0)*gconst104*r00*x4453))+((r01*x4454))+(((-1.0)*cj0*sj1*x4450))+(((-1.0)*cj0*x4452))+((r02*x4447)));
evalcond[5]=((((-1.0)*gconst104*r10*x4453))+((r12*x4447))+(((-1.0)*sj0*sj1*x4450))+((x4448*x4449))+(((-1.0)*x4451*x4452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4457=((-1.0)*r11);
IkReal x4459 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4459)==0){
continue;
}
IkReal x4458=pow(x4459,-0.5);
CheckValue<IkReal> x4460 = IKatan2WithCheck(IkReal(x4457),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4460.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4460.value))));
IkReal gconst106=(x4457*x4458);
IkReal gconst107=((1.0)*r10*x4458);
CheckValue<IkReal> x4461 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4461.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4461.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4462=((-1.0)*r11);
CheckValue<IkReal> x4465 = IKatan2WithCheck(IkReal(x4462),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4465.valid){
continue;
}
IkReal x4463=((1.0)*(x4465.value));
IkReal x4464=x4458;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4463)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4463)));
IkReal gconst106=(x4462*x4464);
IkReal gconst107=((1.0)*r10*x4464);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4466=((-1.0)*r11);
CheckValue<IkReal> x4469 = IKatan2WithCheck(IkReal(x4466),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4469.valid){
continue;
}
IkReal x4467=((1.0)*(x4469.value));
IkReal x4468=x4458;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4467)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4467)));
IkReal gconst106=(x4466*x4468);
IkReal gconst107=((1.0)*r10*x4468);
IkReal x4470=r12*r12;
IkReal x4471=((1.0)*sj0);
IkReal x4472=(cj0*r02);
IkReal x4473=x4458;
j4eval[0]=((IKabs(((((-1.0)*r12*x4471))+(((-1.0)*x4472)))))+(IKabs((((sj0*x4470*x4473))+((r12*x4472*x4473))+(((-1.0)*x4471*x4473))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4474=((-1.0)*r11);
CheckValue<IkReal> x4477 = IKatan2WithCheck(IkReal(x4474),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4477.valid){
continue;
}
IkReal x4475=((1.0)*(x4477.value));
IkReal x4476=x4458;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4475)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4475)));
IkReal gconst106=(x4474*x4476);
IkReal gconst107=((1.0)*r10*x4476);
IkReal x4478=r12*r12;
IkReal x4479=((1.0)+(((-1.0)*x4478)));
IkReal x4480=(r22*sj1*sj2);
IkReal x4481=(cj1*cj2*r22);
CheckValue<IkReal> x4488=IKPowWithIntegerCheck(x4479,-1);
if(!x4488.valid){
continue;
}
IkReal x4482=x4488.value;
CheckValue<IkReal> x4489=IKPowWithIntegerCheck(((-1.0)+x4478),-1);
if(!x4489.valid){
continue;
}
IkReal x4483=x4489.value;
IkReal x4484=((1.0)*x4482);
if((x4479) < -0.00001)
continue;
IkReal x4485=IKsqrt(x4479);
IkReal x4486=(r12*x4483*x4485);
IkReal x4487=((((-1.0)*x4484*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x4482))+(((-1.0)*(r22*r22)))+(((-1.0)*x4484*(r11*r11)*(r21*r21))));
j4eval[0]=x4487;
j4eval[1]=((IKabs(((((-1.0)*x4480*x4486))+((x4481*x4486)))))+(IKabs(((((-1.0)*x4481))+x4480))));
j4eval[2]=IKsign(x4487);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4490=(sj1*sj2);
IkReal x4491=(gconst106*r21);
IkReal x4492=(gconst107*r20);
IkReal x4493=(cj1*cj2);
CheckValue<IkReal> x4494 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4493))+((r22*x4490)))),IkReal((((x4490*x4491))+((x4492*x4493))+(((-1.0)*x4491*x4493))+(((-1.0)*x4490*x4492)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4494.valid){
continue;
}
CheckValue<IkReal> x4495=IKPowWithIntegerCheck(IKsign(((((2.0)*x4491*x4492))+(((-1.0)*(x4491*x4491)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4492*x4492))))),-1);
if(!x4495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4494.value)+(((1.5707963267949)*(x4495.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4496=IKsin(j4);
IkReal x4497=IKcos(j4);
IkReal x4498=(gconst107*r10);
IkReal x4499=(gconst107*r00);
IkReal x4500=((1.0)*cj2);
IkReal x4501=(gconst107*r20);
IkReal x4502=((1.0)*sj0);
IkReal x4503=(cj1*sj2);
IkReal x4504=((1.0)*x4497);
IkReal x4505=(gconst106*x4497);
IkReal x4506=(gconst106*x4496);
IkReal x4507=((1.0)*x4496);
evalcond[0]=(((r21*x4506))+(((-1.0)*x4501*x4507))+(((-1.0)*r22*x4504)));
evalcond[1]=(cj0+((r11*x4506))+(((-1.0)*x4498*x4507))+(((-1.0)*r12*x4504)));
evalcond[2]=((((-1.0)*x4502))+(((-1.0)*r02*x4504))+((r01*x4506))+(((-1.0)*x4499*x4507)));
evalcond[3]=((((-1.0)*cj1*x4500))+((r21*x4505))+((sj1*sj2))+((r22*x4496))+(((-1.0)*x4501*x4504)));
evalcond[4]=(((r02*x4496))+(((-1.0)*cj0*x4503))+((r01*x4505))+(((-1.0)*cj0*sj1*x4500))+(((-1.0)*x4499*x4504)));
evalcond[5]=(((r12*x4496))+((r11*x4505))+(((-1.0)*x4498*x4504))+(((-1.0)*sj0*sj1*x4500))+(((-1.0)*x4502*x4503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4508=((1.0)*sj0);
IkReal x4509=((1.0)*gconst106);
CheckValue<IkReal> x4510=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4509)))),-1);
if(!x4510.valid){
continue;
}
CheckValue<IkReal> x4511 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4508)))),IkReal(((((-1.0)*gconst106*r11*x4508))+(((-1.0)*cj0*r01*x4509))+((gconst107*r10*sj0))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4510.value)))+(x4511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4512=IKsin(j4);
IkReal x4513=IKcos(j4);
IkReal x4514=(gconst107*r10);
IkReal x4515=(gconst107*r00);
IkReal x4516=((1.0)*cj2);
IkReal x4517=(gconst107*r20);
IkReal x4518=((1.0)*sj0);
IkReal x4519=(cj1*sj2);
IkReal x4520=((1.0)*x4513);
IkReal x4521=(gconst106*x4513);
IkReal x4522=(gconst106*x4512);
IkReal x4523=((1.0)*x4512);
evalcond[0]=(((r21*x4522))+(((-1.0)*r22*x4520))+(((-1.0)*x4517*x4523)));
evalcond[1]=((((-1.0)*r12*x4520))+((r11*x4522))+cj0+(((-1.0)*x4514*x4523)));
evalcond[2]=(((r01*x4522))+(((-1.0)*x4518))+(((-1.0)*r02*x4520))+(((-1.0)*x4515*x4523)));
evalcond[3]=((((-1.0)*cj1*x4516))+((r21*x4521))+((sj1*sj2))+(((-1.0)*x4517*x4520))+((r22*x4512)));
evalcond[4]=(((r02*x4512))+((r01*x4521))+(((-1.0)*cj0*x4519))+(((-1.0)*cj0*sj1*x4516))+(((-1.0)*x4515*x4520)));
evalcond[5]=(((r11*x4521))+(((-1.0)*x4518*x4519))+(((-1.0)*sj0*sj1*x4516))+(((-1.0)*x4514*x4520))+((r12*x4512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4524=((1.0)*gconst107);
CheckValue<IkReal> x4525 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4524))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4525.valid){
continue;
}
CheckValue<IkReal> x4526=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4524)))),-1);
if(!x4526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4525.value)+(((1.5707963267949)*(x4526.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4527=IKsin(j4);
IkReal x4528=IKcos(j4);
IkReal x4529=(gconst107*r10);
IkReal x4530=(gconst107*r00);
IkReal x4531=((1.0)*cj2);
IkReal x4532=(gconst107*r20);
IkReal x4533=((1.0)*sj0);
IkReal x4534=(cj1*sj2);
IkReal x4535=((1.0)*x4528);
IkReal x4536=(gconst106*x4528);
IkReal x4537=(gconst106*x4527);
IkReal x4538=((1.0)*x4527);
evalcond[0]=(((r21*x4537))+(((-1.0)*r22*x4535))+(((-1.0)*x4532*x4538)));
evalcond[1]=(cj0+(((-1.0)*x4529*x4538))+(((-1.0)*r12*x4535))+((r11*x4537)));
evalcond[2]=((((-1.0)*x4530*x4538))+((r01*x4537))+(((-1.0)*x4533))+(((-1.0)*r02*x4535)));
evalcond[3]=(((r21*x4536))+(((-1.0)*cj1*x4531))+((sj1*sj2))+((r22*x4527))+(((-1.0)*x4532*x4535)));
evalcond[4]=((((-1.0)*x4530*x4535))+((r01*x4536))+((r02*x4527))+(((-1.0)*cj0*x4534))+(((-1.0)*cj0*sj1*x4531)));
evalcond[5]=(((r12*x4527))+(((-1.0)*x4533*x4534))+(((-1.0)*x4529*x4535))+((r11*x4536))+(((-1.0)*sj0*sj1*x4531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4539=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4539;
j4eval[1]=IKsign(x4539);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4540=((1.0)*cj5);
IkReal x4541=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4540)));
j4eval[0]=x4541;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4540)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4541);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4542=(sj1*sj2);
IkReal x4543=(cj5*r10);
IkReal x4544=(r11*sj5);
IkReal x4545=(cj1*cj2);
IkReal x4546=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4546;
j4eval[1]=((IKabs((((r12*x4545))+(((-1.0)*r12*x4542)))))+(IKabs(((((-1.0)*x4542*x4543))+((x4542*x4544))+((x4543*x4545))+(((-1.0)*x4544*x4545))))));
j4eval[2]=IKsign(x4546);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4547=(sj1*sj2);
IkReal x4548=(cj5*r10);
IkReal x4549=(r11*sj5);
IkReal x4550=(cj1*cj2);
CheckValue<IkReal> x4551=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4551.valid){
continue;
}
CheckValue<IkReal> x4552 = IKatan2WithCheck(IkReal((((x4547*x4549))+(((-1.0)*x4547*x4548))+(((-1.0)*x4549*x4550))+((x4548*x4550)))),IkReal((((r12*x4550))+(((-1.0)*r12*x4547)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4551.value)))+(x4552.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4553=IKcos(j4);
IkReal x4554=IKsin(j4);
IkReal x4555=(cj5*r00);
IkReal x4556=(cj5*r10);
IkReal x4557=(r21*sj5);
IkReal x4558=((1.0)*cj2);
IkReal x4559=(cj5*r20);
IkReal x4560=((1.0)*x4553);
IkReal x4561=((1.0)*x4554);
IkReal x4562=(sj5*x4554);
IkReal x4563=(sj5*x4553);
evalcond[0]=((((-1.0)*x4556*x4560))+((r11*x4563))+((r12*x4554)));
evalcond[1]=((((-1.0)*r22*x4560))+(((-1.0)*x4559*x4561))+((x4554*x4557)));
evalcond[2]=((((-1.0)*x4555*x4561))+(((-1.0)*r02*x4560))+((r01*x4562)));
evalcond[3]=((1.0)+(((-1.0)*x4556*x4561))+((r11*x4562))+(((-1.0)*r12*x4560)));
evalcond[4]=(((x4553*x4557))+(((-1.0)*cj1*x4558))+((sj1*sj2))+((r22*x4554))+(((-1.0)*x4559*x4560)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x4555*x4560))+((r02*x4554))+((r01*x4563))+(((-1.0)*sj1*x4558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4564=((1.0)*cj5);
CheckValue<IkReal> x4565=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4564))+(((-1.0)*r00*sj5)))),-1);
if(!x4565.valid){
continue;
}
CheckValue<IkReal> x4566 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4564))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4565.value)))+(x4566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4567=IKcos(j4);
IkReal x4568=IKsin(j4);
IkReal x4569=(cj5*r00);
IkReal x4570=(cj5*r10);
IkReal x4571=(r21*sj5);
IkReal x4572=((1.0)*cj2);
IkReal x4573=(cj5*r20);
IkReal x4574=((1.0)*x4567);
IkReal x4575=((1.0)*x4568);
IkReal x4576=(sj5*x4568);
IkReal x4577=(sj5*x4567);
evalcond[0]=((((-1.0)*x4570*x4574))+((r12*x4568))+((r11*x4577)));
evalcond[1]=(((x4568*x4571))+(((-1.0)*r22*x4574))+(((-1.0)*x4573*x4575)));
evalcond[2]=((((-1.0)*x4569*x4575))+(((-1.0)*r02*x4574))+((r01*x4576)));
evalcond[3]=((1.0)+(((-1.0)*x4570*x4575))+((r11*x4576))+(((-1.0)*r12*x4574)));
evalcond[4]=(((x4567*x4571))+(((-1.0)*cj1*x4572))+((r22*x4568))+((sj1*sj2))+(((-1.0)*x4573*x4574)));
evalcond[5]=((((-1.0)*x4569*x4574))+(((-1.0)*sj1*x4572))+((r02*x4568))+(((-1.0)*cj1*sj2))+((r01*x4577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4578=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4578.valid){
continue;
}
CheckValue<IkReal> x4579 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4578.value)))+(x4579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4580=IKcos(j4);
IkReal x4581=IKsin(j4);
IkReal x4582=(cj5*r00);
IkReal x4583=(cj5*r10);
IkReal x4584=(r21*sj5);
IkReal x4585=((1.0)*cj2);
IkReal x4586=(cj5*r20);
IkReal x4587=((1.0)*x4580);
IkReal x4588=((1.0)*x4581);
IkReal x4589=(sj5*x4581);
IkReal x4590=(sj5*x4580);
evalcond[0]=((((-1.0)*x4583*x4587))+((r11*x4590))+((r12*x4581)));
evalcond[1]=((((-1.0)*r22*x4587))+((x4581*x4584))+(((-1.0)*x4586*x4588)));
evalcond[2]=((((-1.0)*r02*x4587))+((r01*x4589))+(((-1.0)*x4582*x4588)));
evalcond[3]=((1.0)+(((-1.0)*x4583*x4588))+((r11*x4589))+(((-1.0)*r12*x4587)));
evalcond[4]=(((r22*x4581))+((sj1*sj2))+(((-1.0)*x4586*x4587))+((x4580*x4584))+(((-1.0)*cj1*x4585)));
evalcond[5]=(((r02*x4581))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4585))+(((-1.0)*x4582*x4587))+((r01*x4590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4591=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4591;
j4eval[1]=IKsign(x4591);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4592=((1.0)*cj5);
IkReal x4593=((((-1.0)*r21*x4592))+(((-1.0)*r20*sj5)));
j4eval[0]=x4593;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4592))))));
j4eval[2]=IKsign(x4593);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4594=cj5*cj5;
IkReal x4595=r11*r11;
IkReal x4596=(r11*sj5);
IkReal x4597=(cj5*r10);
IkReal x4598=((((-1.0)*x4594*x4595))+(r12*r12)+x4595+(((-2.0)*x4596*x4597))+((x4594*(r10*r10))));
j4eval[0]=x4598;
j4eval[1]=IKsign(x4598);
j4eval[2]=((IKabs(r12))+(IKabs((x4596+(((-1.0)*x4597))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4599=cj5*cj5;
IkReal x4600=r11*r11;
IkReal x4601=(cj5*r10);
IkReal x4602=(r11*sj5);
CheckValue<IkReal> x4603 = IKatan2WithCheck(IkReal(((((-1.0)*x4601))+x4602)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4603.valid){
continue;
}
CheckValue<IkReal> x4604=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4599*x4600))+(r12*r12)+((x4599*(r10*r10)))+x4600+(((-2.0)*x4601*x4602)))),-1);
if(!x4604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4603.value)+(((1.5707963267949)*(x4604.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4605=IKcos(j4);
IkReal x4606=IKsin(j4);
IkReal x4607=(cj5*r00);
IkReal x4608=(cj5*r10);
IkReal x4609=(r21*sj5);
IkReal x4610=(cj5*r20);
IkReal x4611=((1.0)*x4605);
IkReal x4612=((1.0)*x4606);
IkReal x4613=(sj5*x4606);
IkReal x4614=(sj5*x4605);
evalcond[0]=(((r12*x4606))+((r11*x4614))+(((-1.0)*x4608*x4611)));
evalcond[1]=(((x4606*x4609))+(((-1.0)*r22*x4611))+(((-1.0)*x4610*x4612)));
evalcond[2]=((((-1.0)*r02*x4611))+(((-1.0)*x4607*x4612))+((r01*x4613)));
evalcond[3]=((-1.0)+((r11*x4613))+(((-1.0)*r12*x4611))+(((-1.0)*x4608*x4612)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4607*x4611))+((r01*x4614))+((r02*x4606)));
evalcond[5]=(((x4605*x4609))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4606))+(((-1.0)*x4610*x4611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4615=((1.0)*cj5);
CheckValue<IkReal> x4616=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4615))+(((-1.0)*r20*sj5)))),-1);
if(!x4616.valid){
continue;
}
CheckValue<IkReal> x4617 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4615)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4616.value)))+(x4617.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4618=IKcos(j4);
IkReal x4619=IKsin(j4);
IkReal x4620=(cj5*r00);
IkReal x4621=(cj5*r10);
IkReal x4622=(r21*sj5);
IkReal x4623=(cj5*r20);
IkReal x4624=((1.0)*x4618);
IkReal x4625=((1.0)*x4619);
IkReal x4626=(sj5*x4619);
IkReal x4627=(sj5*x4618);
evalcond[0]=(((r11*x4627))+(((-1.0)*x4621*x4624))+((r12*x4619)));
evalcond[1]=((((-1.0)*r22*x4624))+((x4619*x4622))+(((-1.0)*x4623*x4625)));
evalcond[2]=((((-1.0)*r02*x4624))+(((-1.0)*x4620*x4625))+((r01*x4626)));
evalcond[3]=((-1.0)+((r11*x4626))+(((-1.0)*x4621*x4625))+(((-1.0)*r12*x4624)));
evalcond[4]=(((cj2*sj1))+((r02*x4619))+((cj1*sj2))+(((-1.0)*x4620*x4624))+((r01*x4627)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4619))+((x4618*x4622))+(((-1.0)*x4623*x4624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4628 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4628.valid){
continue;
}
CheckValue<IkReal> x4629=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4628.value)+(((1.5707963267949)*(x4629.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4630=IKcos(j4);
IkReal x4631=IKsin(j4);
IkReal x4632=(cj5*r00);
IkReal x4633=(cj5*r10);
IkReal x4634=(r21*sj5);
IkReal x4635=(cj5*r20);
IkReal x4636=((1.0)*x4630);
IkReal x4637=((1.0)*x4631);
IkReal x4638=(sj5*x4631);
IkReal x4639=(sj5*x4630);
evalcond[0]=(((r12*x4631))+((r11*x4639))+(((-1.0)*x4633*x4636)));
evalcond[1]=(((x4631*x4634))+(((-1.0)*x4635*x4637))+(((-1.0)*r22*x4636)));
evalcond[2]=(((r01*x4638))+(((-1.0)*r02*x4636))+(((-1.0)*x4632*x4637)));
evalcond[3]=((-1.0)+((r11*x4638))+(((-1.0)*r12*x4636))+(((-1.0)*x4633*x4637)));
evalcond[4]=(((cj2*sj1))+((r01*x4639))+((cj1*sj2))+((r02*x4631))+(((-1.0)*x4632*x4636)));
evalcond[5]=(((x4630*x4634))+(((-1.0)*x4635*x4636))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4640=((-1.0)*r00);
IkReal x4642 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4642)==0){
continue;
}
IkReal x4641=pow(x4642,-0.5);
CheckValue<IkReal> x4643 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4640),IKFAST_ATAN2_MAGTHRESH);
if(!x4643.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4643.value));
IkReal gconst109=(r01*x4641);
IkReal gconst110=(x4640*x4641);
CheckValue<IkReal> x4644 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4644.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4644.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4645=((-1.0)*r00);
IkReal x4646=x4641;
CheckValue<IkReal> x4648 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4645),IKFAST_ATAN2_MAGTHRESH);
if(!x4648.valid){
continue;
}
IkReal x4647=((-1.0)*(x4648.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4647;
IkReal gconst108=x4647;
IkReal gconst109=(r01*x4646);
IkReal gconst110=(x4645*x4646);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4649=((1.0)*sj0);
IkReal x4650=((1.0)*gconst109);
CheckValue<IkReal> x4651 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4649))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4650))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x4649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4651.valid){
continue;
}
CheckValue<IkReal> x4652=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4650))+(((-1.0)*gconst110*r21)))),-1);
if(!x4652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4651.value)+(((1.5707963267949)*(x4652.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4653=IKsin(j4);
IkReal x4654=IKcos(j4);
IkReal x4655=(gconst109*r21);
IkReal x4656=((1.0)*cj2);
IkReal x4657=((1.0)*sj0);
IkReal x4658=(cj1*sj2);
IkReal x4659=((1.0)*x4654);
IkReal x4660=(gconst109*x4653);
IkReal x4661=(gconst109*x4654);
IkReal x4662=((1.0)*gconst110*x4653);
evalcond[0]=(((x4653*x4655))+(((-1.0)*r20*x4662))+(((-1.0)*r22*x4659)));
evalcond[1]=(cj0+(((-1.0)*r10*x4662))+((r11*x4660))+(((-1.0)*r12*x4659)));
evalcond[2]=((((-1.0)*x4657))+(((-1.0)*r02*x4659))+((r01*x4660))+(((-1.0)*r00*x4662)));
evalcond[3]=((((-1.0)*cj1*x4656))+((sj1*sj2))+((x4654*x4655))+((r22*x4653))+(((-1.0)*gconst110*r20*x4659)));
evalcond[4]=((((-1.0)*gconst110*r00*x4659))+(((-1.0)*cj0*x4658))+((r01*x4661))+((r02*x4653))+(((-1.0)*cj0*sj1*x4656)));
evalcond[5]=(((r12*x4653))+(((-1.0)*x4657*x4658))+((r11*x4661))+(((-1.0)*gconst110*r10*x4659))+(((-1.0)*sj0*sj1*x4656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4663=((1.0)*gconst110);
CheckValue<IkReal> x4664 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4663))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4664.valid){
continue;
}
CheckValue<IkReal> x4665=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4663))+(((-1.0)*gconst109*r10)))),-1);
if(!x4665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4664.value)+(((1.5707963267949)*(x4665.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4666=IKsin(j4);
IkReal x4667=IKcos(j4);
IkReal x4668=(gconst109*r21);
IkReal x4669=((1.0)*cj2);
IkReal x4670=((1.0)*sj0);
IkReal x4671=(cj1*sj2);
IkReal x4672=((1.0)*x4667);
IkReal x4673=(gconst109*x4666);
IkReal x4674=(gconst109*x4667);
IkReal x4675=((1.0)*gconst110*x4666);
evalcond[0]=((((-1.0)*r20*x4675))+(((-1.0)*r22*x4672))+((x4666*x4668)));
evalcond[1]=(cj0+((r11*x4673))+(((-1.0)*r12*x4672))+(((-1.0)*r10*x4675)));
evalcond[2]=((((-1.0)*r02*x4672))+(((-1.0)*x4670))+((r01*x4673))+(((-1.0)*r00*x4675)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*gconst110*r20*x4672))+((r22*x4666))+(((-1.0)*cj1*x4669))+((x4667*x4668)));
evalcond[4]=((((-1.0)*cj0*x4671))+((r02*x4666))+(((-1.0)*cj0*sj1*x4669))+((r01*x4674))+(((-1.0)*gconst110*r00*x4672)));
evalcond[5]=((((-1.0)*gconst110*r10*x4672))+((r12*x4666))+((r11*x4674))+(((-1.0)*sj0*sj1*x4669))+(((-1.0)*x4670*x4671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4676=((-1.0)*r01);
IkReal x4678 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4678)==0){
continue;
}
IkReal x4677=pow(x4678,-0.5);
CheckValue<IkReal> x4679 = IKatan2WithCheck(IkReal(x4676),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4679.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4679.value))));
IkReal gconst112=(x4676*x4677);
IkReal gconst113=((1.0)*r00*x4677);
CheckValue<IkReal> x4680 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4680.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4680.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4681=((-1.0)*r01);
CheckValue<IkReal> x4684 = IKatan2WithCheck(IkReal(x4681),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4684.valid){
continue;
}
IkReal x4682=((1.0)*(x4684.value));
IkReal x4683=x4677;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4682)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4682)));
IkReal gconst112=(x4681*x4683);
IkReal gconst113=((1.0)*r00*x4683);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4685=((-1.0)*r01);
CheckValue<IkReal> x4688 = IKatan2WithCheck(IkReal(x4685),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4688.valid){
continue;
}
IkReal x4686=((1.0)*(x4688.value));
IkReal x4687=x4677;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4686)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4686)));
IkReal gconst112=(x4685*x4687);
IkReal gconst113=((1.0)*r00*x4687);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4689=((-1.0)*r01);
CheckValue<IkReal> x4692 = IKatan2WithCheck(IkReal(x4689),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4692.valid){
continue;
}
IkReal x4690=((1.0)*(x4692.value));
IkReal x4691=x4677;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4690)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4690)));
IkReal gconst112=(x4689*x4691);
IkReal gconst113=((1.0)*r00*x4691);
IkReal x4693=r02*r02;
IkReal x4694=(r12*sj0);
IkReal x4695=((1.0)*cj0);
IkReal x4696=x4677;
j4eval[0]=((IKabs(((((-1.0)*r02*x4695))+(((-1.0)*x4694)))))+(IKabs((((cj0*x4693*x4696))+((r02*x4694*x4696))+(((-1.0)*x4695*x4696))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4697=((1.0)*sj0);
IkReal x4698=((1.0)*gconst112);
CheckValue<IkReal> x4699 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4697))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4698))+(((-1.0)*gconst112*r11*x4697)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4699.valid){
continue;
}
CheckValue<IkReal> x4700=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4698))+(((-1.0)*gconst113*r21)))),-1);
if(!x4700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4699.value)+(((1.5707963267949)*(x4700.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4701=IKsin(j4);
IkReal x4702=IKcos(j4);
IkReal x4703=(gconst113*r20);
IkReal x4704=(gconst112*r21);
IkReal x4705=((1.0)*cj2);
IkReal x4706=(gconst113*r00);
IkReal x4707=(gconst113*r10);
IkReal x4708=((1.0)*sj0);
IkReal x4709=(cj1*sj2);
IkReal x4710=((1.0)*x4702);
IkReal x4711=((1.0)*x4701);
IkReal x4712=(gconst112*x4702);
IkReal x4713=(gconst112*x4701);
evalcond[0]=((((-1.0)*r22*x4710))+(((-1.0)*x4703*x4711))+((x4701*x4704)));
evalcond[1]=(cj0+(((-1.0)*r12*x4710))+(((-1.0)*x4707*x4711))+((r11*x4713)));
evalcond[2]=((((-1.0)*r02*x4710))+((r01*x4713))+(((-1.0)*x4708))+(((-1.0)*x4706*x4711)));
evalcond[3]=((((-1.0)*x4703*x4710))+((sj1*sj2))+(((-1.0)*cj1*x4705))+((x4702*x4704))+((r22*x4701)));
evalcond[4]=((((-1.0)*cj0*sj1*x4705))+((r01*x4712))+(((-1.0)*cj0*x4709))+((r02*x4701))+(((-1.0)*x4706*x4710)));
evalcond[5]=((((-1.0)*sj0*sj1*x4705))+(((-1.0)*x4708*x4709))+(((-1.0)*x4707*x4710))+((r11*x4712))+((r12*x4701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4714=((1.0)*gconst113);
CheckValue<IkReal> x4715=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4714))+(((-1.0)*gconst112*r10)))),-1);
if(!x4715.valid){
continue;
}
CheckValue<IkReal> x4716 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4714)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4715.value)))+(x4716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4717=IKsin(j4);
IkReal x4718=IKcos(j4);
IkReal x4719=(gconst113*r20);
IkReal x4720=(gconst112*r21);
IkReal x4721=((1.0)*cj2);
IkReal x4722=(gconst113*r00);
IkReal x4723=(gconst113*r10);
IkReal x4724=((1.0)*sj0);
IkReal x4725=(cj1*sj2);
IkReal x4726=((1.0)*x4718);
IkReal x4727=((1.0)*x4717);
IkReal x4728=(gconst112*x4718);
IkReal x4729=(gconst112*x4717);
evalcond[0]=((((-1.0)*x4719*x4727))+((x4717*x4720))+(((-1.0)*r22*x4726)));
evalcond[1]=(((r11*x4729))+(((-1.0)*x4723*x4727))+cj0+(((-1.0)*r12*x4726)));
evalcond[2]=((((-1.0)*x4722*x4727))+(((-1.0)*x4724))+((r01*x4729))+(((-1.0)*r02*x4726)));
evalcond[3]=(((r22*x4717))+(((-1.0)*cj1*x4721))+((sj1*sj2))+(((-1.0)*x4719*x4726))+((x4718*x4720)));
evalcond[4]=((((-1.0)*x4722*x4726))+(((-1.0)*cj0*sj1*x4721))+(((-1.0)*cj0*x4725))+((r01*x4728))+((r02*x4717)));
evalcond[5]=(((r11*x4728))+(((-1.0)*x4723*x4726))+(((-1.0)*x4724*x4725))+(((-1.0)*sj0*sj1*x4721))+((r12*x4717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4730=((1.0)*gconst113);
CheckValue<IkReal> x4731 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4730))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4731.valid){
continue;
}
CheckValue<IkReal> x4732=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4730))+(((-1.0)*gconst112*r00)))),-1);
if(!x4732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4731.value)+(((1.5707963267949)*(x4732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4733=IKsin(j4);
IkReal x4734=IKcos(j4);
IkReal x4735=(gconst113*r20);
IkReal x4736=(gconst112*r21);
IkReal x4737=((1.0)*cj2);
IkReal x4738=(gconst113*r00);
IkReal x4739=(gconst113*r10);
IkReal x4740=((1.0)*sj0);
IkReal x4741=(cj1*sj2);
IkReal x4742=((1.0)*x4734);
IkReal x4743=((1.0)*x4733);
IkReal x4744=(gconst112*x4734);
IkReal x4745=(gconst112*x4733);
evalcond[0]=((((-1.0)*r22*x4742))+((x4733*x4736))+(((-1.0)*x4735*x4743)));
evalcond[1]=(((r11*x4745))+(((-1.0)*r12*x4742))+cj0+(((-1.0)*x4739*x4743)));
evalcond[2]=(((r01*x4745))+(((-1.0)*x4740))+(((-1.0)*x4738*x4743))+(((-1.0)*r02*x4742)));
evalcond[3]=(((x4734*x4736))+(((-1.0)*cj1*x4737))+((sj1*sj2))+((r22*x4733))+(((-1.0)*x4735*x4742)));
evalcond[4]=((((-1.0)*cj0*x4741))+((r01*x4744))+(((-1.0)*cj0*sj1*x4737))+((r02*x4733))+(((-1.0)*x4738*x4742)));
evalcond[5]=(((r11*x4744))+(((-1.0)*sj0*sj1*x4737))+(((-1.0)*x4740*x4741))+(((-1.0)*x4739*x4742))+((r12*x4733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4746=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4746;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4746);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4747=((1.0)*cj5);
IkReal x4748=((((-1.0)*r11*x4747))+(((-1.0)*r10*sj5)));
j4eval[0]=x4748;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4747)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4748);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4749=cj5*cj5;
IkReal x4750=r01*r01;
IkReal x4751=(cj5*r00);
IkReal x4752=(r01*sj5);
IkReal x4753=(x4750+((x4749*(r00*r00)))+(((-2.0)*x4751*x4752))+(r02*r02)+(((-1.0)*x4749*x4750)));
j4eval[0]=x4753;
j4eval[1]=IKsign(x4753);
j4eval[2]=((IKabs((x4752+(((-1.0)*x4751)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4754=cj5*cj5;
IkReal x4755=r01*r01;
IkReal x4756=(r01*sj5);
IkReal x4757=(cj5*r00);
CheckValue<IkReal> x4758 = IKatan2WithCheck(IkReal((x4756+(((-1.0)*x4757)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4758.valid){
continue;
}
CheckValue<IkReal> x4759=IKPowWithIntegerCheck(IKsign((((x4754*(r00*r00)))+x4755+(((-1.0)*x4754*x4755))+(((-2.0)*x4756*x4757))+(r02*r02))),-1);
if(!x4759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4758.value)+(((1.5707963267949)*(x4759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4760=IKcos(j4);
IkReal x4761=IKsin(j4);
IkReal x4762=(cj5*r00);
IkReal x4763=(cj5*r10);
IkReal x4764=(r21*sj5);
IkReal x4765=((1.0)*cj2);
IkReal x4766=(cj5*r20);
IkReal x4767=((1.0)*x4760);
IkReal x4768=((1.0)*x4761);
IkReal x4769=(sj5*x4761);
IkReal x4770=(sj5*x4760);
evalcond[0]=(((r02*x4761))+((r01*x4770))+(((-1.0)*x4762*x4767)));
evalcond[1]=((((-1.0)*r22*x4767))+(((-1.0)*x4766*x4768))+((x4761*x4764)));
evalcond[2]=((((-1.0)*x4763*x4768))+(((-1.0)*r12*x4767))+((r11*x4769)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4767))+(((-1.0)*x4762*x4768))+((r01*x4769)));
evalcond[4]=(((r22*x4761))+((sj1*sj2))+(((-1.0)*cj1*x4765))+(((-1.0)*x4766*x4767))+((x4760*x4764)));
evalcond[5]=(((r11*x4770))+(((-1.0)*x4763*x4767))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4765))+((r12*x4761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4771=((1.0)*cj5);
CheckValue<IkReal> x4772=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4771))+(((-1.0)*r10*sj5)))),-1);
if(!x4772.valid){
continue;
}
CheckValue<IkReal> x4773 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4772.value)))+(x4773.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4774=IKcos(j4);
IkReal x4775=IKsin(j4);
IkReal x4776=(cj5*r00);
IkReal x4777=(cj5*r10);
IkReal x4778=(r21*sj5);
IkReal x4779=((1.0)*cj2);
IkReal x4780=(cj5*r20);
IkReal x4781=((1.0)*x4774);
IkReal x4782=((1.0)*x4775);
IkReal x4783=(sj5*x4775);
IkReal x4784=(sj5*x4774);
evalcond[0]=((((-1.0)*x4776*x4781))+((r01*x4784))+((r02*x4775)));
evalcond[1]=(((x4775*x4778))+(((-1.0)*r22*x4781))+(((-1.0)*x4780*x4782)));
evalcond[2]=((((-1.0)*x4777*x4782))+((r11*x4783))+(((-1.0)*r12*x4781)));
evalcond[3]=((-1.0)+(((-1.0)*x4776*x4782))+((r01*x4783))+(((-1.0)*r02*x4781)));
evalcond[4]=((((-1.0)*cj1*x4779))+((sj1*sj2))+((r22*x4775))+(((-1.0)*x4780*x4781))+((x4774*x4778)));
evalcond[5]=((((-1.0)*sj1*x4779))+((r12*x4775))+(((-1.0)*x4777*x4781))+(((-1.0)*cj1*sj2))+((r11*x4784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4785=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4785.valid){
continue;
}
CheckValue<IkReal> x4786 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4785.value)))+(x4786.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4787=IKcos(j4);
IkReal x4788=IKsin(j4);
IkReal x4789=(cj5*r00);
IkReal x4790=(cj5*r10);
IkReal x4791=(r21*sj5);
IkReal x4792=((1.0)*cj2);
IkReal x4793=(cj5*r20);
IkReal x4794=((1.0)*x4787);
IkReal x4795=((1.0)*x4788);
IkReal x4796=(sj5*x4788);
IkReal x4797=(sj5*x4787);
evalcond[0]=(((r02*x4788))+((r01*x4797))+(((-1.0)*x4789*x4794)));
evalcond[1]=((((-1.0)*r22*x4794))+((x4788*x4791))+(((-1.0)*x4793*x4795)));
evalcond[2]=((((-1.0)*x4790*x4795))+(((-1.0)*r12*x4794))+((r11*x4796)));
evalcond[3]=((-1.0)+((r01*x4796))+(((-1.0)*r02*x4794))+(((-1.0)*x4789*x4795)));
evalcond[4]=(((r22*x4788))+((sj1*sj2))+(((-1.0)*cj1*x4792))+((x4787*x4791))+(((-1.0)*x4793*x4794)));
evalcond[5]=((((-1.0)*sj1*x4792))+(((-1.0)*x4790*x4794))+((r12*x4788))+(((-1.0)*cj1*sj2))+((r11*x4797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4798=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4798;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4798);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4799=((1.0)*cj5);
IkReal x4800=((((-1.0)*r21*x4799))+(((-1.0)*r20*sj5)));
j4eval[0]=x4800;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4799))))));
j4eval[2]=IKsign(x4800);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4801=cj5*cj5;
IkReal x4802=r01*r01;
IkReal x4803=(r01*sj5);
IkReal x4804=(cj5*r00);
IkReal x4805=((((-1.0)*(r02*r02)))+((x4801*x4802))+(((2.0)*x4803*x4804))+(((-1.0)*x4802))+(((-1.0)*x4801*(r00*r00))));
j4eval[0]=x4805;
j4eval[1]=IKsign(x4805);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4804))+x4803))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4806=cj5*cj5;
IkReal x4807=r01*r01;
IkReal x4808=(r01*sj5);
IkReal x4809=(cj5*r00);
CheckValue<IkReal> x4810=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x4808*x4809))+(((-1.0)*x4806*(r00*r00)))+(((-1.0)*x4807))+((x4806*x4807)))),-1);
if(!x4810.valid){
continue;
}
CheckValue<IkReal> x4811 = IKatan2WithCheck(IkReal(((((-1.0)*x4809))+x4808)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4810.value)))+(x4811.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4812=IKcos(j4);
IkReal x4813=IKsin(j4);
IkReal x4814=(cj5*r00);
IkReal x4815=(cj5*r10);
IkReal x4816=(r21*sj5);
IkReal x4817=(cj5*r20);
IkReal x4818=((1.0)*x4812);
IkReal x4819=((1.0)*x4813);
IkReal x4820=(sj5*x4813);
IkReal x4821=(sj5*x4812);
evalcond[0]=((((-1.0)*x4814*x4818))+((r02*x4813))+((r01*x4821)));
evalcond[1]=(((x4813*x4816))+(((-1.0)*x4817*x4819))+(((-1.0)*r22*x4818)));
evalcond[2]=((((-1.0)*x4815*x4819))+((r11*x4820))+(((-1.0)*r12*x4818)));
evalcond[3]=((1.0)+(((-1.0)*x4814*x4819))+(((-1.0)*r02*x4818))+((r01*x4820)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4815*x4818))+((cj1*sj2))+((r11*x4821))+((r12*x4813)));
evalcond[5]=(((x4812*x4816))+(((-1.0)*x4817*x4818))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4822=((1.0)*cj5);
CheckValue<IkReal> x4823=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4822))+(((-1.0)*r20*sj5)))),-1);
if(!x4823.valid){
continue;
}
CheckValue<IkReal> x4824 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4822))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4823.value)))+(x4824.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4825=IKcos(j4);
IkReal x4826=IKsin(j4);
IkReal x4827=(cj5*r00);
IkReal x4828=(cj5*r10);
IkReal x4829=(r21*sj5);
IkReal x4830=(cj5*r20);
IkReal x4831=((1.0)*x4825);
IkReal x4832=((1.0)*x4826);
IkReal x4833=(sj5*x4826);
IkReal x4834=(sj5*x4825);
evalcond[0]=(((r01*x4834))+((r02*x4826))+(((-1.0)*x4827*x4831)));
evalcond[1]=((((-1.0)*x4830*x4832))+(((-1.0)*r22*x4831))+((x4826*x4829)));
evalcond[2]=(((r11*x4833))+(((-1.0)*r12*x4831))+(((-1.0)*x4828*x4832)));
evalcond[3]=((1.0)+((r01*x4833))+(((-1.0)*r02*x4831))+(((-1.0)*x4827*x4832)));
evalcond[4]=(((cj2*sj1))+((r11*x4834))+((cj1*sj2))+((r12*x4826))+(((-1.0)*x4828*x4831)));
evalcond[5]=(((r22*x4826))+(((-1.0)*x4830*x4831))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4825*x4829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4835 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4835.valid){
continue;
}
CheckValue<IkReal> x4836=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4835.value)+(((1.5707963267949)*(x4836.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4837=IKcos(j4);
IkReal x4838=IKsin(j4);
IkReal x4839=(cj5*r00);
IkReal x4840=(cj5*r10);
IkReal x4841=(r21*sj5);
IkReal x4842=(cj5*r20);
IkReal x4843=((1.0)*x4837);
IkReal x4844=((1.0)*x4838);
IkReal x4845=(sj5*x4838);
IkReal x4846=(sj5*x4837);
evalcond[0]=((((-1.0)*x4839*x4843))+((r01*x4846))+((r02*x4838)));
evalcond[1]=((((-1.0)*x4842*x4844))+((x4838*x4841))+(((-1.0)*r22*x4843)));
evalcond[2]=((((-1.0)*x4840*x4844))+((r11*x4845))+(((-1.0)*r12*x4843)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4843))+(((-1.0)*x4839*x4844))+((r01*x4845)));
evalcond[4]=(((r12*x4838))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4840*x4843))+((r11*x4846)));
evalcond[5]=((((-1.0)*x4842*x4843))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4838))+((x4837*x4841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4847=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4847);
rxp1_1=(px*r21);
rxp1_2=(r11*x4847);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4848=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4848);
rxp1_1=(px*r21);
rxp1_2=(r11*x4848);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4849=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4849);
rxp1_1=(px*r21);
rxp1_2=(r11*x4849);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4852=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4852.valid){
continue;
}
IkReal x4850=x4852.value;
IkReal x4851=(sj0*x4850);
cj4array[0]=(((cj1*sj2*x4851))+((cj2*sj1*x4851)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4853=IKsin(j4);
IkReal x4854=IKcos(j4);
IkReal x4855=(r21*sj5);
IkReal x4856=((1.0)*cj5*r20);
evalcond[0]=(r02*x4853);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4854)));
evalcond[2]=((((-1.0)*x4853*x4856))+((x4853*x4855)));
evalcond[3]=(((r11*sj5*x4853))+(((-1.0)*cj5*r10*x4853)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4854*x4856))+((x4854*x4855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4858=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4858.valid){
continue;
}
IkReal x4857=x4858.value;
cj4array[0]=(((cj1*cj2*x4857))+(((-1.0)*sj1*sj2*x4857)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4859=IKsin(j4);
IkReal x4860=IKcos(j4);
IkReal x4861=((1.0)*sj0);
IkReal x4862=((1.0)*cj5);
IkReal x4863=(sj5*x4859);
evalcond[0]=(r02*x4859);
evalcond[1]=((((-1.0)*r02*x4860))+(((-1.0)*x4861)));
evalcond[2]=(((r21*x4863))+(((-1.0)*r20*x4859*x4862)));
evalcond[3]=(((r11*x4863))+(((-1.0)*r10*x4859*x4862)));
evalcond[4]=((((-1.0)*cj2*sj1*x4861))+((r11*sj5*x4860))+(((-1.0)*cj1*sj2*x4861))+(((-1.0)*r10*x4860*x4862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4864=IKPowWithIntegerCheck(r02,-1);
if(!x4864.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4864.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4865=IKsin(j4);
IkReal x4866=IKcos(j4);
IkReal x4867=((1.0)*cj1);
IkReal x4868=(r21*sj5);
IkReal x4869=((1.0)*cj5);
IkReal x4870=(r11*sj5);
evalcond[0]=(r02*x4865);
evalcond[1]=((((-1.0)*r20*x4865*x4869))+((x4865*x4868)));
evalcond[2]=(((x4865*x4870))+(((-1.0)*r10*x4865*x4869)));
evalcond[3]=((((-1.0)*r20*x4866*x4869))+((sj1*sj2))+(((-1.0)*cj2*x4867))+((x4866*x4868)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x4867))+(((-1.0)*r10*x4866*x4869))+((x4866*x4870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4871=((1.0)*sj0);
IkReal x4872=((1.0)*cj0);
CheckValue<IkReal> x4873 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4871))+(((-1.0)*r02*x4872)))),IkReal(((((-1.0)*r01*sj5*x4872))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4871)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4873.valid){
continue;
}
CheckValue<IkReal> x4874=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4873.value)+(((1.5707963267949)*(x4874.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4875=IKsin(j4);
IkReal x4876=IKcos(j4);
IkReal x4877=(cj5*r00);
IkReal x4878=(cj5*r10);
IkReal x4879=(r21*sj5);
IkReal x4880=((1.0)*cj2);
IkReal x4881=((1.0)*sj0);
IkReal x4882=(cj1*sj2);
IkReal x4883=(cj5*r20);
IkReal x4884=((1.0)*x4876);
IkReal x4885=((1.0)*x4875);
IkReal x4886=(sj5*x4875);
IkReal x4887=(sj5*x4876);
evalcond[0]=((((-1.0)*x4883*x4885))+((x4875*x4879))+(((-1.0)*r22*x4884)));
evalcond[1]=(((r11*x4886))+cj0+(((-1.0)*r12*x4884))+(((-1.0)*x4878*x4885)));
evalcond[2]=((((-1.0)*x4877*x4885))+(((-1.0)*x4881))+(((-1.0)*r02*x4884))+((r01*x4886)));
evalcond[3]=((((-1.0)*cj1*x4880))+(((-1.0)*x4883*x4884))+((sj1*sj2))+((r22*x4875))+((x4876*x4879)));
evalcond[4]=((((-1.0)*cj0*x4882))+(((-1.0)*x4877*x4884))+((r02*x4875))+(((-1.0)*cj0*sj1*x4880))+((r01*x4887)));
evalcond[5]=(((r11*x4887))+(((-1.0)*x4881*x4882))+(((-1.0)*sj0*sj1*x4880))+((r12*x4875))+(((-1.0)*x4878*x4884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4888=((1.0)*cj5);
CheckValue<IkReal> x4889=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4888)))),-1);
if(!x4889.valid){
continue;
}
CheckValue<IkReal> x4890 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4889.value)))+(x4890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4891=IKsin(j4);
IkReal x4892=IKcos(j4);
IkReal x4893=(cj5*r00);
IkReal x4894=(cj5*r10);
IkReal x4895=(r21*sj5);
IkReal x4896=((1.0)*cj2);
IkReal x4897=((1.0)*sj0);
IkReal x4898=(cj1*sj2);
IkReal x4899=(cj5*r20);
IkReal x4900=((1.0)*x4892);
IkReal x4901=((1.0)*x4891);
IkReal x4902=(sj5*x4891);
IkReal x4903=(sj5*x4892);
evalcond[0]=((((-1.0)*x4899*x4901))+((x4891*x4895))+(((-1.0)*r22*x4900)));
evalcond[1]=((((-1.0)*r12*x4900))+cj0+(((-1.0)*x4894*x4901))+((r11*x4902)));
evalcond[2]=((((-1.0)*x4897))+(((-1.0)*x4893*x4901))+(((-1.0)*r02*x4900))+((r01*x4902)));
evalcond[3]=((((-1.0)*x4899*x4900))+((x4892*x4895))+(((-1.0)*cj1*x4896))+((sj1*sj2))+((r22*x4891)));
evalcond[4]=((((-1.0)*cj0*x4898))+((r02*x4891))+(((-1.0)*cj0*sj1*x4896))+(((-1.0)*x4893*x4900))+((r01*x4903)));
evalcond[5]=(((r12*x4891))+(((-1.0)*x4894*x4900))+(((-1.0)*sj0*sj1*x4896))+(((-1.0)*x4897*x4898))+((r11*x4903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4904=((1.0)*cj5);
CheckValue<IkReal> x4905=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4904))+(((-1.0)*r00*sj5)))),-1);
if(!x4905.valid){
continue;
}
CheckValue<IkReal> x4906 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4904)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4905.value)))+(x4906.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4907=IKsin(j4);
IkReal x4908=IKcos(j4);
IkReal x4909=(cj5*r00);
IkReal x4910=(cj5*r10);
IkReal x4911=(r21*sj5);
IkReal x4912=((1.0)*cj2);
IkReal x4913=((1.0)*sj0);
IkReal x4914=(cj1*sj2);
IkReal x4915=(cj5*r20);
IkReal x4916=((1.0)*x4908);
IkReal x4917=((1.0)*x4907);
IkReal x4918=(sj5*x4907);
IkReal x4919=(sj5*x4908);
evalcond[0]=((((-1.0)*x4915*x4917))+((x4907*x4911))+(((-1.0)*r22*x4916)));
evalcond[1]=(cj0+(((-1.0)*r12*x4916))+(((-1.0)*x4910*x4917))+((r11*x4918)));
evalcond[2]=((((-1.0)*x4909*x4917))+(((-1.0)*r02*x4916))+(((-1.0)*x4913))+((r01*x4918)));
evalcond[3]=((((-1.0)*x4915*x4916))+((sj1*sj2))+((x4908*x4911))+((r22*x4907))+(((-1.0)*cj1*x4912)));
evalcond[4]=((((-1.0)*cj0*sj1*x4912))+(((-1.0)*x4909*x4916))+((r02*x4907))+((r01*x4919))+(((-1.0)*cj0*x4914)));
evalcond[5]=((((-1.0)*x4910*x4916))+(((-1.0)*sj0*sj1*x4912))+(((-1.0)*x4913*x4914))+((r11*x4919))+((r12*x4907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4920=((1.0)*cj5);
IkReal x4921=((1.0)*sj5);
IkReal x4922=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4922;
j0eval[1]=((IKabs(((((-1.0)*r01*x4920))+(((-1.0)*r00*x4921)))))+(IKabs(((((-1.0)*r11*x4920))+(((-1.0)*r10*x4921))))));
j0eval[2]=IKsign(x4922);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4923=r21*r21;
IkReal x4924=cj5*cj5;
IkReal x4925=(cj2*sj1);
IkReal x4926=(cj1*sj2);
IkReal x4927=(r21*sj5);
IkReal x4928=((1.0)*cj5*r20);
IkReal x4929=((((-1.0)*x4923))+(((2.0)*cj5*r20*x4927))+((x4923*x4924))+(((-1.0)*(r22*r22)))+(((-1.0)*x4924*(r20*r20))));
j4eval[0]=x4929;
j4eval[1]=((IKabs((((x4926*x4927))+(((-1.0)*x4926*x4928))+((x4925*x4927))+(((-1.0)*x4925*x4928)))))+(IKabs((((r22*x4926))+((r22*x4925))))));
j4eval[2]=IKsign(x4929);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4930=cj1*cj1;
IkReal x4931=(cj2*sj2);
IkReal x4932=(cj2*sj1);
IkReal x4933=(cj1*sj1);
j0eval[0]=(x4931+x4933+(((-2.0)*x4930*x4931))+(((-1.08349267049076)*cj1*x4932))+(((-1.08349267049076)*sj2*x4930))+(((-2.0)*cj1*cj2*x4932)));
j0eval[1]=((((-1.0)*x4932))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4934=IKsin(j0);
IkReal x4935=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.81725)*x4935))+(((-0.10915)*x4934)));
evalcond[1]=((((0.10915)*x4935))+(((-1.0)*py))+(((0.81725)*x4934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4936=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4936;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4936);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4937=((1.0)*cj5);
IkReal x4938=((((-1.0)*r01*x4937))+(((-1.0)*r00*sj5)));
j4eval[0]=x4938;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4937))))));
j4eval[2]=IKsign(x4938);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4939=((1.0)*cj5);
IkReal x4940=((((-1.0)*r01*x4939))+(((-1.0)*r00*sj5)));
j4eval[0]=x4940;
j4eval[1]=IKsign(x4940);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4939))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4941=((1.0)*cj5);
CheckValue<IkReal> x4942=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4941)))),-1);
if(!x4942.valid){
continue;
}
CheckValue<IkReal> x4943 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4941))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4942.value)))+(x4943.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4944=IKcos(j4);
IkReal x4945=IKsin(j4);
IkReal x4946=((1.0)*sj0);
IkReal x4947=(cj5*r00);
IkReal x4948=(cj5*r10);
IkReal x4949=(cj5*r20);
IkReal x4950=((1.0)*x4944);
IkReal x4951=((1.0)*x4945);
IkReal x4952=(sj5*x4944);
IkReal x4953=(sj5*x4945);
evalcond[0]=((((-1.0)*x4949*x4950))+((r21*x4952))+((r22*x4945)));
evalcond[1]=((((-1.0)*r22*x4950))+(((-1.0)*x4949*x4951))+((r21*x4953)));
evalcond[2]=(cj0+((r11*x4953))+(((-1.0)*r12*x4950))+(((-1.0)*x4948*x4951)));
evalcond[3]=((((-1.0)*x4947*x4950))+((r02*x4945))+((r01*x4952))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4946))+((r12*x4945))+((r11*x4952))+(((-1.0)*x4948*x4950)));
evalcond[5]=((((-1.0)*x4947*x4951))+(((-1.0)*x4946))+(((-1.0)*r02*x4950))+((r01*x4953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4954=((1.0)*cj5);
CheckValue<IkReal> x4955 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4954)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4955.valid){
continue;
}
CheckValue<IkReal> x4956=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4954)))),-1);
if(!x4956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4955.value)+(((1.5707963267949)*(x4956.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4957=IKcos(j4);
IkReal x4958=IKsin(j4);
IkReal x4959=((1.0)*sj0);
IkReal x4960=(cj5*r00);
IkReal x4961=(cj5*r10);
IkReal x4962=(cj5*r20);
IkReal x4963=((1.0)*x4957);
IkReal x4964=((1.0)*x4958);
IkReal x4965=(sj5*x4957);
IkReal x4966=(sj5*x4958);
evalcond[0]=(((r22*x4958))+(((-1.0)*x4962*x4963))+((r21*x4965)));
evalcond[1]=((((-1.0)*r22*x4963))+(((-1.0)*x4962*x4964))+((r21*x4966)));
evalcond[2]=(cj0+(((-1.0)*x4961*x4964))+((r11*x4966))+(((-1.0)*r12*x4963)));
evalcond[3]=((((-1.0)*x4960*x4963))+((r02*x4958))+((r01*x4965))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4958))+(((-1.0)*x4959))+(((-1.0)*x4961*x4963))+((r11*x4965)));
evalcond[5]=((((-1.0)*x4960*x4964))+(((-1.0)*x4959))+(((-1.0)*r02*x4963))+((r01*x4966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4967 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4967.valid){
continue;
}
CheckValue<IkReal> x4968=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4967.value)+(((1.5707963267949)*(x4968.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4969=IKcos(j4);
IkReal x4970=IKsin(j4);
IkReal x4971=((1.0)*sj0);
IkReal x4972=(cj5*r00);
IkReal x4973=(cj5*r10);
IkReal x4974=(cj5*r20);
IkReal x4975=((1.0)*x4969);
IkReal x4976=((1.0)*x4970);
IkReal x4977=(sj5*x4969);
IkReal x4978=(sj5*x4970);
evalcond[0]=(((r22*x4970))+((r21*x4977))+(((-1.0)*x4974*x4975)));
evalcond[1]=((((-1.0)*r22*x4975))+((r21*x4978))+(((-1.0)*x4974*x4976)));
evalcond[2]=(cj0+((r11*x4978))+(((-1.0)*r12*x4975))+(((-1.0)*x4973*x4976)));
evalcond[3]=(((r02*x4970))+(((-1.0)*x4972*x4975))+(((-1.0)*cj0))+((r01*x4977)));
evalcond[4]=(((r12*x4970))+((r11*x4977))+(((-1.0)*x4971))+(((-1.0)*x4973*x4975)));
evalcond[5]=((((-1.0)*x4971))+(((-1.0)*r02*x4975))+(((-1.0)*x4972*x4976))+((r01*x4978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4979=IKsin(j0);
IkReal x4980=IKcos(j0);
evalcond[0]=((((0.03275)*x4980))+(((-1.0)*px))+(((-0.10915)*x4979)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x4980))+(((0.03275)*x4979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4981=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4981;
j4eval[1]=IKsign(x4981);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4982=((1.0)*cj5);
IkReal x4983=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4982)));
j4eval[0]=x4983;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4982))))));
j4eval[2]=IKsign(x4983);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4984=cj5*cj5;
IkReal x4985=((1.0)*r20);
IkReal x4986=(r01*r21);
IkReal x4987=(r21*sj5);
IkReal x4988=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x4984*x4986))+((cj5*r00*x4987))+(((-1.0)*x4986))+(((-1.0)*r00*x4984*x4985)));
j4eval[0]=x4988;
j4eval[1]=((IKabs((((cj0*x4987))+(((-1.0)*cj0*cj5*x4985)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4988);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4989=cj5*cj5;
IkReal x4990=((1.0)*r20);
IkReal x4991=(r01*r21);
IkReal x4992=(r21*sj5);
CheckValue<IkReal> x4993=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4989*x4990))+((x4989*x4991))+(((-1.0)*x4991))+((cj5*r00*x4992)))),-1);
if(!x4993.valid){
continue;
}
CheckValue<IkReal> x4994 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4990))+((cj0*x4992)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4993.value)))+(x4994.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4995=IKcos(j4);
IkReal x4996=IKsin(j4);
IkReal x4997=(cj5*r00);
IkReal x4998=(cj5*r10);
IkReal x4999=(cj5*r20);
IkReal x5000=((1.0)*x4995);
IkReal x5001=((1.0)*x4996);
IkReal x5002=(sj5*x4995);
IkReal x5003=(sj5*x4996);
evalcond[0]=(((r22*x4996))+(((-1.0)*x4999*x5000))+((r21*x5002)));
evalcond[1]=((((-1.0)*x4999*x5001))+((r21*x5003))+(((-1.0)*r22*x5000)));
evalcond[2]=(cj0+((r02*x4996))+((r01*x5002))+(((-1.0)*x4997*x5000)));
evalcond[3]=(sj0+((r11*x5002))+(((-1.0)*x4998*x5000))+((r12*x4996)));
evalcond[4]=(((r11*x5003))+cj0+(((-1.0)*x4998*x5001))+(((-1.0)*r12*x5000)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5003))+(((-1.0)*x4997*x5001))+(((-1.0)*r02*x5000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5004=((1.0)*cj5);
CheckValue<IkReal> x5005=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5004)))),-1);
if(!x5005.valid){
continue;
}
CheckValue<IkReal> x5006 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5004)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5005.value)))+(x5006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5007=IKcos(j4);
IkReal x5008=IKsin(j4);
IkReal x5009=(cj5*r00);
IkReal x5010=(cj5*r10);
IkReal x5011=(cj5*r20);
IkReal x5012=((1.0)*x5007);
IkReal x5013=((1.0)*x5008);
IkReal x5014=(sj5*x5007);
IkReal x5015=(sj5*x5008);
evalcond[0]=(((r21*x5014))+(((-1.0)*x5011*x5012))+((r22*x5008)));
evalcond[1]=((((-1.0)*r22*x5012))+((r21*x5015))+(((-1.0)*x5011*x5013)));
evalcond[2]=((((-1.0)*x5009*x5012))+cj0+((r02*x5008))+((r01*x5014)));
evalcond[3]=(((r12*x5008))+sj0+(((-1.0)*x5010*x5012))+((r11*x5014)));
evalcond[4]=(cj0+(((-1.0)*x5010*x5013))+(((-1.0)*r12*x5012))+((r11*x5015)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5009*x5013))+(((-1.0)*r02*x5012))+((r01*x5015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5016 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5016.valid){
continue;
}
CheckValue<IkReal> x5017=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5016.value)+(((1.5707963267949)*(x5017.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5018=IKcos(j4);
IkReal x5019=IKsin(j4);
IkReal x5020=(cj5*r00);
IkReal x5021=(cj5*r10);
IkReal x5022=(cj5*r20);
IkReal x5023=((1.0)*x5018);
IkReal x5024=((1.0)*x5019);
IkReal x5025=(sj5*x5018);
IkReal x5026=(sj5*x5019);
evalcond[0]=((((-1.0)*x5022*x5023))+((r22*x5019))+((r21*x5025)));
evalcond[1]=((((-1.0)*x5022*x5024))+(((-1.0)*r22*x5023))+((r21*x5026)));
evalcond[2]=(cj0+((r02*x5019))+(((-1.0)*x5020*x5023))+((r01*x5025)));
evalcond[3]=(((r11*x5025))+sj0+(((-1.0)*x5021*x5023))+((r12*x5019)));
evalcond[4]=(((r11*x5026))+cj0+(((-1.0)*r12*x5023))+(((-1.0)*x5021*x5024)));
evalcond[5]=((((-1.0)*r02*x5023))+(((-1.0)*sj0))+(((-1.0)*x5020*x5024))+((r01*x5026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5027=IKsin(j0);
IkReal x5028=IKcos(j0);
IkReal x5029=(r00*sj5);
IkReal x5030=(r10*sj5);
IkReal x5031=(cj5*r11);
IkReal x5032=(cj5*r01);
evalcond[0]=((((-1.0)*x5028))+x5032+x5029);
evalcond[1]=((((-1.0)*x5027))+x5030+x5031);
evalcond[2]=((((-0.09465)*x5032))+(((-0.09465)*x5029))+(((-1.0)*px))+(((-0.10915)*x5027)));
evalcond[3]=((((-0.09465)*x5030))+(((-0.09465)*x5031))+(((0.10915)*x5028))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5033=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5033;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5033);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5034=((1.0)*cj5);
IkReal x5035=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5034)));
j4eval[0]=x5035;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5034))))));
j4eval[2]=IKsign(x5035);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5036=cj5*cj5;
IkReal x5037=(r01*r11);
IkReal x5038=((1.0)*r00);
IkReal x5039=(r01*sj5);
IkReal x5040=(((cj5*r10*x5039))+((x5036*x5037))+(((-1.0)*r02*r12))+(((-1.0)*x5037))+(((-1.0)*r10*x5036*x5038))+((cj5*r00*r11*sj5)));
j4eval[0]=x5040;
j4eval[1]=IKsign(x5040);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5038))+((cj0*x5039))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5041=cj5*cj5;
IkReal x5042=(r01*r11);
IkReal x5043=(cj5*r00);
IkReal x5044=(r01*sj5);
CheckValue<IkReal> x5045=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((x5041*x5042))+(((-1.0)*x5042))+(((-1.0)*r00*r10*x5041))+((cj5*r10*x5044))+((r11*sj5*x5043)))),-1);
if(!x5045.valid){
continue;
}
CheckValue<IkReal> x5046 = IKatan2WithCheck(IkReal((((cj0*x5044))+(((-1.0)*cj0*x5043)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5045.value)))+(x5046.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5047=IKcos(j4);
IkReal x5048=IKsin(j4);
IkReal x5049=(cj5*r00);
IkReal x5050=(r01*sj5);
IkReal x5051=(cj5*r10);
IkReal x5052=(cj5*r20);
IkReal x5053=((1.0)*x5047);
IkReal x5054=((1.0)*x5048);
IkReal x5055=(sj5*x5048);
IkReal x5056=(sj5*x5047);
evalcond[0]=(((x5047*x5050))+((r02*x5048))+(((-1.0)*x5049*x5053)));
evalcond[1]=(((r11*x5056))+((r12*x5048))+(((-1.0)*x5051*x5053)));
evalcond[2]=(((r21*x5055))+(((-1.0)*r22*x5053))+(((-1.0)*x5052*x5054)));
evalcond[3]=((1.0)+((r21*x5056))+(((-1.0)*x5052*x5053))+((r22*x5048)));
evalcond[4]=(cj0+(((-1.0)*r12*x5053))+((r11*x5055))+(((-1.0)*x5051*x5054)));
evalcond[5]=((((-1.0)*sj0))+((x5048*x5050))+(((-1.0)*r02*x5053))+(((-1.0)*x5049*x5054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5057=((1.0)*cj5);
CheckValue<IkReal> x5058=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5057))+(((-1.0)*r00*sj5)))),-1);
if(!x5058.valid){
continue;
}
CheckValue<IkReal> x5059 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5057))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5058.value)))+(x5059.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5060=IKcos(j4);
IkReal x5061=IKsin(j4);
IkReal x5062=(cj5*r00);
IkReal x5063=(r01*sj5);
IkReal x5064=(cj5*r10);
IkReal x5065=(cj5*r20);
IkReal x5066=((1.0)*x5060);
IkReal x5067=((1.0)*x5061);
IkReal x5068=(sj5*x5061);
IkReal x5069=(sj5*x5060);
evalcond[0]=(((x5060*x5063))+((r02*x5061))+(((-1.0)*x5062*x5066)));
evalcond[1]=(((r11*x5069))+((r12*x5061))+(((-1.0)*x5064*x5066)));
evalcond[2]=((((-1.0)*r22*x5066))+((r21*x5068))+(((-1.0)*x5065*x5067)));
evalcond[3]=((1.0)+((r21*x5069))+(((-1.0)*x5065*x5066))+((r22*x5061)));
evalcond[4]=(cj0+(((-1.0)*r12*x5066))+((r11*x5068))+(((-1.0)*x5064*x5067)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5066))+((x5061*x5063))+(((-1.0)*x5062*x5067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5070 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5070.valid){
continue;
}
CheckValue<IkReal> x5071=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5070.value)+(((1.5707963267949)*(x5071.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5072=IKcos(j4);
IkReal x5073=IKsin(j4);
IkReal x5074=(cj5*r00);
IkReal x5075=(r01*sj5);
IkReal x5076=(cj5*r10);
IkReal x5077=(cj5*r20);
IkReal x5078=((1.0)*x5072);
IkReal x5079=((1.0)*x5073);
IkReal x5080=(sj5*x5073);
IkReal x5081=(sj5*x5072);
evalcond[0]=(((r02*x5073))+(((-1.0)*x5074*x5078))+((x5072*x5075)));
evalcond[1]=(((r11*x5081))+(((-1.0)*x5076*x5078))+((r12*x5073)));
evalcond[2]=(((r21*x5080))+(((-1.0)*x5077*x5079))+(((-1.0)*r22*x5078)));
evalcond[3]=((1.0)+((r21*x5081))+(((-1.0)*x5077*x5078))+((r22*x5073)));
evalcond[4]=(cj0+((r11*x5080))+(((-1.0)*x5076*x5079))+(((-1.0)*r12*x5078)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5078))+((x5073*x5075))+(((-1.0)*x5074*x5079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5082=IKcos(j0);
IkReal x5083=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.39225)*x5082))+(((-0.10915)*x5083)));
evalcond[1]=((((0.10915)*x5082))+(((-1.0)*py))+(((-0.39225)*x5083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5084=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5084;
j4eval[1]=IKsign(x5084);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5085=((1.0)*cj5);
IkReal x5086=((((-1.0)*r11*x5085))+(((-1.0)*r10*sj5)));
j4eval[0]=x5086;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5085)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5086);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5087=cj5*cj5;
IkReal x5088=((1.0)*r20);
IkReal x5089=(r01*r21);
IkReal x5090=(r21*sj5);
IkReal x5091=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x5087*x5088))+(((-1.0)*r02*r22))+(((-1.0)*x5089))+((x5087*x5089))+((cj5*r00*x5090)));
j4eval[0]=x5091;
j4eval[1]=((IKabs((((cj0*x5090))+(((-1.0)*cj0*cj5*x5088)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5091);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5092=cj5*cj5;
IkReal x5093=((1.0)*r20);
IkReal x5094=(r01*r21);
IkReal x5095=(r21*sj5);
CheckValue<IkReal> x5096 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5095))+(((-1.0)*cj0*cj5*x5093)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5096.valid){
continue;
}
CheckValue<IkReal> x5097=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5094))+(((-1.0)*r00*x5092*x5093))+((cj5*r00*x5095))+((x5092*x5094)))),-1);
if(!x5097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5096.value)+(((1.5707963267949)*(x5097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5098=IKcos(j4);
IkReal x5099=IKsin(j4);
IkReal x5100=(cj5*r00);
IkReal x5101=(cj5*r10);
IkReal x5102=(cj5*r20);
IkReal x5103=((1.0)*x5098);
IkReal x5104=((1.0)*x5099);
IkReal x5105=(sj5*x5098);
IkReal x5106=(sj5*x5099);
evalcond[0]=(((r22*x5099))+((r21*x5105))+(((-1.0)*x5102*x5103)));
evalcond[1]=((((-1.0)*r22*x5103))+((r21*x5106))+(((-1.0)*x5102*x5104)));
evalcond[2]=(((r01*x5105))+cj0+(((-1.0)*x5100*x5103))+((r02*x5099)));
evalcond[3]=(sj0+(((-1.0)*x5101*x5103))+((r12*x5099))+((r11*x5105)));
evalcond[4]=((((-1.0)*x5101*x5104))+cj0+((r11*x5106))+(((-1.0)*r12*x5103)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5106))+(((-1.0)*r02*x5103))+(((-1.0)*x5100*x5104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5107=((1.0)*cj5);
CheckValue<IkReal> x5108=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5107)))),-1);
if(!x5108.valid){
continue;
}
CheckValue<IkReal> x5109 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5107)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5108.value)))+(x5109.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5110=IKcos(j4);
IkReal x5111=IKsin(j4);
IkReal x5112=(cj5*r00);
IkReal x5113=(cj5*r10);
IkReal x5114=(cj5*r20);
IkReal x5115=((1.0)*x5110);
IkReal x5116=((1.0)*x5111);
IkReal x5117=(sj5*x5110);
IkReal x5118=(sj5*x5111);
evalcond[0]=((((-1.0)*x5114*x5115))+((r21*x5117))+((r22*x5111)));
evalcond[1]=((((-1.0)*r22*x5115))+(((-1.0)*x5114*x5116))+((r21*x5118)));
evalcond[2]=((((-1.0)*x5112*x5115))+((r01*x5117))+cj0+((r02*x5111)));
evalcond[3]=(sj0+(((-1.0)*x5113*x5115))+((r11*x5117))+((r12*x5111)));
evalcond[4]=(cj0+(((-1.0)*x5113*x5116))+((r11*x5118))+(((-1.0)*r12*x5115)));
evalcond[5]=((((-1.0)*x5112*x5116))+((r01*x5118))+(((-1.0)*sj0))+(((-1.0)*r02*x5115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5119 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5119.valid){
continue;
}
CheckValue<IkReal> x5120=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5119.value)+(((1.5707963267949)*(x5120.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5121=IKcos(j4);
IkReal x5122=IKsin(j4);
IkReal x5123=(cj5*r00);
IkReal x5124=(cj5*r10);
IkReal x5125=(cj5*r20);
IkReal x5126=((1.0)*x5121);
IkReal x5127=((1.0)*x5122);
IkReal x5128=(sj5*x5121);
IkReal x5129=(sj5*x5122);
evalcond[0]=(((r22*x5122))+(((-1.0)*x5125*x5126))+((r21*x5128)));
evalcond[1]=((((-1.0)*x5125*x5127))+((r21*x5129))+(((-1.0)*r22*x5126)));
evalcond[2]=(cj0+((r01*x5128))+(((-1.0)*x5123*x5126))+((r02*x5122)));
evalcond[3]=((((-1.0)*x5124*x5126))+sj0+((r12*x5122))+((r11*x5128)));
evalcond[4]=((((-1.0)*x5124*x5127))+cj0+((r11*x5129))+(((-1.0)*r12*x5126)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5129))+(((-1.0)*x5123*x5127))+(((-1.0)*r02*x5126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5130=((1.0)*sj5);
IkReal x5131=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x5130))+(((-1.0)*r11*x5131)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5131))+(((-1.0)*r00*x5130)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x5130))+(((-1.0)*r11*x5131))))+IKsqr(((((-1.0)*r01*x5131))+(((-1.0)*r00*x5130))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x5130))+(((-1.0)*r11*x5131))), ((((-1.0)*r01*x5131))+(((-1.0)*r00*x5130))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5132=IKsin(j0);
IkReal x5133=IKcos(j0);
IkReal x5134=(r00*sj5);
IkReal x5135=(r10*sj5);
IkReal x5136=(cj5*r11);
IkReal x5137=(cj5*r01);
evalcond[0]=(x5137+x5134+x5133);
evalcond[1]=(x5136+x5135+x5132);
evalcond[2]=((((-0.10915)*x5132))+(((-0.09465)*x5137))+(((-0.09465)*x5134))+(((-1.0)*px)));
evalcond[3]=((((0.10915)*x5133))+(((-0.09465)*x5136))+(((-0.09465)*x5135))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5138=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5138;
j4eval[1]=IKsign(x5138);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5139=((1.0)*cj5);
IkReal x5140=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5139)));
j4eval[0]=x5140;
j4eval[1]=IKsign(x5140);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5139))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5141=cj5*cj5;
IkReal x5142=(r01*r11);
IkReal x5143=((1.0)*r00);
IkReal x5144=(r01*sj5);
IkReal x5145=((((-1.0)*r02*r12))+(((-1.0)*r10*x5141*x5143))+(((-1.0)*x5142))+((x5141*x5142))+((cj5*r10*x5144))+((cj5*r00*r11*sj5)));
j4eval[0]=x5145;
j4eval[1]=IKsign(x5145);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5144))+(((-1.0)*cj0*cj5*x5143))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5146=cj5*cj5;
IkReal x5147=(r01*r11);
IkReal x5148=(cj5*r00);
IkReal x5149=(r01*sj5);
CheckValue<IkReal> x5150 = IKatan2WithCheck(IkReal((((cj0*x5149))+(((-1.0)*cj0*x5148)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5150.valid){
continue;
}
CheckValue<IkReal> x5151=IKPowWithIntegerCheck(IKsign((((r11*sj5*x5148))+(((-1.0)*r02*r12))+(((-1.0)*x5147))+(((-1.0)*r00*r10*x5146))+((cj5*r10*x5149))+((x5146*x5147)))),-1);
if(!x5151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5150.value)+(((1.5707963267949)*(x5151.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5152=IKcos(j4);
IkReal x5153=IKsin(j4);
IkReal x5154=(cj5*r00);
IkReal x5155=(r01*sj5);
IkReal x5156=(cj5*r10);
IkReal x5157=(cj5*r20);
IkReal x5158=((1.0)*x5152);
IkReal x5159=((1.0)*x5153);
IkReal x5160=(sj5*x5153);
IkReal x5161=(sj5*x5152);
evalcond[0]=((((-1.0)*x5154*x5158))+((r02*x5153))+((x5152*x5155)));
evalcond[1]=(((r12*x5153))+((r11*x5161))+(((-1.0)*x5156*x5158)));
evalcond[2]=(((r21*x5160))+(((-1.0)*r22*x5158))+(((-1.0)*x5157*x5159)));
evalcond[3]=((-1.0)+((r21*x5161))+((r22*x5153))+(((-1.0)*x5157*x5158)));
evalcond[4]=(cj0+(((-1.0)*r12*x5158))+((r11*x5160))+(((-1.0)*x5156*x5159)));
evalcond[5]=(((x5153*x5155))+(((-1.0)*x5154*x5159))+(((-1.0)*sj0))+(((-1.0)*r02*x5158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5162=((1.0)*cj5);
CheckValue<IkReal> x5163 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5162)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5163.valid){
continue;
}
CheckValue<IkReal> x5164=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5162)))),-1);
if(!x5164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5163.value)+(((1.5707963267949)*(x5164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5165=IKcos(j4);
IkReal x5166=IKsin(j4);
IkReal x5167=(cj5*r00);
IkReal x5168=(r01*sj5);
IkReal x5169=(cj5*r10);
IkReal x5170=(cj5*r20);
IkReal x5171=((1.0)*x5165);
IkReal x5172=((1.0)*x5166);
IkReal x5173=(sj5*x5166);
IkReal x5174=(sj5*x5165);
evalcond[0]=(((x5165*x5168))+((r02*x5166))+(((-1.0)*x5167*x5171)));
evalcond[1]=((((-1.0)*x5169*x5171))+((r12*x5166))+((r11*x5174)));
evalcond[2]=((((-1.0)*x5170*x5172))+(((-1.0)*r22*x5171))+((r21*x5173)));
evalcond[3]=((-1.0)+(((-1.0)*x5170*x5171))+((r22*x5166))+((r21*x5174)));
evalcond[4]=(cj0+(((-1.0)*x5169*x5172))+(((-1.0)*r12*x5171))+((r11*x5173)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5171))+((x5166*x5168))+(((-1.0)*x5167*x5172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5175=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5175.valid){
continue;
}
CheckValue<IkReal> x5176 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5175.value)))+(x5176.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5177=IKcos(j4);
IkReal x5178=IKsin(j4);
IkReal x5179=(cj5*r00);
IkReal x5180=(r01*sj5);
IkReal x5181=(cj5*r10);
IkReal x5182=(cj5*r20);
IkReal x5183=((1.0)*x5177);
IkReal x5184=((1.0)*x5178);
IkReal x5185=(sj5*x5178);
IkReal x5186=(sj5*x5177);
evalcond[0]=(((x5177*x5180))+((r02*x5178))+(((-1.0)*x5179*x5183)));
evalcond[1]=(((r12*x5178))+((r11*x5186))+(((-1.0)*x5181*x5183)));
evalcond[2]=((((-1.0)*r22*x5183))+(((-1.0)*x5182*x5184))+((r21*x5185)));
evalcond[3]=((-1.0)+(((-1.0)*x5182*x5183))+((r21*x5186))+((r22*x5178)));
evalcond[4]=(cj0+(((-1.0)*r12*x5183))+((r11*x5185))+(((-1.0)*x5181*x5184)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5183))+((x5178*x5180))+(((-1.0)*x5179*x5184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5187=IKsin(j0);
IkReal x5188=IKcos(j0);
evalcond[0]=((((-0.10915)*x5187))+(((0.39225)*x5188))+(((-1.0)*px)));
evalcond[1]=((((0.39225)*x5187))+(((-1.0)*py))+(((0.10915)*x5188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5189=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5189;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5189);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5190=((1.0)*cj5);
IkReal x5191=((((-1.0)*r01*x5190))+(((-1.0)*r00*sj5)));
j4eval[0]=x5191;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5190)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5191);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5192=((1.0)*cj5);
IkReal x5193=((((-1.0)*r01*x5192))+(((-1.0)*r00*sj5)));
j4eval[0]=x5193;
j4eval[1]=IKsign(x5193);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5192))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5194=((1.0)*cj5);
CheckValue<IkReal> x5195=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5194))+(((-1.0)*r00*sj5)))),-1);
if(!x5195.valid){
continue;
}
CheckValue<IkReal> x5196 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5194)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5195.value)))+(x5196.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5197=IKcos(j4);
IkReal x5198=IKsin(j4);
IkReal x5199=((1.0)*sj0);
IkReal x5200=(cj5*r00);
IkReal x5201=(cj5*r10);
IkReal x5202=(cj5*r20);
IkReal x5203=((1.0)*x5197);
IkReal x5204=((1.0)*x5198);
IkReal x5205=(sj5*x5197);
IkReal x5206=(sj5*x5198);
evalcond[0]=(((r22*x5198))+(((-1.0)*x5202*x5203))+((r21*x5205)));
evalcond[1]=((((-1.0)*r22*x5203))+(((-1.0)*x5202*x5204))+((r21*x5206)));
evalcond[2]=(cj0+(((-1.0)*x5201*x5204))+((r11*x5206))+(((-1.0)*r12*x5203)));
evalcond[3]=((((-1.0)*x5200*x5203))+((r01*x5205))+((r02*x5198))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5201*x5203))+(((-1.0)*x5199))+((r11*x5205))+((r12*x5198)));
evalcond[5]=((((-1.0)*r02*x5203))+(((-1.0)*x5200*x5204))+((r01*x5206))+(((-1.0)*x5199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5207=((1.0)*cj5);
CheckValue<IkReal> x5208=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5207)))),-1);
if(!x5208.valid){
continue;
}
CheckValue<IkReal> x5209 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5207)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5208.value)))+(x5209.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5210=IKcos(j4);
IkReal x5211=IKsin(j4);
IkReal x5212=((1.0)*sj0);
IkReal x5213=(cj5*r00);
IkReal x5214=(cj5*r10);
IkReal x5215=(cj5*r20);
IkReal x5216=((1.0)*x5210);
IkReal x5217=((1.0)*x5211);
IkReal x5218=(sj5*x5210);
IkReal x5219=(sj5*x5211);
evalcond[0]=((((-1.0)*x5215*x5216))+((r22*x5211))+((r21*x5218)));
evalcond[1]=((((-1.0)*x5215*x5217))+(((-1.0)*r22*x5216))+((r21*x5219)));
evalcond[2]=(cj0+((r11*x5219))+(((-1.0)*x5214*x5217))+(((-1.0)*r12*x5216)));
evalcond[3]=(((r01*x5218))+(((-1.0)*x5213*x5216))+((r02*x5211))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5212))+((r12*x5211))+((r11*x5218))+(((-1.0)*x5214*x5216)));
evalcond[5]=(((r01*x5219))+(((-1.0)*x5212))+(((-1.0)*x5213*x5217))+(((-1.0)*r02*x5216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5220 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5220.valid){
continue;
}
CheckValue<IkReal> x5221=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5220.value)+(((1.5707963267949)*(x5221.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5222=IKcos(j4);
IkReal x5223=IKsin(j4);
IkReal x5224=((1.0)*sj0);
IkReal x5225=(cj5*r00);
IkReal x5226=(cj5*r10);
IkReal x5227=(cj5*r20);
IkReal x5228=((1.0)*x5222);
IkReal x5229=((1.0)*x5223);
IkReal x5230=(sj5*x5222);
IkReal x5231=(sj5*x5223);
evalcond[0]=((((-1.0)*x5227*x5228))+((r22*x5223))+((r21*x5230)));
evalcond[1]=((((-1.0)*x5227*x5229))+((r21*x5231))+(((-1.0)*r22*x5228)));
evalcond[2]=(cj0+((r11*x5231))+(((-1.0)*r12*x5228))+(((-1.0)*x5226*x5229)));
evalcond[3]=(((r02*x5223))+((r01*x5230))+(((-1.0)*x5225*x5228))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5230))+(((-1.0)*x5226*x5228))+(((-1.0)*x5224))+((r12*x5223)));
evalcond[5]=(((r01*x5231))+(((-1.0)*x5225*x5229))+(((-1.0)*x5224))+(((-1.0)*r02*x5228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5232=IKcos(j0);
IkReal x5233=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.81725)*x5232))+(((-0.10915)*x5233)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x5232))+(((-0.81725)*x5233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5234=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5234;
j4eval[1]=IKsign(x5234);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5235=((1.0)*cj5);
IkReal x5236=((((-1.0)*r11*x5235))+(((-1.0)*r10*sj5)));
j4eval[0]=x5236;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5235))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5236);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5237=cj5*cj5;
IkReal x5238=((1.0)*r20);
IkReal x5239=(r01*r21);
IkReal x5240=(r21*sj5);
IkReal x5241=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5237*x5239))+(((-1.0)*x5239))+(((-1.0)*r00*x5237*x5238))+((cj5*r00*x5240)));
j4eval[0]=x5241;
j4eval[1]=((IKabs((((cj0*x5240))+(((-1.0)*cj0*cj5*x5238)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5241);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5242=cj5*cj5;
IkReal x5243=((1.0)*r20);
IkReal x5244=(r01*r21);
IkReal x5245=(r21*sj5);
CheckValue<IkReal> x5246 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5245))+(((-1.0)*cj0*cj5*x5243)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5246.valid){
continue;
}
CheckValue<IkReal> x5247=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5244))+((x5242*x5244))+((cj5*r00*x5245))+(((-1.0)*r00*x5242*x5243)))),-1);
if(!x5247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5246.value)+(((1.5707963267949)*(x5247.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5248=IKcos(j4);
IkReal x5249=IKsin(j4);
IkReal x5250=(cj5*r00);
IkReal x5251=(cj5*r10);
IkReal x5252=(cj5*r20);
IkReal x5253=((1.0)*x5248);
IkReal x5254=((1.0)*x5249);
IkReal x5255=(sj5*x5248);
IkReal x5256=(sj5*x5249);
evalcond[0]=(((r21*x5255))+((r22*x5249))+(((-1.0)*x5252*x5253)));
evalcond[1]=(((r21*x5256))+(((-1.0)*r22*x5253))+(((-1.0)*x5252*x5254)));
evalcond[2]=(((r01*x5255))+cj0+(((-1.0)*x5250*x5253))+((r02*x5249)));
evalcond[3]=(sj0+((r12*x5249))+((r11*x5255))+(((-1.0)*x5251*x5253)));
evalcond[4]=(cj0+(((-1.0)*r12*x5253))+((r11*x5256))+(((-1.0)*x5251*x5254)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5253))+((r01*x5256))+(((-1.0)*x5250*x5254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5257=((1.0)*cj5);
CheckValue<IkReal> x5258 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5257)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5258.valid){
continue;
}
CheckValue<IkReal> x5259=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5257)))),-1);
if(!x5259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5258.value)+(((1.5707963267949)*(x5259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5260=IKcos(j4);
IkReal x5261=IKsin(j4);
IkReal x5262=(cj5*r00);
IkReal x5263=(cj5*r10);
IkReal x5264=(cj5*r20);
IkReal x5265=((1.0)*x5260);
IkReal x5266=((1.0)*x5261);
IkReal x5267=(sj5*x5260);
IkReal x5268=(sj5*x5261);
evalcond[0]=((((-1.0)*x5264*x5265))+((r21*x5267))+((r22*x5261)));
evalcond[1]=((((-1.0)*x5264*x5266))+((r21*x5268))+(((-1.0)*r22*x5265)));
evalcond[2]=(((r02*x5261))+cj0+((r01*x5267))+(((-1.0)*x5262*x5265)));
evalcond[3]=((((-1.0)*x5263*x5265))+sj0+((r12*x5261))+((r11*x5267)));
evalcond[4]=((((-1.0)*x5263*x5266))+cj0+(((-1.0)*r12*x5265))+((r11*x5268)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5268))+(((-1.0)*r02*x5265))+(((-1.0)*x5262*x5266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5269 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5269.valid){
continue;
}
CheckValue<IkReal> x5270=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5269.value)+(((1.5707963267949)*(x5270.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5271=IKcos(j4);
IkReal x5272=IKsin(j4);
IkReal x5273=(cj5*r00);
IkReal x5274=(cj5*r10);
IkReal x5275=(cj5*r20);
IkReal x5276=((1.0)*x5271);
IkReal x5277=((1.0)*x5272);
IkReal x5278=(sj5*x5271);
IkReal x5279=(sj5*x5272);
evalcond[0]=(((r22*x5272))+((r21*x5278))+(((-1.0)*x5275*x5276)));
evalcond[1]=(((r21*x5279))+(((-1.0)*x5275*x5277))+(((-1.0)*r22*x5276)));
evalcond[2]=(((r02*x5272))+cj0+((r01*x5278))+(((-1.0)*x5273*x5276)));
evalcond[3]=(sj0+(((-1.0)*x5274*x5276))+((r11*x5278))+((r12*x5272)));
evalcond[4]=(cj0+(((-1.0)*x5274*x5277))+(((-1.0)*r12*x5276))+((r11*x5279)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5279))+(((-1.0)*r02*x5276))+(((-1.0)*x5273*x5277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5280=IKcos(j0);
IkReal x5281=IKsin(j0);
evalcond[0]=((((-0.03275)*x5280))+(((-1.0)*px))+(((-0.10915)*x5281)));
evalcond[1]=((((-0.03275)*x5281))+(((-1.0)*py))+(((0.10915)*x5280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5282=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5282;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5282);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5283=((1.0)*cj5);
IkReal x5284=((((-1.0)*r01*x5283))+(((-1.0)*r00*sj5)));
j4eval[0]=x5284;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5283)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5285=((1.0)*cj5);
IkReal x5286=((((-1.0)*r01*x5285))+(((-1.0)*r00*sj5)));
j4eval[0]=x5286;
j4eval[1]=IKsign(x5286);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5285))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5287=((1.0)*cj5);
CheckValue<IkReal> x5288 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5287)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5288.valid){
continue;
}
CheckValue<IkReal> x5289=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5287))+(((-1.0)*r00*sj5)))),-1);
if(!x5289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5288.value)+(((1.5707963267949)*(x5289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5290=IKcos(j4);
IkReal x5291=IKsin(j4);
IkReal x5292=((1.0)*sj0);
IkReal x5293=(cj5*r00);
IkReal x5294=(cj5*r10);
IkReal x5295=(cj5*r20);
IkReal x5296=((1.0)*x5290);
IkReal x5297=((1.0)*x5291);
IkReal x5298=(sj5*x5290);
IkReal x5299=(sj5*x5291);
evalcond[0]=(((r22*x5291))+((r21*x5298))+(((-1.0)*x5295*x5296)));
evalcond[1]=((((-1.0)*r22*x5296))+((r21*x5299))+(((-1.0)*x5295*x5297)));
evalcond[2]=(cj0+(((-1.0)*r12*x5296))+(((-1.0)*x5294*x5297))+((r11*x5299)));
evalcond[3]=(((r02*x5291))+((r01*x5298))+(((-1.0)*x5293*x5296))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5291))+(((-1.0)*x5292))+(((-1.0)*x5294*x5296))+((r11*x5298)));
evalcond[5]=((((-1.0)*x5292))+((r01*x5299))+(((-1.0)*x5293*x5297))+(((-1.0)*r02*x5296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5300=((1.0)*cj5);
CheckValue<IkReal> x5301 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5300)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5301.valid){
continue;
}
CheckValue<IkReal> x5302=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5300)))),-1);
if(!x5302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5301.value)+(((1.5707963267949)*(x5302.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5303=IKcos(j4);
IkReal x5304=IKsin(j4);
IkReal x5305=((1.0)*sj0);
IkReal x5306=(cj5*r00);
IkReal x5307=(cj5*r10);
IkReal x5308=(cj5*r20);
IkReal x5309=((1.0)*x5303);
IkReal x5310=((1.0)*x5304);
IkReal x5311=(sj5*x5303);
IkReal x5312=(sj5*x5304);
evalcond[0]=(((r21*x5311))+((r22*x5304))+(((-1.0)*x5308*x5309)));
evalcond[1]=((((-1.0)*r22*x5309))+((r21*x5312))+(((-1.0)*x5308*x5310)));
evalcond[2]=(cj0+(((-1.0)*r12*x5309))+((r11*x5312))+(((-1.0)*x5307*x5310)));
evalcond[3]=(((r01*x5311))+(((-1.0)*x5306*x5309))+((r02*x5304))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5305))+((r12*x5304))+((r11*x5311))+(((-1.0)*x5307*x5309)));
evalcond[5]=((((-1.0)*x5306*x5310))+((r01*x5312))+(((-1.0)*x5305))+(((-1.0)*r02*x5309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5313 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5313.valid){
continue;
}
CheckValue<IkReal> x5314=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5313.value)+(((1.5707963267949)*(x5314.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5315=IKcos(j4);
IkReal x5316=IKsin(j4);
IkReal x5317=((1.0)*sj0);
IkReal x5318=(cj5*r00);
IkReal x5319=(cj5*r10);
IkReal x5320=(cj5*r20);
IkReal x5321=((1.0)*x5315);
IkReal x5322=((1.0)*x5316);
IkReal x5323=(sj5*x5315);
IkReal x5324=(sj5*x5316);
evalcond[0]=(((r22*x5316))+((r21*x5323))+(((-1.0)*x5320*x5321)));
evalcond[1]=((((-1.0)*r22*x5321))+((r21*x5324))+(((-1.0)*x5320*x5322)));
evalcond[2]=(((r11*x5324))+cj0+(((-1.0)*r12*x5321))+(((-1.0)*x5319*x5322)));
evalcond[3]=((((-1.0)*x5318*x5321))+((r02*x5316))+((r01*x5323))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5317))+((r11*x5323))+((r12*x5316))+(((-1.0)*x5319*x5321)));
evalcond[5]=((((-1.0)*x5318*x5322))+(((-1.0)*x5317))+(((-1.0)*r02*x5321))+((r01*x5324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5325=((1.0)*sj5);
IkReal x5326=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5326))+(((-1.0)*r10*x5325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5325))+(((-1.0)*r01*x5326)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5326))+(((-1.0)*r10*x5325))))+IKsqr(((((-1.0)*r00*x5325))+(((-1.0)*r01*x5326))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5326))+(((-1.0)*r10*x5325))), ((((-1.0)*r00*x5325))+(((-1.0)*r01*x5326))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5327=IKsin(j0);
IkReal x5328=IKcos(j0);
IkReal x5329=(r00*sj5);
IkReal x5330=(r10*sj5);
IkReal x5331=(cj5*r11);
IkReal x5332=(cj5*r01);
evalcond[0]=(x5328+x5329+x5332);
evalcond[1]=(x5327+x5331+x5330);
evalcond[2]=((((-1.0)*px))+(((-0.09465)*x5329))+(((-0.09465)*x5332))+(((-0.10915)*x5327)));
evalcond[3]=((((-1.0)*py))+(((0.10915)*x5328))+(((-0.09465)*x5331))+(((-0.09465)*x5330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5333=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5333;
j4eval[1]=IKsign(x5333);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5334=((1.0)*cj5);
IkReal x5335=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5334)));
j4eval[0]=x5335;
j4eval[1]=IKsign(x5335);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x5334))+((r01*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5336=cj5*cj5;
IkReal x5337=(r01*r11);
IkReal x5338=((1.0)*r00);
IkReal x5339=(r01*sj5);
IkReal x5340=((((-1.0)*x5337))+((x5336*x5337))+(((-1.0)*r10*x5336*x5338))+(((-1.0)*r02*r12))+((cj5*r10*x5339))+((cj5*r00*r11*sj5)));
j4eval[0]=x5340;
j4eval[1]=IKsign(x5340);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5339))+(((-1.0)*cj0*cj5*x5338))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5341=cj5*cj5;
IkReal x5342=(r01*r11);
IkReal x5343=(cj5*r00);
IkReal x5344=(r01*sj5);
CheckValue<IkReal> x5345=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5344))+(((-1.0)*r00*r10*x5341))+(((-1.0)*r02*r12))+((x5341*x5342))+((r11*sj5*x5343))+(((-1.0)*x5342)))),-1);
if(!x5345.valid){
continue;
}
CheckValue<IkReal> x5346 = IKatan2WithCheck(IkReal((((cj0*x5344))+(((-1.0)*cj0*x5343)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5345.value)))+(x5346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5347=IKcos(j4);
IkReal x5348=IKsin(j4);
IkReal x5349=(cj5*r00);
IkReal x5350=(r01*sj5);
IkReal x5351=(cj5*r10);
IkReal x5352=(cj5*r20);
IkReal x5353=((1.0)*x5347);
IkReal x5354=((1.0)*x5348);
IkReal x5355=(sj5*x5348);
IkReal x5356=(sj5*x5347);
evalcond[0]=(((x5347*x5350))+(((-1.0)*x5349*x5353))+((r02*x5348)));
evalcond[1]=((((-1.0)*x5351*x5353))+((r12*x5348))+((r11*x5356)));
evalcond[2]=((((-1.0)*x5352*x5354))+(((-1.0)*r22*x5353))+((r21*x5355)));
evalcond[3]=((-1.0)+(((-1.0)*x5352*x5353))+((r22*x5348))+((r21*x5356)));
evalcond[4]=(cj0+(((-1.0)*x5351*x5354))+((r11*x5355))+(((-1.0)*r12*x5353)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5353))+(((-1.0)*x5349*x5354))+((x5348*x5350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5357=((1.0)*cj5);
CheckValue<IkReal> x5358 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5357)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5358.valid){
continue;
}
CheckValue<IkReal> x5359=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5357)))),-1);
if(!x5359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5358.value)+(((1.5707963267949)*(x5359.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5360=IKcos(j4);
IkReal x5361=IKsin(j4);
IkReal x5362=(cj5*r00);
IkReal x5363=(r01*sj5);
IkReal x5364=(cj5*r10);
IkReal x5365=(cj5*r20);
IkReal x5366=((1.0)*x5360);
IkReal x5367=((1.0)*x5361);
IkReal x5368=(sj5*x5361);
IkReal x5369=(sj5*x5360);
evalcond[0]=(((r02*x5361))+((x5360*x5363))+(((-1.0)*x5362*x5366)));
evalcond[1]=(((r12*x5361))+(((-1.0)*x5364*x5366))+((r11*x5369)));
evalcond[2]=((((-1.0)*r22*x5366))+(((-1.0)*x5365*x5367))+((r21*x5368)));
evalcond[3]=((-1.0)+((r22*x5361))+(((-1.0)*x5365*x5366))+((r21*x5369)));
evalcond[4]=(cj0+(((-1.0)*x5364*x5367))+(((-1.0)*r12*x5366))+((r11*x5368)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5366))+(((-1.0)*x5362*x5367))+((x5361*x5363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5370=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5370.valid){
continue;
}
CheckValue<IkReal> x5371 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5370.value)))+(x5371.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5372=IKcos(j4);
IkReal x5373=IKsin(j4);
IkReal x5374=(cj5*r00);
IkReal x5375=(r01*sj5);
IkReal x5376=(cj5*r10);
IkReal x5377=(cj5*r20);
IkReal x5378=((1.0)*x5372);
IkReal x5379=((1.0)*x5373);
IkReal x5380=(sj5*x5373);
IkReal x5381=(sj5*x5372);
evalcond[0]=(((x5372*x5375))+((r02*x5373))+(((-1.0)*x5374*x5378)));
evalcond[1]=((((-1.0)*x5376*x5378))+((r11*x5381))+((r12*x5373)));
evalcond[2]=((((-1.0)*r22*x5378))+(((-1.0)*x5377*x5379))+((r21*x5380)));
evalcond[3]=((-1.0)+((r22*x5373))+(((-1.0)*x5377*x5378))+((r21*x5381)));
evalcond[4]=(cj0+(((-1.0)*r12*x5378))+(((-1.0)*x5376*x5379))+((r11*x5380)));
evalcond[5]=((((-1.0)*sj0))+((x5373*x5375))+(((-1.0)*r02*x5378))+(((-1.0)*x5374*x5379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5382=IKsin(j0);
IkReal x5383=IKcos(j0);
evalcond[0]=((((-0.10915)*x5382))+(((0.39225)*x5383))+(((-1.0)*px)));
evalcond[1]=((((0.39225)*x5382))+(((0.10915)*x5383))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5384=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5384;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5384);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5385=((1.0)*cj5);
IkReal x5386=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5385)));
j4eval[0]=x5386;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5385))))));
j4eval[2]=IKsign(x5386);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5387=((1.0)*cj5);
IkReal x5388=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5387)));
j4eval[0]=x5388;
j4eval[1]=IKsign(x5388);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5387))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5389=((1.0)*cj5);
CheckValue<IkReal> x5390=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5389)))),-1);
if(!x5390.valid){
continue;
}
CheckValue<IkReal> x5391 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5389))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5390.value)))+(x5391.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5392=IKcos(j4);
IkReal x5393=IKsin(j4);
IkReal x5394=((1.0)*sj0);
IkReal x5395=(cj5*r00);
IkReal x5396=(cj5*r10);
IkReal x5397=(cj5*r20);
IkReal x5398=((1.0)*x5392);
IkReal x5399=((1.0)*x5393);
IkReal x5400=(sj5*x5392);
IkReal x5401=(sj5*x5393);
evalcond[0]=(((r21*x5400))+((r22*x5393))+(((-1.0)*x5397*x5398)));
evalcond[1]=(((r21*x5401))+(((-1.0)*x5397*x5399))+(((-1.0)*r22*x5398)));
evalcond[2]=(cj0+(((-1.0)*r12*x5398))+((r11*x5401))+(((-1.0)*x5396*x5399)));
evalcond[3]=(((r02*x5393))+(((-1.0)*x5395*x5398))+((r01*x5400))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5393))+(((-1.0)*x5394))+((r11*x5400))+(((-1.0)*x5396*x5398)));
evalcond[5]=((((-1.0)*r02*x5398))+(((-1.0)*x5394))+(((-1.0)*x5395*x5399))+((r01*x5401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5402=((1.0)*cj5);
CheckValue<IkReal> x5403 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5402))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5403.valid){
continue;
}
CheckValue<IkReal> x5404=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5402))+(((-1.0)*r00*sj5)))),-1);
if(!x5404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5403.value)+(((1.5707963267949)*(x5404.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5405=IKcos(j4);
IkReal x5406=IKsin(j4);
IkReal x5407=((1.0)*sj0);
IkReal x5408=(cj5*r00);
IkReal x5409=(cj5*r10);
IkReal x5410=(cj5*r20);
IkReal x5411=((1.0)*x5405);
IkReal x5412=((1.0)*x5406);
IkReal x5413=(sj5*x5405);
IkReal x5414=(sj5*x5406);
evalcond[0]=(((r22*x5406))+(((-1.0)*x5410*x5411))+((r21*x5413)));
evalcond[1]=((((-1.0)*x5410*x5412))+(((-1.0)*r22*x5411))+((r21*x5414)));
evalcond[2]=(((r11*x5414))+cj0+(((-1.0)*r12*x5411))+(((-1.0)*x5409*x5412)));
evalcond[3]=(((r02*x5406))+((r01*x5413))+(((-1.0)*x5408*x5411))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5406))+((r11*x5413))+(((-1.0)*x5407))+(((-1.0)*x5409*x5411)));
evalcond[5]=((((-1.0)*r02*x5411))+(((-1.0)*x5407))+((r01*x5414))+(((-1.0)*x5408*x5412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5415 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5415.valid){
continue;
}
CheckValue<IkReal> x5416=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5415.value)+(((1.5707963267949)*(x5416.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5417=IKcos(j4);
IkReal x5418=IKsin(j4);
IkReal x5419=((1.0)*sj0);
IkReal x5420=(cj5*r00);
IkReal x5421=(cj5*r10);
IkReal x5422=(cj5*r20);
IkReal x5423=((1.0)*x5417);
IkReal x5424=((1.0)*x5418);
IkReal x5425=(sj5*x5417);
IkReal x5426=(sj5*x5418);
evalcond[0]=((((-1.0)*x5422*x5423))+((r22*x5418))+((r21*x5425)));
evalcond[1]=((((-1.0)*x5422*x5424))+((r21*x5426))+(((-1.0)*r22*x5423)));
evalcond[2]=(cj0+(((-1.0)*x5421*x5424))+((r11*x5426))+(((-1.0)*r12*x5423)));
evalcond[3]=(((r01*x5425))+((r02*x5418))+(((-1.0)*cj0))+(((-1.0)*x5420*x5423)));
evalcond[4]=((((-1.0)*x5421*x5423))+(((-1.0)*x5419))+((r12*x5418))+((r11*x5425)));
evalcond[5]=(((r01*x5426))+(((-1.0)*x5419))+(((-1.0)*r02*x5423))+(((-1.0)*x5420*x5424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5427=IKsin(j0);
IkReal x5428=IKcos(j0);
IkReal x5429=(r00*sj5);
IkReal x5430=(r10*sj5);
IkReal x5431=(cj5*r11);
IkReal x5432=(cj5*r01);
evalcond[0]=(x5429+x5432+(((-1.0)*x5428)));
evalcond[1]=(x5430+x5431+(((-1.0)*x5427)));
evalcond[2]=((((-0.10915)*x5427))+(((-0.09465)*x5432))+(((-1.0)*px))+(((-0.09465)*x5429)));
evalcond[3]=((((-0.09465)*x5430))+(((-0.09465)*x5431))+(((0.10915)*x5428))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5433=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5433;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5433);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5434=((1.0)*cj5);
IkReal x5435=((((-1.0)*r01*x5434))+(((-1.0)*r00*sj5)));
j4eval[0]=x5435;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5434))))));
j4eval[2]=IKsign(x5435);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5436=cj5*cj5;
IkReal x5437=(r01*r11);
IkReal x5438=((1.0)*r00);
IkReal x5439=(r01*sj5);
IkReal x5440=((((-1.0)*x5437))+(((-1.0)*r02*r12))+(((-1.0)*r10*x5436*x5438))+((x5436*x5437))+((cj5*r10*x5439))+((cj5*r00*r11*sj5)));
j4eval[0]=x5440;
j4eval[1]=IKsign(x5440);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5438))+((cj0*x5439))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5441=cj5*cj5;
IkReal x5442=(r01*r11);
IkReal x5443=(cj5*r00);
IkReal x5444=(r01*sj5);
CheckValue<IkReal> x5445=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5442))+((x5441*x5442))+(((-1.0)*r02*r12))+((cj5*r10*x5444))+(((-1.0)*r00*r10*x5441))+((r11*sj5*x5443)))),-1);
if(!x5445.valid){
continue;
}
CheckValue<IkReal> x5446 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5443))+((cj0*x5444)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5445.value)))+(x5446.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5447=IKcos(j4);
IkReal x5448=IKsin(j4);
IkReal x5449=(cj5*r00);
IkReal x5450=(r01*sj5);
IkReal x5451=(cj5*r10);
IkReal x5452=(cj5*r20);
IkReal x5453=((1.0)*x5447);
IkReal x5454=((1.0)*x5448);
IkReal x5455=(sj5*x5448);
IkReal x5456=(sj5*x5447);
evalcond[0]=(((x5447*x5450))+(((-1.0)*x5449*x5453))+((r02*x5448)));
evalcond[1]=((((-1.0)*x5451*x5453))+((r12*x5448))+((r11*x5456)));
evalcond[2]=((((-1.0)*x5452*x5454))+((r21*x5455))+(((-1.0)*r22*x5453)));
evalcond[3]=((1.0)+(((-1.0)*x5452*x5453))+((r21*x5456))+((r22*x5448)));
evalcond[4]=((((-1.0)*r12*x5453))+(((-1.0)*x5451*x5454))+cj0+((r11*x5455)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5453))+((x5448*x5450))+(((-1.0)*x5449*x5454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5457=((1.0)*cj5);
CheckValue<IkReal> x5458=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5457)))),-1);
if(!x5458.valid){
continue;
}
CheckValue<IkReal> x5459 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5457)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5458.value)))+(x5459.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5460=IKcos(j4);
IkReal x5461=IKsin(j4);
IkReal x5462=(cj5*r00);
IkReal x5463=(r01*sj5);
IkReal x5464=(cj5*r10);
IkReal x5465=(cj5*r20);
IkReal x5466=((1.0)*x5460);
IkReal x5467=((1.0)*x5461);
IkReal x5468=(sj5*x5461);
IkReal x5469=(sj5*x5460);
evalcond[0]=(((r02*x5461))+((x5460*x5463))+(((-1.0)*x5462*x5466)));
evalcond[1]=((((-1.0)*x5464*x5466))+((r11*x5469))+((r12*x5461)));
evalcond[2]=(((r21*x5468))+(((-1.0)*x5465*x5467))+(((-1.0)*r22*x5466)));
evalcond[3]=((1.0)+((r22*x5461))+((r21*x5469))+(((-1.0)*x5465*x5466)));
evalcond[4]=((((-1.0)*x5464*x5467))+cj0+((r11*x5468))+(((-1.0)*r12*x5466)));
evalcond[5]=((((-1.0)*sj0))+((x5461*x5463))+(((-1.0)*r02*x5466))+(((-1.0)*x5462*x5467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5470 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5470.valid){
continue;
}
CheckValue<IkReal> x5471=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5470.value)+(((1.5707963267949)*(x5471.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5472=IKcos(j4);
IkReal x5473=IKsin(j4);
IkReal x5474=(cj5*r00);
IkReal x5475=(r01*sj5);
IkReal x5476=(cj5*r10);
IkReal x5477=(cj5*r20);
IkReal x5478=((1.0)*x5472);
IkReal x5479=((1.0)*x5473);
IkReal x5480=(sj5*x5473);
IkReal x5481=(sj5*x5472);
evalcond[0]=(((x5472*x5475))+(((-1.0)*x5474*x5478))+((r02*x5473)));
evalcond[1]=(((r11*x5481))+(((-1.0)*x5476*x5478))+((r12*x5473)));
evalcond[2]=((((-1.0)*x5477*x5479))+((r21*x5480))+(((-1.0)*r22*x5478)));
evalcond[3]=((1.0)+(((-1.0)*x5477*x5478))+((r21*x5481))+((r22*x5473)));
evalcond[4]=(cj0+((r11*x5480))+(((-1.0)*x5476*x5479))+(((-1.0)*r12*x5478)));
evalcond[5]=((((-1.0)*sj0))+((x5473*x5475))+(((-1.0)*x5474*x5479))+(((-1.0)*r02*x5478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5482=IKcos(j0);
IkReal x5483=IKsin(j0);
evalcond[0]=((((-0.39225)*x5482))+(((-0.10915)*x5483))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x5482))+(((-0.39225)*x5483))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5484=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5484;
j4eval[1]=IKsign(x5484);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5485=((1.0)*cj5);
IkReal x5486=((((-1.0)*r11*x5485))+(((-1.0)*r10*sj5)));
j4eval[0]=x5486;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5485)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5486);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5487=cj5*cj5;
IkReal x5488=((1.0)*r20);
IkReal x5489=(r01*r21);
IkReal x5490=(r21*sj5);
IkReal x5491=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5487*x5488))+((cj5*r00*x5490))+((x5487*x5489))+(((-1.0)*x5489)));
j4eval[0]=x5491;
j4eval[1]=((IKabs((((cj0*x5490))+(((-1.0)*cj0*cj5*x5488)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5491);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5492=cj5*cj5;
IkReal x5493=((1.0)*r20);
IkReal x5494=(r01*r21);
IkReal x5495=(r21*sj5);
CheckValue<IkReal> x5496=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5492*x5494))+((cj5*r00*x5495))+(((-1.0)*x5494))+(((-1.0)*r00*x5492*x5493)))),-1);
if(!x5496.valid){
continue;
}
CheckValue<IkReal> x5497 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5495))+(((-1.0)*cj0*cj5*x5493)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5496.value)))+(x5497.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5498=IKcos(j4);
IkReal x5499=IKsin(j4);
IkReal x5500=(cj5*r00);
IkReal x5501=(cj5*r10);
IkReal x5502=(cj5*r20);
IkReal x5503=((1.0)*x5498);
IkReal x5504=((1.0)*x5499);
IkReal x5505=(sj5*x5498);
IkReal x5506=(sj5*x5499);
evalcond[0]=((((-1.0)*x5502*x5503))+((r21*x5505))+((r22*x5499)));
evalcond[1]=((((-1.0)*x5502*x5504))+(((-1.0)*r22*x5503))+((r21*x5506)));
evalcond[2]=(cj0+(((-1.0)*x5500*x5503))+((r01*x5505))+((r02*x5499)));
evalcond[3]=(sj0+(((-1.0)*x5501*x5503))+((r12*x5499))+((r11*x5505)));
evalcond[4]=(cj0+(((-1.0)*x5501*x5504))+(((-1.0)*r12*x5503))+((r11*x5506)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5500*x5504))+(((-1.0)*r02*x5503))+((r01*x5506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5507=((1.0)*cj5);
CheckValue<IkReal> x5508 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5507)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5508.valid){
continue;
}
CheckValue<IkReal> x5509=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5507)))),-1);
if(!x5509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5508.value)+(((1.5707963267949)*(x5509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5510=IKcos(j4);
IkReal x5511=IKsin(j4);
IkReal x5512=(cj5*r00);
IkReal x5513=(cj5*r10);
IkReal x5514=(cj5*r20);
IkReal x5515=((1.0)*x5510);
IkReal x5516=((1.0)*x5511);
IkReal x5517=(sj5*x5510);
IkReal x5518=(sj5*x5511);
evalcond[0]=(((r21*x5517))+((r22*x5511))+(((-1.0)*x5514*x5515)));
evalcond[1]=((((-1.0)*r22*x5515))+((r21*x5518))+(((-1.0)*x5514*x5516)));
evalcond[2]=((((-1.0)*x5512*x5515))+cj0+((r02*x5511))+((r01*x5517)));
evalcond[3]=(sj0+(((-1.0)*x5513*x5515))+((r12*x5511))+((r11*x5517)));
evalcond[4]=((((-1.0)*x5513*x5516))+cj0+(((-1.0)*r12*x5515))+((r11*x5518)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5512*x5516))+(((-1.0)*r02*x5515))+((r01*x5518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5519 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5519.valid){
continue;
}
CheckValue<IkReal> x5520=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5519.value)+(((1.5707963267949)*(x5520.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5521=IKcos(j4);
IkReal x5522=IKsin(j4);
IkReal x5523=(cj5*r00);
IkReal x5524=(cj5*r10);
IkReal x5525=(cj5*r20);
IkReal x5526=((1.0)*x5521);
IkReal x5527=((1.0)*x5522);
IkReal x5528=(sj5*x5521);
IkReal x5529=(sj5*x5522);
evalcond[0]=(((r22*x5522))+((r21*x5528))+(((-1.0)*x5525*x5526)));
evalcond[1]=((((-1.0)*r22*x5526))+((r21*x5529))+(((-1.0)*x5525*x5527)));
evalcond[2]=(((r02*x5522))+(((-1.0)*x5523*x5526))+cj0+((r01*x5528)));
evalcond[3]=(sj0+((r11*x5528))+(((-1.0)*x5524*x5526))+((r12*x5522)));
evalcond[4]=(cj0+((r11*x5529))+(((-1.0)*x5524*x5527))+(((-1.0)*r12*x5526)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5523*x5527))+(((-1.0)*r02*x5526))+((r01*x5529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5530=cj1*cj1;
IkReal x5531=(cj1*sj1);
IkReal x5532=(cj5*r01);
IkReal x5533=(r00*sj5);
IkReal x5534=(r10*sj5);
IkReal x5535=(cj5*r11);
IkReal x5536=(cj1*sj2);
IkReal x5537=((20000.0)*py);
IkReal x5538=(cj2*sj1);
IkReal x5539=((1893.0)*x5538);
IkReal x5540=(sj2*x5530);
CheckValue<IkReal> x5541=IKPowWithIntegerCheck(((((-8500.0)*cj2*x5531))+(((-15690.0)*x5531*(cj2*cj2)))+(((7845.0)*x5531))+(((-8500.0)*x5540))+(((-15690.0)*cj2*x5540))+(((7845.0)*cj2*sj2))),-1);
if(!x5541.valid){
continue;
}
CheckValue<IkReal> x5542=IKPowWithIntegerCheck(((((-1.0)*x5538))+(((-1.0)*x5536))),-1);
if(!x5542.valid){
continue;
}
if( IKabs(((x5541.value)*(((((-1.0)*x5535*x5539))+(((-1.0)*x5534*x5539))+(((-1.0)*x5536*x5537))+(((-1.0)*x5537*x5538))+(((-1893.0)*x5534*x5536))+(((2183.0)*x5532))+(((2183.0)*x5533))+(((-1893.0)*x5535*x5536)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5542.value)*(((((-1.0)*x5533))+(((-1.0)*x5532)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5541.value)*(((((-1.0)*x5535*x5539))+(((-1.0)*x5534*x5539))+(((-1.0)*x5536*x5537))+(((-1.0)*x5537*x5538))+(((-1893.0)*x5534*x5536))+(((2183.0)*x5532))+(((2183.0)*x5533))+(((-1893.0)*x5535*x5536))))))+IKsqr(((x5542.value)*(((((-1.0)*x5533))+(((-1.0)*x5532))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5541.value)*(((((-1.0)*x5535*x5539))+(((-1.0)*x5534*x5539))+(((-1.0)*x5536*x5537))+(((-1.0)*x5537*x5538))+(((-1893.0)*x5534*x5536))+(((2183.0)*x5532))+(((2183.0)*x5533))+(((-1893.0)*x5535*x5536))))), ((x5542.value)*(((((-1.0)*x5533))+(((-1.0)*x5532))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5543=IKcos(j0);
IkReal x5544=IKsin(j0);
IkReal x5545=(cj5*r01);
IkReal x5546=((1.0)*cj1);
IkReal x5547=((0.39225)*sj1);
IkReal x5548=(cj5*r11);
IkReal x5549=(r00*sj5);
IkReal x5550=((0.39225)*cj2);
IkReal x5551=(r10*sj5);
IkReal x5552=(sj2*x5543);
IkReal x5553=(sj2*x5544);
IkReal x5554=(cj1*x5543);
IkReal x5555=((1.0)*cj2*sj1);
IkReal x5556=(cj1*x5544);
evalcond[0]=((((-1.0)*x5543*x5555))+x5549+x5545+(((-1.0)*x5546*x5552)));
evalcond[1]=(x5548+x5551+(((-1.0)*x5544*x5555))+(((-1.0)*x5546*x5553)));
evalcond[2]=((((-0.10915)*x5544))+(((-0.09465)*x5549))+(((-0.09465)*x5545))+(((0.425)*x5554))+(((-1.0)*px))+((x5550*x5554))+(((-1.0)*x5547*x5552)));
evalcond[3]=((((0.10915)*x5543))+(((-0.09465)*x5548))+(((-0.09465)*x5551))+(((0.425)*x5556))+(((-1.0)*py))+((x5550*x5556))+(((-1.0)*x5547*x5553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5557=((1.0)*cj5);
IkReal x5558=((((-1.0)*r01*x5557))+(((-1.0)*r00*sj5)));
j4eval[0]=x5558;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5557)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5558);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5559=((1.0)*cj5);
IkReal x5560=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5559)));
j4eval[0]=x5560;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5559))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x5560);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5561=((1.0)*sj0);
IkReal x5562=((1.0)*cj0);
IkReal x5563=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5563;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x5562))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5561)))))+(IKabs(((((-1.0)*r12*x5561))+(((-1.0)*r02*x5562))))));
j4eval[2]=IKsign(x5563);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5564=((-1.0)*r20);
IkReal x5566 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5566)==0){
continue;
}
IkReal x5565=pow(x5566,-0.5);
CheckValue<IkReal> x5567 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5564),IKFAST_ATAN2_MAGTHRESH);
if(!x5567.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5567.value));
IkReal gconst115=(r21*x5565);
IkReal gconst116=(x5564*x5565);
CheckValue<IkReal> x5568 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5568.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5568.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5569=((-1.0)*r20);
IkReal x5570=x5565;
CheckValue<IkReal> x5572 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5569),IKFAST_ATAN2_MAGTHRESH);
if(!x5572.valid){
continue;
}
IkReal x5571=((-1.0)*(x5572.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5571;
IkReal gconst114=x5571;
IkReal gconst115=(r21*x5570);
IkReal gconst116=(x5569*x5570);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5573=((-1.0)*r20);
IkReal x5574=x5565;
CheckValue<IkReal> x5576 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5573),IKFAST_ATAN2_MAGTHRESH);
if(!x5576.valid){
continue;
}
IkReal x5575=((-1.0)*(x5576.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5575;
IkReal gconst114=x5575;
IkReal gconst115=(r21*x5574);
IkReal gconst116=(x5573*x5574);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5577=((-1.0)*r20);
IkReal x5578=x5565;
CheckValue<IkReal> x5580 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5577),IKFAST_ATAN2_MAGTHRESH);
if(!x5580.valid){
continue;
}
IkReal x5579=((-1.0)*(x5580.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5579;
IkReal gconst114=x5579;
IkReal gconst115=(r21*x5578);
IkReal gconst116=(x5577*x5578);
IkReal x5581=((1.0)*(r22*r22));
CheckValue<IkReal> x5585=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5581))),-1);
if(!x5585.valid){
continue;
}
IkReal x5582=x5585.value;
IkReal x5583=((1.0)*x5582);
IkReal x5584=((((-1.0)*x5583*(r20*r20*r20*r20)))+(((-2.0)*x5582*(r20*r20)*(r21*r21)))+(((-1.0)*x5583*(r21*r21*r21*r21)))+(((-1.0)*x5581)));
j4eval[0]=x5584;
j4eval[1]=IKsign(x5584);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5586=(cj2*sj1);
IkReal x5587=(gconst115*r21);
IkReal x5588=(cj1*sj2);
IkReal x5589=((1.0)*gconst116*r20);
CheckValue<IkReal> x5590=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x5587))+(((-1.0)*(x5587*x5587)))+(((-1.0)*gconst116*r20*x5589))+(((-1.0)*(r22*r22))))),-1);
if(!x5590.valid){
continue;
}
CheckValue<IkReal> x5591 = IKatan2WithCheck(IkReal((((r22*x5588))+((r22*x5586)))),IkReal(((((-1.0)*x5586*x5589))+(((-1.0)*x5588*x5589))+((x5586*x5587))+((x5587*x5588)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5590.value)))+(x5591.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5592=IKsin(j4);
IkReal x5593=IKcos(j4);
IkReal x5594=(sj1*sj2);
IkReal x5595=((1.0)*x5593);
IkReal x5596=((1.0)*cj1*cj2);
IkReal x5597=(gconst115*x5592);
IkReal x5598=(gconst115*x5593);
IkReal x5599=((1.0)*gconst116*x5592);
evalcond[0]=(((r21*x5597))+(((-1.0)*r20*x5599))+(((-1.0)*r22*x5595)));
evalcond[1]=((((-1.0)*r12*x5595))+cj0+((r11*x5597))+(((-1.0)*r10*x5599)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5595))+(((-1.0)*r00*x5599))+((r01*x5597)));
evalcond[3]=(((r21*x5598))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5595))+((r22*x5592)));
evalcond[4]=((((-1.0)*cj0*x5596))+((cj0*x5594))+((r02*x5592))+(((-1.0)*gconst116*r00*x5595))+((r01*x5598)));
evalcond[5]=(((sj0*x5594))+((r11*x5598))+((r12*x5592))+(((-1.0)*gconst116*r10*x5595))+(((-1.0)*sj0*x5596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5600=((1.0)*gconst116);
CheckValue<IkReal> x5601 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5601.valid){
continue;
}
CheckValue<IkReal> x5602=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5600)))),-1);
if(!x5602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5601.value)+(((1.5707963267949)*(x5602.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5603=IKsin(j4);
IkReal x5604=IKcos(j4);
IkReal x5605=(sj1*sj2);
IkReal x5606=((1.0)*x5604);
IkReal x5607=((1.0)*cj1*cj2);
IkReal x5608=(gconst115*x5603);
IkReal x5609=(gconst115*x5604);
IkReal x5610=((1.0)*gconst116*x5603);
evalcond[0]=((((-1.0)*r22*x5606))+((r21*x5608))+(((-1.0)*r20*x5610)));
evalcond[1]=(cj0+(((-1.0)*r10*x5610))+(((-1.0)*r12*x5606))+((r11*x5608)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5610))+((r01*x5608))+(((-1.0)*r02*x5606)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5606))+((r21*x5609))+((r22*x5603)));
evalcond[4]=(((r02*x5603))+(((-1.0)*cj0*x5607))+((r01*x5609))+(((-1.0)*gconst116*r00*x5606))+((cj0*x5605)));
evalcond[5]=(((sj0*x5605))+((r12*x5603))+(((-1.0)*gconst116*r10*x5606))+(((-1.0)*sj0*x5607))+((r11*x5609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5611=((1.0)*gconst116);
CheckValue<IkReal> x5612 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5611))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5612.valid){
continue;
}
CheckValue<IkReal> x5613=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5611))+(((-1.0)*gconst115*r00)))),-1);
if(!x5613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5612.value)+(((1.5707963267949)*(x5613.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5614=IKsin(j4);
IkReal x5615=IKcos(j4);
IkReal x5616=(sj1*sj2);
IkReal x5617=((1.0)*x5615);
IkReal x5618=((1.0)*cj1*cj2);
IkReal x5619=(gconst115*x5614);
IkReal x5620=(gconst115*x5615);
IkReal x5621=((1.0)*gconst116*x5614);
evalcond[0]=((((-1.0)*r22*x5617))+((r21*x5619))+(((-1.0)*r20*x5621)));
evalcond[1]=(cj0+(((-1.0)*r10*x5621))+(((-1.0)*r12*x5617))+((r11*x5619)));
evalcond[2]=((((-1.0)*r00*x5621))+(((-1.0)*sj0))+((r01*x5619))+(((-1.0)*r02*x5617)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x5617))+((cj1*sj2))+((r21*x5620))+((r22*x5614)));
evalcond[4]=(((cj0*x5616))+(((-1.0)*cj0*x5618))+((r02*x5614))+((r01*x5620))+(((-1.0)*gconst116*r00*x5617)));
evalcond[5]=(((sj0*x5616))+(((-1.0)*gconst116*r10*x5617))+((r12*x5614))+(((-1.0)*sj0*x5618))+((r11*x5620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5622=((-1.0)*r21);
IkReal x5624 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5624)==0){
continue;
}
IkReal x5623=pow(x5624,-0.5);
CheckValue<IkReal> x5625 = IKatan2WithCheck(IkReal(x5622),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5625.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5625.value))));
IkReal gconst118=(x5622*x5623);
IkReal gconst119=((1.0)*r20*x5623);
CheckValue<IkReal> x5626 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5626.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5626.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5627=((-1.0)*r21);
CheckValue<IkReal> x5630 = IKatan2WithCheck(IkReal(x5627),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5630.valid){
continue;
}
IkReal x5628=((1.0)*(x5630.value));
IkReal x5629=x5623;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5628)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5628)));
IkReal gconst118=(x5627*x5629);
IkReal gconst119=((1.0)*r20*x5629);
IkReal x5631=r22*r22;
IkReal x5632=((1.0)*x5631);
CheckValue<IkReal> x5636=IKPowWithIntegerCheck(((-1.0)+x5631),-1);
if(!x5636.valid){
continue;
}
IkReal x5633=x5636.value;
if((((1.0)+(((-1.0)*x5632)))) < -0.00001)
continue;
IkReal x5634=IKsqrt(((1.0)+(((-1.0)*x5632))));
IkReal x5635=(cj0*x5633*x5634);
j4eval[0]=((IKabs(((((-1.0)*x5632*x5635))+x5635)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5637=((-1.0)*r21);
CheckValue<IkReal> x5640 = IKatan2WithCheck(IkReal(x5637),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5640.valid){
continue;
}
IkReal x5638=((1.0)*(x5640.value));
IkReal x5639=x5623;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5638)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5638)));
IkReal gconst118=(x5637*x5639);
IkReal gconst119=((1.0)*r20*x5639);
IkReal x5641=r22*r22;
IkReal x5642=((1.0)*x5641);
CheckValue<IkReal> x5646=IKPowWithIntegerCheck(((-1.0)+x5641),-1);
if(!x5646.valid){
continue;
}
IkReal x5643=x5646.value;
if((((1.0)+(((-1.0)*x5642)))) < -0.00001)
continue;
IkReal x5644=IKsqrt(((1.0)+(((-1.0)*x5642))));
IkReal x5645=(sj0*x5643*x5644);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5645+(((-1.0)*x5642*x5645))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5647=((-1.0)*r21);
CheckValue<IkReal> x5650 = IKatan2WithCheck(IkReal(x5647),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5650.valid){
continue;
}
IkReal x5648=((1.0)*(x5650.value));
IkReal x5649=x5623;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5648)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5648)));
IkReal gconst118=(x5647*x5649);
IkReal gconst119=((1.0)*r20*x5649);
IkReal x5651=r22*r22;
IkReal x5652=(r12*sj0);
IkReal x5653=(cj0*r02);
CheckValue<IkReal> x5657=IKPowWithIntegerCheck(((-1.0)+x5651),-1);
if(!x5657.valid){
continue;
}
IkReal x5654=x5657.value;
if((((1.0)+(((-1.0)*x5651)))) < -0.00001)
continue;
IkReal x5655=IKsqrt(((1.0)+(((-1.0)*x5651))));
IkReal x5656=(r22*x5654*x5655);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5652))+(((-1.0)*x5653)))))+(IKabs((((x5652*x5656))+((x5653*x5656))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5658=((1.0)*sj0);
IkReal x5659=((1.0)*gconst118);
CheckValue<IkReal> x5660 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5658))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5659))+(((-1.0)*gconst118*r11*x5658))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5660.valid){
continue;
}
CheckValue<IkReal> x5661=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5659)))),-1);
if(!x5661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5660.value)+(((1.5707963267949)*(x5661.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5662=IKsin(j4);
IkReal x5663=IKcos(j4);
IkReal x5664=(gconst118*r01);
IkReal x5665=(sj1*sj2);
IkReal x5666=(gconst119*r20);
IkReal x5667=(gconst119*r10);
IkReal x5668=(gconst119*r00);
IkReal x5669=(gconst118*r21);
IkReal x5670=(gconst118*r11);
IkReal x5671=((1.0)*x5663);
IkReal x5672=((1.0)*cj1*cj2);
IkReal x5673=((1.0)*x5662);
evalcond[0]=((((-1.0)*x5666*x5673))+(((-1.0)*r22*x5671))+((x5662*x5669)));
evalcond[1]=(cj0+(((-1.0)*x5667*x5673))+(((-1.0)*r12*x5671))+((x5662*x5670)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5668*x5673))+((x5662*x5664))+(((-1.0)*r02*x5671)));
evalcond[3]=(((cj2*sj1))+((r22*x5662))+(((-1.0)*x5666*x5671))+((cj1*sj2))+((x5663*x5669)));
evalcond[4]=(((r02*x5662))+(((-1.0)*cj0*x5672))+(((-1.0)*x5668*x5671))+((x5663*x5664))+((cj0*x5665)));
evalcond[5]=((((-1.0)*x5667*x5671))+((sj0*x5665))+((r12*x5662))+(((-1.0)*sj0*x5672))+((x5663*x5670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5674=((1.0)*gconst119);
CheckValue<IkReal> x5675 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5674))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5675.valid){
continue;
}
CheckValue<IkReal> x5676=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5674)))),-1);
if(!x5676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5675.value)+(((1.5707963267949)*(x5676.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5677=IKsin(j4);
IkReal x5678=IKcos(j4);
IkReal x5679=(gconst118*r01);
IkReal x5680=(sj1*sj2);
IkReal x5681=(gconst119*r20);
IkReal x5682=(gconst119*r10);
IkReal x5683=(gconst119*r00);
IkReal x5684=(gconst118*r21);
IkReal x5685=(gconst118*r11);
IkReal x5686=((1.0)*x5678);
IkReal x5687=((1.0)*cj1*cj2);
IkReal x5688=((1.0)*x5677);
evalcond[0]=((((-1.0)*x5681*x5688))+(((-1.0)*r22*x5686))+((x5677*x5684)));
evalcond[1]=(cj0+(((-1.0)*x5682*x5688))+(((-1.0)*r12*x5686))+((x5677*x5685)));
evalcond[2]=((((-1.0)*r02*x5686))+(((-1.0)*sj0))+((x5677*x5679))+(((-1.0)*x5683*x5688)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5681*x5686))+((cj1*sj2))+((x5678*x5684))+((r22*x5677)));
evalcond[4]=(((r02*x5677))+(((-1.0)*cj0*x5687))+(((-1.0)*x5683*x5686))+((x5678*x5679))+((cj0*x5680)));
evalcond[5]=((((-1.0)*sj0*x5687))+((sj0*x5680))+((x5678*x5685))+((r12*x5677))+(((-1.0)*x5682*x5686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5689=((1.0)*gconst119);
CheckValue<IkReal> x5690=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5689)))),-1);
if(!x5690.valid){
continue;
}
CheckValue<IkReal> x5691 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5689)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5690.value)))+(x5691.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5692=IKsin(j4);
IkReal x5693=IKcos(j4);
IkReal x5694=(gconst118*r01);
IkReal x5695=(sj1*sj2);
IkReal x5696=(gconst119*r20);
IkReal x5697=(gconst119*r10);
IkReal x5698=(gconst119*r00);
IkReal x5699=(gconst118*r21);
IkReal x5700=(gconst118*r11);
IkReal x5701=((1.0)*x5693);
IkReal x5702=((1.0)*cj1*cj2);
IkReal x5703=((1.0)*x5692);
evalcond[0]=(((x5692*x5699))+(((-1.0)*r22*x5701))+(((-1.0)*x5696*x5703)));
evalcond[1]=((((-1.0)*r12*x5701))+(((-1.0)*x5697*x5703))+cj0+((x5692*x5700)));
evalcond[2]=((((-1.0)*sj0))+((x5692*x5694))+(((-1.0)*x5698*x5703))+(((-1.0)*r02*x5701)));
evalcond[3]=(((cj2*sj1))+((r22*x5692))+((x5693*x5699))+((cj1*sj2))+(((-1.0)*x5696*x5701)));
evalcond[4]=(((x5693*x5694))+((r02*x5692))+(((-1.0)*x5698*x5701))+(((-1.0)*cj0*x5702))+((cj0*x5695)));
evalcond[5]=((((-1.0)*x5697*x5701))+((x5693*x5700))+((sj0*x5695))+(((-1.0)*sj0*x5702))+((r12*x5692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5704=((-1.0)*r10);
IkReal x5706 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5706)==0){
continue;
}
IkReal x5705=pow(x5706,-0.5);
CheckValue<IkReal> x5707 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5704),IKFAST_ATAN2_MAGTHRESH);
if(!x5707.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5707.value));
IkReal gconst121=(r11*x5705);
IkReal gconst122=(x5704*x5705);
CheckValue<IkReal> x5708 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5708.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5708.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5709=((-1.0)*r10);
IkReal x5710=x5705;
CheckValue<IkReal> x5712 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5709),IKFAST_ATAN2_MAGTHRESH);
if(!x5712.valid){
continue;
}
IkReal x5711=((-1.0)*(x5712.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5711;
IkReal gconst120=x5711;
IkReal gconst121=(r11*x5710);
IkReal gconst122=(x5709*x5710);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5713=((1.0)*sj0);
IkReal x5714=((1.0)*gconst121);
CheckValue<IkReal> x5715 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5713)))),IkReal((((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x5713))+(((-1.0)*cj0*r01*x5714))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5715.valid){
continue;
}
CheckValue<IkReal> x5716=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x5714)))),-1);
if(!x5716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5715.value)+(((1.5707963267949)*(x5716.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5717=IKsin(j4);
IkReal x5718=IKcos(j4);
IkReal x5719=(gconst121*r11);
IkReal x5720=(sj1*sj2);
IkReal x5721=(gconst122*r00);
IkReal x5722=(gconst122*r10);
IkReal x5723=(gconst122*r20);
IkReal x5724=((1.0)*x5718);
IkReal x5725=((1.0)*cj1*cj2);
IkReal x5726=((1.0)*x5717);
IkReal x5727=(gconst121*x5717);
IkReal x5728=(gconst121*x5718);
evalcond[0]=((((-1.0)*x5723*x5726))+((r21*x5727))+(((-1.0)*r22*x5724)));
evalcond[1]=(cj0+(((-1.0)*r12*x5724))+(((-1.0)*x5722*x5726))+((x5717*x5719)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5727))+(((-1.0)*r02*x5724))+(((-1.0)*x5721*x5726)));
evalcond[3]=((((-1.0)*x5723*x5724))+((cj2*sj1))+((r21*x5728))+((r22*x5717))+((cj1*sj2)));
evalcond[4]=(((r02*x5717))+((r01*x5728))+(((-1.0)*cj0*x5725))+((cj0*x5720))+(((-1.0)*x5721*x5724)));
evalcond[5]=(((sj0*x5720))+(((-1.0)*x5722*x5724))+(((-1.0)*sj0*x5725))+((r12*x5717))+((x5718*x5719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5729=((1.0)*gconst122);
CheckValue<IkReal> x5730=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5729)))),-1);
if(!x5730.valid){
continue;
}
CheckValue<IkReal> x5731 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5729))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5730.value)))+(x5731.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5732=IKsin(j4);
IkReal x5733=IKcos(j4);
IkReal x5734=(gconst121*r11);
IkReal x5735=(sj1*sj2);
IkReal x5736=(gconst122*r00);
IkReal x5737=(gconst122*r10);
IkReal x5738=(gconst122*r20);
IkReal x5739=((1.0)*x5733);
IkReal x5740=((1.0)*cj1*cj2);
IkReal x5741=((1.0)*x5732);
IkReal x5742=(gconst121*x5732);
IkReal x5743=(gconst121*x5733);
evalcond[0]=((((-1.0)*r22*x5739))+(((-1.0)*x5738*x5741))+((r21*x5742)));
evalcond[1]=(((x5732*x5734))+cj0+(((-1.0)*x5737*x5741))+(((-1.0)*r12*x5739)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5739))+((r01*x5742))+(((-1.0)*x5736*x5741)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5738*x5739))+((r21*x5743))+((r22*x5732)));
evalcond[4]=(((r01*x5743))+(((-1.0)*cj0*x5740))+((cj0*x5735))+((r02*x5732))+(((-1.0)*x5736*x5739)));
evalcond[5]=((((-1.0)*x5737*x5739))+((r12*x5732))+((x5733*x5734))+((sj0*x5735))+(((-1.0)*sj0*x5740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5744=((-1.0)*r11);
IkReal x5746 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5746)==0){
continue;
}
IkReal x5745=pow(x5746,-0.5);
CheckValue<IkReal> x5747 = IKatan2WithCheck(IkReal(x5744),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5747.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5747.value))));
IkReal gconst124=(x5744*x5745);
IkReal gconst125=((1.0)*r10*x5745);
CheckValue<IkReal> x5748 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5748.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5748.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5749=((-1.0)*r11);
CheckValue<IkReal> x5752 = IKatan2WithCheck(IkReal(x5749),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5752.valid){
continue;
}
IkReal x5750=((1.0)*(x5752.value));
IkReal x5751=x5745;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5750)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5750)));
IkReal gconst124=(x5749*x5751);
IkReal gconst125=((1.0)*r10*x5751);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5753=((-1.0)*r11);
CheckValue<IkReal> x5756 = IKatan2WithCheck(IkReal(x5753),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5756.valid){
continue;
}
IkReal x5754=((1.0)*(x5756.value));
IkReal x5755=x5745;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5754)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5754)));
IkReal gconst124=(x5753*x5755);
IkReal gconst125=((1.0)*r10*x5755);
IkReal x5757=r12*r12;
IkReal x5758=((1.0)*sj0);
IkReal x5759=(cj0*r02);
IkReal x5760=x5745;
j4eval[0]=((IKabs(((((-1.0)*r12*x5758))+(((-1.0)*x5759)))))+(IKabs(((((-1.0)*x5758*x5760))+((sj0*x5757*x5760))+((r12*x5759*x5760))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5761=((-1.0)*r11);
CheckValue<IkReal> x5764 = IKatan2WithCheck(IkReal(x5761),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5764.valid){
continue;
}
IkReal x5762=((1.0)*(x5764.value));
IkReal x5763=x5745;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5762)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5762)));
IkReal gconst124=(x5761*x5763);
IkReal gconst125=((1.0)*r10*x5763);
IkReal x5765=r12*r12;
IkReal x5766=((1.0)+(((-1.0)*x5765)));
IkReal x5767=(cj2*r22*sj1);
IkReal x5768=(cj1*r22*sj2);
CheckValue<IkReal> x5775=IKPowWithIntegerCheck(x5766,-1);
if(!x5775.valid){
continue;
}
IkReal x5769=x5775.value;
CheckValue<IkReal> x5776=IKPowWithIntegerCheck(((-1.0)+x5765),-1);
if(!x5776.valid){
continue;
}
IkReal x5770=x5776.value;
IkReal x5771=((1.0)*x5769);
if((x5766) < -0.00001)
continue;
IkReal x5772=IKsqrt(x5766);
IkReal x5773=((1.0)*r12*x5770*x5772);
IkReal x5774=((((-1.0)*x5771*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x5769))+(((-1.0)*x5771*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22))));
j4eval[0]=x5774;
j4eval[1]=IKsign(x5774);
j4eval[2]=((IKabs(((((-1.0)*x5767*x5773))+(((-1.0)*x5768*x5773)))))+(IKabs((x5768+x5767))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5777=(gconst124*r21);
IkReal x5778=(cj1*sj2);
IkReal x5779=(cj2*sj1);
IkReal x5780=(gconst125*r20);
CheckValue<IkReal> x5781 = IKatan2WithCheck(IkReal((((r22*x5779))+((r22*x5778)))),IkReal((((x5777*x5778))+((x5777*x5779))+(((-1.0)*x5779*x5780))+(((-1.0)*x5778*x5780)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5781.valid){
continue;
}
CheckValue<IkReal> x5782=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5777*x5777)))+(((2.0)*x5777*x5780))+(((-1.0)*(x5780*x5780)))+(((-1.0)*(r22*r22))))),-1);
if(!x5782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5781.value)+(((1.5707963267949)*(x5782.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5783=IKsin(j4);
IkReal x5784=IKcos(j4);
IkReal x5785=(sj1*sj2);
IkReal x5786=(gconst125*r20);
IkReal x5787=(gconst124*r01);
IkReal x5788=(gconst125*r00);
IkReal x5789=(gconst125*r10);
IkReal x5790=((1.0)*x5784);
IkReal x5791=((1.0)*cj1*cj2);
IkReal x5792=((1.0)*x5783);
IkReal x5793=(gconst124*x5783);
IkReal x5794=(gconst124*x5784);
evalcond[0]=(((r21*x5793))+(((-1.0)*x5786*x5792))+(((-1.0)*r22*x5790)));
evalcond[1]=(cj0+((r11*x5793))+(((-1.0)*x5789*x5792))+(((-1.0)*r12*x5790)));
evalcond[2]=((((-1.0)*sj0))+((x5783*x5787))+(((-1.0)*x5788*x5792))+(((-1.0)*r02*x5790)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5794))+(((-1.0)*x5786*x5790))+((r22*x5783)));
evalcond[4]=(((x5784*x5787))+(((-1.0)*cj0*x5791))+(((-1.0)*x5788*x5790))+((r02*x5783))+((cj0*x5785)));
evalcond[5]=(((r12*x5783))+((r11*x5794))+(((-1.0)*x5789*x5790))+((sj0*x5785))+(((-1.0)*sj0*x5791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5795=((1.0)*sj0);
IkReal x5796=((1.0)*cj0);
CheckValue<IkReal> x5797 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5795))+(((-1.0)*r02*x5796)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x5796))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r11*x5795)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5797.valid){
continue;
}
CheckValue<IkReal> x5798=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5797.value)+(((1.5707963267949)*(x5798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5799=IKsin(j4);
IkReal x5800=IKcos(j4);
IkReal x5801=(sj1*sj2);
IkReal x5802=(gconst125*r20);
IkReal x5803=(gconst124*r01);
IkReal x5804=(gconst125*r00);
IkReal x5805=(gconst125*r10);
IkReal x5806=((1.0)*x5800);
IkReal x5807=((1.0)*cj1*cj2);
IkReal x5808=((1.0)*x5799);
IkReal x5809=(gconst124*x5799);
IkReal x5810=(gconst124*x5800);
evalcond[0]=((((-1.0)*r22*x5806))+((r21*x5809))+(((-1.0)*x5802*x5808)));
evalcond[1]=(cj0+(((-1.0)*x5805*x5808))+(((-1.0)*r12*x5806))+((r11*x5809)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5804*x5808))+((x5799*x5803))+(((-1.0)*r02*x5806)));
evalcond[3]=(((r21*x5810))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5802*x5806))+((r22*x5799)));
evalcond[4]=(((x5800*x5803))+(((-1.0)*x5804*x5806))+((cj0*x5801))+(((-1.0)*cj0*x5807))+((r02*x5799)));
evalcond[5]=(((r12*x5799))+(((-1.0)*x5805*x5806))+((r11*x5810))+((sj0*x5801))+(((-1.0)*sj0*x5807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5811=((1.0)*gconst125);
CheckValue<IkReal> x5812 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5811))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5812.valid){
continue;
}
CheckValue<IkReal> x5813=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5811)))),-1);
if(!x5813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5812.value)+(((1.5707963267949)*(x5813.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5814=IKsin(j4);
IkReal x5815=IKcos(j4);
IkReal x5816=(sj1*sj2);
IkReal x5817=(gconst125*r20);
IkReal x5818=(gconst124*r01);
IkReal x5819=(gconst125*r00);
IkReal x5820=(gconst125*r10);
IkReal x5821=((1.0)*x5815);
IkReal x5822=((1.0)*cj1*cj2);
IkReal x5823=((1.0)*x5814);
IkReal x5824=(gconst124*x5814);
IkReal x5825=(gconst124*x5815);
evalcond[0]=((((-1.0)*r22*x5821))+((r21*x5824))+(((-1.0)*x5817*x5823)));
evalcond[1]=(cj0+(((-1.0)*x5820*x5823))+((r11*x5824))+(((-1.0)*r12*x5821)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5821))+((x5814*x5818))+(((-1.0)*x5819*x5823)));
evalcond[3]=(((r21*x5825))+((cj2*sj1))+((r22*x5814))+((cj1*sj2))+(((-1.0)*x5817*x5821)));
evalcond[4]=(((x5815*x5818))+((r02*x5814))+((cj0*x5816))+(((-1.0)*cj0*x5822))+(((-1.0)*x5819*x5821)));
evalcond[5]=(((sj0*x5816))+(((-1.0)*x5820*x5821))+((r11*x5825))+((r12*x5814))+(((-1.0)*sj0*x5822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5826=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5826;
j4eval[1]=IKsign(x5826);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5827=((1.0)*cj5);
IkReal x5828=((((-1.0)*r01*x5827))+(((-1.0)*r00*sj5)));
j4eval[0]=x5828;
j4eval[1]=((IKabs(((((-1.0)*r20*x5827))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5828);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5829=cj5*cj5;
IkReal x5830=r11*r11;
IkReal x5831=(cj5*r10);
IkReal x5832=(r11*sj5);
IkReal x5833=((((-1.0)*x5829*(r10*r10)))+((x5829*x5830))+(((-1.0)*(r12*r12)))+(((2.0)*x5831*x5832))+(((-1.0)*x5830)));
j4eval[0]=x5833;
j4eval[1]=IKsign(x5833);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5831))+x5832))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5834=cj5*cj5;
IkReal x5835=r11*r11;
IkReal x5836=(cj5*r10);
IkReal x5837=(r11*sj5);
CheckValue<IkReal> x5838=IKPowWithIntegerCheck(IKsign((((x5834*x5835))+(((-1.0)*x5834*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x5836*x5837))+(((-1.0)*x5835)))),-1);
if(!x5838.valid){
continue;
}
CheckValue<IkReal> x5839 = IKatan2WithCheck(IkReal(((((-1.0)*x5836))+x5837)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5838.value)))+(x5839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5840=IKcos(j4);
IkReal x5841=IKsin(j4);
IkReal x5842=(cj5*r00);
IkReal x5843=(cj5*r10);
IkReal x5844=(r21*sj5);
IkReal x5845=(cj5*r20);
IkReal x5846=((1.0)*x5840);
IkReal x5847=((1.0)*x5841);
IkReal x5848=(sj5*x5841);
IkReal x5849=(sj5*x5840);
evalcond[0]=(((r11*x5849))+((r12*x5841))+(((-1.0)*x5843*x5846)));
evalcond[1]=(((x5841*x5844))+(((-1.0)*x5845*x5847))+(((-1.0)*r22*x5846)));
evalcond[2]=((((-1.0)*r02*x5846))+((r01*x5848))+(((-1.0)*x5842*x5847)));
evalcond[3]=((1.0)+((r11*x5848))+(((-1.0)*x5843*x5847))+(((-1.0)*r12*x5846)));
evalcond[4]=(((cj2*sj1))+((x5840*x5844))+((cj1*sj2))+(((-1.0)*x5845*x5846))+((r22*x5841)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5849))+(((-1.0)*x5842*x5846))+((r02*x5841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5850=((1.0)*cj5);
CheckValue<IkReal> x5851 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5850))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5851.valid){
continue;
}
CheckValue<IkReal> x5852=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5850)))),-1);
if(!x5852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5851.value)+(((1.5707963267949)*(x5852.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5853=IKcos(j4);
IkReal x5854=IKsin(j4);
IkReal x5855=(cj5*r00);
IkReal x5856=(cj5*r10);
IkReal x5857=(r21*sj5);
IkReal x5858=(cj5*r20);
IkReal x5859=((1.0)*x5853);
IkReal x5860=((1.0)*x5854);
IkReal x5861=(sj5*x5854);
IkReal x5862=(sj5*x5853);
evalcond[0]=(((r12*x5854))+((r11*x5862))+(((-1.0)*x5856*x5859)));
evalcond[1]=(((x5854*x5857))+(((-1.0)*x5858*x5860))+(((-1.0)*r22*x5859)));
evalcond[2]=((((-1.0)*x5855*x5860))+(((-1.0)*r02*x5859))+((r01*x5861)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5859))+((r11*x5861))+(((-1.0)*x5856*x5860)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5858*x5859))+((cj1*sj2))+((r22*x5854))+((x5853*x5857)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5855*x5859))+((r02*x5854))+((r01*x5862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5863=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5863.valid){
continue;
}
CheckValue<IkReal> x5864 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5863.value)))+(x5864.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5865=IKcos(j4);
IkReal x5866=IKsin(j4);
IkReal x5867=(cj5*r00);
IkReal x5868=(cj5*r10);
IkReal x5869=(r21*sj5);
IkReal x5870=(cj5*r20);
IkReal x5871=((1.0)*x5865);
IkReal x5872=((1.0)*x5866);
IkReal x5873=(sj5*x5866);
IkReal x5874=(sj5*x5865);
evalcond[0]=(((r11*x5874))+((r12*x5866))+(((-1.0)*x5868*x5871)));
evalcond[1]=((((-1.0)*r22*x5871))+((x5866*x5869))+(((-1.0)*x5870*x5872)));
evalcond[2]=((((-1.0)*r02*x5871))+((r01*x5873))+(((-1.0)*x5867*x5872)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5871))+((r11*x5873))+(((-1.0)*x5868*x5872)));
evalcond[4]=(((cj2*sj1))+((r22*x5866))+((cj1*sj2))+(((-1.0)*x5870*x5871))+((x5865*x5869)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5866))+((r01*x5874))+(((-1.0)*x5867*x5871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5875=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5875;
j4eval[1]=IKsign(x5875);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5876=((1.0)*cj5);
IkReal x5877=((((-1.0)*r21*x5876))+(((-1.0)*r20*sj5)));
j4eval[0]=x5877;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5876))))));
j4eval[2]=IKsign(x5877);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5878=cj5*cj5;
IkReal x5879=r11*r11;
IkReal x5880=(r11*sj5);
IkReal x5881=(cj5*r10);
IkReal x5882=((r12*r12)+(((-2.0)*x5880*x5881))+(((-1.0)*x5878*x5879))+((x5878*(r10*r10)))+x5879);
j4eval[0]=x5882;
j4eval[1]=IKsign(x5882);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5881))+x5880))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5883=cj5*cj5;
IkReal x5884=r11*r11;
IkReal x5885=(cj5*r10);
IkReal x5886=(r11*sj5);
CheckValue<IkReal> x5887 = IKatan2WithCheck(IkReal(((((-1.0)*x5885))+x5886)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5887.valid){
continue;
}
CheckValue<IkReal> x5888=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x5885*x5886))+(((-1.0)*x5883*x5884))+((x5883*(r10*r10)))+x5884)),-1);
if(!x5888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5887.value)+(((1.5707963267949)*(x5888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5889=IKcos(j4);
IkReal x5890=IKsin(j4);
IkReal x5891=(cj5*r00);
IkReal x5892=(cj5*r10);
IkReal x5893=(r21*sj5);
IkReal x5894=(cj5*r20);
IkReal x5895=((1.0)*x5889);
IkReal x5896=((1.0)*x5890);
IkReal x5897=(sj5*x5890);
IkReal x5898=(sj5*x5889);
evalcond[0]=((((-1.0)*x5892*x5895))+((r12*x5890))+((r11*x5898)));
evalcond[1]=((((-1.0)*r22*x5895))+(((-1.0)*x5894*x5896))+((x5890*x5893)));
evalcond[2]=((((-1.0)*r02*x5895))+(((-1.0)*x5891*x5896))+((r01*x5897)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5895))+(((-1.0)*x5892*x5896))+((r11*x5897)));
evalcond[4]=(((r22*x5890))+((cj2*sj1))+((cj1*sj2))+((x5889*x5893))+(((-1.0)*x5894*x5895)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x5890))+(((-1.0)*x5891*x5895))+((r01*x5898))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5899=((1.0)*cj5);
CheckValue<IkReal> x5900 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5899)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5900.valid){
continue;
}
CheckValue<IkReal> x5901=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5899))+(((-1.0)*r20*sj5)))),-1);
if(!x5901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5900.value)+(((1.5707963267949)*(x5901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5902=IKcos(j4);
IkReal x5903=IKsin(j4);
IkReal x5904=(cj5*r00);
IkReal x5905=(cj5*r10);
IkReal x5906=(r21*sj5);
IkReal x5907=(cj5*r20);
IkReal x5908=((1.0)*x5902);
IkReal x5909=((1.0)*x5903);
IkReal x5910=(sj5*x5903);
IkReal x5911=(sj5*x5902);
evalcond[0]=(((r12*x5903))+(((-1.0)*x5905*x5908))+((r11*x5911)));
evalcond[1]=(((x5903*x5906))+(((-1.0)*x5907*x5909))+(((-1.0)*r22*x5908)));
evalcond[2]=(((r01*x5910))+(((-1.0)*x5904*x5909))+(((-1.0)*r02*x5908)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5908))+(((-1.0)*x5905*x5909))+((r11*x5910)));
evalcond[4]=(((cj2*sj1))+((r22*x5903))+(((-1.0)*x5907*x5908))+((cj1*sj2))+((x5902*x5906)));
evalcond[5]=(((r01*x5911))+(((-1.0)*x5904*x5908))+(((-1.0)*sj1*sj2))+((r02*x5903))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5912 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5912.valid){
continue;
}
CheckValue<IkReal> x5913=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5912.value)+(((1.5707963267949)*(x5913.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5914=IKcos(j4);
IkReal x5915=IKsin(j4);
IkReal x5916=(cj5*r00);
IkReal x5917=(cj5*r10);
IkReal x5918=(r21*sj5);
IkReal x5919=(cj5*r20);
IkReal x5920=((1.0)*x5914);
IkReal x5921=((1.0)*x5915);
IkReal x5922=(sj5*x5915);
IkReal x5923=(sj5*x5914);
evalcond[0]=(((r12*x5915))+((r11*x5923))+(((-1.0)*x5917*x5920)));
evalcond[1]=((((-1.0)*r22*x5920))+((x5915*x5918))+(((-1.0)*x5919*x5921)));
evalcond[2]=((((-1.0)*x5916*x5921))+(((-1.0)*r02*x5920))+((r01*x5922)));
evalcond[3]=((-1.0)+((r11*x5922))+(((-1.0)*x5917*x5921))+(((-1.0)*r12*x5920)));
evalcond[4]=(((cj2*sj1))+((r22*x5915))+((cj1*sj2))+(((-1.0)*x5919*x5920))+((x5914*x5918)));
evalcond[5]=((((-1.0)*x5916*x5920))+(((-1.0)*sj1*sj2))+((r02*x5915))+((cj1*cj2))+((r01*x5923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5924=((-1.0)*r00);
IkReal x5926 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5926)==0){
continue;
}
IkReal x5925=pow(x5926,-0.5);
CheckValue<IkReal> x5927 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5924),IKFAST_ATAN2_MAGTHRESH);
if(!x5927.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5927.value));
IkReal gconst127=(r01*x5925);
IkReal gconst128=(x5924*x5925);
CheckValue<IkReal> x5928 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5928.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5928.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5929=((-1.0)*r00);
IkReal x5930=x5925;
CheckValue<IkReal> x5932 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5929),IKFAST_ATAN2_MAGTHRESH);
if(!x5932.valid){
continue;
}
IkReal x5931=((-1.0)*(x5932.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5931;
IkReal gconst126=x5931;
IkReal gconst127=(r01*x5930);
IkReal gconst128=(x5929*x5930);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5933=((1.0)*sj0);
IkReal x5934=((1.0)*gconst127);
CheckValue<IkReal> x5935 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5933)))),IkReal(((((-1.0)*cj0*r01*x5934))+((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x5933)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5935.valid){
continue;
}
CheckValue<IkReal> x5936=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x5934)))),-1);
if(!x5936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5935.value)+(((1.5707963267949)*(x5936.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5937=IKsin(j4);
IkReal x5938=IKcos(j4);
IkReal x5939=(gconst127*r01);
IkReal x5940=(sj1*sj2);
IkReal x5941=(gconst128*r10);
IkReal x5942=(gconst128*r00);
IkReal x5943=(gconst128*r20);
IkReal x5944=((1.0)*x5938);
IkReal x5945=((1.0)*cj1*cj2);
IkReal x5946=((1.0)*x5937);
IkReal x5947=(gconst127*x5938);
IkReal x5948=(gconst127*x5937);
evalcond[0]=((((-1.0)*r22*x5944))+((r21*x5948))+(((-1.0)*x5943*x5946)));
evalcond[1]=(cj0+(((-1.0)*r12*x5944))+(((-1.0)*x5941*x5946))+((r11*x5948)));
evalcond[2]=((((-1.0)*x5942*x5946))+(((-1.0)*sj0))+((x5937*x5939))+(((-1.0)*r02*x5944)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5937))+((r21*x5947))+(((-1.0)*x5943*x5944)));
evalcond[4]=((((-1.0)*x5942*x5944))+((cj0*x5940))+(((-1.0)*cj0*x5945))+((x5938*x5939))+((r02*x5937)));
evalcond[5]=((((-1.0)*sj0*x5945))+(((-1.0)*x5941*x5944))+((r12*x5937))+((r11*x5947))+((sj0*x5940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5949=((1.0)*gconst128);
CheckValue<IkReal> x5950=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5949))+(((-1.0)*gconst127*r10)))),-1);
if(!x5950.valid){
continue;
}
CheckValue<IkReal> x5951 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x5949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5950.value)))+(x5951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5952=IKsin(j4);
IkReal x5953=IKcos(j4);
IkReal x5954=(gconst127*r01);
IkReal x5955=(sj1*sj2);
IkReal x5956=(gconst128*r10);
IkReal x5957=(gconst128*r00);
IkReal x5958=(gconst128*r20);
IkReal x5959=((1.0)*x5953);
IkReal x5960=((1.0)*cj1*cj2);
IkReal x5961=((1.0)*x5952);
IkReal x5962=(gconst127*x5953);
IkReal x5963=(gconst127*x5952);
evalcond[0]=(((r21*x5963))+(((-1.0)*r22*x5959))+(((-1.0)*x5958*x5961)));
evalcond[1]=(cj0+(((-1.0)*x5956*x5961))+((r11*x5963))+(((-1.0)*r12*x5959)));
evalcond[2]=((((-1.0)*sj0))+((x5952*x5954))+(((-1.0)*x5957*x5961))+(((-1.0)*r02*x5959)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5958*x5959))+((cj1*sj2))+((r21*x5962))+((r22*x5952)));
evalcond[4]=(((x5953*x5954))+((r02*x5952))+(((-1.0)*cj0*x5960))+(((-1.0)*x5957*x5959))+((cj0*x5955)));
evalcond[5]=(((sj0*x5955))+(((-1.0)*sj0*x5960))+((r12*x5952))+(((-1.0)*x5956*x5959))+((r11*x5962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5964=((-1.0)*r01);
IkReal x5966 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5966)==0){
continue;
}
IkReal x5965=pow(x5966,-0.5);
CheckValue<IkReal> x5967 = IKatan2WithCheck(IkReal(x5964),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5967.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5967.value))));
IkReal gconst130=(x5964*x5965);
IkReal gconst131=((1.0)*r00*x5965);
CheckValue<IkReal> x5968 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5968.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5968.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5969=((-1.0)*r01);
CheckValue<IkReal> x5972 = IKatan2WithCheck(IkReal(x5969),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5972.valid){
continue;
}
IkReal x5970=((1.0)*(x5972.value));
IkReal x5971=x5965;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5970)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5970)));
IkReal gconst130=(x5969*x5971);
IkReal gconst131=((1.0)*r00*x5971);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5973=((-1.0)*r01);
CheckValue<IkReal> x5976 = IKatan2WithCheck(IkReal(x5973),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5976.valid){
continue;
}
IkReal x5974=((1.0)*(x5976.value));
IkReal x5975=x5965;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5974)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5974)));
IkReal gconst130=(x5973*x5975);
IkReal gconst131=((1.0)*r00*x5975);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5977=((-1.0)*r01);
CheckValue<IkReal> x5980 = IKatan2WithCheck(IkReal(x5977),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5980.valid){
continue;
}
IkReal x5978=((1.0)*(x5980.value));
IkReal x5979=x5965;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5978)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5978)));
IkReal gconst130=(x5977*x5979);
IkReal gconst131=((1.0)*r00*x5979);
IkReal x5981=r02*r02;
IkReal x5982=(r12*sj0);
IkReal x5983=((1.0)*cj0);
IkReal x5984=x5965;
j4eval[0]=((IKabs((((cj0*x5981*x5984))+((r02*x5982*x5984))+(((-1.0)*x5983*x5984)))))+(IKabs(((((-1.0)*x5982))+(((-1.0)*r02*x5983))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5985=((1.0)*sj0);
IkReal x5986=((1.0)*gconst130);
CheckValue<IkReal> x5987 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5985))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst130*r11*x5985))+((gconst131*r10*sj0))+((cj0*gconst131*r00))+(((-1.0)*cj0*r01*x5986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5987.valid){
continue;
}
CheckValue<IkReal> x5988=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x5986)))),-1);
if(!x5988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5987.value)+(((1.5707963267949)*(x5988.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5989=IKsin(j4);
IkReal x5990=IKcos(j4);
IkReal x5991=(gconst131*r10);
IkReal x5992=(sj1*sj2);
IkReal x5993=(gconst131*r20);
IkReal x5994=(gconst131*r00);
IkReal x5995=((1.0)*x5990);
IkReal x5996=((1.0)*cj1*cj2);
IkReal x5997=(gconst130*x5989);
IkReal x5998=((1.0)*x5989);
IkReal x5999=(gconst130*x5990);
evalcond[0]=(((r21*x5997))+(((-1.0)*r22*x5995))+(((-1.0)*x5993*x5998)));
evalcond[1]=((((-1.0)*r12*x5995))+cj0+((r11*x5997))+(((-1.0)*x5991*x5998)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5995))+(((-1.0)*x5994*x5998))+((r01*x5997)));
evalcond[3]=(((r21*x5999))+((cj2*sj1))+((cj1*sj2))+((r22*x5989))+(((-1.0)*x5993*x5995)));
evalcond[4]=(((r02*x5989))+(((-1.0)*x5994*x5995))+((cj0*x5992))+(((-1.0)*cj0*x5996))+((r01*x5999)));
evalcond[5]=(((r12*x5989))+((sj0*x5992))+((r11*x5999))+(((-1.0)*sj0*x5996))+(((-1.0)*x5991*x5995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6000=((1.0)*gconst131);
CheckValue<IkReal> x6001=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6000))+(((-1.0)*gconst130*r10)))),-1);
if(!x6001.valid){
continue;
}
CheckValue<IkReal> x6002 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6001.value)))+(x6002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6003=IKsin(j4);
IkReal x6004=IKcos(j4);
IkReal x6005=(gconst131*r10);
IkReal x6006=(sj1*sj2);
IkReal x6007=(gconst131*r20);
IkReal x6008=(gconst131*r00);
IkReal x6009=((1.0)*x6004);
IkReal x6010=((1.0)*cj1*cj2);
IkReal x6011=(gconst130*x6003);
IkReal x6012=((1.0)*x6003);
IkReal x6013=(gconst130*x6004);
evalcond[0]=(((r21*x6011))+(((-1.0)*r22*x6009))+(((-1.0)*x6007*x6012)));
evalcond[1]=(((r11*x6011))+cj0+(((-1.0)*r12*x6009))+(((-1.0)*x6005*x6012)));
evalcond[2]=(((r01*x6011))+(((-1.0)*sj0))+(((-1.0)*x6008*x6012))+(((-1.0)*r02*x6009)));
evalcond[3]=(((cj2*sj1))+((r22*x6003))+((r21*x6013))+((cj1*sj2))+(((-1.0)*x6007*x6009)));
evalcond[4]=(((r01*x6013))+((cj0*x6006))+((r02*x6003))+(((-1.0)*cj0*x6010))+(((-1.0)*x6008*x6009)));
evalcond[5]=(((r12*x6003))+((r11*x6013))+(((-1.0)*sj0*x6010))+((sj0*x6006))+(((-1.0)*x6005*x6009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6014=((1.0)*gconst131);
CheckValue<IkReal> x6015=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6014))+(((-1.0)*gconst130*r00)))),-1);
if(!x6015.valid){
continue;
}
CheckValue<IkReal> x6016 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6015.value)))+(x6016.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6017=IKsin(j4);
IkReal x6018=IKcos(j4);
IkReal x6019=(gconst131*r10);
IkReal x6020=(sj1*sj2);
IkReal x6021=(gconst131*r20);
IkReal x6022=(gconst131*r00);
IkReal x6023=((1.0)*x6018);
IkReal x6024=((1.0)*cj1*cj2);
IkReal x6025=(gconst130*x6017);
IkReal x6026=((1.0)*x6017);
IkReal x6027=(gconst130*x6018);
evalcond[0]=((((-1.0)*x6021*x6026))+(((-1.0)*r22*x6023))+((r21*x6025)));
evalcond[1]=(cj0+(((-1.0)*x6019*x6026))+((r11*x6025))+(((-1.0)*r12*x6023)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6025))+(((-1.0)*r02*x6023))+(((-1.0)*x6022*x6026)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6021*x6023))+((r21*x6027))+((r22*x6017)));
evalcond[4]=((((-1.0)*cj0*x6024))+((r01*x6027))+((r02*x6017))+((cj0*x6020))+(((-1.0)*x6022*x6023)));
evalcond[5]=(((sj0*x6020))+((r12*x6017))+(((-1.0)*sj0*x6024))+(((-1.0)*x6019*x6023))+((r11*x6027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6028=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6028;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6028);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6029=((1.0)*cj5);
IkReal x6030=((((-1.0)*r11*x6029))+(((-1.0)*r10*sj5)));
j4eval[0]=x6030;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6029)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6031=cj5*cj5;
IkReal x6032=r01*r01;
IkReal x6033=(cj5*r00);
IkReal x6034=(r01*sj5);
IkReal x6035=(x6032+((x6031*(r00*r00)))+(r02*r02)+(((-2.0)*x6033*x6034))+(((-1.0)*x6031*x6032)));
j4eval[0]=x6035;
j4eval[1]=IKsign(x6035);
j4eval[2]=((IKabs(r02))+(IKabs((x6034+(((-1.0)*x6033))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6036=cj5*cj5;
IkReal x6037=r01*r01;
IkReal x6038=(r01*sj5);
IkReal x6039=(cj5*r00);
CheckValue<IkReal> x6040=IKPowWithIntegerCheck(IKsign((x6037+(((-1.0)*x6036*x6037))+((x6036*(r00*r00)))+(((-2.0)*x6038*x6039))+(r02*r02))),-1);
if(!x6040.valid){
continue;
}
CheckValue<IkReal> x6041 = IKatan2WithCheck(IkReal((x6038+(((-1.0)*x6039)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6040.value)))+(x6041.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6042=IKcos(j4);
IkReal x6043=IKsin(j4);
IkReal x6044=(cj5*r00);
IkReal x6045=(cj5*r10);
IkReal x6046=(r21*sj5);
IkReal x6047=(cj5*r20);
IkReal x6048=((1.0)*x6042);
IkReal x6049=((1.0)*x6043);
IkReal x6050=(sj5*x6043);
IkReal x6051=(sj5*x6042);
evalcond[0]=(((r01*x6051))+(((-1.0)*x6044*x6048))+((r02*x6043)));
evalcond[1]=(((x6043*x6046))+(((-1.0)*r22*x6048))+(((-1.0)*x6047*x6049)));
evalcond[2]=((((-1.0)*x6045*x6049))+(((-1.0)*r12*x6048))+((r11*x6050)));
evalcond[3]=((-1.0)+((r01*x6050))+(((-1.0)*r02*x6048))+(((-1.0)*x6044*x6049)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6043))+((x6042*x6046))+(((-1.0)*x6047*x6048)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6045*x6048))+((r12*x6043))+((r11*x6051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6052=((1.0)*cj5);
CheckValue<IkReal> x6053=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6052)))),-1);
if(!x6053.valid){
continue;
}
CheckValue<IkReal> x6054 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6052)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6053.value)))+(x6054.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6055=IKcos(j4);
IkReal x6056=IKsin(j4);
IkReal x6057=(cj5*r00);
IkReal x6058=(cj5*r10);
IkReal x6059=(r21*sj5);
IkReal x6060=(cj5*r20);
IkReal x6061=((1.0)*x6055);
IkReal x6062=((1.0)*x6056);
IkReal x6063=(sj5*x6056);
IkReal x6064=(sj5*x6055);
evalcond[0]=((((-1.0)*x6057*x6061))+((r01*x6064))+((r02*x6056)));
evalcond[1]=((((-1.0)*r22*x6061))+((x6056*x6059))+(((-1.0)*x6060*x6062)));
evalcond[2]=(((r11*x6063))+(((-1.0)*x6058*x6062))+(((-1.0)*r12*x6061)));
evalcond[3]=((-1.0)+(((-1.0)*x6057*x6062))+((r01*x6063))+(((-1.0)*r02*x6061)));
evalcond[4]=(((cj2*sj1))+((r22*x6056))+((x6055*x6059))+((cj1*sj2))+(((-1.0)*x6060*x6061)));
evalcond[5]=(((r12*x6056))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6064))+(((-1.0)*x6058*x6061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6065=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6065.valid){
continue;
}
CheckValue<IkReal> x6066 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6065.value)))+(x6066.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6067=IKcos(j4);
IkReal x6068=IKsin(j4);
IkReal x6069=(cj5*r00);
IkReal x6070=(cj5*r10);
IkReal x6071=(r21*sj5);
IkReal x6072=(cj5*r20);
IkReal x6073=((1.0)*x6067);
IkReal x6074=((1.0)*x6068);
IkReal x6075=(sj5*x6068);
IkReal x6076=(sj5*x6067);
evalcond[0]=(((r01*x6076))+((r02*x6068))+(((-1.0)*x6069*x6073)));
evalcond[1]=(((x6068*x6071))+(((-1.0)*x6072*x6074))+(((-1.0)*r22*x6073)));
evalcond[2]=(((r11*x6075))+(((-1.0)*r12*x6073))+(((-1.0)*x6070*x6074)));
evalcond[3]=((-1.0)+((r01*x6075))+(((-1.0)*r02*x6073))+(((-1.0)*x6069*x6074)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6072*x6073))+((r22*x6068))+((x6067*x6071)));
evalcond[5]=(((r11*x6076))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6068))+(((-1.0)*x6070*x6073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6077=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6077;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6077);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6078=((1.0)*cj5);
IkReal x6079=((((-1.0)*r21*x6078))+(((-1.0)*r20*sj5)));
j4eval[0]=x6079;
j4eval[1]=((IKabs(((((-1.0)*r10*x6078))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6080=(r01*sj5);
IkReal x6081=(cj1*sj2);
IkReal x6082=(cj2*sj1);
IkReal x6083=((1.0)*r02);
IkReal x6084=((1.0)*cj5*r00);
IkReal x6085=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6085;
j4eval[1]=((IKabs(((((-1.0)*x6082*x6084))+((x6080*x6081))+((x6080*x6082))+(((-1.0)*x6081*x6084)))))+(IKabs(((((-1.0)*x6082*x6083))+(((-1.0)*x6081*x6083))))));
j4eval[2]=IKsign(x6085);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6086=(r01*sj5);
IkReal x6087=(cj1*sj2);
IkReal x6088=(cj2*sj1);
IkReal x6089=((1.0)*r02);
IkReal x6090=((1.0)*cj5*r00);
CheckValue<IkReal> x6091=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6091.valid){
continue;
}
CheckValue<IkReal> x6092 = IKatan2WithCheck(IkReal(((((-1.0)*x6087*x6090))+((x6086*x6087))+((x6086*x6088))+(((-1.0)*x6088*x6090)))),IkReal(((((-1.0)*x6088*x6089))+(((-1.0)*x6087*x6089)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6091.value)))+(x6092.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6093=IKcos(j4);
IkReal x6094=IKsin(j4);
IkReal x6095=(cj5*r00);
IkReal x6096=(cj5*r10);
IkReal x6097=(r21*sj5);
IkReal x6098=(cj5*r20);
IkReal x6099=((1.0)*x6093);
IkReal x6100=((1.0)*x6094);
IkReal x6101=(sj5*x6094);
IkReal x6102=(sj5*x6093);
evalcond[0]=((((-1.0)*x6095*x6099))+((r01*x6102))+((r02*x6094)));
evalcond[1]=((((-1.0)*r22*x6099))+(((-1.0)*x6098*x6100))+((x6094*x6097)));
evalcond[2]=(((r11*x6101))+(((-1.0)*x6096*x6100))+(((-1.0)*r12*x6099)));
evalcond[3]=((1.0)+(((-1.0)*x6095*x6100))+(((-1.0)*r02*x6099))+((r01*x6101)));
evalcond[4]=(((cj2*sj1))+((x6093*x6097))+((cj1*sj2))+(((-1.0)*x6098*x6099))+((r22*x6094)));
evalcond[5]=(((r11*x6102))+(((-1.0)*sj1*sj2))+(((-1.0)*x6096*x6099))+((r12*x6094))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6103=((1.0)*cj5);
CheckValue<IkReal> x6104=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6103))+(((-1.0)*r20*sj5)))),-1);
if(!x6104.valid){
continue;
}
CheckValue<IkReal> x6105 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6103)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6104.value)))+(x6105.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6106=IKcos(j4);
IkReal x6107=IKsin(j4);
IkReal x6108=(cj5*r00);
IkReal x6109=(cj5*r10);
IkReal x6110=(r21*sj5);
IkReal x6111=(cj5*r20);
IkReal x6112=((1.0)*x6106);
IkReal x6113=((1.0)*x6107);
IkReal x6114=(sj5*x6107);
IkReal x6115=(sj5*x6106);
evalcond[0]=((((-1.0)*x6108*x6112))+((r01*x6115))+((r02*x6107)));
evalcond[1]=((((-1.0)*r22*x6112))+(((-1.0)*x6111*x6113))+((x6107*x6110)));
evalcond[2]=((((-1.0)*x6109*x6113))+(((-1.0)*r12*x6112))+((r11*x6114)));
evalcond[3]=((1.0)+(((-1.0)*x6108*x6113))+(((-1.0)*r02*x6112))+((r01*x6114)));
evalcond[4]=(((cj2*sj1))+((r22*x6107))+((cj1*sj2))+((x6106*x6110))+(((-1.0)*x6111*x6112)));
evalcond[5]=((((-1.0)*x6109*x6112))+(((-1.0)*sj1*sj2))+((r11*x6115))+((cj1*cj2))+((r12*x6107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6116 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6116.valid){
continue;
}
CheckValue<IkReal> x6117=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6116.value)+(((1.5707963267949)*(x6117.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6118=IKcos(j4);
IkReal x6119=IKsin(j4);
IkReal x6120=(cj5*r00);
IkReal x6121=(cj5*r10);
IkReal x6122=(r21*sj5);
IkReal x6123=(cj5*r20);
IkReal x6124=((1.0)*x6118);
IkReal x6125=((1.0)*x6119);
IkReal x6126=(sj5*x6119);
IkReal x6127=(sj5*x6118);
evalcond[0]=(((r01*x6127))+((r02*x6119))+(((-1.0)*x6120*x6124)));
evalcond[1]=(((x6119*x6122))+(((-1.0)*r22*x6124))+(((-1.0)*x6123*x6125)));
evalcond[2]=((((-1.0)*x6121*x6125))+(((-1.0)*r12*x6124))+((r11*x6126)));
evalcond[3]=((1.0)+((r01*x6126))+(((-1.0)*r02*x6124))+(((-1.0)*x6120*x6125)));
evalcond[4]=(((cj2*sj1))+((x6118*x6122))+((cj1*sj2))+((r22*x6119))+(((-1.0)*x6123*x6124)));
evalcond[5]=((((-1.0)*x6121*x6124))+(((-1.0)*sj1*sj2))+((r12*x6119))+((cj1*cj2))+((r11*x6127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6128=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6128);
rxp1_1=(px*r21);
rxp1_2=(r11*x6128);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6129=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6129);
rxp1_1=(px*r21);
rxp1_2=(r11*x6129);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6130=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6130);
rxp1_1=(px*r21);
rxp1_2=(r11*x6130);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6133=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6133.valid){
continue;
}
IkReal x6131=x6133.value;
IkReal x6132=(sj0*x6131);
cj4array[0]=(((cj1*cj2*x6132))+(((-1.0)*sj1*sj2*x6132)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6134=IKsin(j4);
IkReal x6135=IKcos(j4);
IkReal x6136=(r21*sj5);
IkReal x6137=((1.0)*cj5*r20);
evalcond[0]=(r02*x6134);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6135)));
evalcond[2]=((((-1.0)*x6134*x6137))+((x6134*x6136)));
evalcond[3]=(((r11*sj5*x6134))+(((-1.0)*cj5*r10*x6134)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6135*x6136))+(((-1.0)*x6135*x6137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6140=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6140.valid){
continue;
}
IkReal x6138=x6140.value;
IkReal x6139=((1.0)*x6138);
cj4array[0]=((((-1.0)*cj2*sj1*x6139))+(((-1.0)*cj1*sj2*x6139)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6141=IKsin(j4);
IkReal x6142=IKcos(j4);
IkReal x6143=((1.0)*sj0);
IkReal x6144=((1.0)*cj5);
IkReal x6145=(sj5*x6141);
evalcond[0]=(r02*x6141);
evalcond[1]=((((-1.0)*x6143))+(((-1.0)*r02*x6142)));
evalcond[2]=((((-1.0)*r20*x6141*x6144))+((r21*x6145)));
evalcond[3]=((((-1.0)*r10*x6141*x6144))+((r11*x6145)));
evalcond[4]=(((r11*sj5*x6142))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x6143))+(((-1.0)*r10*x6142*x6144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6146=IKPowWithIntegerCheck(r02,-1);
if(!x6146.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6146.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6147=IKsin(j4);
IkReal x6148=IKcos(j4);
IkReal x6149=(r21*sj5);
IkReal x6150=((1.0)*cj5);
IkReal x6151=(r11*sj5);
evalcond[0]=(r02*x6147);
evalcond[1]=((((-1.0)*r20*x6147*x6150))+((x6147*x6149)));
evalcond[2]=(((x6147*x6151))+(((-1.0)*r10*x6147*x6150)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x6148*x6150))+((x6148*x6149)));
evalcond[4]=(((x6148*x6151))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*r10*x6148*x6150))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6152=((1.0)*sj0);
IkReal x6153=((1.0)*cj0);
CheckValue<IkReal> x6154 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6153))+(((-1.0)*r12*x6152)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6153))+(((-1.0)*r11*sj5*x6152)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6154.valid){
continue;
}
CheckValue<IkReal> x6155=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6154.value)+(((1.5707963267949)*(x6155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6156=IKsin(j4);
IkReal x6157=IKcos(j4);
IkReal x6158=(cj5*r00);
IkReal x6159=(cj5*r10);
IkReal x6160=(r21*sj5);
IkReal x6161=(sj1*sj2);
IkReal x6162=(cj5*r20);
IkReal x6163=((1.0)*x6157);
IkReal x6164=((1.0)*cj1*cj2);
IkReal x6165=((1.0)*x6156);
IkReal x6166=(sj5*x6156);
IkReal x6167=(sj5*x6157);
evalcond[0]=((((-1.0)*r22*x6163))+((x6156*x6160))+(((-1.0)*x6162*x6165)));
evalcond[1]=(cj0+(((-1.0)*r12*x6163))+((r11*x6166))+(((-1.0)*x6159*x6165)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6166))+(((-1.0)*r02*x6163))+(((-1.0)*x6158*x6165)));
evalcond[3]=(((r22*x6156))+((cj2*sj1))+((x6157*x6160))+((cj1*sj2))+(((-1.0)*x6162*x6163)));
evalcond[4]=((((-1.0)*cj0*x6164))+((r02*x6156))+((r01*x6167))+(((-1.0)*x6158*x6163))+((cj0*x6161)));
evalcond[5]=(((r12*x6156))+(((-1.0)*sj0*x6164))+((sj0*x6161))+((r11*x6167))+(((-1.0)*x6159*x6163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6168=((1.0)*cj5);
CheckValue<IkReal> x6169=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6168)))),-1);
if(!x6169.valid){
continue;
}
CheckValue<IkReal> x6170 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6168)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6169.value)))+(x6170.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6171=IKsin(j4);
IkReal x6172=IKcos(j4);
IkReal x6173=(cj5*r00);
IkReal x6174=(cj5*r10);
IkReal x6175=(r21*sj5);
IkReal x6176=(sj1*sj2);
IkReal x6177=(cj5*r20);
IkReal x6178=((1.0)*x6172);
IkReal x6179=((1.0)*cj1*cj2);
IkReal x6180=((1.0)*x6171);
IkReal x6181=(sj5*x6171);
IkReal x6182=(sj5*x6172);
evalcond[0]=((((-1.0)*x6177*x6180))+((x6171*x6175))+(((-1.0)*r22*x6178)));
evalcond[1]=(cj0+(((-1.0)*r12*x6178))+((r11*x6181))+(((-1.0)*x6174*x6180)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6173*x6180))+((r01*x6181))+(((-1.0)*r02*x6178)));
evalcond[3]=(((cj2*sj1))+((x6172*x6175))+((cj1*sj2))+(((-1.0)*x6177*x6178))+((r22*x6171)));
evalcond[4]=((((-1.0)*cj0*x6179))+((r01*x6182))+((r02*x6171))+(((-1.0)*x6173*x6178))+((cj0*x6176)));
evalcond[5]=((((-1.0)*sj0*x6179))+((r12*x6171))+((sj0*x6176))+(((-1.0)*x6174*x6178))+((r11*x6182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6183=((1.0)*cj5);
CheckValue<IkReal> x6184 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6183)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6184.valid){
continue;
}
CheckValue<IkReal> x6185=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6183))+(((-1.0)*r00*sj5)))),-1);
if(!x6185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6184.value)+(((1.5707963267949)*(x6185.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6186=IKsin(j4);
IkReal x6187=IKcos(j4);
IkReal x6188=(cj5*r00);
IkReal x6189=(cj5*r10);
IkReal x6190=(r21*sj5);
IkReal x6191=(sj1*sj2);
IkReal x6192=(cj5*r20);
IkReal x6193=((1.0)*x6187);
IkReal x6194=((1.0)*cj1*cj2);
IkReal x6195=((1.0)*x6186);
IkReal x6196=(sj5*x6186);
IkReal x6197=(sj5*x6187);
evalcond[0]=((((-1.0)*x6192*x6195))+(((-1.0)*r22*x6193))+((x6186*x6190)));
evalcond[1]=(cj0+((r11*x6196))+(((-1.0)*r12*x6193))+(((-1.0)*x6189*x6195)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6196))+(((-1.0)*x6188*x6195))+(((-1.0)*r02*x6193)));
evalcond[3]=(((cj2*sj1))+((r22*x6186))+(((-1.0)*x6192*x6193))+((cj1*sj2))+((x6187*x6190)));
evalcond[4]=((((-1.0)*cj0*x6194))+((r02*x6186))+((r01*x6197))+(((-1.0)*x6188*x6193))+((cj0*x6191)));
evalcond[5]=(((r11*x6197))+(((-1.0)*x6189*x6193))+(((-1.0)*sj0*x6194))+((sj0*x6191))+((r12*x6186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6198=r21*r21;
IkReal x6199=cj5*cj5;
IkReal x6200=(cj2*sj1);
IkReal x6201=(cj1*sj2);
IkReal x6202=(r21*sj5);
IkReal x6203=((1.0)*cj5*r20);
CheckValue<IkReal> x6204=IKPowWithIntegerCheck(IKsign((((x6198*x6199))+(((-1.0)*x6199*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x6198))+(((2.0)*cj5*r20*x6202)))),-1);
if(!x6204.valid){
continue;
}
CheckValue<IkReal> x6205 = IKatan2WithCheck(IkReal((((r22*x6200))+((r22*x6201)))),IkReal((((x6201*x6202))+(((-1.0)*x6201*x6203))+((x6200*x6202))+(((-1.0)*x6200*x6203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6204.value)))+(x6205.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6206=IKsin(j4);
IkReal x6207=IKcos(j4);
IkReal x6208=(r21*sj5);
IkReal x6209=(cj5*r20);
IkReal x6210=((1.0)*x6207);
evalcond[0]=((((-1.0)*x6206*x6209))+((x6206*x6208))+(((-1.0)*r22*x6210)));
evalcond[1]=(((x6207*x6208))+((cj2*sj1))+((r22*x6206))+(((-1.0)*x6209*x6210))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6211=(cj5*sj4);
IkReal x6212=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x6212))+(((-1.0)*r00*x6211)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6211))+(((-1.0)*r11*x6212))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x6212))+(((-1.0)*r00*x6211))))+IKsqr((((r10*x6211))+(((-1.0)*r11*x6212))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x6212))+(((-1.0)*r00*x6211))), (((r10*x6211))+(((-1.0)*r11*x6212))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6213=IKcos(j0);
IkReal x6214=IKsin(j0);
IkReal x6215=(cj5*r01);
IkReal x6216=((1.0)*cj1);
IkReal x6217=((0.39225)*sj1);
IkReal x6218=(r11*sj5);
IkReal x6219=((0.39225)*cj2);
IkReal x6220=((1.0)*sj1);
IkReal x6221=(r00*sj5);
IkReal x6222=(cj5*r11);
IkReal x6223=((1.0)*cj4);
IkReal x6224=(r01*sj5);
IkReal x6225=(r10*sj5);
IkReal x6226=(sj2*x6213);
IkReal x6227=(sj2*x6214);
IkReal x6228=(cj5*x6223);
IkReal x6229=(cj1*x6213);
IkReal x6230=(cj1*x6214);
IkReal x6231=(cj2*x6213);
IkReal x6232=((1.0)*cj5*sj4);
IkReal x6233=(cj2*x6214);
evalcond[0]=(x6213+(((-1.0)*r10*x6232))+(((-1.0)*r12*x6223))+((sj4*x6218)));
evalcond[1]=((((-1.0)*x6214))+((sj4*x6224))+(((-1.0)*r00*x6232))+(((-1.0)*r02*x6223)));
evalcond[2]=(x6215+x6221+(((-1.0)*x6216*x6226))+(((-1.0)*x6220*x6231)));
evalcond[3]=(x6222+x6225+(((-1.0)*x6216*x6227))+(((-1.0)*x6220*x6233)));
evalcond[4]=(((sj1*x6226))+(((-1.0)*r00*x6228))+((r02*sj4))+(((-1.0)*x6216*x6231))+((cj4*x6224)));
evalcond[5]=(((sj1*x6227))+((r12*sj4))+(((-1.0)*x6216*x6233))+((cj4*x6218))+(((-1.0)*r10*x6228)));
evalcond[6]=((((-0.09465)*x6221))+((x6219*x6229))+(((-0.10915)*x6214))+(((-1.0)*px))+(((-1.0)*x6217*x6226))+(((0.425)*x6229))+(((-0.09465)*x6215)));
evalcond[7]=((((-0.09465)*x6222))+(((-0.09465)*x6225))+(((0.10915)*x6213))+((x6219*x6230))+(((-1.0)*py))+(((-1.0)*x6217*x6227))+(((0.425)*x6230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6234=((1.0)*cj5);
IkReal x6235=((1.0)*sj5);
CheckValue<IkReal> x6236 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6234))+(((-1.0)*r10*x6235)))),IkReal(((((-1.0)*r00*x6235))+(((-1.0)*r01*x6234)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6236.valid){
continue;
}
CheckValue<IkReal> x6237=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6237.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6236.value)+(((1.5707963267949)*(x6237.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6238=IKcos(j0);
IkReal x6239=IKsin(j0);
IkReal x6240=(cj5*r01);
IkReal x6241=((1.0)*cj1);
IkReal x6242=((0.39225)*sj1);
IkReal x6243=(cj5*r11);
IkReal x6244=(r00*sj5);
IkReal x6245=((0.39225)*cj2);
IkReal x6246=(r10*sj5);
IkReal x6247=(sj2*x6238);
IkReal x6248=(sj2*x6239);
IkReal x6249=(cj1*x6238);
IkReal x6250=((1.0)*cj2*sj1);
IkReal x6251=(cj1*x6239);
evalcond[0]=(x6240+x6244+(((-1.0)*x6238*x6250))+(((-1.0)*x6241*x6247)));
evalcond[1]=(x6243+x6246+(((-1.0)*x6239*x6250))+(((-1.0)*x6241*x6248)));
evalcond[2]=((((-1.0)*x6242*x6247))+(((-0.09465)*x6240))+(((-0.09465)*x6244))+((x6245*x6249))+(((0.425)*x6249))+(((-0.10915)*x6239))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*x6242*x6248))+(((-0.09465)*x6246))+(((-0.09465)*x6243))+((x6245*x6251))+(((0.10915)*x6238))+(((-1.0)*py))+(((0.425)*x6251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6252=((1.0)*cj5);
IkReal x6253=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6252)));
j4eval[0]=x6253;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x6252))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6253);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6254=((1.0)*cj5);
IkReal x6255=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6254)));
j4eval[0]=x6255;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6254))))));
j4eval[2]=IKsign(x6255);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6256=((1.0)*sj0);
IkReal x6257=((1.0)*cj0);
IkReal x6258=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6258;
j4eval[1]=((IKabs(((((-1.0)*r02*x6257))+(((-1.0)*r12*x6256)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6256))+(((-1.0)*r01*sj5*x6257))))));
j4eval[2]=IKsign(x6258);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6259=((-1.0)*r20);
IkReal x6261 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6261)==0){
continue;
}
IkReal x6260=pow(x6261,-0.5);
CheckValue<IkReal> x6262 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6259),IKFAST_ATAN2_MAGTHRESH);
if(!x6262.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6262.value));
IkReal gconst115=(r21*x6260);
IkReal gconst116=(x6259*x6260);
CheckValue<IkReal> x6263 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6263.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6263.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6264=((-1.0)*r20);
IkReal x6265=x6260;
CheckValue<IkReal> x6267 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6264),IKFAST_ATAN2_MAGTHRESH);
if(!x6267.valid){
continue;
}
IkReal x6266=((-1.0)*(x6267.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6266;
IkReal gconst114=x6266;
IkReal gconst115=(r21*x6265);
IkReal gconst116=(x6264*x6265);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6268=((-1.0)*r20);
IkReal x6269=x6260;
CheckValue<IkReal> x6271 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6268),IKFAST_ATAN2_MAGTHRESH);
if(!x6271.valid){
continue;
}
IkReal x6270=((-1.0)*(x6271.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6270;
IkReal gconst114=x6270;
IkReal gconst115=(r21*x6269);
IkReal gconst116=(x6268*x6269);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6272=((-1.0)*r20);
IkReal x6273=x6260;
CheckValue<IkReal> x6275 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6272),IKFAST_ATAN2_MAGTHRESH);
if(!x6275.valid){
continue;
}
IkReal x6274=((-1.0)*(x6275.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6274;
IkReal gconst114=x6274;
IkReal gconst115=(r21*x6273);
IkReal gconst116=(x6272*x6273);
IkReal x6276=((1.0)*(r22*r22));
CheckValue<IkReal> x6280=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6276))),-1);
if(!x6280.valid){
continue;
}
IkReal x6277=x6280.value;
IkReal x6278=((1.0)*x6277);
IkReal x6279=((((-1.0)*x6278*(r20*r20*r20*r20)))+(((-1.0)*x6278*(r21*r21*r21*r21)))+(((-1.0)*x6276))+(((-2.0)*x6277*(r20*r20)*(r21*r21))));
j4eval[0]=x6279;
j4eval[1]=IKsign(x6279);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6281=(cj2*sj1);
IkReal x6282=(gconst115*r21);
IkReal x6283=(cj1*sj2);
IkReal x6284=((1.0)*gconst116*r20);
CheckValue<IkReal> x6285=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6282*x6282)))+(((-1.0)*gconst116*r20*x6284))+(((2.0)*gconst116*r20*x6282))+(((-1.0)*(r22*r22))))),-1);
if(!x6285.valid){
continue;
}
CheckValue<IkReal> x6286 = IKatan2WithCheck(IkReal((((r22*x6281))+((r22*x6283)))),IkReal(((((-1.0)*x6283*x6284))+((x6282*x6283))+(((-1.0)*x6281*x6284))+((x6281*x6282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6285.value)))+(x6286.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6287=IKsin(j4);
IkReal x6288=IKcos(j4);
IkReal x6289=(sj1*sj2);
IkReal x6290=((1.0)*x6288);
IkReal x6291=((1.0)*cj1*cj2);
IkReal x6292=(gconst115*x6287);
IkReal x6293=(gconst115*x6288);
IkReal x6294=((1.0)*gconst116*x6287);
evalcond[0]=((((-1.0)*r20*x6294))+(((-1.0)*r22*x6290))+((r21*x6292)));
evalcond[1]=(cj0+((r11*x6292))+(((-1.0)*r10*x6294))+(((-1.0)*r12*x6290)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x6294))+((r01*x6292))+(((-1.0)*r02*x6290)));
evalcond[3]=(((cj2*sj1))+((r22*x6287))+((cj1*sj2))+(((-1.0)*gconst116*r20*x6290))+((r21*x6293)));
evalcond[4]=(((r01*x6293))+(((-1.0)*gconst116*r00*x6290))+((cj0*x6289))+((r02*x6287))+(((-1.0)*cj0*x6291)));
evalcond[5]=(((r11*x6293))+((r12*x6287))+((sj0*x6289))+(((-1.0)*gconst116*r10*x6290))+(((-1.0)*sj0*x6291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6295=((1.0)*gconst116);
CheckValue<IkReal> x6296 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6295))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6296.valid){
continue;
}
CheckValue<IkReal> x6297=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6295)))),-1);
if(!x6297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6296.value)+(((1.5707963267949)*(x6297.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6298=IKsin(j4);
IkReal x6299=IKcos(j4);
IkReal x6300=(sj1*sj2);
IkReal x6301=((1.0)*x6299);
IkReal x6302=((1.0)*cj1*cj2);
IkReal x6303=(gconst115*x6298);
IkReal x6304=(gconst115*x6299);
IkReal x6305=((1.0)*gconst116*x6298);
evalcond[0]=(((r21*x6303))+(((-1.0)*r20*x6305))+(((-1.0)*r22*x6301)));
evalcond[1]=(cj0+(((-1.0)*r10*x6305))+(((-1.0)*r12*x6301))+((r11*x6303)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6301))+((r01*x6303))+(((-1.0)*r00*x6305)));
evalcond[3]=(((cj2*sj1))+((r22*x6298))+((cj1*sj2))+((r21*x6304))+(((-1.0)*gconst116*r20*x6301)));
evalcond[4]=(((r01*x6304))+((cj0*x6300))+((r02*x6298))+(((-1.0)*gconst116*r00*x6301))+(((-1.0)*cj0*x6302)));
evalcond[5]=(((r11*x6304))+(((-1.0)*sj0*x6302))+((r12*x6298))+(((-1.0)*gconst116*r10*x6301))+((sj0*x6300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6306=((1.0)*gconst116);
CheckValue<IkReal> x6307=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6306)))),-1);
if(!x6307.valid){
continue;
}
CheckValue<IkReal> x6308 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x6306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6307.value)))+(x6308.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6309=IKsin(j4);
IkReal x6310=IKcos(j4);
IkReal x6311=(sj1*sj2);
IkReal x6312=((1.0)*x6310);
IkReal x6313=((1.0)*cj1*cj2);
IkReal x6314=(gconst115*x6309);
IkReal x6315=(gconst115*x6310);
IkReal x6316=((1.0)*gconst116*x6309);
evalcond[0]=((((-1.0)*r22*x6312))+((r21*x6314))+(((-1.0)*r20*x6316)));
evalcond[1]=(cj0+(((-1.0)*r12*x6312))+(((-1.0)*r10*x6316))+((r11*x6314)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6312))+((r01*x6314))+(((-1.0)*r00*x6316)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6309))+((r21*x6315))+(((-1.0)*gconst116*r20*x6312)));
evalcond[4]=(((r01*x6315))+((r02*x6309))+((cj0*x6311))+(((-1.0)*gconst116*r00*x6312))+(((-1.0)*cj0*x6313)));
evalcond[5]=(((r11*x6315))+(((-1.0)*sj0*x6313))+((r12*x6309))+(((-1.0)*gconst116*r10*x6312))+((sj0*x6311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6317=((-1.0)*r21);
IkReal x6319 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6319)==0){
continue;
}
IkReal x6318=pow(x6319,-0.5);
CheckValue<IkReal> x6320 = IKatan2WithCheck(IkReal(x6317),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6320.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6320.value))));
IkReal gconst118=(x6317*x6318);
IkReal gconst119=((1.0)*r20*x6318);
CheckValue<IkReal> x6321 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6321.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6321.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6322=((-1.0)*r21);
CheckValue<IkReal> x6325 = IKatan2WithCheck(IkReal(x6322),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6325.valid){
continue;
}
IkReal x6323=((1.0)*(x6325.value));
IkReal x6324=x6318;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6323)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6323)));
IkReal gconst118=(x6322*x6324);
IkReal gconst119=((1.0)*r20*x6324);
IkReal x6326=r22*r22;
IkReal x6327=((1.0)*x6326);
CheckValue<IkReal> x6331=IKPowWithIntegerCheck(((-1.0)+x6326),-1);
if(!x6331.valid){
continue;
}
IkReal x6328=x6331.value;
if((((1.0)+(((-1.0)*x6327)))) < -0.00001)
continue;
IkReal x6329=IKsqrt(((1.0)+(((-1.0)*x6327))));
IkReal x6330=(cj0*x6328*x6329);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x6327*x6330))+x6330))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6332=((-1.0)*r21);
CheckValue<IkReal> x6335 = IKatan2WithCheck(IkReal(x6332),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6335.valid){
continue;
}
IkReal x6333=((1.0)*(x6335.value));
IkReal x6334=x6318;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6333)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6333)));
IkReal gconst118=(x6332*x6334);
IkReal gconst119=((1.0)*r20*x6334);
IkReal x6336=r22*r22;
IkReal x6337=((1.0)*x6336);
CheckValue<IkReal> x6341=IKPowWithIntegerCheck(((-1.0)+x6336),-1);
if(!x6341.valid){
continue;
}
IkReal x6338=x6341.value;
if((((1.0)+(((-1.0)*x6337)))) < -0.00001)
continue;
IkReal x6339=IKsqrt(((1.0)+(((-1.0)*x6337))));
IkReal x6340=(sj0*x6338*x6339);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6340+(((-1.0)*x6337*x6340))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6342=((-1.0)*r21);
CheckValue<IkReal> x6345 = IKatan2WithCheck(IkReal(x6342),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6345.valid){
continue;
}
IkReal x6343=((1.0)*(x6345.value));
IkReal x6344=x6318;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6343)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6343)));
IkReal gconst118=(x6342*x6344);
IkReal gconst119=((1.0)*r20*x6344);
IkReal x6346=r22*r22;
IkReal x6347=(r12*sj0);
IkReal x6348=(cj0*r02);
CheckValue<IkReal> x6352=IKPowWithIntegerCheck(((-1.0)+x6346),-1);
if(!x6352.valid){
continue;
}
IkReal x6349=x6352.value;
if((((1.0)+(((-1.0)*x6346)))) < -0.00001)
continue;
IkReal x6350=IKsqrt(((1.0)+(((-1.0)*x6346))));
IkReal x6351=(r22*x6349*x6350);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x6347))+(((-1.0)*x6348)))))+(IKabs((((x6348*x6351))+((x6347*x6351))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6353=((1.0)*sj0);
IkReal x6354=((1.0)*gconst118);
CheckValue<IkReal> x6355 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6353)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x6353))+(((-1.0)*cj0*r01*x6354))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6355.valid){
continue;
}
CheckValue<IkReal> x6356=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6354)))),-1);
if(!x6356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6355.value)+(((1.5707963267949)*(x6356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6357=IKsin(j4);
IkReal x6358=IKcos(j4);
IkReal x6359=(gconst118*r01);
IkReal x6360=(sj1*sj2);
IkReal x6361=(gconst119*r20);
IkReal x6362=(gconst119*r10);
IkReal x6363=(gconst119*r00);
IkReal x6364=(gconst118*r21);
IkReal x6365=(gconst118*r11);
IkReal x6366=((1.0)*x6358);
IkReal x6367=((1.0)*cj1*cj2);
IkReal x6368=((1.0)*x6357);
evalcond[0]=((((-1.0)*x6361*x6368))+(((-1.0)*r22*x6366))+((x6357*x6364)));
evalcond[1]=((((-1.0)*x6362*x6368))+cj0+(((-1.0)*r12*x6366))+((x6357*x6365)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6366))+(((-1.0)*x6363*x6368))+((x6357*x6359)));
evalcond[3]=(((cj2*sj1))+((x6358*x6364))+(((-1.0)*x6361*x6366))+((cj1*sj2))+((r22*x6357)));
evalcond[4]=(((x6358*x6359))+((cj0*x6360))+((r02*x6357))+(((-1.0)*x6363*x6366))+(((-1.0)*cj0*x6367)));
evalcond[5]=((((-1.0)*x6362*x6366))+(((-1.0)*sj0*x6367))+((x6358*x6365))+((sj0*x6360))+((r12*x6357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6369=((1.0)*gconst119);
CheckValue<IkReal> x6370=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x6369)))),-1);
if(!x6370.valid){
continue;
}
CheckValue<IkReal> x6371 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x6369)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6370.value)))+(x6371.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6372=IKsin(j4);
IkReal x6373=IKcos(j4);
IkReal x6374=(gconst118*r01);
IkReal x6375=(sj1*sj2);
IkReal x6376=(gconst119*r20);
IkReal x6377=(gconst119*r10);
IkReal x6378=(gconst119*r00);
IkReal x6379=(gconst118*r21);
IkReal x6380=(gconst118*r11);
IkReal x6381=((1.0)*x6373);
IkReal x6382=((1.0)*cj1*cj2);
IkReal x6383=((1.0)*x6372);
evalcond[0]=((((-1.0)*x6376*x6383))+((x6372*x6379))+(((-1.0)*r22*x6381)));
evalcond[1]=(cj0+(((-1.0)*r12*x6381))+(((-1.0)*x6377*x6383))+((x6372*x6380)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6378*x6383))+((x6372*x6374))+(((-1.0)*r02*x6381)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6376*x6381))+((cj1*sj2))+((x6373*x6379))+((r22*x6372)));
evalcond[4]=((((-1.0)*x6378*x6381))+((x6373*x6374))+(((-1.0)*cj0*x6382))+((cj0*x6375))+((r02*x6372)));
evalcond[5]=((((-1.0)*x6377*x6381))+((r12*x6372))+((sj0*x6375))+(((-1.0)*sj0*x6382))+((x6373*x6380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6384=((1.0)*gconst119);
CheckValue<IkReal> x6385 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6385.valid){
continue;
}
CheckValue<IkReal> x6386=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x6384)))),-1);
if(!x6386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6385.value)+(((1.5707963267949)*(x6386.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6387=IKsin(j4);
IkReal x6388=IKcos(j4);
IkReal x6389=(gconst118*r01);
IkReal x6390=(sj1*sj2);
IkReal x6391=(gconst119*r20);
IkReal x6392=(gconst119*r10);
IkReal x6393=(gconst119*r00);
IkReal x6394=(gconst118*r21);
IkReal x6395=(gconst118*r11);
IkReal x6396=((1.0)*x6388);
IkReal x6397=((1.0)*cj1*cj2);
IkReal x6398=((1.0)*x6387);
evalcond[0]=(((x6387*x6394))+(((-1.0)*r22*x6396))+(((-1.0)*x6391*x6398)));
evalcond[1]=(cj0+((x6387*x6395))+(((-1.0)*x6392*x6398))+(((-1.0)*r12*x6396)));
evalcond[2]=((((-1.0)*sj0))+((x6387*x6389))+(((-1.0)*r02*x6396))+(((-1.0)*x6393*x6398)));
evalcond[3]=(((cj2*sj1))+((r22*x6387))+((cj1*sj2))+((x6388*x6394))+(((-1.0)*x6391*x6396)));
evalcond[4]=(((cj0*x6390))+(((-1.0)*cj0*x6397))+((x6388*x6389))+((r02*x6387))+(((-1.0)*x6393*x6396)));
evalcond[5]=((((-1.0)*sj0*x6397))+((sj0*x6390))+((x6388*x6395))+(((-1.0)*x6392*x6396))+((r12*x6387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6399=((-1.0)*r10);
IkReal x6401 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6401)==0){
continue;
}
IkReal x6400=pow(x6401,-0.5);
CheckValue<IkReal> x6402 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6399),IKFAST_ATAN2_MAGTHRESH);
if(!x6402.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6402.value));
IkReal gconst121=(r11*x6400);
IkReal gconst122=(x6399*x6400);
CheckValue<IkReal> x6403 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6403.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6403.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6404=((-1.0)*r10);
IkReal x6405=x6400;
CheckValue<IkReal> x6407 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6404),IKFAST_ATAN2_MAGTHRESH);
if(!x6407.valid){
continue;
}
IkReal x6406=((-1.0)*(x6407.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6406;
IkReal gconst120=x6406;
IkReal gconst121=(r11*x6405);
IkReal gconst122=(x6404*x6405);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6408=((1.0)*sj0);
IkReal x6409=((1.0)*gconst121);
CheckValue<IkReal> x6410 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6408)))),IkReal(((((-1.0)*cj0*r01*x6409))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x6408))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6410.valid){
continue;
}
CheckValue<IkReal> x6411=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6409))+(((-1.0)*gconst122*r21)))),-1);
if(!x6411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6410.value)+(((1.5707963267949)*(x6411.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6412=IKsin(j4);
IkReal x6413=IKcos(j4);
IkReal x6414=(gconst121*r11);
IkReal x6415=(sj1*sj2);
IkReal x6416=(gconst122*r00);
IkReal x6417=(gconst122*r10);
IkReal x6418=(gconst122*r20);
IkReal x6419=((1.0)*x6413);
IkReal x6420=((1.0)*cj1*cj2);
IkReal x6421=((1.0)*x6412);
IkReal x6422=(gconst121*x6412);
IkReal x6423=(gconst121*x6413);
evalcond[0]=(((r21*x6422))+(((-1.0)*x6418*x6421))+(((-1.0)*r22*x6419)));
evalcond[1]=((((-1.0)*x6417*x6421))+cj0+(((-1.0)*r12*x6419))+((x6412*x6414)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6419))+(((-1.0)*x6416*x6421))+((r01*x6422)));
evalcond[3]=(((r21*x6423))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6418*x6419))+((r22*x6412)));
evalcond[4]=(((r02*x6412))+(((-1.0)*cj0*x6420))+((cj0*x6415))+(((-1.0)*x6416*x6419))+((r01*x6423)));
evalcond[5]=(((sj0*x6415))+(((-1.0)*x6417*x6419))+((x6413*x6414))+(((-1.0)*sj0*x6420))+((r12*x6412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6424=((1.0)*gconst122);
CheckValue<IkReal> x6425=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x6424)))),-1);
if(!x6425.valid){
continue;
}
CheckValue<IkReal> x6426 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6424))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6425.value)))+(x6426.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6427=IKsin(j4);
IkReal x6428=IKcos(j4);
IkReal x6429=(gconst121*r11);
IkReal x6430=(sj1*sj2);
IkReal x6431=(gconst122*r00);
IkReal x6432=(gconst122*r10);
IkReal x6433=(gconst122*r20);
IkReal x6434=((1.0)*x6428);
IkReal x6435=((1.0)*cj1*cj2);
IkReal x6436=((1.0)*x6427);
IkReal x6437=(gconst121*x6427);
IkReal x6438=(gconst121*x6428);
evalcond[0]=((((-1.0)*r22*x6434))+(((-1.0)*x6433*x6436))+((r21*x6437)));
evalcond[1]=(cj0+(((-1.0)*r12*x6434))+(((-1.0)*x6432*x6436))+((x6427*x6429)));
evalcond[2]=(((r01*x6437))+(((-1.0)*sj0))+(((-1.0)*r02*x6434))+(((-1.0)*x6431*x6436)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6433*x6434))+((r21*x6438))+((r22*x6427)));
evalcond[4]=(((r01*x6438))+((cj0*x6430))+((r02*x6427))+(((-1.0)*x6431*x6434))+(((-1.0)*cj0*x6435)));
evalcond[5]=((((-1.0)*sj0*x6435))+(((-1.0)*x6432*x6434))+((r12*x6427))+((sj0*x6430))+((x6428*x6429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6439=((-1.0)*r11);
IkReal x6441 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6441)==0){
continue;
}
IkReal x6440=pow(x6441,-0.5);
CheckValue<IkReal> x6442 = IKatan2WithCheck(IkReal(x6439),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6442.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6442.value))));
IkReal gconst124=(x6439*x6440);
IkReal gconst125=((1.0)*r10*x6440);
CheckValue<IkReal> x6443 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6443.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6443.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6444=((-1.0)*r11);
CheckValue<IkReal> x6447 = IKatan2WithCheck(IkReal(x6444),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6447.valid){
continue;
}
IkReal x6445=((1.0)*(x6447.value));
IkReal x6446=x6440;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6445)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6445)));
IkReal gconst124=(x6444*x6446);
IkReal gconst125=((1.0)*r10*x6446);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6448=((-1.0)*r11);
CheckValue<IkReal> x6451 = IKatan2WithCheck(IkReal(x6448),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6451.valid){
continue;
}
IkReal x6449=((1.0)*(x6451.value));
IkReal x6450=x6440;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6449)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6449)));
IkReal gconst124=(x6448*x6450);
IkReal gconst125=((1.0)*r10*x6450);
IkReal x6452=r12*r12;
IkReal x6453=((1.0)*sj0);
IkReal x6454=(cj0*r02);
IkReal x6455=x6440;
j4eval[0]=((IKabs(((((-1.0)*x6454))+(((-1.0)*r12*x6453)))))+(IKabs(((((-1.0)*x6453*x6455))+((r12*x6454*x6455))+((sj0*x6452*x6455))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6456=((-1.0)*r11);
CheckValue<IkReal> x6459 = IKatan2WithCheck(IkReal(x6456),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6459.valid){
continue;
}
IkReal x6457=((1.0)*(x6459.value));
IkReal x6458=x6440;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6457)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6457)));
IkReal gconst124=(x6456*x6458);
IkReal gconst125=((1.0)*r10*x6458);
IkReal x6460=r12*r12;
IkReal x6461=((1.0)+(((-1.0)*x6460)));
IkReal x6462=(cj2*r22*sj1);
IkReal x6463=(cj1*r22*sj2);
CheckValue<IkReal> x6470=IKPowWithIntegerCheck(x6461,-1);
if(!x6470.valid){
continue;
}
IkReal x6464=x6470.value;
CheckValue<IkReal> x6471=IKPowWithIntegerCheck(((-1.0)+x6460),-1);
if(!x6471.valid){
continue;
}
IkReal x6465=x6471.value;
IkReal x6466=((1.0)*x6464);
if((x6461) < -0.00001)
continue;
IkReal x6467=IKsqrt(x6461);
IkReal x6468=((1.0)*r12*x6465*x6467);
IkReal x6469=((((-1.0)*x6466*(r10*r10)*(r20*r20)))+(((-1.0)*x6466*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x6464)));
j4eval[0]=x6469;
j4eval[1]=IKsign(x6469);
j4eval[2]=((IKabs((x6462+x6463)))+(IKabs(((((-1.0)*x6463*x6468))+(((-1.0)*x6462*x6468))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6472=(gconst124*r21);
IkReal x6473=(cj1*sj2);
IkReal x6474=(cj2*sj1);
IkReal x6475=(gconst125*r20);
CheckValue<IkReal> x6476=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6475*x6475)))+(((-1.0)*(x6472*x6472)))+(((-1.0)*(r22*r22)))+(((2.0)*x6472*x6475)))),-1);
if(!x6476.valid){
continue;
}
CheckValue<IkReal> x6477 = IKatan2WithCheck(IkReal((((r22*x6473))+((r22*x6474)))),IkReal(((((-1.0)*x6473*x6475))+((x6472*x6473))+((x6472*x6474))+(((-1.0)*x6474*x6475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6476.value)))+(x6477.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6478=IKsin(j4);
IkReal x6479=IKcos(j4);
IkReal x6480=(sj1*sj2);
IkReal x6481=(gconst125*r20);
IkReal x6482=(gconst124*r01);
IkReal x6483=(gconst125*r00);
IkReal x6484=(gconst125*r10);
IkReal x6485=((1.0)*x6479);
IkReal x6486=((1.0)*cj1*cj2);
IkReal x6487=((1.0)*x6478);
IkReal x6488=(gconst124*x6478);
IkReal x6489=(gconst124*x6479);
evalcond[0]=(((r21*x6488))+(((-1.0)*r22*x6485))+(((-1.0)*x6481*x6487)));
evalcond[1]=(((r11*x6488))+cj0+(((-1.0)*r12*x6485))+(((-1.0)*x6484*x6487)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6485))+(((-1.0)*x6483*x6487))+((x6478*x6482)));
evalcond[3]=(((r22*x6478))+((r21*x6489))+((cj2*sj1))+(((-1.0)*x6481*x6485))+((cj1*sj2)));
evalcond[4]=(((x6479*x6482))+((cj0*x6480))+((r02*x6478))+(((-1.0)*cj0*x6486))+(((-1.0)*x6483*x6485)));
evalcond[5]=(((r11*x6489))+(((-1.0)*sj0*x6486))+((r12*x6478))+((sj0*x6480))+(((-1.0)*x6484*x6485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6490=((1.0)*sj0);
IkReal x6491=((1.0)*cj0);
CheckValue<IkReal> x6492 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6491))+(((-1.0)*r12*x6490)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r11*x6490))+(((-1.0)*gconst124*r01*x6491))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6492.valid){
continue;
}
CheckValue<IkReal> x6493=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6492.value)+(((1.5707963267949)*(x6493.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6494=IKsin(j4);
IkReal x6495=IKcos(j4);
IkReal x6496=(sj1*sj2);
IkReal x6497=(gconst125*r20);
IkReal x6498=(gconst124*r01);
IkReal x6499=(gconst125*r00);
IkReal x6500=(gconst125*r10);
IkReal x6501=((1.0)*x6495);
IkReal x6502=((1.0)*cj1*cj2);
IkReal x6503=((1.0)*x6494);
IkReal x6504=(gconst124*x6494);
IkReal x6505=(gconst124*x6495);
evalcond[0]=(((r21*x6504))+(((-1.0)*x6497*x6503))+(((-1.0)*r22*x6501)));
evalcond[1]=((((-1.0)*r12*x6501))+cj0+(((-1.0)*x6500*x6503))+((r11*x6504)));
evalcond[2]=((((-1.0)*sj0))+((x6494*x6498))+(((-1.0)*r02*x6501))+(((-1.0)*x6499*x6503)));
evalcond[3]=(((cj2*sj1))+((r21*x6505))+((cj1*sj2))+(((-1.0)*x6497*x6501))+((r22*x6494)));
evalcond[4]=(((cj0*x6496))+((r02*x6494))+((x6495*x6498))+(((-1.0)*cj0*x6502))+(((-1.0)*x6499*x6501)));
evalcond[5]=((((-1.0)*x6500*x6501))+((r12*x6494))+(((-1.0)*sj0*x6502))+((sj0*x6496))+((r11*x6505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6506=((1.0)*gconst125);
CheckValue<IkReal> x6507 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6506))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6507.valid){
continue;
}
CheckValue<IkReal> x6508=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6506)))),-1);
if(!x6508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6507.value)+(((1.5707963267949)*(x6508.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6509=IKsin(j4);
IkReal x6510=IKcos(j4);
IkReal x6511=(sj1*sj2);
IkReal x6512=(gconst125*r20);
IkReal x6513=(gconst124*r01);
IkReal x6514=(gconst125*r00);
IkReal x6515=(gconst125*r10);
IkReal x6516=((1.0)*x6510);
IkReal x6517=((1.0)*cj1*cj2);
IkReal x6518=((1.0)*x6509);
IkReal x6519=(gconst124*x6509);
IkReal x6520=(gconst124*x6510);
evalcond[0]=((((-1.0)*x6512*x6518))+(((-1.0)*r22*x6516))+((r21*x6519)));
evalcond[1]=(cj0+((r11*x6519))+(((-1.0)*x6515*x6518))+(((-1.0)*r12*x6516)));
evalcond[2]=((((-1.0)*r02*x6516))+((x6509*x6513))+(((-1.0)*sj0))+(((-1.0)*x6514*x6518)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6512*x6516))+((cj1*sj2))+((r22*x6509))+((r21*x6520)));
evalcond[4]=((((-1.0)*cj0*x6517))+((r02*x6509))+((cj0*x6511))+(((-1.0)*x6514*x6516))+((x6510*x6513)));
evalcond[5]=(((r12*x6509))+(((-1.0)*x6515*x6516))+((sj0*x6511))+((r11*x6520))+(((-1.0)*sj0*x6517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6521=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6521;
j4eval[1]=IKsign(x6521);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6522=((1.0)*cj5);
IkReal x6523=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6522)));
j4eval[0]=x6523;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6522)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6524=cj5*cj5;
IkReal x6525=r11*r11;
IkReal x6526=(cj5*r10);
IkReal x6527=(r11*sj5);
IkReal x6528=(((x6524*x6525))+(((-1.0)*x6524*(r10*r10)))+(((-1.0)*x6525))+(((-1.0)*(r12*r12)))+(((2.0)*x6526*x6527)));
j4eval[0]=x6528;
j4eval[1]=IKsign(x6528);
j4eval[2]=((IKabs(r12))+(IKabs((x6527+(((-1.0)*x6526))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6529=cj5*cj5;
IkReal x6530=r11*r11;
IkReal x6531=(cj5*r10);
IkReal x6532=(r11*sj5);
CheckValue<IkReal> x6533=IKPowWithIntegerCheck(IKsign(((((2.0)*x6531*x6532))+(((-1.0)*x6530))+(((-1.0)*(r12*r12)))+((x6529*x6530))+(((-1.0)*x6529*(r10*r10))))),-1);
if(!x6533.valid){
continue;
}
CheckValue<IkReal> x6534 = IKatan2WithCheck(IkReal((x6532+(((-1.0)*x6531)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6533.value)))+(x6534.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6535=IKcos(j4);
IkReal x6536=IKsin(j4);
IkReal x6537=(cj5*r00);
IkReal x6538=(cj5*r10);
IkReal x6539=(r21*sj5);
IkReal x6540=(cj5*r20);
IkReal x6541=((1.0)*x6535);
IkReal x6542=((1.0)*x6536);
IkReal x6543=(sj5*x6536);
IkReal x6544=(sj5*x6535);
evalcond[0]=((((-1.0)*x6538*x6541))+((r11*x6544))+((r12*x6536)));
evalcond[1]=(((x6536*x6539))+(((-1.0)*x6540*x6542))+(((-1.0)*r22*x6541)));
evalcond[2]=((((-1.0)*x6537*x6542))+(((-1.0)*r02*x6541))+((r01*x6543)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6541))+(((-1.0)*x6538*x6542))+((r11*x6543)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6540*x6541))+((cj1*sj2))+((r22*x6536))+((x6535*x6539)));
evalcond[5]=(((r02*x6536))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6537*x6541))+((r01*x6544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6545=((1.0)*cj5);
CheckValue<IkReal> x6546 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6546.valid){
continue;
}
CheckValue<IkReal> x6547=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6545)))),-1);
if(!x6547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6546.value)+(((1.5707963267949)*(x6547.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6548=IKcos(j4);
IkReal x6549=IKsin(j4);
IkReal x6550=(cj5*r00);
IkReal x6551=(cj5*r10);
IkReal x6552=(r21*sj5);
IkReal x6553=(cj5*r20);
IkReal x6554=((1.0)*x6548);
IkReal x6555=((1.0)*x6549);
IkReal x6556=(sj5*x6549);
IkReal x6557=(sj5*x6548);
evalcond[0]=((((-1.0)*x6551*x6554))+((r11*x6557))+((r12*x6549)));
evalcond[1]=(((x6549*x6552))+(((-1.0)*x6553*x6555))+(((-1.0)*r22*x6554)));
evalcond[2]=((((-1.0)*x6550*x6555))+(((-1.0)*r02*x6554))+((r01*x6556)));
evalcond[3]=((1.0)+(((-1.0)*x6551*x6555))+(((-1.0)*r12*x6554))+((r11*x6556)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6553*x6554))+((cj1*sj2))+((r22*x6549))+((x6548*x6552)));
evalcond[5]=((((-1.0)*x6550*x6554))+((r02*x6549))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6558=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6558.valid){
continue;
}
CheckValue<IkReal> x6559 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6558.value)))+(x6559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6560=IKcos(j4);
IkReal x6561=IKsin(j4);
IkReal x6562=(cj5*r00);
IkReal x6563=(cj5*r10);
IkReal x6564=(r21*sj5);
IkReal x6565=(cj5*r20);
IkReal x6566=((1.0)*x6560);
IkReal x6567=((1.0)*x6561);
IkReal x6568=(sj5*x6561);
IkReal x6569=(sj5*x6560);
evalcond[0]=(((r12*x6561))+((r11*x6569))+(((-1.0)*x6563*x6566)));
evalcond[1]=((((-1.0)*x6565*x6567))+((x6561*x6564))+(((-1.0)*r22*x6566)));
evalcond[2]=((((-1.0)*r02*x6566))+((r01*x6568))+(((-1.0)*x6562*x6567)));
evalcond[3]=((1.0)+((r11*x6568))+(((-1.0)*x6563*x6567))+(((-1.0)*r12*x6566)));
evalcond[4]=((((-1.0)*x6565*x6566))+((cj2*sj1))+((r22*x6561))+((x6560*x6564))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6561))+((r01*x6569))+(((-1.0)*x6562*x6566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6570=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6570;
j4eval[1]=IKsign(x6570);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6571=((1.0)*cj5);
IkReal x6572=((((-1.0)*r21*x6571))+(((-1.0)*r20*sj5)));
j4eval[0]=x6572;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6571))))));
j4eval[2]=IKsign(x6572);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6573=cj5*cj5;
IkReal x6574=r11*r11;
IkReal x6575=(r11*sj5);
IkReal x6576=(cj5*r10);
IkReal x6577=((r12*r12)+(((-2.0)*x6575*x6576))+x6574+((x6573*(r10*r10)))+(((-1.0)*x6573*x6574)));
j4eval[0]=x6577;
j4eval[1]=IKsign(x6577);
j4eval[2]=((IKabs((x6575+(((-1.0)*x6576)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6578=cj5*cj5;
IkReal x6579=r11*r11;
IkReal x6580=(cj5*r10);
IkReal x6581=(r11*sj5);
CheckValue<IkReal> x6582=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6578*x6579))+(r12*r12)+x6579+((x6578*(r10*r10)))+(((-2.0)*x6580*x6581)))),-1);
if(!x6582.valid){
continue;
}
CheckValue<IkReal> x6583 = IKatan2WithCheck(IkReal(((((-1.0)*x6580))+x6581)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6582.value)))+(x6583.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6584=IKcos(j4);
IkReal x6585=IKsin(j4);
IkReal x6586=(cj5*r00);
IkReal x6587=(cj5*r10);
IkReal x6588=(r21*sj5);
IkReal x6589=(cj5*r20);
IkReal x6590=((1.0)*x6584);
IkReal x6591=((1.0)*x6585);
IkReal x6592=(sj5*x6585);
IkReal x6593=(sj5*x6584);
evalcond[0]=(((r11*x6593))+(((-1.0)*x6587*x6590))+((r12*x6585)));
evalcond[1]=((((-1.0)*x6589*x6591))+((x6585*x6588))+(((-1.0)*r22*x6590)));
evalcond[2]=((((-1.0)*r02*x6590))+((r01*x6592))+(((-1.0)*x6586*x6591)));
evalcond[3]=((-1.0)+((r11*x6592))+(((-1.0)*r12*x6590))+(((-1.0)*x6587*x6591)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6589*x6590))+((r22*x6585))+((cj1*sj2))+((x6584*x6588)));
evalcond[5]=(((r02*x6585))+(((-1.0)*sj1*sj2))+((r01*x6593))+((cj1*cj2))+(((-1.0)*x6586*x6590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6594=((1.0)*cj5);
CheckValue<IkReal> x6595 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x6594))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6595.valid){
continue;
}
CheckValue<IkReal> x6596=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6594))+(((-1.0)*r20*sj5)))),-1);
if(!x6596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6595.value)+(((1.5707963267949)*(x6596.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6597=IKcos(j4);
IkReal x6598=IKsin(j4);
IkReal x6599=(cj5*r00);
IkReal x6600=(cj5*r10);
IkReal x6601=(r21*sj5);
IkReal x6602=(cj5*r20);
IkReal x6603=((1.0)*x6597);
IkReal x6604=((1.0)*x6598);
IkReal x6605=(sj5*x6598);
IkReal x6606=(sj5*x6597);
evalcond[0]=(((r12*x6598))+(((-1.0)*x6600*x6603))+((r11*x6606)));
evalcond[1]=(((x6598*x6601))+(((-1.0)*r22*x6603))+(((-1.0)*x6602*x6604)));
evalcond[2]=((((-1.0)*x6599*x6604))+((r01*x6605))+(((-1.0)*r02*x6603)));
evalcond[3]=((-1.0)+(((-1.0)*x6600*x6604))+(((-1.0)*r12*x6603))+((r11*x6605)));
evalcond[4]=(((cj2*sj1))+((x6597*x6601))+((r22*x6598))+((cj1*sj2))+(((-1.0)*x6602*x6603)));
evalcond[5]=(((r02*x6598))+(((-1.0)*x6599*x6603))+((r01*x6606))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6607 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6607.valid){
continue;
}
CheckValue<IkReal> x6608=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6607.value)+(((1.5707963267949)*(x6608.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6609=IKcos(j4);
IkReal x6610=IKsin(j4);
IkReal x6611=(cj5*r00);
IkReal x6612=(cj5*r10);
IkReal x6613=(r21*sj5);
IkReal x6614=(cj5*r20);
IkReal x6615=((1.0)*x6609);
IkReal x6616=((1.0)*x6610);
IkReal x6617=(sj5*x6610);
IkReal x6618=(sj5*x6609);
evalcond[0]=((((-1.0)*x6612*x6615))+((r12*x6610))+((r11*x6618)));
evalcond[1]=((((-1.0)*r22*x6615))+(((-1.0)*x6614*x6616))+((x6610*x6613)));
evalcond[2]=((((-1.0)*x6611*x6616))+((r01*x6617))+(((-1.0)*r02*x6615)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6615))+(((-1.0)*x6612*x6616))+((r11*x6617)));
evalcond[4]=(((cj2*sj1))+((x6609*x6613))+((cj1*sj2))+(((-1.0)*x6614*x6615))+((r22*x6610)));
evalcond[5]=(((r02*x6610))+(((-1.0)*x6611*x6615))+((r01*x6618))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6619=((-1.0)*r00);
IkReal x6621 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6621)==0){
continue;
}
IkReal x6620=pow(x6621,-0.5);
CheckValue<IkReal> x6622 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6619),IKFAST_ATAN2_MAGTHRESH);
if(!x6622.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6622.value));
IkReal gconst127=(r01*x6620);
IkReal gconst128=(x6619*x6620);
CheckValue<IkReal> x6623 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6623.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6623.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6624=((-1.0)*r00);
IkReal x6625=x6620;
CheckValue<IkReal> x6627 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6624),IKFAST_ATAN2_MAGTHRESH);
if(!x6627.valid){
continue;
}
IkReal x6626=((-1.0)*(x6627.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6626;
IkReal gconst126=x6626;
IkReal gconst127=(r01*x6625);
IkReal gconst128=(x6624*x6625);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6628=((1.0)*sj0);
IkReal x6629=((1.0)*gconst127);
CheckValue<IkReal> x6630=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6629)))),-1);
if(!x6630.valid){
continue;
}
CheckValue<IkReal> x6631 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6628))+(((-1.0)*cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*gconst127*r11*x6628))+((cj0*gconst128*r00))+(((-1.0)*cj0*r01*x6629)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6630.value)))+(x6631.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6632=IKsin(j4);
IkReal x6633=IKcos(j4);
IkReal x6634=(gconst127*r01);
IkReal x6635=(sj1*sj2);
IkReal x6636=(gconst128*r10);
IkReal x6637=(gconst128*r00);
IkReal x6638=(gconst128*r20);
IkReal x6639=((1.0)*x6633);
IkReal x6640=((1.0)*cj1*cj2);
IkReal x6641=((1.0)*x6632);
IkReal x6642=(gconst127*x6633);
IkReal x6643=(gconst127*x6632);
evalcond[0]=((((-1.0)*x6638*x6641))+(((-1.0)*r22*x6639))+((r21*x6643)));
evalcond[1]=(cj0+(((-1.0)*x6636*x6641))+((r11*x6643))+(((-1.0)*r12*x6639)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6637*x6641))+((x6632*x6634))+(((-1.0)*r02*x6639)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6638*x6639))+((r21*x6642))+((cj1*sj2))+((r22*x6632)));
evalcond[4]=((((-1.0)*x6637*x6639))+((x6633*x6634))+(((-1.0)*cj0*x6640))+((cj0*x6635))+((r02*x6632)));
evalcond[5]=((((-1.0)*x6636*x6639))+((r11*x6642))+((r12*x6632))+(((-1.0)*sj0*x6640))+((sj0*x6635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6644=((1.0)*gconst128);
CheckValue<IkReal> x6645 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x6644)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6645.valid){
continue;
}
CheckValue<IkReal> x6646=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6644))+(((-1.0)*gconst127*r10)))),-1);
if(!x6646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6645.value)+(((1.5707963267949)*(x6646.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6647=IKsin(j4);
IkReal x6648=IKcos(j4);
IkReal x6649=(gconst127*r01);
IkReal x6650=(sj1*sj2);
IkReal x6651=(gconst128*r10);
IkReal x6652=(gconst128*r00);
IkReal x6653=(gconst128*r20);
IkReal x6654=((1.0)*x6648);
IkReal x6655=((1.0)*cj1*cj2);
IkReal x6656=((1.0)*x6647);
IkReal x6657=(gconst127*x6648);
IkReal x6658=(gconst127*x6647);
evalcond[0]=((((-1.0)*r22*x6654))+(((-1.0)*x6653*x6656))+((r21*x6658)));
evalcond[1]=((((-1.0)*x6651*x6656))+cj0+((r11*x6658))+(((-1.0)*r12*x6654)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6652*x6656))+((x6647*x6649))+(((-1.0)*r02*x6654)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6653*x6654))+((cj1*sj2))+((r22*x6647))+((r21*x6657)));
evalcond[4]=((((-1.0)*x6652*x6654))+(((-1.0)*cj0*x6655))+((r02*x6647))+((cj0*x6650))+((x6648*x6649)));
evalcond[5]=((((-1.0)*x6651*x6654))+((r11*x6657))+(((-1.0)*sj0*x6655))+((sj0*x6650))+((r12*x6647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6659=((-1.0)*r01);
IkReal x6661 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6661)==0){
continue;
}
IkReal x6660=pow(x6661,-0.5);
CheckValue<IkReal> x6662 = IKatan2WithCheck(IkReal(x6659),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6662.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6662.value))));
IkReal gconst130=(x6659*x6660);
IkReal gconst131=((1.0)*r00*x6660);
CheckValue<IkReal> x6663 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6663.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6663.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6664=((-1.0)*r01);
CheckValue<IkReal> x6667 = IKatan2WithCheck(IkReal(x6664),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6667.valid){
continue;
}
IkReal x6665=((1.0)*(x6667.value));
IkReal x6666=x6660;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6665)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6665)));
IkReal gconst130=(x6664*x6666);
IkReal gconst131=((1.0)*r00*x6666);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6668=((-1.0)*r01);
CheckValue<IkReal> x6671 = IKatan2WithCheck(IkReal(x6668),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6671.valid){
continue;
}
IkReal x6669=((1.0)*(x6671.value));
IkReal x6670=x6660;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6669)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6669)));
IkReal gconst130=(x6668*x6670);
IkReal gconst131=((1.0)*r00*x6670);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6672=((-1.0)*r01);
CheckValue<IkReal> x6675 = IKatan2WithCheck(IkReal(x6672),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6675.valid){
continue;
}
IkReal x6673=((1.0)*(x6675.value));
IkReal x6674=x6660;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6673)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6673)));
IkReal gconst130=(x6672*x6674);
IkReal gconst131=((1.0)*r00*x6674);
IkReal x6676=r02*r02;
IkReal x6677=(r12*sj0);
IkReal x6678=((1.0)*cj0);
IkReal x6679=x6660;
j4eval[0]=((IKabs((((cj0*x6676*x6679))+(((-1.0)*x6678*x6679))+((r02*x6677*x6679)))))+(IKabs(((((-1.0)*r02*x6678))+(((-1.0)*x6677))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6680=((1.0)*sj0);
IkReal x6681=((1.0)*gconst130);
CheckValue<IkReal> x6682 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6680)))),IkReal(((((-1.0)*gconst130*r11*x6680))+((gconst131*r10*sj0))+(((-1.0)*cj0*r01*x6681))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6682.valid){
continue;
}
CheckValue<IkReal> x6683=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6681))+(((-1.0)*gconst131*r21)))),-1);
if(!x6683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6682.value)+(((1.5707963267949)*(x6683.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6684=IKsin(j4);
IkReal x6685=IKcos(j4);
IkReal x6686=(gconst131*r10);
IkReal x6687=(sj1*sj2);
IkReal x6688=(gconst131*r20);
IkReal x6689=(gconst131*r00);
IkReal x6690=((1.0)*x6685);
IkReal x6691=((1.0)*cj1*cj2);
IkReal x6692=(gconst130*x6684);
IkReal x6693=((1.0)*x6684);
IkReal x6694=(gconst130*x6685);
evalcond[0]=((((-1.0)*x6688*x6693))+((r21*x6692))+(((-1.0)*r22*x6690)));
evalcond[1]=(((r11*x6692))+(((-1.0)*x6686*x6693))+cj0+(((-1.0)*r12*x6690)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6690))+(((-1.0)*x6689*x6693))+((r01*x6692)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6688*x6690))+((r22*x6684))+((r21*x6694)));
evalcond[4]=(((r02*x6684))+(((-1.0)*x6689*x6690))+(((-1.0)*cj0*x6691))+((r01*x6694))+((cj0*x6687)));
evalcond[5]=(((r12*x6684))+((r11*x6694))+(((-1.0)*x6686*x6690))+((sj0*x6687))+(((-1.0)*sj0*x6691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6695=((1.0)*gconst131);
CheckValue<IkReal> x6696 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6695))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6696.valid){
continue;
}
CheckValue<IkReal> x6697=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r10))+(((-1.0)*r11*x6695)))),-1);
if(!x6697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6696.value)+(((1.5707963267949)*(x6697.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6698=IKsin(j4);
IkReal x6699=IKcos(j4);
IkReal x6700=(gconst131*r10);
IkReal x6701=(sj1*sj2);
IkReal x6702=(gconst131*r20);
IkReal x6703=(gconst131*r00);
IkReal x6704=((1.0)*x6699);
IkReal x6705=((1.0)*cj1*cj2);
IkReal x6706=(gconst130*x6698);
IkReal x6707=((1.0)*x6698);
IkReal x6708=(gconst130*x6699);
evalcond[0]=(((r21*x6706))+(((-1.0)*r22*x6704))+(((-1.0)*x6702*x6707)));
evalcond[1]=(cj0+((r11*x6706))+(((-1.0)*r12*x6704))+(((-1.0)*x6700*x6707)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6704))+((r01*x6706))+(((-1.0)*x6703*x6707)));
evalcond[3]=(((cj2*sj1))+((r21*x6708))+((r22*x6698))+((cj1*sj2))+(((-1.0)*x6702*x6704)));
evalcond[4]=((((-1.0)*cj0*x6705))+((r01*x6708))+(((-1.0)*x6703*x6704))+((cj0*x6701))+((r02*x6698)));
evalcond[5]=(((r12*x6698))+((sj0*x6701))+((r11*x6708))+(((-1.0)*x6700*x6704))+(((-1.0)*sj0*x6705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6709=((1.0)*gconst131);
CheckValue<IkReal> x6710 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6710.valid){
continue;
}
CheckValue<IkReal> x6711=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6709))+(((-1.0)*gconst130*r00)))),-1);
if(!x6711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6710.value)+(((1.5707963267949)*(x6711.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6712=IKsin(j4);
IkReal x6713=IKcos(j4);
IkReal x6714=(gconst131*r10);
IkReal x6715=(sj1*sj2);
IkReal x6716=(gconst131*r20);
IkReal x6717=(gconst131*r00);
IkReal x6718=((1.0)*x6713);
IkReal x6719=((1.0)*cj1*cj2);
IkReal x6720=(gconst130*x6712);
IkReal x6721=((1.0)*x6712);
IkReal x6722=(gconst130*x6713);
evalcond[0]=(((r21*x6720))+(((-1.0)*x6716*x6721))+(((-1.0)*r22*x6718)));
evalcond[1]=(((r11*x6720))+cj0+(((-1.0)*x6714*x6721))+(((-1.0)*r12*x6718)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6717*x6721))+(((-1.0)*r02*x6718))+((r01*x6720)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6712))+((r21*x6722))+(((-1.0)*x6716*x6718)));
evalcond[4]=(((cj0*x6715))+((r02*x6712))+(((-1.0)*cj0*x6719))+(((-1.0)*x6717*x6718))+((r01*x6722)));
evalcond[5]=((((-1.0)*sj0*x6719))+((r11*x6722))+(((-1.0)*x6714*x6718))+((sj0*x6715))+((r12*x6712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6723=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6723;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6723);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6724=((1.0)*cj5);
IkReal x6725=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6724)));
j4eval[0]=x6725;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x6724))+((r21*sj5))))));
j4eval[2]=IKsign(x6725);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6726=cj5*cj5;
IkReal x6727=r01*r01;
IkReal x6728=(cj5*r00);
IkReal x6729=(r01*sj5);
IkReal x6730=((((-2.0)*x6728*x6729))+x6727+((x6726*(r00*r00)))+(((-1.0)*x6726*x6727))+(r02*r02));
j4eval[0]=x6730;
j4eval[1]=IKsign(x6730);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6728))+x6729))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6731=cj5*cj5;
IkReal x6732=r01*r01;
IkReal x6733=(r01*sj5);
IkReal x6734=(cj5*r00);
CheckValue<IkReal> x6735 = IKatan2WithCheck(IkReal(((((-1.0)*x6734))+x6733)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6735.valid){
continue;
}
CheckValue<IkReal> x6736=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6733*x6734))+x6732+((x6731*(r00*r00)))+(r02*r02)+(((-1.0)*x6731*x6732)))),-1);
if(!x6736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6735.value)+(((1.5707963267949)*(x6736.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6737=IKcos(j4);
IkReal x6738=IKsin(j4);
IkReal x6739=(cj5*r00);
IkReal x6740=(cj5*r10);
IkReal x6741=(r21*sj5);
IkReal x6742=(cj5*r20);
IkReal x6743=((1.0)*x6737);
IkReal x6744=((1.0)*x6738);
IkReal x6745=(sj5*x6738);
IkReal x6746=(sj5*x6737);
evalcond[0]=(((r01*x6746))+(((-1.0)*x6739*x6743))+((r02*x6738)));
evalcond[1]=((((-1.0)*x6742*x6744))+(((-1.0)*r22*x6743))+((x6738*x6741)));
evalcond[2]=((((-1.0)*r12*x6743))+((r11*x6745))+(((-1.0)*x6740*x6744)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6743))+((r01*x6745))+(((-1.0)*x6739*x6744)));
evalcond[4]=(((r22*x6738))+(((-1.0)*x6742*x6743))+((cj2*sj1))+((cj1*sj2))+((x6737*x6741)));
evalcond[5]=(((r11*x6746))+((r12*x6738))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6740*x6743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6747=((1.0)*cj5);
CheckValue<IkReal> x6748 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6747)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6748.valid){
continue;
}
CheckValue<IkReal> x6749=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6747))+(((-1.0)*r10*sj5)))),-1);
if(!x6749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6748.value)+(((1.5707963267949)*(x6749.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6750=IKcos(j4);
IkReal x6751=IKsin(j4);
IkReal x6752=(cj5*r00);
IkReal x6753=(cj5*r10);
IkReal x6754=(r21*sj5);
IkReal x6755=(cj5*r20);
IkReal x6756=((1.0)*x6750);
IkReal x6757=((1.0)*x6751);
IkReal x6758=(sj5*x6751);
IkReal x6759=(sj5*x6750);
evalcond[0]=(((r01*x6759))+(((-1.0)*x6752*x6756))+((r02*x6751)));
evalcond[1]=((((-1.0)*x6755*x6757))+((x6751*x6754))+(((-1.0)*r22*x6756)));
evalcond[2]=(((r11*x6758))+(((-1.0)*r12*x6756))+(((-1.0)*x6753*x6757)));
evalcond[3]=((-1.0)+((r01*x6758))+(((-1.0)*r02*x6756))+(((-1.0)*x6752*x6757)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6755*x6756))+((r22*x6751))+((cj1*sj2))+((x6750*x6754)));
evalcond[5]=(((r12*x6751))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6759))+(((-1.0)*x6753*x6756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6760=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6760.valid){
continue;
}
CheckValue<IkReal> x6761 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6760.value)))+(x6761.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6762=IKcos(j4);
IkReal x6763=IKsin(j4);
IkReal x6764=(cj5*r00);
IkReal x6765=(cj5*r10);
IkReal x6766=(r21*sj5);
IkReal x6767=(cj5*r20);
IkReal x6768=((1.0)*x6762);
IkReal x6769=((1.0)*x6763);
IkReal x6770=(sj5*x6763);
IkReal x6771=(sj5*x6762);
evalcond[0]=((((-1.0)*x6764*x6768))+((r02*x6763))+((r01*x6771)));
evalcond[1]=((((-1.0)*x6767*x6769))+(((-1.0)*r22*x6768))+((x6763*x6766)));
evalcond[2]=(((r11*x6770))+(((-1.0)*x6765*x6769))+(((-1.0)*r12*x6768)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6768))+(((-1.0)*x6764*x6769))+((r01*x6770)));
evalcond[4]=(((cj2*sj1))+((r22*x6763))+(((-1.0)*x6767*x6768))+((cj1*sj2))+((x6762*x6766)));
evalcond[5]=(((r11*x6771))+((r12*x6763))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6765*x6768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6772=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6772;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6772);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6773=((1.0)*cj5);
IkReal x6774=((((-1.0)*r21*x6773))+(((-1.0)*r20*sj5)));
j4eval[0]=x6774;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6773))))));
j4eval[2]=IKsign(x6774);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6775=(r01*sj5);
IkReal x6776=(cj1*sj2);
IkReal x6777=(cj2*sj1);
IkReal x6778=((1.0)*r02);
IkReal x6779=((1.0)*cj5*r00);
IkReal x6780=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6780;
j4eval[1]=((IKabs((((x6775*x6776))+((x6775*x6777))+(((-1.0)*x6777*x6779))+(((-1.0)*x6776*x6779)))))+(IKabs(((((-1.0)*x6777*x6778))+(((-1.0)*x6776*x6778))))));
j4eval[2]=IKsign(x6780);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6781=(r01*sj5);
IkReal x6782=(cj1*sj2);
IkReal x6783=(cj2*sj1);
IkReal x6784=((1.0)*r02);
IkReal x6785=((1.0)*cj5*r00);
CheckValue<IkReal> x6786 = IKatan2WithCheck(IkReal(((((-1.0)*x6782*x6785))+((x6781*x6782))+((x6781*x6783))+(((-1.0)*x6783*x6785)))),IkReal(((((-1.0)*x6782*x6784))+(((-1.0)*x6783*x6784)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6786.valid){
continue;
}
CheckValue<IkReal> x6787=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6786.value)+(((1.5707963267949)*(x6787.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6788=IKcos(j4);
IkReal x6789=IKsin(j4);
IkReal x6790=(cj5*r00);
IkReal x6791=(cj5*r10);
IkReal x6792=(r21*sj5);
IkReal x6793=(cj5*r20);
IkReal x6794=((1.0)*x6788);
IkReal x6795=((1.0)*x6789);
IkReal x6796=(sj5*x6789);
IkReal x6797=(sj5*x6788);
evalcond[0]=(((r01*x6797))+((r02*x6789))+(((-1.0)*x6790*x6794)));
evalcond[1]=((((-1.0)*x6793*x6795))+(((-1.0)*r22*x6794))+((x6789*x6792)));
evalcond[2]=(((r11*x6796))+(((-1.0)*x6791*x6795))+(((-1.0)*r12*x6794)));
evalcond[3]=((1.0)+((r01*x6796))+(((-1.0)*x6790*x6795))+(((-1.0)*r02*x6794)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6793*x6794))+((cj1*sj2))+((r22*x6789))+((x6788*x6792)));
evalcond[5]=(((r12*x6789))+(((-1.0)*sj1*sj2))+((r11*x6797))+((cj1*cj2))+(((-1.0)*x6791*x6794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6798=((1.0)*cj5);
CheckValue<IkReal> x6799=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6798))+(((-1.0)*r20*sj5)))),-1);
if(!x6799.valid){
continue;
}
CheckValue<IkReal> x6800 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6798))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6799.value)))+(x6800.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6801=IKcos(j4);
IkReal x6802=IKsin(j4);
IkReal x6803=(cj5*r00);
IkReal x6804=(cj5*r10);
IkReal x6805=(r21*sj5);
IkReal x6806=(cj5*r20);
IkReal x6807=((1.0)*x6801);
IkReal x6808=((1.0)*x6802);
IkReal x6809=(sj5*x6802);
IkReal x6810=(sj5*x6801);
evalcond[0]=((((-1.0)*x6803*x6807))+((r01*x6810))+((r02*x6802)));
evalcond[1]=((((-1.0)*r22*x6807))+((x6802*x6805))+(((-1.0)*x6806*x6808)));
evalcond[2]=((((-1.0)*r12*x6807))+(((-1.0)*x6804*x6808))+((r11*x6809)));
evalcond[3]=((1.0)+(((-1.0)*x6803*x6808))+(((-1.0)*r02*x6807))+((r01*x6809)));
evalcond[4]=(((cj2*sj1))+((x6801*x6805))+((r22*x6802))+((cj1*sj2))+(((-1.0)*x6806*x6807)));
evalcond[5]=(((r11*x6810))+(((-1.0)*sj1*sj2))+(((-1.0)*x6804*x6807))+((r12*x6802))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6811 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6811.valid){
continue;
}
CheckValue<IkReal> x6812=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6811.value)+(((1.5707963267949)*(x6812.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6813=IKcos(j4);
IkReal x6814=IKsin(j4);
IkReal x6815=(cj5*r00);
IkReal x6816=(cj5*r10);
IkReal x6817=(r21*sj5);
IkReal x6818=(cj5*r20);
IkReal x6819=((1.0)*x6813);
IkReal x6820=((1.0)*x6814);
IkReal x6821=(sj5*x6814);
IkReal x6822=(sj5*x6813);
evalcond[0]=(((r01*x6822))+((r02*x6814))+(((-1.0)*x6815*x6819)));
evalcond[1]=((((-1.0)*x6818*x6820))+((x6814*x6817))+(((-1.0)*r22*x6819)));
evalcond[2]=((((-1.0)*x6816*x6820))+((r11*x6821))+(((-1.0)*r12*x6819)));
evalcond[3]=((1.0)+(((-1.0)*x6815*x6820))+((r01*x6821))+(((-1.0)*r02*x6819)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6814))+((x6813*x6817))+(((-1.0)*x6818*x6819)));
evalcond[5]=(((r12*x6814))+(((-1.0)*x6816*x6819))+(((-1.0)*sj1*sj2))+((r11*x6822))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6823=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6823);
rxp1_1=(px*r21);
rxp1_2=(r11*x6823);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6824=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6824);
rxp1_1=(px*r21);
rxp1_2=(r11*x6824);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6825=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6825);
rxp1_1=(px*r21);
rxp1_2=(r11*x6825);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6828=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6828.valid){
continue;
}
IkReal x6826=x6828.value;
IkReal x6827=(sj0*x6826);
cj4array[0]=(((cj1*cj2*x6827))+(((-1.0)*sj1*sj2*x6827)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6829=IKsin(j4);
IkReal x6830=IKcos(j4);
IkReal x6831=(r21*sj5);
IkReal x6832=((1.0)*cj5*r20);
evalcond[0]=(r02*x6829);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6830)));
evalcond[2]=(((x6829*x6831))+(((-1.0)*x6829*x6832)));
evalcond[3]=(((r11*sj5*x6829))+(((-1.0)*cj5*r10*x6829)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6830*x6831))+(((-1.0)*x6830*x6832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6835=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6835.valid){
continue;
}
IkReal x6833=x6835.value;
IkReal x6834=((1.0)*x6833);
cj4array[0]=((((-1.0)*cj2*sj1*x6834))+(((-1.0)*cj1*sj2*x6834)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6836=IKsin(j4);
IkReal x6837=IKcos(j4);
IkReal x6838=((1.0)*sj0);
IkReal x6839=((1.0)*cj5);
IkReal x6840=(sj5*x6836);
evalcond[0]=(r02*x6836);
evalcond[1]=((((-1.0)*r02*x6837))+(((-1.0)*x6838)));
evalcond[2]=(((r21*x6840))+(((-1.0)*r20*x6836*x6839)));
evalcond[3]=(((r11*x6840))+(((-1.0)*r10*x6836*x6839)));
evalcond[4]=((((-1.0)*cj1*cj2*x6838))+((sj0*sj1*sj2))+(((-1.0)*r10*x6837*x6839))+((r11*sj5*x6837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6841=IKPowWithIntegerCheck(r02,-1);
if(!x6841.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6841.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6842=IKsin(j4);
IkReal x6843=IKcos(j4);
IkReal x6844=(r21*sj5);
IkReal x6845=((1.0)*cj5);
IkReal x6846=(r11*sj5);
evalcond[0]=(r02*x6842);
evalcond[1]=((((-1.0)*r20*x6842*x6845))+((x6842*x6844)));
evalcond[2]=((((-1.0)*r10*x6842*x6845))+((x6842*x6846)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x6843*x6845))+((x6843*x6844)));
evalcond[4]=((((-1.0)*r10*x6843*x6845))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x6843*x6846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6847=((1.0)*sj0);
IkReal x6848=((1.0)*cj0);
CheckValue<IkReal> x6849 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6847))+(((-1.0)*r02*x6848)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6848))+(((-1.0)*r11*sj5*x6847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6849.valid){
continue;
}
CheckValue<IkReal> x6850=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6849.value)+(((1.5707963267949)*(x6850.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6851=IKsin(j4);
IkReal x6852=IKcos(j4);
IkReal x6853=(cj5*r00);
IkReal x6854=(cj5*r10);
IkReal x6855=(r21*sj5);
IkReal x6856=(sj1*sj2);
IkReal x6857=(cj5*r20);
IkReal x6858=((1.0)*x6852);
IkReal x6859=((1.0)*cj1*cj2);
IkReal x6860=((1.0)*x6851);
IkReal x6861=(sj5*x6851);
IkReal x6862=(sj5*x6852);
evalcond[0]=((((-1.0)*x6857*x6860))+(((-1.0)*r22*x6858))+((x6851*x6855)));
evalcond[1]=(((r11*x6861))+cj0+(((-1.0)*r12*x6858))+(((-1.0)*x6854*x6860)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6858))+(((-1.0)*x6853*x6860))+((r01*x6861)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6857*x6858))+((r22*x6851))+((cj1*sj2))+((x6852*x6855)));
evalcond[4]=(((r02*x6851))+(((-1.0)*cj0*x6859))+((cj0*x6856))+((r01*x6862))+(((-1.0)*x6853*x6858)));
evalcond[5]=(((sj0*x6856))+((r11*x6862))+((r12*x6851))+(((-1.0)*x6854*x6858))+(((-1.0)*sj0*x6859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6863=((1.0)*cj5);
CheckValue<IkReal> x6864=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6863)))),-1);
if(!x6864.valid){
continue;
}
CheckValue<IkReal> x6865 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6863))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6864.value)))+(x6865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6866=IKsin(j4);
IkReal x6867=IKcos(j4);
IkReal x6868=(cj5*r00);
IkReal x6869=(cj5*r10);
IkReal x6870=(r21*sj5);
IkReal x6871=(sj1*sj2);
IkReal x6872=(cj5*r20);
IkReal x6873=((1.0)*x6867);
IkReal x6874=((1.0)*cj1*cj2);
IkReal x6875=((1.0)*x6866);
IkReal x6876=(sj5*x6866);
IkReal x6877=(sj5*x6867);
evalcond[0]=(((x6866*x6870))+(((-1.0)*r22*x6873))+(((-1.0)*x6872*x6875)));
evalcond[1]=(((r11*x6876))+(((-1.0)*x6869*x6875))+cj0+(((-1.0)*r12*x6873)));
evalcond[2]=((((-1.0)*x6868*x6875))+(((-1.0)*sj0))+(((-1.0)*r02*x6873))+((r01*x6876)));
evalcond[3]=(((cj2*sj1))+((r22*x6866))+((cj1*sj2))+(((-1.0)*x6872*x6873))+((x6867*x6870)));
evalcond[4]=(((r02*x6866))+(((-1.0)*x6868*x6873))+((cj0*x6871))+((r01*x6877))+(((-1.0)*cj0*x6874)));
evalcond[5]=(((sj0*x6871))+((r11*x6877))+(((-1.0)*x6869*x6873))+((r12*x6866))+(((-1.0)*sj0*x6874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6878=((1.0)*cj5);
CheckValue<IkReal> x6879 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6878))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6879.valid){
continue;
}
CheckValue<IkReal> x6880=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6878))+(((-1.0)*r00*sj5)))),-1);
if(!x6880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6879.value)+(((1.5707963267949)*(x6880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6881=IKsin(j4);
IkReal x6882=IKcos(j4);
IkReal x6883=(cj5*r00);
IkReal x6884=(cj5*r10);
IkReal x6885=(r21*sj5);
IkReal x6886=(sj1*sj2);
IkReal x6887=(cj5*r20);
IkReal x6888=((1.0)*x6882);
IkReal x6889=((1.0)*cj1*cj2);
IkReal x6890=((1.0)*x6881);
IkReal x6891=(sj5*x6881);
IkReal x6892=(sj5*x6882);
evalcond[0]=(((x6881*x6885))+(((-1.0)*r22*x6888))+(((-1.0)*x6887*x6890)));
evalcond[1]=(cj0+(((-1.0)*r12*x6888))+((r11*x6891))+(((-1.0)*x6884*x6890)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6888))+(((-1.0)*x6883*x6890))+((r01*x6891)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6887*x6888))+((cj1*sj2))+((r22*x6881))+((x6882*x6885)));
evalcond[4]=(((cj0*x6886))+((r02*x6881))+(((-1.0)*x6883*x6888))+(((-1.0)*cj0*x6889))+((r01*x6892)));
evalcond[5]=((((-1.0)*x6884*x6888))+((sj0*x6886))+(((-1.0)*sj0*x6889))+((r11*x6892))+((r12*x6881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6893=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6893;
j0eval[1]=IKsign(x6893);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6894=cj5*cj5;
IkReal x6895=r21*r21;
IkReal x6896=(cj2*sj1);
IkReal x6897=(cj1*sj2);
IkReal x6898=(r21*sj5);
IkReal x6899=((1.0)*cj5*r20);
IkReal x6900=(((x6894*(r20*r20)))+(r22*r22)+(((-2.0)*cj5*r20*x6898))+(((-1.0)*x6894*x6895))+x6895);
j4eval[0]=x6900;
j4eval[1]=IKsign(x6900);
j4eval[2]=((IKabs((((r22*x6897))+((r22*x6896)))))+(IKabs(((((-1.0)*x6896*x6899))+(((-1.0)*x6897*x6899))+((x6896*x6898))+((x6897*x6898))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6901=cj1*cj1;
IkReal x6902=(cj2*sj2);
IkReal x6903=(cj2*sj1);
IkReal x6904=(cj1*sj1);
j0eval[0]=((((-1.08349267049076)*cj1*x6903))+(((-2.0)*cj1*cj2*x6903))+(((-2.0)*x6901*x6902))+x6904+x6902+(((-1.08349267049076)*sj2*x6901)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x6903)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6905=IKsin(j0);
IkReal x6906=IKcos(j0);
evalcond[0]=((((0.81725)*x6906))+(((-0.10915)*x6905))+(((-1.0)*px)));
evalcond[1]=((((0.81725)*x6905))+(((-1.0)*py))+(((0.10915)*x6906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6907=((1.0)*cj5);
IkReal x6908=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6907)));
j4eval[0]=x6908;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6907))))));
j4eval[2]=IKsign(x6908);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6909=((1.0)*cj5);
IkReal x6910=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6909)));
j4eval[0]=x6910;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6909))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6910);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6911=cj5*cj5;
IkReal x6912=((1.0)*sj5);
IkReal x6913=(cj5*r20);
IkReal x6914=(r11*r21);
IkReal x6915=((((-1.0)*r11*x6912*x6913))+(((-1.0)*x6911*x6914))+((r12*r22))+((r10*r20*x6911))+(((-1.0)*cj5*r10*r21*x6912))+x6914);
j4eval[0]=x6915;
j4eval[1]=IKsign(x6915);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6912))+((cj0*x6913)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6916=cj5*cj5;
IkReal x6917=((1.0)*sj5);
IkReal x6918=(cj5*r20);
IkReal x6919=(r11*r21);
CheckValue<IkReal> x6920 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6917))+((cj0*x6918)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6920.valid){
continue;
}
CheckValue<IkReal> x6921=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*x6916*x6919))+(((-1.0)*r11*x6917*x6918))+((r10*r20*x6916))+(((-1.0)*cj5*r10*r21*x6917))+x6919)),-1);
if(!x6921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6920.value)+(((1.5707963267949)*(x6921.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6922=IKsin(j4);
IkReal x6923=IKcos(j4);
IkReal x6924=((1.0)*sj0);
IkReal x6925=(cj5*r00);
IkReal x6926=(r11*sj5);
IkReal x6927=(cj5*r10);
IkReal x6928=(r21*sj5);
IkReal x6929=(cj5*r20);
IkReal x6930=(r01*sj5);
IkReal x6931=((1.0)*x6923);
IkReal x6932=((1.0)*x6922);
evalcond[0]=(((x6922*x6928))+(((-1.0)*r22*x6931))+(((-1.0)*x6929*x6932)));
evalcond[1]=(((x6923*x6929))+(((-1.0)*r22*x6932))+(((-1.0)*x6928*x6931)));
evalcond[2]=(cj0+((x6922*x6926))+(((-1.0)*r12*x6931))+(((-1.0)*x6927*x6932)));
evalcond[3]=(((x6922*x6930))+(((-1.0)*x6925*x6932))+(((-1.0)*r02*x6931))+(((-1.0)*x6924)));
evalcond[4]=(((x6923*x6925))+(((-1.0)*x6930*x6931))+(((-1.0)*r02*x6932))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6926*x6931))+((x6923*x6927))+(((-1.0)*r12*x6932))+(((-1.0)*x6924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6933=((1.0)*cj5);
CheckValue<IkReal> x6934 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6933)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6934.valid){
continue;
}
CheckValue<IkReal> x6935=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6933)))),-1);
if(!x6935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6934.value)+(((1.5707963267949)*(x6935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6936=IKsin(j4);
IkReal x6937=IKcos(j4);
IkReal x6938=((1.0)*sj0);
IkReal x6939=(cj5*r00);
IkReal x6940=(r11*sj5);
IkReal x6941=(cj5*r10);
IkReal x6942=(r21*sj5);
IkReal x6943=(cj5*r20);
IkReal x6944=(r01*sj5);
IkReal x6945=((1.0)*x6937);
IkReal x6946=((1.0)*x6936);
evalcond[0]=((((-1.0)*x6943*x6946))+((x6936*x6942))+(((-1.0)*r22*x6945)));
evalcond[1]=((((-1.0)*x6942*x6945))+(((-1.0)*r22*x6946))+((x6937*x6943)));
evalcond[2]=(cj0+(((-1.0)*r12*x6945))+(((-1.0)*x6941*x6946))+((x6936*x6940)));
evalcond[3]=(((x6936*x6944))+(((-1.0)*r02*x6945))+(((-1.0)*x6939*x6946))+(((-1.0)*x6938)));
evalcond[4]=((((-1.0)*r02*x6946))+(((-1.0)*x6944*x6945))+((x6937*x6939))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x6946))+((x6937*x6941))+(((-1.0)*x6940*x6945))+(((-1.0)*x6938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6947=((1.0)*cj5);
CheckValue<IkReal> x6948=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6947)))),-1);
if(!x6948.valid){
continue;
}
CheckValue<IkReal> x6949 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6948.value)))+(x6949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6950=IKsin(j4);
IkReal x6951=IKcos(j4);
IkReal x6952=((1.0)*sj0);
IkReal x6953=(cj5*r00);
IkReal x6954=(r11*sj5);
IkReal x6955=(cj5*r10);
IkReal x6956=(r21*sj5);
IkReal x6957=(cj5*r20);
IkReal x6958=(r01*sj5);
IkReal x6959=((1.0)*x6951);
IkReal x6960=((1.0)*x6950);
evalcond[0]=(((x6950*x6956))+(((-1.0)*x6957*x6960))+(((-1.0)*r22*x6959)));
evalcond[1]=((((-1.0)*x6956*x6959))+((x6951*x6957))+(((-1.0)*r22*x6960)));
evalcond[2]=(cj0+(((-1.0)*r12*x6959))+((x6950*x6954))+(((-1.0)*x6955*x6960)));
evalcond[3]=((((-1.0)*x6953*x6960))+(((-1.0)*x6952))+((x6950*x6958))+(((-1.0)*r02*x6959)));
evalcond[4]=((((-1.0)*r02*x6960))+((x6951*x6953))+(((-1.0)*x6958*x6959))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6952))+((x6951*x6955))+(((-1.0)*r12*x6960))+(((-1.0)*x6954*x6959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6961=IKsin(j0);
IkReal x6962=IKcos(j0);
evalcond[0]=((((0.03275)*x6962))+(((-1.0)*px))+(((-0.10915)*x6961)));
evalcond[1]=((((0.10915)*x6962))+(((0.03275)*x6961))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6963=((1.0)*cj5);
IkReal x6964=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6963)));
j4eval[0]=x6964;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x6963))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6964);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6965=cj5*cj5;
IkReal x6966=((1.0)*r21);
IkReal x6967=(cj5*sj5);
IkReal x6968=((1.0)*r20);
IkReal x6969=((((-1.0)*r01*x6965*x6966))+((r01*r21))+((r00*r20*x6965))+(((-1.0)*r00*x6966*x6967))+(((-1.0)*r01*x6967*x6968))+((r02*r22)));
j4eval[0]=x6969;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6968))))));
j4eval[2]=IKsign(x6969);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6970=cj5*cj5;
IkReal x6971=(r21*sj5);
IkReal x6972=(r11*r21);
IkReal x6973=((1.0)*cj5*r20);
IkReal x6974=((((-1.0)*x6970*x6972))+((r10*r20*x6970))+(((-1.0)*cj5*r10*x6971))+(((-1.0)*r11*sj5*x6973))+((r12*r22))+x6972);
j4eval[0]=x6974;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6971))+(((-1.0)*sj0*x6973))))));
j4eval[2]=IKsign(x6974);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6975=cj5*cj5;
IkReal x6976=(r21*sj5);
IkReal x6977=(r11*r21);
IkReal x6978=((1.0)*cj5*r20);
CheckValue<IkReal> x6979 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6976))+(((-1.0)*sj0*x6978)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6979.valid){
continue;
}
CheckValue<IkReal> x6980=IKPowWithIntegerCheck(IKsign((((r10*r20*x6975))+(((-1.0)*cj5*r10*x6976))+(((-1.0)*r11*sj5*x6978))+((r12*r22))+(((-1.0)*x6975*x6977))+x6977)),-1);
if(!x6980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6979.value)+(((1.5707963267949)*(x6980.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6981=IKsin(j4);
IkReal x6982=IKcos(j4);
IkReal x6983=(r11*sj5);
IkReal x6984=(cj5*r00);
IkReal x6985=(cj5*r10);
IkReal x6986=(r21*sj5);
IkReal x6987=(cj5*r20);
IkReal x6988=(r01*sj5);
IkReal x6989=((1.0)*x6982);
IkReal x6990=((1.0)*x6981);
evalcond[0]=(((x6981*x6986))+(((-1.0)*x6987*x6990))+(((-1.0)*r22*x6989)));
evalcond[1]=((((-1.0)*x6986*x6989))+((x6982*x6987))+(((-1.0)*r22*x6990)));
evalcond[2]=(cj0+(((-1.0)*x6985*x6990))+((x6981*x6983))+(((-1.0)*r12*x6989)));
evalcond[3]=(cj0+((x6982*x6984))+(((-1.0)*r02*x6990))+(((-1.0)*x6988*x6989)));
evalcond[4]=((((-1.0)*r12*x6990))+sj0+((x6982*x6985))+(((-1.0)*x6983*x6989)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6984*x6990))+((x6981*x6988))+(((-1.0)*r02*x6989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6991=cj5*cj5;
IkReal x6992=((1.0)*r21);
IkReal x6993=(cj5*sj5);
IkReal x6994=((1.0)*r20);
CheckValue<IkReal> x6995 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6995.valid){
continue;
}
CheckValue<IkReal> x6996=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x6991*x6992))+(((-1.0)*r01*x6993*x6994))+((r00*r20*x6991))+(((-1.0)*r00*x6992*x6993))+((r02*r22)))),-1);
if(!x6996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6995.value)+(((1.5707963267949)*(x6996.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6997=IKsin(j4);
IkReal x6998=IKcos(j4);
IkReal x6999=(r11*sj5);
IkReal x7000=(cj5*r00);
IkReal x7001=(cj5*r10);
IkReal x7002=(r21*sj5);
IkReal x7003=(cj5*r20);
IkReal x7004=(r01*sj5);
IkReal x7005=((1.0)*x6998);
IkReal x7006=((1.0)*x6997);
evalcond[0]=((((-1.0)*r22*x7005))+(((-1.0)*x7003*x7006))+((x6997*x7002)));
evalcond[1]=((((-1.0)*r22*x7006))+(((-1.0)*x7002*x7005))+((x6998*x7003)));
evalcond[2]=((((-1.0)*r12*x7005))+cj0+((x6997*x6999))+(((-1.0)*x7001*x7006)));
evalcond[3]=((((-1.0)*r02*x7006))+cj0+((x6998*x7000))+(((-1.0)*x7004*x7005)));
evalcond[4]=((((-1.0)*r12*x7006))+sj0+((x6998*x7001))+(((-1.0)*x6999*x7005)));
evalcond[5]=((((-1.0)*r02*x7005))+(((-1.0)*sj0))+(((-1.0)*x7000*x7006))+((x6997*x7004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7007=((1.0)*cj5);
CheckValue<IkReal> x7008 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7007)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7008.valid){
continue;
}
CheckValue<IkReal> x7009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7007)))),-1);
if(!x7009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7008.value)+(((1.5707963267949)*(x7009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7010=IKsin(j4);
IkReal x7011=IKcos(j4);
IkReal x7012=(r11*sj5);
IkReal x7013=(cj5*r00);
IkReal x7014=(cj5*r10);
IkReal x7015=(r21*sj5);
IkReal x7016=(cj5*r20);
IkReal x7017=(r01*sj5);
IkReal x7018=((1.0)*x7011);
IkReal x7019=((1.0)*x7010);
evalcond[0]=((((-1.0)*r22*x7018))+((x7010*x7015))+(((-1.0)*x7016*x7019)));
evalcond[1]=((((-1.0)*r22*x7019))+(((-1.0)*x7015*x7018))+((x7011*x7016)));
evalcond[2]=(((x7010*x7012))+cj0+(((-1.0)*r12*x7018))+(((-1.0)*x7014*x7019)));
evalcond[3]=(cj0+(((-1.0)*x7017*x7018))+((x7011*x7013))+(((-1.0)*r02*x7019)));
evalcond[4]=(sj0+(((-1.0)*x7012*x7018))+((x7011*x7014))+(((-1.0)*r12*x7019)));
evalcond[5]=(((x7010*x7017))+(((-1.0)*sj0))+(((-1.0)*x7013*x7019))+(((-1.0)*r02*x7018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7020=((1.0)*sj5);
IkReal x7021=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7021))+(((-1.0)*r10*x7020)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7020))+(((-1.0)*r01*x7021)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7021))+(((-1.0)*r10*x7020))))+IKsqr(((((-1.0)*r00*x7020))+(((-1.0)*r01*x7021))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7021))+(((-1.0)*r10*x7020))), ((((-1.0)*r00*x7020))+(((-1.0)*r01*x7021))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7022=IKsin(j0);
IkReal x7023=IKcos(j0);
IkReal x7024=((1.0)*cj5);
IkReal x7025=((1.0)*sj5);
IkReal x7026=((0.09465)*cj5);
IkReal x7027=((0.09465)*sj5);
evalcond[0]=((((-1.0)*x7023))+(((-1.0)*r00*x7025))+(((-1.0)*r01*x7024)));
evalcond[1]=((((-1.0)*r11*x7024))+(((-1.0)*r10*x7025))+(((-1.0)*x7022)));
evalcond[2]=((((-0.10915)*x7022))+(((-1.0)*px))+(((-1.0)*r00*x7027))+(((-1.0)*r01*x7026)));
evalcond[3]=((((-1.0)*r11*x7026))+(((-1.0)*r10*x7027))+(((-1.0)*py))+(((0.10915)*x7023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7028=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7028;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7028);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7029=((1.0)*cj5);
IkReal x7030=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7029)));
j4eval[0]=x7030;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7029)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7031=cj5*cj5;
IkReal x7032=r21*r21;
IkReal x7033=(r21*sj5);
IkReal x7034=(cj5*r20);
IkReal x7035=(x7032+(r22*r22)+(((-1.0)*x7031*x7032))+(((-2.0)*x7033*x7034))+((x7031*(r20*r20))));
j4eval[0]=x7035;
j4eval[1]=IKsign(x7035);
j4eval[2]=((IKabs(r22))+(IKabs((x7033+(((-1.0)*x7034))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7036=cj5*cj5;
IkReal x7037=r21*r21;
IkReal x7038=(r21*sj5);
IkReal x7039=(cj5*r20);
CheckValue<IkReal> x7040=IKPowWithIntegerCheck(IKsign((x7037+(r22*r22)+(((-1.0)*x7036*x7037))+((x7036*(r20*r20)))+(((-2.0)*x7038*x7039)))),-1);
if(!x7040.valid){
continue;
}
CheckValue<IkReal> x7041 = IKatan2WithCheck(IkReal(r22),IkReal((x7038+(((-1.0)*x7039)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7040.value)))+(x7041.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7042=IKsin(j4);
IkReal x7043=IKcos(j4);
IkReal x7044=(r11*sj5);
IkReal x7045=(r21*sj5);
IkReal x7046=(cj5*r00);
IkReal x7047=(cj5*r20);
IkReal x7048=(r01*sj5);
IkReal x7049=(cj5*r10);
IkReal x7050=((1.0)*x7043);
IkReal x7051=((1.0)*x7042);
evalcond[0]=((((-1.0)*x7047*x7051))+(((-1.0)*r22*x7050))+((x7042*x7045)));
evalcond[1]=((((-1.0)*x7048*x7050))+((x7043*x7046))+(((-1.0)*r02*x7051)));
evalcond[2]=((((-1.0)*x7044*x7050))+(((-1.0)*r12*x7051))+((x7043*x7049)));
evalcond[3]=(cj0+(((-1.0)*x7049*x7051))+(((-1.0)*r12*x7050))+((x7042*x7044)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7051))+(((-1.0)*x7045*x7050))+((x7043*x7047)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7046*x7051))+((x7042*x7048))+(((-1.0)*r02*x7050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7052=((1.0)*cj5);
CheckValue<IkReal> x7053=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7052))+(((-1.0)*r00*sj5)))),-1);
if(!x7053.valid){
continue;
}
CheckValue<IkReal> x7054 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7052))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7053.value)))+(x7054.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7055=IKsin(j4);
IkReal x7056=IKcos(j4);
IkReal x7057=(r11*sj5);
IkReal x7058=(r21*sj5);
IkReal x7059=(cj5*r00);
IkReal x7060=(cj5*r20);
IkReal x7061=(r01*sj5);
IkReal x7062=(cj5*r10);
IkReal x7063=((1.0)*x7056);
IkReal x7064=((1.0)*x7055);
evalcond[0]=((((-1.0)*x7060*x7064))+((x7055*x7058))+(((-1.0)*r22*x7063)));
evalcond[1]=(((x7056*x7059))+(((-1.0)*r02*x7064))+(((-1.0)*x7061*x7063)));
evalcond[2]=((((-1.0)*r12*x7064))+((x7056*x7062))+(((-1.0)*x7057*x7063)));
evalcond[3]=(cj0+(((-1.0)*x7062*x7064))+(((-1.0)*r12*x7063))+((x7055*x7057)));
evalcond[4]=((1.0)+(((-1.0)*x7058*x7063))+((x7056*x7060))+(((-1.0)*r22*x7064)));
evalcond[5]=((((-1.0)*x7059*x7064))+(((-1.0)*sj0))+((x7055*x7061))+(((-1.0)*r02*x7063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7065 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7065.valid){
continue;
}
CheckValue<IkReal> x7066=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7065.value)+(((1.5707963267949)*(x7066.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7067=IKsin(j4);
IkReal x7068=IKcos(j4);
IkReal x7069=(r11*sj5);
IkReal x7070=(r21*sj5);
IkReal x7071=(cj5*r00);
IkReal x7072=(cj5*r20);
IkReal x7073=(r01*sj5);
IkReal x7074=(cj5*r10);
IkReal x7075=((1.0)*x7068);
IkReal x7076=((1.0)*x7067);
evalcond[0]=(((x7067*x7070))+(((-1.0)*x7072*x7076))+(((-1.0)*r22*x7075)));
evalcond[1]=(((x7068*x7071))+(((-1.0)*r02*x7076))+(((-1.0)*x7073*x7075)));
evalcond[2]=((((-1.0)*x7069*x7075))+((x7068*x7074))+(((-1.0)*r12*x7076)));
evalcond[3]=(((x7067*x7069))+cj0+(((-1.0)*r12*x7075))+(((-1.0)*x7074*x7076)));
evalcond[4]=((1.0)+((x7068*x7072))+(((-1.0)*x7070*x7075))+(((-1.0)*r22*x7076)));
evalcond[5]=((((-1.0)*sj0))+((x7067*x7073))+(((-1.0)*r02*x7075))+(((-1.0)*x7071*x7076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7077=IKcos(j0);
IkReal x7078=IKsin(j0);
evalcond[0]=((((-0.10915)*x7078))+(((-1.0)*px))+(((-0.39225)*x7077)));
evalcond[1]=((((0.10915)*x7077))+(((-1.0)*py))+(((-0.39225)*x7078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7079=((1.0)*cj5);
IkReal x7080=((((-1.0)*r01*x7079))+(((-1.0)*r00*sj5)));
j4eval[0]=x7080;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7079)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7080);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7081=cj5*cj5;
IkReal x7082=((1.0)*r21);
IkReal x7083=(cj5*sj5);
IkReal x7084=((1.0)*r20);
IkReal x7085=((((-1.0)*r00*x7082*x7083))+((r01*r21))+(((-1.0)*r01*x7081*x7082))+((r00*r20*x7081))+((r02*r22))+(((-1.0)*r01*x7083*x7084)));
j4eval[0]=x7085;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7084))))));
j4eval[2]=IKsign(x7085);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7086=cj5*cj5;
IkReal x7087=(r21*sj5);
IkReal x7088=(r11*r21);
IkReal x7089=((1.0)*cj5*r20);
IkReal x7090=(x7088+(((-1.0)*cj5*r10*x7087))+((r12*r22))+((r10*r20*x7086))+(((-1.0)*r11*sj5*x7089))+(((-1.0)*x7086*x7088)));
j4eval[0]=x7090;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7087))+(((-1.0)*sj0*x7089))))));
j4eval[2]=IKsign(x7090);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7091=cj5*cj5;
IkReal x7092=(r21*sj5);
IkReal x7093=(r11*r21);
IkReal x7094=((1.0)*cj5*r20);
CheckValue<IkReal> x7095 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7092))+(((-1.0)*sj0*x7094)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7095.valid){
continue;
}
CheckValue<IkReal> x7096=IKPowWithIntegerCheck(IKsign((x7093+(((-1.0)*cj5*r10*x7092))+((r12*r22))+((r10*r20*x7091))+(((-1.0)*r11*sj5*x7094))+(((-1.0)*x7091*x7093)))),-1);
if(!x7096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7095.value)+(((1.5707963267949)*(x7096.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7097=IKsin(j4);
IkReal x7098=IKcos(j4);
IkReal x7099=(r11*sj5);
IkReal x7100=(cj5*r00);
IkReal x7101=(cj5*r10);
IkReal x7102=(r21*sj5);
IkReal x7103=(cj5*r20);
IkReal x7104=(r01*sj5);
IkReal x7105=((1.0)*x7098);
IkReal x7106=((1.0)*x7097);
evalcond[0]=((((-1.0)*x7103*x7106))+((x7097*x7102))+(((-1.0)*r22*x7105)));
evalcond[1]=((((-1.0)*x7102*x7105))+(((-1.0)*r22*x7106))+((x7098*x7103)));
evalcond[2]=(((x7097*x7099))+cj0+(((-1.0)*r12*x7105))+(((-1.0)*x7101*x7106)));
evalcond[3]=(cj0+(((-1.0)*r02*x7106))+((x7098*x7100))+(((-1.0)*x7104*x7105)));
evalcond[4]=(sj0+(((-1.0)*r12*x7106))+(((-1.0)*x7099*x7105))+((x7098*x7101)));
evalcond[5]=((((-1.0)*sj0))+((x7097*x7104))+(((-1.0)*x7100*x7106))+(((-1.0)*r02*x7105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7107=cj5*cj5;
IkReal x7108=((1.0)*r21);
IkReal x7109=(cj5*sj5);
IkReal x7110=((1.0)*r20);
CheckValue<IkReal> x7111=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7109*x7110))+(((-1.0)*r00*x7108*x7109))+((r01*r21))+(((-1.0)*r01*x7107*x7108))+((r00*r20*x7107))+((r02*r22)))),-1);
if(!x7111.valid){
continue;
}
CheckValue<IkReal> x7112 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7110)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7111.value)))+(x7112.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7113=IKsin(j4);
IkReal x7114=IKcos(j4);
IkReal x7115=(r11*sj5);
IkReal x7116=(cj5*r00);
IkReal x7117=(cj5*r10);
IkReal x7118=(r21*sj5);
IkReal x7119=(cj5*r20);
IkReal x7120=(r01*sj5);
IkReal x7121=((1.0)*x7114);
IkReal x7122=((1.0)*x7113);
evalcond[0]=(((x7113*x7118))+(((-1.0)*x7119*x7122))+(((-1.0)*r22*x7121)));
evalcond[1]=((((-1.0)*x7118*x7121))+(((-1.0)*r22*x7122))+((x7114*x7119)));
evalcond[2]=(((x7113*x7115))+cj0+(((-1.0)*r12*x7121))+(((-1.0)*x7117*x7122)));
evalcond[3]=((((-1.0)*x7120*x7121))+cj0+(((-1.0)*r02*x7122))+((x7114*x7116)));
evalcond[4]=(sj0+(((-1.0)*x7115*x7121))+(((-1.0)*r12*x7122))+((x7114*x7117)));
evalcond[5]=((((-1.0)*x7116*x7122))+(((-1.0)*sj0))+(((-1.0)*r02*x7121))+((x7113*x7120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7123=((1.0)*cj5);
CheckValue<IkReal> x7124 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7123)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7124.valid){
continue;
}
CheckValue<IkReal> x7125=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7123)))),-1);
if(!x7125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7124.value)+(((1.5707963267949)*(x7125.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7126=IKsin(j4);
IkReal x7127=IKcos(j4);
IkReal x7128=(r11*sj5);
IkReal x7129=(cj5*r00);
IkReal x7130=(cj5*r10);
IkReal x7131=(r21*sj5);
IkReal x7132=(cj5*r20);
IkReal x7133=(r01*sj5);
IkReal x7134=((1.0)*x7127);
IkReal x7135=((1.0)*x7126);
evalcond[0]=(((x7126*x7131))+(((-1.0)*x7132*x7135))+(((-1.0)*r22*x7134)));
evalcond[1]=(((x7127*x7132))+(((-1.0)*r22*x7135))+(((-1.0)*x7131*x7134)));
evalcond[2]=((((-1.0)*x7130*x7135))+(((-1.0)*r12*x7134))+cj0+((x7126*x7128)));
evalcond[3]=(cj0+(((-1.0)*x7133*x7134))+((x7127*x7129))+(((-1.0)*r02*x7135)));
evalcond[4]=(sj0+(((-1.0)*r12*x7135))+((x7127*x7130))+(((-1.0)*x7128*x7134)));
evalcond[5]=(((x7126*x7133))+(((-1.0)*sj0))+(((-1.0)*x7129*x7135))+(((-1.0)*r02*x7134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7136=IKsin(j0);
IkReal x7137=IKcos(j0);
IkReal x7138=((1.0)*cj5);
IkReal x7139=((1.0)*sj5);
IkReal x7140=((0.09465)*cj5);
IkReal x7141=((0.09465)*sj5);
evalcond[0]=(x7137+(((-1.0)*r01*x7138))+(((-1.0)*r00*x7139)));
evalcond[1]=(x7136+(((-1.0)*r10*x7139))+(((-1.0)*r11*x7138)));
evalcond[2]=((((-1.0)*r01*x7140))+(((-1.0)*px))+(((-0.10915)*x7136))+(((-1.0)*r00*x7141)));
evalcond[3]=((((0.10915)*x7137))+(((-1.0)*py))+(((-1.0)*r11*x7140))+(((-1.0)*r10*x7141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7142=((1.0)*sj5);
IkReal x7143=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7142)));
j4eval[0]=x7143;
j4eval[1]=IKsign(x7143);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7142))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7144=((1.0)*cj5);
IkReal x7145=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7144)));
j4eval[0]=x7145;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7144)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7145);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7146=r21*r21;
IkReal x7147=cj5*cj5;
IkReal x7148=(r21*sj5);
IkReal x7149=(cj5*r20);
IkReal x7150=((((2.0)*x7148*x7149))+((x7146*x7147))+(((-1.0)*x7146))+(((-1.0)*(r22*r22)))+(((-1.0)*x7147*(r20*r20))));
j4eval[0]=x7150;
j4eval[1]=((IKabs(r22))+(IKabs((x7148+(((-1.0)*x7149))))));
j4eval[2]=IKsign(x7150);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7151=r21*r21;
IkReal x7152=cj5*cj5;
IkReal x7153=(r21*sj5);
IkReal x7154=(cj5*r20);
CheckValue<IkReal> x7155=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7152*(r20*r20)))+(((2.0)*x7153*x7154))+(((-1.0)*x7151))+(((-1.0)*(r22*r22)))+((x7151*x7152)))),-1);
if(!x7155.valid){
continue;
}
CheckValue<IkReal> x7156 = IKatan2WithCheck(IkReal(r22),IkReal((x7153+(((-1.0)*x7154)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7155.value)))+(x7156.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7157=IKsin(j4);
IkReal x7158=IKcos(j4);
IkReal x7159=(r11*sj5);
IkReal x7160=(r21*sj5);
IkReal x7161=(cj5*r00);
IkReal x7162=(cj5*r20);
IkReal x7163=(r01*sj5);
IkReal x7164=(cj5*r10);
IkReal x7165=((1.0)*x7158);
IkReal x7166=((1.0)*x7157);
evalcond[0]=((((-1.0)*r22*x7165))+((x7157*x7160))+(((-1.0)*x7162*x7166)));
evalcond[1]=((((-1.0)*r02*x7166))+(((-1.0)*x7163*x7165))+((x7158*x7161)));
evalcond[2]=((((-1.0)*x7159*x7165))+((x7158*x7164))+(((-1.0)*r12*x7166)));
evalcond[3]=(cj0+(((-1.0)*x7164*x7166))+(((-1.0)*r12*x7165))+((x7157*x7159)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7166))+(((-1.0)*x7160*x7165))+((x7158*x7162)));
evalcond[5]=((((-1.0)*r02*x7165))+(((-1.0)*sj0))+(((-1.0)*x7161*x7166))+((x7157*x7163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7167=((1.0)*cj5);
CheckValue<IkReal> x7168 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7167)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7168.valid){
continue;
}
CheckValue<IkReal> x7169=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7167)))),-1);
if(!x7169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7168.value)+(((1.5707963267949)*(x7169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7170=IKsin(j4);
IkReal x7171=IKcos(j4);
IkReal x7172=(r11*sj5);
IkReal x7173=(r21*sj5);
IkReal x7174=(cj5*r00);
IkReal x7175=(cj5*r20);
IkReal x7176=(r01*sj5);
IkReal x7177=(cj5*r10);
IkReal x7178=((1.0)*x7171);
IkReal x7179=((1.0)*x7170);
evalcond[0]=(((x7170*x7173))+(((-1.0)*r22*x7178))+(((-1.0)*x7175*x7179)));
evalcond[1]=((((-1.0)*r02*x7179))+((x7171*x7174))+(((-1.0)*x7176*x7178)));
evalcond[2]=((((-1.0)*r12*x7179))+(((-1.0)*x7172*x7178))+((x7171*x7177)));
evalcond[3]=((((-1.0)*x7177*x7179))+((x7170*x7172))+cj0+(((-1.0)*r12*x7178)));
evalcond[4]=((-1.0)+(((-1.0)*x7173*x7178))+(((-1.0)*r22*x7179))+((x7171*x7175)));
evalcond[5]=((((-1.0)*x7174*x7179))+(((-1.0)*sj0))+((x7170*x7176))+(((-1.0)*r02*x7178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7180=((1.0)*sj5);
CheckValue<IkReal> x7181 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7180))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7181.valid){
continue;
}
CheckValue<IkReal> x7182=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7180)))),-1);
if(!x7182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7181.value)+(((1.5707963267949)*(x7182.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7183=IKsin(j4);
IkReal x7184=IKcos(j4);
IkReal x7185=(r11*sj5);
IkReal x7186=(r21*sj5);
IkReal x7187=(cj5*r00);
IkReal x7188=(cj5*r20);
IkReal x7189=(r01*sj5);
IkReal x7190=(cj5*r10);
IkReal x7191=((1.0)*x7184);
IkReal x7192=((1.0)*x7183);
evalcond[0]=(((x7183*x7186))+(((-1.0)*x7188*x7192))+(((-1.0)*r22*x7191)));
evalcond[1]=((((-1.0)*x7189*x7191))+(((-1.0)*r02*x7192))+((x7184*x7187)));
evalcond[2]=((((-1.0)*x7185*x7191))+(((-1.0)*r12*x7192))+((x7184*x7190)));
evalcond[3]=(cj0+((x7183*x7185))+(((-1.0)*x7190*x7192))+(((-1.0)*r12*x7191)));
evalcond[4]=((-1.0)+(((-1.0)*x7186*x7191))+(((-1.0)*r22*x7192))+((x7184*x7188)));
evalcond[5]=((((-1.0)*sj0))+((x7183*x7189))+(((-1.0)*x7187*x7192))+(((-1.0)*r02*x7191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7193=IKsin(j0);
IkReal x7194=IKcos(j0);
evalcond[0]=((((0.39225)*x7194))+(((-1.0)*px))+(((-0.10915)*x7193)));
evalcond[1]=((((0.10915)*x7194))+(((0.39225)*x7193))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7195=((1.0)*cj5);
IkReal x7196=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7195)));
j4eval[0]=x7196;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7195))))));
j4eval[2]=IKsign(x7196);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7197=((1.0)*cj5);
IkReal x7198=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7197)));
j4eval[0]=x7198;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7197)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7198);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7199=cj5*cj5;
IkReal x7200=((1.0)*sj5);
IkReal x7201=(cj5*r20);
IkReal x7202=(r11*r21);
IkReal x7203=((((-1.0)*r11*x7200*x7201))+x7202+((r12*r22))+(((-1.0)*cj5*r10*r21*x7200))+(((-1.0)*x7199*x7202))+((r10*r20*x7199)));
j4eval[0]=x7203;
j4eval[1]=IKsign(x7203);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7200))+((cj0*x7201)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7204=cj5*cj5;
IkReal x7205=((1.0)*sj5);
IkReal x7206=(cj5*r20);
IkReal x7207=(r11*r21);
CheckValue<IkReal> x7208=IKPowWithIntegerCheck(IKsign((x7207+((r10*r20*x7204))+(((-1.0)*r11*x7205*x7206))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7205))+(((-1.0)*x7204*x7207)))),-1);
if(!x7208.valid){
continue;
}
CheckValue<IkReal> x7209 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7205))+((cj0*x7206)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7208.value)))+(x7209.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7210=IKsin(j4);
IkReal x7211=IKcos(j4);
IkReal x7212=((1.0)*sj0);
IkReal x7213=(cj5*r00);
IkReal x7214=(r11*sj5);
IkReal x7215=(cj5*r10);
IkReal x7216=(r21*sj5);
IkReal x7217=(cj5*r20);
IkReal x7218=(r01*sj5);
IkReal x7219=((1.0)*x7211);
IkReal x7220=((1.0)*x7210);
evalcond[0]=((((-1.0)*x7217*x7220))+((x7210*x7216))+(((-1.0)*r22*x7219)));
evalcond[1]=(((x7211*x7217))+(((-1.0)*r22*x7220))+(((-1.0)*x7216*x7219)));
evalcond[2]=(cj0+((x7210*x7214))+(((-1.0)*r12*x7219))+(((-1.0)*x7215*x7220)));
evalcond[3]=(((x7210*x7218))+(((-1.0)*x7212))+(((-1.0)*x7213*x7220))+(((-1.0)*r02*x7219)));
evalcond[4]=((((-1.0)*r02*x7220))+((x7211*x7213))+(((-1.0)*x7218*x7219))+(((-1.0)*cj0)));
evalcond[5]=(((x7211*x7215))+(((-1.0)*x7212))+(((-1.0)*x7214*x7219))+(((-1.0)*r12*x7220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7221=((1.0)*cj5);
CheckValue<IkReal> x7222=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7221)))),-1);
if(!x7222.valid){
continue;
}
CheckValue<IkReal> x7223 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7221)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7222.value)))+(x7223.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7224=IKsin(j4);
IkReal x7225=IKcos(j4);
IkReal x7226=((1.0)*sj0);
IkReal x7227=(cj5*r00);
IkReal x7228=(r11*sj5);
IkReal x7229=(cj5*r10);
IkReal x7230=(r21*sj5);
IkReal x7231=(cj5*r20);
IkReal x7232=(r01*sj5);
IkReal x7233=((1.0)*x7225);
IkReal x7234=((1.0)*x7224);
evalcond[0]=((((-1.0)*x7231*x7234))+(((-1.0)*r22*x7233))+((x7224*x7230)));
evalcond[1]=(((x7225*x7231))+(((-1.0)*x7230*x7233))+(((-1.0)*r22*x7234)));
evalcond[2]=(cj0+(((-1.0)*x7229*x7234))+((x7224*x7228))+(((-1.0)*r12*x7233)));
evalcond[3]=((((-1.0)*x7227*x7234))+(((-1.0)*x7226))+(((-1.0)*r02*x7233))+((x7224*x7232)));
evalcond[4]=((((-1.0)*x7232*x7233))+(((-1.0)*r02*x7234))+((x7225*x7227))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7228*x7233))+(((-1.0)*x7226))+(((-1.0)*r12*x7234))+((x7225*x7229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7235=((1.0)*cj5);
CheckValue<IkReal> x7236 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7235)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7236.valid){
continue;
}
CheckValue<IkReal> x7237=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7235)))),-1);
if(!x7237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7236.value)+(((1.5707963267949)*(x7237.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7238=IKsin(j4);
IkReal x7239=IKcos(j4);
IkReal x7240=((1.0)*sj0);
IkReal x7241=(cj5*r00);
IkReal x7242=(r11*sj5);
IkReal x7243=(cj5*r10);
IkReal x7244=(r21*sj5);
IkReal x7245=(cj5*r20);
IkReal x7246=(r01*sj5);
IkReal x7247=((1.0)*x7239);
IkReal x7248=((1.0)*x7238);
evalcond[0]=((((-1.0)*x7245*x7248))+((x7238*x7244))+(((-1.0)*r22*x7247)));
evalcond[1]=((((-1.0)*x7244*x7247))+(((-1.0)*r22*x7248))+((x7239*x7245)));
evalcond[2]=((((-1.0)*r12*x7247))+cj0+((x7238*x7242))+(((-1.0)*x7243*x7248)));
evalcond[3]=(((x7238*x7246))+(((-1.0)*r02*x7247))+(((-1.0)*x7241*x7248))+(((-1.0)*x7240)));
evalcond[4]=((((-1.0)*x7246*x7247))+(((-1.0)*r02*x7248))+((x7239*x7241))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7248))+(((-1.0)*x7242*x7247))+((x7239*x7243))+(((-1.0)*x7240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7249=IKcos(j0);
IkReal x7250=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.81725)*x7249))+(((-0.10915)*x7250)));
evalcond[1]=((((0.10915)*x7249))+(((-1.0)*py))+(((-0.81725)*x7250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7251=((1.0)*cj5);
IkReal x7252=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7251)));
j4eval[0]=x7252;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7251)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7252);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7253=cj5*cj5;
IkReal x7254=((1.0)*r21);
IkReal x7255=(cj5*sj5);
IkReal x7256=((1.0)*r20);
IkReal x7257=(((r01*r21))+(((-1.0)*r01*x7253*x7254))+(((-1.0)*r00*x7254*x7255))+(((-1.0)*r01*x7255*x7256))+((r02*r22))+((r00*r20*x7253)));
j4eval[0]=x7257;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7256)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7257);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7258=cj5*cj5;
IkReal x7259=(r21*sj5);
IkReal x7260=(r11*r21);
IkReal x7261=((1.0)*cj5*r20);
IkReal x7262=((((-1.0)*r11*sj5*x7261))+x7260+((r12*r22))+(((-1.0)*cj5*r10*x7259))+((r10*r20*x7258))+(((-1.0)*x7258*x7260)));
j4eval[0]=x7262;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x7261))+((sj0*x7259))))));
j4eval[2]=IKsign(x7262);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7263=cj5*cj5;
IkReal x7264=(r21*sj5);
IkReal x7265=(r11*r21);
IkReal x7266=((1.0)*cj5*r20);
CheckValue<IkReal> x7267=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7266))+(((-1.0)*cj5*r10*x7264))+x7265+(((-1.0)*x7263*x7265))+((r12*r22))+((r10*r20*x7263)))),-1);
if(!x7267.valid){
continue;
}
CheckValue<IkReal> x7268 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7264))+(((-1.0)*sj0*x7266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7267.value)))+(x7268.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7269=IKsin(j4);
IkReal x7270=IKcos(j4);
IkReal x7271=(r11*sj5);
IkReal x7272=(cj5*r00);
IkReal x7273=(cj5*r10);
IkReal x7274=(r21*sj5);
IkReal x7275=(cj5*r20);
IkReal x7276=(r01*sj5);
IkReal x7277=((1.0)*x7270);
IkReal x7278=((1.0)*x7269);
evalcond[0]=((((-1.0)*r22*x7277))+((x7269*x7274))+(((-1.0)*x7275*x7278)));
evalcond[1]=((((-1.0)*r22*x7278))+(((-1.0)*x7274*x7277))+((x7270*x7275)));
evalcond[2]=(cj0+(((-1.0)*r12*x7277))+(((-1.0)*x7273*x7278))+((x7269*x7271)));
evalcond[3]=(cj0+(((-1.0)*r02*x7278))+((x7270*x7272))+(((-1.0)*x7276*x7277)));
evalcond[4]=(sj0+(((-1.0)*r12*x7278))+((x7270*x7273))+(((-1.0)*x7271*x7277)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7272*x7278))+((x7269*x7276))+(((-1.0)*r02*x7277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7279=cj5*cj5;
IkReal x7280=((1.0)*r21);
IkReal x7281=(cj5*sj5);
IkReal x7282=((1.0)*r20);
CheckValue<IkReal> x7283=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7279*x7280))+(((-1.0)*r00*x7280*x7281))+((r01*r21))+((r00*r20*x7279))+((r02*r22))+(((-1.0)*r01*x7281*x7282)))),-1);
if(!x7283.valid){
continue;
}
CheckValue<IkReal> x7284 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7283.value)))+(x7284.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7285=IKsin(j4);
IkReal x7286=IKcos(j4);
IkReal x7287=(r11*sj5);
IkReal x7288=(cj5*r00);
IkReal x7289=(cj5*r10);
IkReal x7290=(r21*sj5);
IkReal x7291=(cj5*r20);
IkReal x7292=(r01*sj5);
IkReal x7293=((1.0)*x7286);
IkReal x7294=((1.0)*x7285);
evalcond[0]=((((-1.0)*x7291*x7294))+(((-1.0)*r22*x7293))+((x7285*x7290)));
evalcond[1]=((((-1.0)*x7290*x7293))+(((-1.0)*r22*x7294))+((x7286*x7291)));
evalcond[2]=(cj0+(((-1.0)*x7289*x7294))+((x7285*x7287))+(((-1.0)*r12*x7293)));
evalcond[3]=(cj0+((x7286*x7288))+(((-1.0)*r02*x7294))+(((-1.0)*x7292*x7293)));
evalcond[4]=(sj0+((x7286*x7289))+(((-1.0)*r12*x7294))+(((-1.0)*x7287*x7293)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7288*x7294))+((x7285*x7292))+(((-1.0)*r02*x7293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7295=((1.0)*cj5);
CheckValue<IkReal> x7296=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7295))+(((-1.0)*r00*sj5)))),-1);
if(!x7296.valid){
continue;
}
CheckValue<IkReal> x7297 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7295)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7296.value)))+(x7297.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7298=IKsin(j4);
IkReal x7299=IKcos(j4);
IkReal x7300=(r11*sj5);
IkReal x7301=(cj5*r00);
IkReal x7302=(cj5*r10);
IkReal x7303=(r21*sj5);
IkReal x7304=(cj5*r20);
IkReal x7305=(r01*sj5);
IkReal x7306=((1.0)*x7299);
IkReal x7307=((1.0)*x7298);
evalcond[0]=((((-1.0)*r22*x7306))+((x7298*x7303))+(((-1.0)*x7304*x7307)));
evalcond[1]=((((-1.0)*x7303*x7306))+((x7299*x7304))+(((-1.0)*r22*x7307)));
evalcond[2]=(cj0+(((-1.0)*x7302*x7307))+(((-1.0)*r12*x7306))+((x7298*x7300)));
evalcond[3]=((((-1.0)*r02*x7307))+cj0+((x7299*x7301))+(((-1.0)*x7305*x7306)));
evalcond[4]=(sj0+(((-1.0)*r12*x7307))+(((-1.0)*x7300*x7306))+((x7299*x7302)));
evalcond[5]=((((-1.0)*r02*x7306))+(((-1.0)*sj0))+(((-1.0)*x7301*x7307))+((x7298*x7305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7308=IKcos(j0);
IkReal x7309=IKsin(j0);
evalcond[0]=((((-0.03275)*x7308))+(((-0.10915)*x7309))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x7308))+(((-0.03275)*x7309))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7310=((1.0)*cj5);
IkReal x7311=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7310)));
j4eval[0]=x7311;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7310)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7311);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7312=((1.0)*cj5);
IkReal x7313=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7312)));
j4eval[0]=x7313;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7312))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7313);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7314=cj5*cj5;
IkReal x7315=((1.0)*sj5);
IkReal x7316=(cj5*r20);
IkReal x7317=(r11*r21);
IkReal x7318=(x7317+((r12*r22))+((r10*r20*x7314))+(((-1.0)*r11*x7315*x7316))+(((-1.0)*cj5*r10*r21*x7315))+(((-1.0)*x7314*x7317)));
j4eval[0]=x7318;
j4eval[1]=IKsign(x7318);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7315))+((cj0*x7316)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7319=cj5*cj5;
IkReal x7320=((1.0)*sj5);
IkReal x7321=(cj5*r20);
IkReal x7322=(r11*r21);
CheckValue<IkReal> x7323=IKPowWithIntegerCheck(IKsign((x7322+(((-1.0)*cj5*r10*r21*x7320))+((r12*r22))+((r10*r20*x7319))+(((-1.0)*x7319*x7322))+(((-1.0)*r11*x7320*x7321)))),-1);
if(!x7323.valid){
continue;
}
CheckValue<IkReal> x7324 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7320))+((cj0*x7321)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7323.value)))+(x7324.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7325=IKsin(j4);
IkReal x7326=IKcos(j4);
IkReal x7327=((1.0)*sj0);
IkReal x7328=(cj5*r00);
IkReal x7329=(r11*sj5);
IkReal x7330=(cj5*r10);
IkReal x7331=(r21*sj5);
IkReal x7332=(cj5*r20);
IkReal x7333=(r01*sj5);
IkReal x7334=((1.0)*x7326);
IkReal x7335=((1.0)*x7325);
evalcond[0]=(((x7325*x7331))+(((-1.0)*x7332*x7335))+(((-1.0)*r22*x7334)));
evalcond[1]=(((x7326*x7332))+(((-1.0)*x7331*x7334))+(((-1.0)*r22*x7335)));
evalcond[2]=(cj0+(((-1.0)*r12*x7334))+((x7325*x7329))+(((-1.0)*x7330*x7335)));
evalcond[3]=((((-1.0)*r02*x7334))+((x7325*x7333))+(((-1.0)*x7327))+(((-1.0)*x7328*x7335)));
evalcond[4]=((((-1.0)*r02*x7335))+((x7326*x7328))+(((-1.0)*x7333*x7334))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7335))+(((-1.0)*x7327))+(((-1.0)*x7329*x7334))+((x7326*x7330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7336=((1.0)*cj5);
CheckValue<IkReal> x7337 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7336))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7337.valid){
continue;
}
CheckValue<IkReal> x7338=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7336)))),-1);
if(!x7338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7337.value)+(((1.5707963267949)*(x7338.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7339=IKsin(j4);
IkReal x7340=IKcos(j4);
IkReal x7341=((1.0)*sj0);
IkReal x7342=(cj5*r00);
IkReal x7343=(r11*sj5);
IkReal x7344=(cj5*r10);
IkReal x7345=(r21*sj5);
IkReal x7346=(cj5*r20);
IkReal x7347=(r01*sj5);
IkReal x7348=((1.0)*x7340);
IkReal x7349=((1.0)*x7339);
evalcond[0]=(((x7339*x7345))+(((-1.0)*r22*x7348))+(((-1.0)*x7346*x7349)));
evalcond[1]=((((-1.0)*r22*x7349))+(((-1.0)*x7345*x7348))+((x7340*x7346)));
evalcond[2]=(((x7339*x7343))+cj0+(((-1.0)*r12*x7348))+(((-1.0)*x7344*x7349)));
evalcond[3]=(((x7339*x7347))+(((-1.0)*x7341))+(((-1.0)*x7342*x7349))+(((-1.0)*r02*x7348)));
evalcond[4]=(((x7340*x7342))+(((-1.0)*r02*x7349))+(((-1.0)*x7347*x7348))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7349))+(((-1.0)*x7341))+(((-1.0)*x7343*x7348))+((x7340*x7344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7350=((1.0)*cj5);
CheckValue<IkReal> x7351=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7350))+(((-1.0)*r00*sj5)))),-1);
if(!x7351.valid){
continue;
}
CheckValue<IkReal> x7352 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7350)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7351.value)))+(x7352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7353=IKsin(j4);
IkReal x7354=IKcos(j4);
IkReal x7355=((1.0)*sj0);
IkReal x7356=(cj5*r00);
IkReal x7357=(r11*sj5);
IkReal x7358=(cj5*r10);
IkReal x7359=(r21*sj5);
IkReal x7360=(cj5*r20);
IkReal x7361=(r01*sj5);
IkReal x7362=((1.0)*x7354);
IkReal x7363=((1.0)*x7353);
evalcond[0]=(((x7353*x7359))+(((-1.0)*r22*x7362))+(((-1.0)*x7360*x7363)));
evalcond[1]=((((-1.0)*r22*x7363))+((x7354*x7360))+(((-1.0)*x7359*x7362)));
evalcond[2]=(cj0+((x7353*x7357))+(((-1.0)*r12*x7362))+(((-1.0)*x7358*x7363)));
evalcond[3]=((((-1.0)*x7355))+(((-1.0)*x7356*x7363))+(((-1.0)*r02*x7362))+((x7353*x7361)));
evalcond[4]=((((-1.0)*r02*x7363))+(((-1.0)*x7361*x7362))+(((-1.0)*cj0))+((x7354*x7356)));
evalcond[5]=((((-1.0)*x7355))+(((-1.0)*r12*x7363))+(((-1.0)*x7357*x7362))+((x7354*x7358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7364=IKsin(j0);
IkReal x7365=IKcos(j0);
IkReal x7366=((1.0)*cj5);
IkReal x7367=((1.0)*sj5);
IkReal x7368=((0.09465)*cj5);
IkReal x7369=((0.09465)*sj5);
evalcond[0]=(x7365+(((-1.0)*r00*x7367))+(((-1.0)*r01*x7366)));
evalcond[1]=(x7364+(((-1.0)*r10*x7367))+(((-1.0)*r11*x7366)));
evalcond[2]=((((-1.0)*px))+(((-0.10915)*x7364))+(((-1.0)*r00*x7369))+(((-1.0)*r01*x7368)));
evalcond[3]=((((-1.0)*r10*x7369))+(((-1.0)*r11*x7368))+(((-1.0)*py))+(((0.10915)*x7365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7370=((1.0)*sj5);
IkReal x7371=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7370)));
j4eval[0]=x7371;
j4eval[1]=IKsign(x7371);
j4eval[2]=((IKabs(((((-1.0)*r01*x7370))+((cj5*r00)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7372=((1.0)*cj5);
IkReal x7373=((((-1.0)*r01*x7372))+(((-1.0)*r00*sj5)));
j4eval[0]=x7373;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7372)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7373);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7374=r21*r21;
IkReal x7375=cj5*cj5;
IkReal x7376=(r21*sj5);
IkReal x7377=(cj5*r20);
IkReal x7378=((((-1.0)*(r22*r22)))+(((-1.0)*x7374))+(((-1.0)*x7375*(r20*r20)))+(((2.0)*x7376*x7377))+((x7374*x7375)));
j4eval[0]=x7378;
j4eval[1]=((IKabs((x7376+(((-1.0)*x7377)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7378);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7379=r21*r21;
IkReal x7380=cj5*cj5;
IkReal x7381=(r21*sj5);
IkReal x7382=(cj5*r20);
CheckValue<IkReal> x7383=IKPowWithIntegerCheck(IKsign((((x7379*x7380))+(((2.0)*x7381*x7382))+(((-1.0)*(r22*r22)))+(((-1.0)*x7379))+(((-1.0)*x7380*(r20*r20))))),-1);
if(!x7383.valid){
continue;
}
CheckValue<IkReal> x7384 = IKatan2WithCheck(IkReal(r22),IkReal((x7381+(((-1.0)*x7382)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7383.value)))+(x7384.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7385=IKsin(j4);
IkReal x7386=IKcos(j4);
IkReal x7387=(r11*sj5);
IkReal x7388=(r21*sj5);
IkReal x7389=(cj5*r00);
IkReal x7390=(cj5*r20);
IkReal x7391=(r01*sj5);
IkReal x7392=(cj5*r10);
IkReal x7393=((1.0)*x7386);
IkReal x7394=((1.0)*x7385);
evalcond[0]=((((-1.0)*x7390*x7394))+(((-1.0)*r22*x7393))+((x7385*x7388)));
evalcond[1]=(((x7386*x7389))+(((-1.0)*r02*x7394))+(((-1.0)*x7391*x7393)));
evalcond[2]=((((-1.0)*r12*x7394))+((x7386*x7392))+(((-1.0)*x7387*x7393)));
evalcond[3]=((((-1.0)*r12*x7393))+cj0+(((-1.0)*x7392*x7394))+((x7385*x7387)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7394))+(((-1.0)*x7388*x7393))+((x7386*x7390)));
evalcond[5]=((((-1.0)*sj0))+((x7385*x7391))+(((-1.0)*r02*x7393))+(((-1.0)*x7389*x7394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7395=((1.0)*cj5);
CheckValue<IkReal> x7396 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7395)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7396.valid){
continue;
}
CheckValue<IkReal> x7397=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7395)))),-1);
if(!x7397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7396.value)+(((1.5707963267949)*(x7397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7398=IKsin(j4);
IkReal x7399=IKcos(j4);
IkReal x7400=(r11*sj5);
IkReal x7401=(r21*sj5);
IkReal x7402=(cj5*r00);
IkReal x7403=(cj5*r20);
IkReal x7404=(r01*sj5);
IkReal x7405=(cj5*r10);
IkReal x7406=((1.0)*x7399);
IkReal x7407=((1.0)*x7398);
evalcond[0]=((((-1.0)*x7403*x7407))+((x7398*x7401))+(((-1.0)*r22*x7406)));
evalcond[1]=(((x7399*x7402))+(((-1.0)*x7404*x7406))+(((-1.0)*r02*x7407)));
evalcond[2]=((((-1.0)*r12*x7407))+((x7399*x7405))+(((-1.0)*x7400*x7406)));
evalcond[3]=((((-1.0)*r12*x7406))+cj0+(((-1.0)*x7405*x7407))+((x7398*x7400)));
evalcond[4]=((-1.0)+((x7399*x7403))+(((-1.0)*r22*x7407))+(((-1.0)*x7401*x7406)));
evalcond[5]=((((-1.0)*sj0))+((x7398*x7404))+(((-1.0)*x7402*x7407))+(((-1.0)*r02*x7406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7408=((1.0)*sj5);
CheckValue<IkReal> x7409 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7408))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7409.valid){
continue;
}
CheckValue<IkReal> x7410=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7408)))),-1);
if(!x7410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7409.value)+(((1.5707963267949)*(x7410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7411=IKsin(j4);
IkReal x7412=IKcos(j4);
IkReal x7413=(r11*sj5);
IkReal x7414=(r21*sj5);
IkReal x7415=(cj5*r00);
IkReal x7416=(cj5*r20);
IkReal x7417=(r01*sj5);
IkReal x7418=(cj5*r10);
IkReal x7419=((1.0)*x7412);
IkReal x7420=((1.0)*x7411);
evalcond[0]=((((-1.0)*x7416*x7420))+((x7411*x7414))+(((-1.0)*r22*x7419)));
evalcond[1]=((((-1.0)*r02*x7420))+(((-1.0)*x7417*x7419))+((x7412*x7415)));
evalcond[2]=((((-1.0)*r12*x7420))+(((-1.0)*x7413*x7419))+((x7412*x7418)));
evalcond[3]=((((-1.0)*r12*x7419))+cj0+(((-1.0)*x7418*x7420))+((x7411*x7413)));
evalcond[4]=((-1.0)+(((-1.0)*x7414*x7419))+(((-1.0)*r22*x7420))+((x7412*x7416)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7415*x7420))+((x7411*x7417))+(((-1.0)*r02*x7419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7421=IKsin(j0);
IkReal x7422=IKcos(j0);
evalcond[0]=((((0.39225)*x7422))+(((-1.0)*px))+(((-0.10915)*x7421)));
evalcond[1]=((((0.39225)*x7421))+(((-1.0)*py))+(((0.10915)*x7422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7423=((1.0)*cj5);
IkReal x7424=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7423)));
j4eval[0]=x7424;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7423)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7424);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7425=((1.0)*cj5);
IkReal x7426=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7425)));
j4eval[0]=x7426;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x7425))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7426);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7427=cj5*cj5;
IkReal x7428=((1.0)*sj5);
IkReal x7429=(cj5*r20);
IkReal x7430=(r11*r21);
IkReal x7431=((((-1.0)*cj5*r10*r21*x7428))+((r12*r22))+(((-1.0)*r11*x7428*x7429))+((r10*r20*x7427))+(((-1.0)*x7427*x7430))+x7430);
j4eval[0]=x7431;
j4eval[1]=IKsign(x7431);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7428))+((cj0*x7429)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7432=cj5*cj5;
IkReal x7433=((1.0)*sj5);
IkReal x7434=(cj5*r20);
IkReal x7435=(r11*r21);
CheckValue<IkReal> x7436=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x7433))+((r12*r22))+(((-1.0)*x7432*x7435))+((r10*r20*x7432))+x7435+(((-1.0)*r11*x7433*x7434)))),-1);
if(!x7436.valid){
continue;
}
CheckValue<IkReal> x7437 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7433))+((cj0*x7434)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7436.value)))+(x7437.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7438=IKsin(j4);
IkReal x7439=IKcos(j4);
IkReal x7440=((1.0)*sj0);
IkReal x7441=(cj5*r00);
IkReal x7442=(r11*sj5);
IkReal x7443=(cj5*r10);
IkReal x7444=(r21*sj5);
IkReal x7445=(cj5*r20);
IkReal x7446=(r01*sj5);
IkReal x7447=((1.0)*x7439);
IkReal x7448=((1.0)*x7438);
evalcond[0]=(((x7438*x7444))+(((-1.0)*x7445*x7448))+(((-1.0)*r22*x7447)));
evalcond[1]=(((x7439*x7445))+(((-1.0)*x7444*x7447))+(((-1.0)*r22*x7448)));
evalcond[2]=(cj0+((x7438*x7442))+(((-1.0)*r12*x7447))+(((-1.0)*x7443*x7448)));
evalcond[3]=((((-1.0)*x7440))+((x7438*x7446))+(((-1.0)*r02*x7447))+(((-1.0)*x7441*x7448)));
evalcond[4]=((((-1.0)*x7446*x7447))+(((-1.0)*r02*x7448))+((x7439*x7441))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7440))+(((-1.0)*x7442*x7447))+((x7439*x7443))+(((-1.0)*r12*x7448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7449=((1.0)*cj5);
CheckValue<IkReal> x7450 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7450.valid){
continue;
}
CheckValue<IkReal> x7451=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7449)))),-1);
if(!x7451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7450.value)+(((1.5707963267949)*(x7451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7452=IKsin(j4);
IkReal x7453=IKcos(j4);
IkReal x7454=((1.0)*sj0);
IkReal x7455=(cj5*r00);
IkReal x7456=(r11*sj5);
IkReal x7457=(cj5*r10);
IkReal x7458=(r21*sj5);
IkReal x7459=(cj5*r20);
IkReal x7460=(r01*sj5);
IkReal x7461=((1.0)*x7453);
IkReal x7462=((1.0)*x7452);
evalcond[0]=((((-1.0)*r22*x7461))+(((-1.0)*x7459*x7462))+((x7452*x7458)));
evalcond[1]=((((-1.0)*x7458*x7461))+(((-1.0)*r22*x7462))+((x7453*x7459)));
evalcond[2]=(cj0+(((-1.0)*r12*x7461))+((x7452*x7456))+(((-1.0)*x7457*x7462)));
evalcond[3]=((((-1.0)*x7454))+(((-1.0)*r02*x7461))+((x7452*x7460))+(((-1.0)*x7455*x7462)));
evalcond[4]=((((-1.0)*r02*x7462))+(((-1.0)*x7460*x7461))+((x7453*x7455))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7454))+(((-1.0)*r12*x7462))+(((-1.0)*x7456*x7461))+((x7453*x7457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7463=((1.0)*cj5);
CheckValue<IkReal> x7464 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7463)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7464.valid){
continue;
}
CheckValue<IkReal> x7465=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7463)))),-1);
if(!x7465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7464.value)+(((1.5707963267949)*(x7465.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7466=IKsin(j4);
IkReal x7467=IKcos(j4);
IkReal x7468=((1.0)*sj0);
IkReal x7469=(cj5*r00);
IkReal x7470=(r11*sj5);
IkReal x7471=(cj5*r10);
IkReal x7472=(r21*sj5);
IkReal x7473=(cj5*r20);
IkReal x7474=(r01*sj5);
IkReal x7475=((1.0)*x7467);
IkReal x7476=((1.0)*x7466);
evalcond[0]=((((-1.0)*r22*x7475))+((x7466*x7472))+(((-1.0)*x7473*x7476)));
evalcond[1]=(((x7467*x7473))+(((-1.0)*r22*x7476))+(((-1.0)*x7472*x7475)));
evalcond[2]=(cj0+((x7466*x7470))+(((-1.0)*x7471*x7476))+(((-1.0)*r12*x7475)));
evalcond[3]=((((-1.0)*r02*x7475))+((x7466*x7474))+(((-1.0)*x7468))+(((-1.0)*x7469*x7476)));
evalcond[4]=((((-1.0)*r02*x7476))+(((-1.0)*x7474*x7475))+((x7467*x7469))+(((-1.0)*cj0)));
evalcond[5]=(((x7467*x7471))+(((-1.0)*x7468))+(((-1.0)*x7470*x7475))+(((-1.0)*r12*x7476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7477=((1.0)*sj5);
IkReal x7478=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7478))+(((-1.0)*r10*x7477)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7477))+(((-1.0)*r01*x7478)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7478))+(((-1.0)*r10*x7477))))+IKsqr(((((-1.0)*r00*x7477))+(((-1.0)*r01*x7478))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7478))+(((-1.0)*r10*x7477))), ((((-1.0)*r00*x7477))+(((-1.0)*r01*x7478))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7479=IKsin(j0);
IkReal x7480=IKcos(j0);
IkReal x7481=((1.0)*cj5);
IkReal x7482=((1.0)*sj5);
IkReal x7483=((0.09465)*cj5);
IkReal x7484=((0.09465)*sj5);
evalcond[0]=((((-1.0)*x7480))+(((-1.0)*r01*x7481))+(((-1.0)*r00*x7482)));
evalcond[1]=((((-1.0)*r10*x7482))+(((-1.0)*x7479))+(((-1.0)*r11*x7481)));
evalcond[2]=((((-0.10915)*x7479))+(((-1.0)*r01*x7483))+(((-1.0)*px))+(((-1.0)*r00*x7484)));
evalcond[3]=((((0.10915)*x7480))+(((-1.0)*py))+(((-1.0)*r10*x7484))+(((-1.0)*r11*x7483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7485=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7485;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7485);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7486=((1.0)*cj5);
IkReal x7487=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7486)));
j4eval[0]=x7487;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7486)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7487);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7488=cj5*cj5;
IkReal x7489=r21*r21;
IkReal x7490=(r21*sj5);
IkReal x7491=(cj5*r20);
IkReal x7492=((((-2.0)*x7490*x7491))+(r22*r22)+((x7488*(r20*r20)))+(((-1.0)*x7488*x7489))+x7489);
j4eval[0]=x7492;
j4eval[1]=IKsign(x7492);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x7491))+x7490))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7493=cj5*cj5;
IkReal x7494=r21*r21;
IkReal x7495=(r21*sj5);
IkReal x7496=(cj5*r20);
CheckValue<IkReal> x7497=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7493*x7494))+(r22*r22)+((x7493*(r20*r20)))+x7494+(((-2.0)*x7495*x7496)))),-1);
if(!x7497.valid){
continue;
}
CheckValue<IkReal> x7498 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7496))+x7495)),IKFAST_ATAN2_MAGTHRESH);
if(!x7498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7497.value)))+(x7498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7499=IKsin(j4);
IkReal x7500=IKcos(j4);
IkReal x7501=(r11*sj5);
IkReal x7502=(r21*sj5);
IkReal x7503=(cj5*r00);
IkReal x7504=(cj5*r20);
IkReal x7505=(r01*sj5);
IkReal x7506=(cj5*r10);
IkReal x7507=((1.0)*x7500);
IkReal x7508=((1.0)*x7499);
evalcond[0]=((((-1.0)*r22*x7507))+((x7499*x7502))+(((-1.0)*x7504*x7508)));
evalcond[1]=((((-1.0)*r02*x7508))+((x7500*x7503))+(((-1.0)*x7505*x7507)));
evalcond[2]=((((-1.0)*x7501*x7507))+((x7500*x7506))+(((-1.0)*r12*x7508)));
evalcond[3]=(((x7499*x7501))+cj0+(((-1.0)*x7506*x7508))+(((-1.0)*r12*x7507)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7508))+(((-1.0)*x7502*x7507))+((x7500*x7504)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7503*x7508))+((x7499*x7505))+(((-1.0)*r02*x7507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7509=((1.0)*cj5);
CheckValue<IkReal> x7510=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7509))+(((-1.0)*r00*sj5)))),-1);
if(!x7510.valid){
continue;
}
CheckValue<IkReal> x7511 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7509)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7510.value)))+(x7511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7512=IKsin(j4);
IkReal x7513=IKcos(j4);
IkReal x7514=(r11*sj5);
IkReal x7515=(r21*sj5);
IkReal x7516=(cj5*r00);
IkReal x7517=(cj5*r20);
IkReal x7518=(r01*sj5);
IkReal x7519=(cj5*r10);
IkReal x7520=((1.0)*x7513);
IkReal x7521=((1.0)*x7512);
evalcond[0]=((((-1.0)*x7517*x7521))+((x7512*x7515))+(((-1.0)*r22*x7520)));
evalcond[1]=((((-1.0)*r02*x7521))+(((-1.0)*x7518*x7520))+((x7513*x7516)));
evalcond[2]=(((x7513*x7519))+(((-1.0)*r12*x7521))+(((-1.0)*x7514*x7520)));
evalcond[3]=(cj0+(((-1.0)*x7519*x7521))+((x7512*x7514))+(((-1.0)*r12*x7520)));
evalcond[4]=((1.0)+(((-1.0)*x7515*x7520))+((x7513*x7517))+(((-1.0)*r22*x7521)));
evalcond[5]=((((-1.0)*x7516*x7521))+(((-1.0)*sj0))+(((-1.0)*r02*x7520))+((x7512*x7518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7522 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7522.valid){
continue;
}
CheckValue<IkReal> x7523=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7522.value)+(((1.5707963267949)*(x7523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7524=IKsin(j4);
IkReal x7525=IKcos(j4);
IkReal x7526=(r11*sj5);
IkReal x7527=(r21*sj5);
IkReal x7528=(cj5*r00);
IkReal x7529=(cj5*r20);
IkReal x7530=(r01*sj5);
IkReal x7531=(cj5*r10);
IkReal x7532=((1.0)*x7525);
IkReal x7533=((1.0)*x7524);
evalcond[0]=((((-1.0)*x7529*x7533))+((x7524*x7527))+(((-1.0)*r22*x7532)));
evalcond[1]=(((x7525*x7528))+(((-1.0)*x7530*x7532))+(((-1.0)*r02*x7533)));
evalcond[2]=((((-1.0)*x7526*x7532))+(((-1.0)*r12*x7533))+((x7525*x7531)));
evalcond[3]=(cj0+(((-1.0)*r12*x7532))+((x7524*x7526))+(((-1.0)*x7531*x7533)));
evalcond[4]=((1.0)+(((-1.0)*x7527*x7532))+((x7525*x7529))+(((-1.0)*r22*x7533)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7528*x7533))+((x7524*x7530))+(((-1.0)*r02*x7532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7534=IKcos(j0);
IkReal x7535=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.39225)*x7534))+(((-0.10915)*x7535)));
evalcond[1]=((((-1.0)*py))+(((-0.39225)*x7535))+(((0.10915)*x7534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7536=((1.0)*cj5);
IkReal x7537=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7536)));
j4eval[0]=x7537;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7536)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7537);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7538=cj5*cj5;
IkReal x7539=((1.0)*r21);
IkReal x7540=(cj5*sj5);
IkReal x7541=((1.0)*r20);
IkReal x7542=((((-1.0)*r01*x7540*x7541))+(((-1.0)*r00*x7539*x7540))+((r01*r21))+((r02*r22))+((r00*r20*x7538))+(((-1.0)*r01*x7538*x7539)));
j4eval[0]=x7542;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7541)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7542);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7543=cj5*cj5;
IkReal x7544=(r21*sj5);
IkReal x7545=(r11*r21);
IkReal x7546=((1.0)*cj5*r20);
IkReal x7547=((((-1.0)*r11*sj5*x7546))+((r10*r20*x7543))+((r12*r22))+x7545+(((-1.0)*x7543*x7545))+(((-1.0)*cj5*r10*x7544)));
j4eval[0]=x7547;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7544))+(((-1.0)*sj0*x7546))))));
j4eval[2]=IKsign(x7547);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7548=cj5*cj5;
IkReal x7549=(r21*sj5);
IkReal x7550=(r11*r21);
IkReal x7551=((1.0)*cj5*r20);
CheckValue<IkReal> x7552 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7549))+(((-1.0)*sj0*x7551)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7552.valid){
continue;
}
CheckValue<IkReal> x7553=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7551))+((r10*r20*x7548))+(((-1.0)*x7548*x7550))+((r12*r22))+x7550+(((-1.0)*cj5*r10*x7549)))),-1);
if(!x7553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7552.value)+(((1.5707963267949)*(x7553.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7554=IKsin(j4);
IkReal x7555=IKcos(j4);
IkReal x7556=(r11*sj5);
IkReal x7557=(cj5*r00);
IkReal x7558=(cj5*r10);
IkReal x7559=(r21*sj5);
IkReal x7560=(cj5*r20);
IkReal x7561=(r01*sj5);
IkReal x7562=((1.0)*x7555);
IkReal x7563=((1.0)*x7554);
evalcond[0]=((((-1.0)*r22*x7562))+(((-1.0)*x7560*x7563))+((x7554*x7559)));
evalcond[1]=((((-1.0)*x7559*x7562))+(((-1.0)*r22*x7563))+((x7555*x7560)));
evalcond[2]=(cj0+(((-1.0)*r12*x7562))+(((-1.0)*x7558*x7563))+((x7554*x7556)));
evalcond[3]=((((-1.0)*r02*x7563))+cj0+((x7555*x7557))+(((-1.0)*x7561*x7562)));
evalcond[4]=(sj0+(((-1.0)*x7556*x7562))+(((-1.0)*r12*x7563))+((x7555*x7558)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7562))+(((-1.0)*x7557*x7563))+((x7554*x7561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7564=cj5*cj5;
IkReal x7565=((1.0)*r21);
IkReal x7566=(cj5*sj5);
IkReal x7567=((1.0)*r20);
CheckValue<IkReal> x7568=IKPowWithIntegerCheck(IKsign((((r00*r20*x7564))+((r01*r21))+(((-1.0)*r00*x7565*x7566))+(((-1.0)*r01*x7566*x7567))+(((-1.0)*r01*x7564*x7565))+((r02*r22)))),-1);
if(!x7568.valid){
continue;
}
CheckValue<IkReal> x7569 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7567)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7568.value)))+(x7569.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7570=IKsin(j4);
IkReal x7571=IKcos(j4);
IkReal x7572=(r11*sj5);
IkReal x7573=(cj5*r00);
IkReal x7574=(cj5*r10);
IkReal x7575=(r21*sj5);
IkReal x7576=(cj5*r20);
IkReal x7577=(r01*sj5);
IkReal x7578=((1.0)*x7571);
IkReal x7579=((1.0)*x7570);
evalcond[0]=((((-1.0)*x7576*x7579))+((x7570*x7575))+(((-1.0)*r22*x7578)));
evalcond[1]=(((x7571*x7576))+(((-1.0)*x7575*x7578))+(((-1.0)*r22*x7579)));
evalcond[2]=(cj0+(((-1.0)*x7574*x7579))+((x7570*x7572))+(((-1.0)*r12*x7578)));
evalcond[3]=(cj0+(((-1.0)*x7577*x7578))+((x7571*x7573))+(((-1.0)*r02*x7579)));
evalcond[4]=(sj0+((x7571*x7574))+(((-1.0)*r12*x7579))+(((-1.0)*x7572*x7578)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7578))+((x7570*x7577))+(((-1.0)*x7573*x7579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7580=((1.0)*cj5);
CheckValue<IkReal> x7581 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7580))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7581.valid){
continue;
}
CheckValue<IkReal> x7582=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7580))+(((-1.0)*r00*sj5)))),-1);
if(!x7582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7581.value)+(((1.5707963267949)*(x7582.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7583=IKsin(j4);
IkReal x7584=IKcos(j4);
IkReal x7585=(r11*sj5);
IkReal x7586=(cj5*r00);
IkReal x7587=(cj5*r10);
IkReal x7588=(r21*sj5);
IkReal x7589=(cj5*r20);
IkReal x7590=(r01*sj5);
IkReal x7591=((1.0)*x7584);
IkReal x7592=((1.0)*x7583);
evalcond[0]=(((x7583*x7588))+(((-1.0)*x7589*x7592))+(((-1.0)*r22*x7591)));
evalcond[1]=((((-1.0)*r22*x7592))+((x7584*x7589))+(((-1.0)*x7588*x7591)));
evalcond[2]=(cj0+((x7583*x7585))+(((-1.0)*r12*x7591))+(((-1.0)*x7587*x7592)));
evalcond[3]=(cj0+(((-1.0)*x7590*x7591))+((x7584*x7586))+(((-1.0)*r02*x7592)));
evalcond[4]=(sj0+(((-1.0)*r12*x7592))+((x7584*x7587))+(((-1.0)*x7585*x7591)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7586*x7592))+(((-1.0)*r02*x7591))+((x7583*x7590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7593=cj1*cj1;
IkReal x7594=(cj1*sj1);
IkReal x7595=(cj1*sj2);
IkReal x7596=(r00*sj5);
IkReal x7597=(cj2*sj1);
IkReal x7598=(cj5*r01);
IkReal x7599=((20000.0)*py);
IkReal x7600=((1893.0)*r10*sj5);
IkReal x7601=((1893.0)*cj5*r11);
IkReal x7602=(sj2*x7593);
CheckValue<IkReal> x7603=IKPowWithIntegerCheck(((((-15690.0)*cj2*x7602))+(((-8500.0)*x7602))+(((-15690.0)*x7594*(cj2*cj2)))+(((7845.0)*cj2*sj2))+(((-8500.0)*cj2*x7594))+(((7845.0)*x7594))),-1);
if(!x7603.valid){
continue;
}
CheckValue<IkReal> x7604=IKPowWithIntegerCheck(((((-1.0)*x7595))+(((-1.0)*x7597))),-1);
if(!x7604.valid){
continue;
}
if( IKabs(((x7603.value)*(((((-1.0)*x7595*x7600))+(((-1.0)*x7595*x7601))+(((-1.0)*x7597*x7601))+(((-1.0)*x7597*x7600))+(((-1.0)*x7597*x7599))+(((-1.0)*x7595*x7599))+(((-2183.0)*x7596))+(((-2183.0)*x7598)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7604.value)*((x7598+x7596)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7603.value)*(((((-1.0)*x7595*x7600))+(((-1.0)*x7595*x7601))+(((-1.0)*x7597*x7601))+(((-1.0)*x7597*x7600))+(((-1.0)*x7597*x7599))+(((-1.0)*x7595*x7599))+(((-2183.0)*x7596))+(((-2183.0)*x7598))))))+IKsqr(((x7604.value)*((x7598+x7596))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7603.value)*(((((-1.0)*x7595*x7600))+(((-1.0)*x7595*x7601))+(((-1.0)*x7597*x7601))+(((-1.0)*x7597*x7600))+(((-1.0)*x7597*x7599))+(((-1.0)*x7595*x7599))+(((-2183.0)*x7596))+(((-2183.0)*x7598))))), ((x7604.value)*((x7598+x7596))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7605=IKcos(j0);
IkReal x7606=IKsin(j0);
IkReal x7607=((1.0)*cj1);
IkReal x7608=((0.39225)*sj1);
IkReal x7609=(cj5*r11);
IkReal x7610=((1.0)*sj5);
IkReal x7611=(cj5*r01);
IkReal x7612=((1.0)*sj1);
IkReal x7613=((0.09465)*sj5);
IkReal x7614=((0.39225)*cj1);
IkReal x7615=((0.425)*cj1);
IkReal x7616=(sj2*x7605);
IkReal x7617=(sj2*x7606);
IkReal x7618=(cj2*x7605);
IkReal x7619=(cj2*x7606);
evalcond[0]=((((-1.0)*x7612*x7618))+(((-1.0)*r00*x7610))+(((-1.0)*x7611))+(((-1.0)*x7607*x7616)));
evalcond[1]=((((-1.0)*x7612*x7619))+(((-1.0)*r10*x7610))+(((-1.0)*x7607*x7617))+(((-1.0)*x7609)));
evalcond[2]=(((x7605*x7615))+(((-0.09465)*x7611))+(((-1.0)*px))+(((-1.0)*r00*x7613))+(((-1.0)*x7608*x7616))+(((-0.10915)*x7606))+((x7614*x7618)));
evalcond[3]=(((x7606*x7615))+(((-0.09465)*x7609))+(((-1.0)*py))+(((0.10915)*x7605))+(((-1.0)*r10*x7613))+(((-1.0)*x7608*x7617))+((x7614*x7619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7620=((1.0)*cj5);
IkReal x7621=((((-1.0)*r01*x7620))+(((-1.0)*r00*sj5)));
j4eval[0]=x7621;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7620)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7621);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7622=((1.0)*cj5);
IkReal x7623=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7622)));
j4eval[0]=x7623;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7622))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7623);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7624=((1.0)*sj0);
IkReal x7625=((1.0)*cj0);
IkReal x7626=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7626;
j4eval[1]=((IKabs(((((-1.0)*r12*x7624))+(((-1.0)*r02*x7625)))))+(IKabs(((((-1.0)*r11*sj5*x7624))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x7625))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x7626);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7627=((-1.0)*r20);
IkReal x7629 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7629)==0){
continue;
}
IkReal x7628=pow(x7629,-0.5);
CheckValue<IkReal> x7630 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7627),IKFAST_ATAN2_MAGTHRESH);
if(!x7630.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7630.value));
IkReal gconst133=(r21*x7628);
IkReal gconst134=(x7627*x7628);
CheckValue<IkReal> x7631 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7631.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7631.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7632=((-1.0)*r20);
IkReal x7633=x7628;
CheckValue<IkReal> x7635 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7632),IKFAST_ATAN2_MAGTHRESH);
if(!x7635.valid){
continue;
}
IkReal x7634=((-1.0)*(x7635.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7634;
IkReal gconst132=x7634;
IkReal gconst133=(r21*x7633);
IkReal gconst134=(x7632*x7633);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7636=((-1.0)*r20);
IkReal x7637=x7628;
CheckValue<IkReal> x7639 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7636),IKFAST_ATAN2_MAGTHRESH);
if(!x7639.valid){
continue;
}
IkReal x7638=((-1.0)*(x7639.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7638;
IkReal gconst132=x7638;
IkReal gconst133=(r21*x7637);
IkReal gconst134=(x7636*x7637);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7640=((-1.0)*r20);
IkReal x7641=x7628;
CheckValue<IkReal> x7643 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7640),IKFAST_ATAN2_MAGTHRESH);
if(!x7643.valid){
continue;
}
IkReal x7642=((-1.0)*(x7643.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7642;
IkReal gconst132=x7642;
IkReal gconst133=(r21*x7641);
IkReal gconst134=(x7640*x7641);
IkReal x7644=r22*r22;
CheckValue<IkReal> x7647=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7644))),-1);
if(!x7647.valid){
continue;
}
IkReal x7645=x7647.value;
IkReal x7646=(((x7645*(r20*r20*r20*r20)))+(((2.0)*x7645*(r20*r20)*(r21*r21)))+x7644+((x7645*(r21*r21*r21*r21))));
j4eval[0]=x7646;
j4eval[1]=IKsign(x7646);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7648=(gconst133*r21);
IkReal x7649=(cj1*sj2);
IkReal x7650=(gconst134*r20);
IkReal x7651=(cj2*sj1);
CheckValue<IkReal> x7652=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7648*x7650))+(x7648*x7648)+(x7650*x7650))),-1);
if(!x7652.valid){
continue;
}
CheckValue<IkReal> x7653 = IKatan2WithCheck(IkReal((((r22*x7649))+((r22*x7651)))),IkReal((((x7648*x7651))+((x7648*x7649))+(((-1.0)*x7649*x7650))+(((-1.0)*x7650*x7651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7652.value)))+(x7653.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7654=IKsin(j4);
IkReal x7655=IKcos(j4);
IkReal x7656=(sj1*sj2);
IkReal x7657=(gconst133*r11);
IkReal x7658=(gconst133*r21);
IkReal x7659=(gconst133*r01);
IkReal x7660=((1.0)*x7655);
IkReal x7661=(gconst134*x7655);
IkReal x7662=((1.0)*x7654);
IkReal x7663=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7662))+(((-1.0)*r22*x7660))+((x7654*x7658)));
evalcond[1]=((((-1.0)*gconst134*r10*x7662))+(((-1.0)*r12*x7660))+cj0+((x7654*x7657)));
evalcond[2]=((((-1.0)*sj0))+((x7654*x7659))+(((-1.0)*r02*x7660))+(((-1.0)*gconst134*r00*x7662)));
evalcond[3]=(((cj2*sj1))+((r20*x7661))+((cj1*sj2))+(((-1.0)*r22*x7662))+(((-1.0)*x7658*x7660)));
evalcond[4]=((((-1.0)*cj0*x7663))+((r00*x7661))+(((-1.0)*r02*x7662))+((cj0*x7656))+(((-1.0)*x7659*x7660)));
evalcond[5]=((((-1.0)*r12*x7662))+((r10*x7661))+(((-1.0)*x7657*x7660))+(((-1.0)*sj0*x7663))+((sj0*x7656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7664=((1.0)*gconst134);
CheckValue<IkReal> x7665=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7664)))),-1);
if(!x7665.valid){
continue;
}
CheckValue<IkReal> x7666 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7664))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7665.value)))+(x7666.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7667=IKsin(j4);
IkReal x7668=IKcos(j4);
IkReal x7669=(sj1*sj2);
IkReal x7670=(gconst133*r11);
IkReal x7671=(gconst133*r21);
IkReal x7672=(gconst133*r01);
IkReal x7673=((1.0)*x7668);
IkReal x7674=(gconst134*x7668);
IkReal x7675=((1.0)*x7667);
IkReal x7676=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7675))+((x7667*x7671))+(((-1.0)*r22*x7673)));
evalcond[1]=(cj0+((x7667*x7670))+(((-1.0)*gconst134*r10*x7675))+(((-1.0)*r12*x7673)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7673))+((x7667*x7672))+(((-1.0)*gconst134*r00*x7675)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7674))+(((-1.0)*x7671*x7673))+(((-1.0)*r22*x7675)));
evalcond[4]=((((-1.0)*r02*x7675))+(((-1.0)*cj0*x7676))+((cj0*x7669))+(((-1.0)*x7672*x7673))+((r00*x7674)));
evalcond[5]=((((-1.0)*sj0*x7676))+(((-1.0)*x7670*x7673))+(((-1.0)*r12*x7675))+((r10*x7674))+((sj0*x7669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7677=((1.0)*gconst134);
CheckValue<IkReal> x7678 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7677))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7678.valid){
continue;
}
CheckValue<IkReal> x7679=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7677)))),-1);
if(!x7679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7678.value)+(((1.5707963267949)*(x7679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7680=IKsin(j4);
IkReal x7681=IKcos(j4);
IkReal x7682=(sj1*sj2);
IkReal x7683=(gconst133*r11);
IkReal x7684=(gconst133*r21);
IkReal x7685=(gconst133*r01);
IkReal x7686=((1.0)*x7681);
IkReal x7687=(gconst134*x7681);
IkReal x7688=((1.0)*x7680);
IkReal x7689=((1.0)*cj1*cj2);
evalcond[0]=(((x7680*x7684))+(((-1.0)*gconst134*r20*x7688))+(((-1.0)*r22*x7686)));
evalcond[1]=((((-1.0)*gconst134*r10*x7688))+((x7680*x7683))+cj0+(((-1.0)*r12*x7686)));
evalcond[2]=((((-1.0)*gconst134*r00*x7688))+(((-1.0)*sj0))+((x7680*x7685))+(((-1.0)*r02*x7686)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7688))+((r20*x7687))+(((-1.0)*x7684*x7686)));
evalcond[4]=((((-1.0)*cj0*x7689))+((cj0*x7682))+((r00*x7687))+(((-1.0)*x7685*x7686))+(((-1.0)*r02*x7688)));
evalcond[5]=(((sj0*x7682))+((r10*x7687))+(((-1.0)*r12*x7688))+(((-1.0)*sj0*x7689))+(((-1.0)*x7683*x7686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7690=((-1.0)*r21);
IkReal x7692 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7692)==0){
continue;
}
IkReal x7691=pow(x7692,-0.5);
CheckValue<IkReal> x7693 = IKatan2WithCheck(IkReal(x7690),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7693.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7693.value))));
IkReal gconst136=(x7690*x7691);
IkReal gconst137=((1.0)*r20*x7691);
CheckValue<IkReal> x7694 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7694.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7694.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7695=((-1.0)*r21);
CheckValue<IkReal> x7698 = IKatan2WithCheck(IkReal(x7695),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7698.valid){
continue;
}
IkReal x7696=((1.0)*(x7698.value));
IkReal x7697=x7691;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7696)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7696)));
IkReal gconst136=(x7695*x7697);
IkReal gconst137=((1.0)*r20*x7697);
IkReal x7699=r22*r22;
IkReal x7700=((1.0)*x7699);
CheckValue<IkReal> x7704=IKPowWithIntegerCheck(((-1.0)+x7699),-1);
if(!x7704.valid){
continue;
}
IkReal x7701=x7704.value;
if((((1.0)+(((-1.0)*x7700)))) < -0.00001)
continue;
IkReal x7702=IKsqrt(((1.0)+(((-1.0)*x7700))));
IkReal x7703=(cj0*x7701*x7702);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x7700*x7703))+x7703))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7705=((-1.0)*r21);
CheckValue<IkReal> x7708 = IKatan2WithCheck(IkReal(x7705),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7708.valid){
continue;
}
IkReal x7706=((1.0)*(x7708.value));
IkReal x7707=x7691;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7706)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7706)));
IkReal gconst136=(x7705*x7707);
IkReal gconst137=((1.0)*r20*x7707);
IkReal x7709=r22*r22;
IkReal x7710=((1.0)*x7709);
CheckValue<IkReal> x7714=IKPowWithIntegerCheck(((-1.0)+x7709),-1);
if(!x7714.valid){
continue;
}
IkReal x7711=x7714.value;
if((((1.0)+(((-1.0)*x7710)))) < -0.00001)
continue;
IkReal x7712=IKsqrt(((1.0)+(((-1.0)*x7710))));
IkReal x7713=(sj0*x7711*x7712);
j4eval[0]=((IKabs((x7713+(((-1.0)*x7710*x7713)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7715=((-1.0)*r21);
CheckValue<IkReal> x7718 = IKatan2WithCheck(IkReal(x7715),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7718.valid){
continue;
}
IkReal x7716=((1.0)*(x7718.value));
IkReal x7717=x7691;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7716)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7716)));
IkReal gconst136=(x7715*x7717);
IkReal gconst137=((1.0)*r20*x7717);
IkReal x7719=r22*r22;
IkReal x7720=(r12*sj0);
IkReal x7721=(cj0*r02);
CheckValue<IkReal> x7725=IKPowWithIntegerCheck(((-1.0)+x7719),-1);
if(!x7725.valid){
continue;
}
IkReal x7722=x7725.value;
if((((1.0)+(((-1.0)*x7719)))) < -0.00001)
continue;
IkReal x7723=IKsqrt(((1.0)+(((-1.0)*x7719))));
IkReal x7724=(r22*x7722*x7723);
j4eval[0]=0;
j4eval[1]=((IKabs((((x7720*x7724))+((x7721*x7724)))))+(IKabs(((((-1.0)*x7720))+(((-1.0)*x7721))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7726=((1.0)*sj0);
IkReal x7727=((1.0)*cj0);
CheckValue<IkReal> x7728=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7728.valid){
continue;
}
CheckValue<IkReal> x7729 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7727))+(((-1.0)*r12*x7726)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x7726))+(((-1.0)*gconst136*r01*x7727))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7728.value)))+(x7729.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7730=IKsin(j4);
IkReal x7731=IKcos(j4);
IkReal x7732=(gconst136*r01);
IkReal x7733=(gconst137*r10);
IkReal x7734=(sj1*sj2);
IkReal x7735=(gconst137*r20);
IkReal x7736=(gconst136*r11);
IkReal x7737=(gconst136*r21);
IkReal x7738=(gconst137*r00);
IkReal x7739=((1.0)*x7731);
IkReal x7740=((1.0)*cj1*cj2);
IkReal x7741=((1.0)*x7730);
evalcond[0]=((((-1.0)*r22*x7739))+((x7730*x7737))+(((-1.0)*x7735*x7741)));
evalcond[1]=(cj0+((x7730*x7736))+(((-1.0)*r12*x7739))+(((-1.0)*x7733*x7741)));
evalcond[2]=((((-1.0)*sj0))+((x7730*x7732))+(((-1.0)*x7738*x7741))+(((-1.0)*r02*x7739)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7741))+((cj1*sj2))+((x7731*x7735))+(((-1.0)*x7737*x7739)));
evalcond[4]=((((-1.0)*x7732*x7739))+(((-1.0)*r02*x7741))+((cj0*x7734))+((x7731*x7738))+(((-1.0)*cj0*x7740)));
evalcond[5]=((((-1.0)*x7736*x7739))+((x7731*x7733))+(((-1.0)*r12*x7741))+((sj0*x7734))+(((-1.0)*sj0*x7740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7742=((1.0)*gconst137);
CheckValue<IkReal> x7743=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x7742)))),-1);
if(!x7743.valid){
continue;
}
CheckValue<IkReal> x7744 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7742))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7743.value)))+(x7744.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7745=IKsin(j4);
IkReal x7746=IKcos(j4);
IkReal x7747=(gconst136*r01);
IkReal x7748=(gconst137*r10);
IkReal x7749=(sj1*sj2);
IkReal x7750=(gconst137*r20);
IkReal x7751=(gconst136*r11);
IkReal x7752=(gconst136*r21);
IkReal x7753=(gconst137*r00);
IkReal x7754=((1.0)*x7746);
IkReal x7755=((1.0)*cj1*cj2);
IkReal x7756=((1.0)*x7745);
evalcond[0]=((((-1.0)*r22*x7754))+(((-1.0)*x7750*x7756))+((x7745*x7752)));
evalcond[1]=(cj0+(((-1.0)*r12*x7754))+(((-1.0)*x7748*x7756))+((x7745*x7751)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7754))+(((-1.0)*x7753*x7756))+((x7745*x7747)));
evalcond[3]=((((-1.0)*r22*x7756))+((cj2*sj1))+(((-1.0)*x7752*x7754))+((cj1*sj2))+((x7746*x7750)));
evalcond[4]=((((-1.0)*r02*x7756))+(((-1.0)*cj0*x7755))+(((-1.0)*x7747*x7754))+((cj0*x7749))+((x7746*x7753)));
evalcond[5]=(((sj0*x7749))+(((-1.0)*r12*x7756))+((x7746*x7748))+(((-1.0)*sj0*x7755))+(((-1.0)*x7751*x7754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7757=((1.0)*gconst137);
CheckValue<IkReal> x7758 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x7757)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7758.valid){
continue;
}
CheckValue<IkReal> x7759=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x7757)))),-1);
if(!x7759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7758.value)+(((1.5707963267949)*(x7759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7760=IKsin(j4);
IkReal x7761=IKcos(j4);
IkReal x7762=(gconst136*r01);
IkReal x7763=(gconst137*r10);
IkReal x7764=(sj1*sj2);
IkReal x7765=(gconst137*r20);
IkReal x7766=(gconst136*r11);
IkReal x7767=(gconst136*r21);
IkReal x7768=(gconst137*r00);
IkReal x7769=((1.0)*x7761);
IkReal x7770=((1.0)*cj1*cj2);
IkReal x7771=((1.0)*x7760);
evalcond[0]=(((x7760*x7767))+(((-1.0)*r22*x7769))+(((-1.0)*x7765*x7771)));
evalcond[1]=(((x7760*x7766))+cj0+(((-1.0)*r12*x7769))+(((-1.0)*x7763*x7771)));
evalcond[2]=((((-1.0)*sj0))+((x7760*x7762))+(((-1.0)*r02*x7769))+(((-1.0)*x7768*x7771)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7767*x7769))+(((-1.0)*r22*x7771))+((cj1*sj2))+((x7761*x7765)));
evalcond[4]=((((-1.0)*r02*x7771))+(((-1.0)*cj0*x7770))+((cj0*x7764))+((x7761*x7768))+(((-1.0)*x7762*x7769)));
evalcond[5]=((((-1.0)*x7766*x7769))+((sj0*x7764))+(((-1.0)*sj0*x7770))+((x7761*x7763))+(((-1.0)*r12*x7771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7772=((-1.0)*r10);
IkReal x7774 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7774)==0){
continue;
}
IkReal x7773=pow(x7774,-0.5);
CheckValue<IkReal> x7775 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7772),IKFAST_ATAN2_MAGTHRESH);
if(!x7775.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7775.value));
IkReal gconst139=(r11*x7773);
IkReal gconst140=(x7772*x7773);
CheckValue<IkReal> x7776 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7776.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7776.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7777=((-1.0)*r10);
IkReal x7778=x7773;
CheckValue<IkReal> x7780 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7777),IKFAST_ATAN2_MAGTHRESH);
if(!x7780.valid){
continue;
}
IkReal x7779=((-1.0)*(x7780.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7779;
IkReal gconst138=x7779;
IkReal gconst139=(r11*x7778);
IkReal gconst140=(x7777*x7778);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7781=((1.0)*sj0);
IkReal x7782=((1.0)*gconst139);
CheckValue<IkReal> x7783 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7781)))),IkReal(((((-1.0)*gconst139*r11*x7781))+((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x7782))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7783.valid){
continue;
}
CheckValue<IkReal> x7784=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7782)))),-1);
if(!x7784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7783.value)+(((1.5707963267949)*(x7784.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7785=IKsin(j4);
IkReal x7786=IKcos(j4);
IkReal x7787=(gconst140*r00);
IkReal x7788=(sj1*sj2);
IkReal x7789=(gconst139*r11);
IkReal x7790=(gconst139*r01);
IkReal x7791=(gconst139*r21);
IkReal x7792=((1.0)*x7786);
IkReal x7793=((1.0)*x7785);
IkReal x7794=((1.0)*cj1*cj2);
IkReal x7795=(gconst140*x7786);
evalcond[0]=((((-1.0)*r22*x7792))+((x7785*x7791))+(((-1.0)*gconst140*r20*x7793)));
evalcond[1]=(((x7785*x7789))+cj0+(((-1.0)*r12*x7792))+(((-1.0)*gconst140*r10*x7793)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7787*x7793))+(((-1.0)*r02*x7792))+((x7785*x7790)));
evalcond[3]=((((-1.0)*r22*x7793))+((cj2*sj1))+(((-1.0)*x7791*x7792))+((cj1*sj2))+((r20*x7795)));
evalcond[4]=((((-1.0)*cj0*x7794))+(((-1.0)*x7790*x7792))+(((-1.0)*r02*x7793))+((x7786*x7787))+((cj0*x7788)));
evalcond[5]=(((sj0*x7788))+((r10*x7795))+(((-1.0)*r12*x7793))+(((-1.0)*sj0*x7794))+(((-1.0)*x7789*x7792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7796=((1.0)*gconst140);
CheckValue<IkReal> x7797 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7796)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7797.valid){
continue;
}
CheckValue<IkReal> x7798=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x7796)))),-1);
if(!x7798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7797.value)+(((1.5707963267949)*(x7798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7799=IKsin(j4);
IkReal x7800=IKcos(j4);
IkReal x7801=(gconst140*r00);
IkReal x7802=(sj1*sj2);
IkReal x7803=(gconst139*r11);
IkReal x7804=(gconst139*r01);
IkReal x7805=(gconst139*r21);
IkReal x7806=((1.0)*x7800);
IkReal x7807=((1.0)*x7799);
IkReal x7808=((1.0)*cj1*cj2);
IkReal x7809=(gconst140*x7800);
evalcond[0]=((((-1.0)*gconst140*r20*x7807))+(((-1.0)*r22*x7806))+((x7799*x7805)));
evalcond[1]=(cj0+(((-1.0)*r12*x7806))+(((-1.0)*gconst140*r10*x7807))+((x7799*x7803)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7801*x7807))+(((-1.0)*r02*x7806))+((x7799*x7804)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7805*x7806))+((cj1*sj2))+(((-1.0)*r22*x7807))+((r20*x7809)));
evalcond[4]=(((x7800*x7801))+((cj0*x7802))+(((-1.0)*r02*x7807))+(((-1.0)*cj0*x7808))+(((-1.0)*x7804*x7806)));
evalcond[5]=((((-1.0)*sj0*x7808))+(((-1.0)*r12*x7807))+((sj0*x7802))+(((-1.0)*x7803*x7806))+((r10*x7809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7810=((-1.0)*r11);
IkReal x7812 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7812)==0){
continue;
}
IkReal x7811=pow(x7812,-0.5);
CheckValue<IkReal> x7813 = IKatan2WithCheck(IkReal(x7810),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7813.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7813.value))));
IkReal gconst142=(x7810*x7811);
IkReal gconst143=((1.0)*r10*x7811);
CheckValue<IkReal> x7814 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7814.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7814.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7815=((-1.0)*r11);
CheckValue<IkReal> x7818 = IKatan2WithCheck(IkReal(x7815),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7818.valid){
continue;
}
IkReal x7816=((1.0)*(x7818.value));
IkReal x7817=x7811;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7816)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7816)));
IkReal gconst142=(x7815*x7817);
IkReal gconst143=((1.0)*r10*x7817);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7819=((-1.0)*r11);
CheckValue<IkReal> x7822 = IKatan2WithCheck(IkReal(x7819),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7822.valid){
continue;
}
IkReal x7820=((1.0)*(x7822.value));
IkReal x7821=x7811;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7820)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7820)));
IkReal gconst142=(x7819*x7821);
IkReal gconst143=((1.0)*r10*x7821);
IkReal x7823=r12*r12;
IkReal x7824=((1.0)*sj0);
IkReal x7825=(cj0*r02);
IkReal x7826=x7811;
j4eval[0]=((IKabs(((((-1.0)*x7824*x7826))+((r12*x7825*x7826))+((sj0*x7823*x7826)))))+(IKabs(((((-1.0)*x7825))+(((-1.0)*r12*x7824))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7827=((-1.0)*r11);
CheckValue<IkReal> x7830 = IKatan2WithCheck(IkReal(x7827),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7830.valid){
continue;
}
IkReal x7828=((1.0)*(x7830.value));
IkReal x7829=x7811;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7828)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7828)));
IkReal gconst142=(x7827*x7829);
IkReal gconst143=((1.0)*r10*x7829);
IkReal x7831=r12*r12;
IkReal x7832=(cj1*r22*sj2);
IkReal x7833=(cj2*r22*sj1);
CheckValue<IkReal> x7837=IKPowWithIntegerCheck(((-1.0)+x7831),-1);
if(!x7837.valid){
continue;
}
IkReal x7834=x7837.value;
if((((1.0)+(((-1.0)*x7831)))) < -0.00001)
continue;
IkReal x7835=IKsqrt(((1.0)+(((-1.0)*x7831))));
IkReal x7836=((1.0)*r12*x7834*x7835);
j4eval[0]=((IKabs(((((-1.0)*x7832*x7836))+(((-1.0)*x7833*x7836)))))+(IKabs((x7832+x7833))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7838=(gconst142*r21);
IkReal x7839=(cj1*sj2);
IkReal x7840=(cj2*sj1);
IkReal x7841=(gconst143*r20);
CheckValue<IkReal> x7842 = IKatan2WithCheck(IkReal((((r22*x7840))+((r22*x7839)))),IkReal(((((-1.0)*x7840*x7841))+((x7838*x7840))+((x7838*x7839))+(((-1.0)*x7839*x7841)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7842.valid){
continue;
}
CheckValue<IkReal> x7843=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7838*x7841))+(x7838*x7838)+(x7841*x7841))),-1);
if(!x7843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7842.value)+(((1.5707963267949)*(x7843.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7844=IKsin(j4);
IkReal x7845=IKcos(j4);
IkReal x7846=(sj1*sj2);
IkReal x7847=(gconst143*r20);
IkReal x7848=((1.0)*x7845);
IkReal x7849=((1.0)*cj1*cj2);
IkReal x7850=((1.0)*x7844);
IkReal x7851=(gconst142*x7844);
IkReal x7852=(gconst143*x7845);
evalcond[0]=((((-1.0)*x7847*x7850))+(((-1.0)*r22*x7848))+((r21*x7851)));
evalcond[1]=(((r11*x7851))+cj0+(((-1.0)*gconst143*r10*x7850))+(((-1.0)*r12*x7848)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7848))+((r01*x7851))+(((-1.0)*gconst143*r00*x7850)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7845*x7847))+(((-1.0)*gconst142*r21*x7848))+(((-1.0)*r22*x7850)));
evalcond[4]=((((-1.0)*cj0*x7849))+(((-1.0)*gconst142*r01*x7848))+((cj0*x7846))+((r00*x7852))+(((-1.0)*r02*x7850)));
evalcond[5]=((((-1.0)*gconst142*r11*x7848))+((r10*x7852))+(((-1.0)*sj0*x7849))+(((-1.0)*r12*x7850))+((sj0*x7846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7853=((1.0)*sj0);
IkReal x7854=((1.0)*gconst142);
CheckValue<IkReal> x7855 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7853)))),IkReal(((((-1.0)*gconst142*r11*x7853))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7854))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7855.valid){
continue;
}
CheckValue<IkReal> x7856=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r21))+(((-1.0)*r20*x7854)))),-1);
if(!x7856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7855.value)+(((1.5707963267949)*(x7856.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7857=IKsin(j4);
IkReal x7858=IKcos(j4);
IkReal x7859=(sj1*sj2);
IkReal x7860=(gconst143*r20);
IkReal x7861=((1.0)*x7858);
IkReal x7862=((1.0)*cj1*cj2);
IkReal x7863=((1.0)*x7857);
IkReal x7864=(gconst142*x7857);
IkReal x7865=(gconst143*x7858);
evalcond[0]=(((r21*x7864))+(((-1.0)*x7860*x7863))+(((-1.0)*r22*x7861)));
evalcond[1]=(cj0+((r11*x7864))+(((-1.0)*r12*x7861))+(((-1.0)*gconst143*r10*x7863)));
evalcond[2]=((((-1.0)*gconst143*r00*x7863))+(((-1.0)*sj0))+((r01*x7864))+(((-1.0)*r02*x7861)));
evalcond[3]=(((cj2*sj1))+((x7858*x7860))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7861))+(((-1.0)*r22*x7863)));
evalcond[4]=((((-1.0)*gconst142*r01*x7861))+((cj0*x7859))+((r00*x7865))+(((-1.0)*r02*x7863))+(((-1.0)*cj0*x7862)));
evalcond[5]=(((sj0*x7859))+(((-1.0)*r12*x7863))+(((-1.0)*sj0*x7862))+((r10*x7865))+(((-1.0)*gconst142*r11*x7861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7866=((1.0)*gconst143);
CheckValue<IkReal> x7867 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7866))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7867.valid){
continue;
}
CheckValue<IkReal> x7868=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7866))+(((-1.0)*gconst142*r00)))),-1);
if(!x7868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7867.value)+(((1.5707963267949)*(x7868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7869=IKsin(j4);
IkReal x7870=IKcos(j4);
IkReal x7871=(sj1*sj2);
IkReal x7872=(gconst143*r20);
IkReal x7873=((1.0)*x7870);
IkReal x7874=((1.0)*cj1*cj2);
IkReal x7875=((1.0)*x7869);
IkReal x7876=(gconst142*x7869);
IkReal x7877=(gconst143*x7870);
evalcond[0]=((((-1.0)*r22*x7873))+(((-1.0)*x7872*x7875))+((r21*x7876)));
evalcond[1]=(cj0+((r11*x7876))+(((-1.0)*r12*x7873))+(((-1.0)*gconst143*r10*x7875)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7876))+(((-1.0)*r02*x7873))+(((-1.0)*gconst143*r00*x7875)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7875))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7873))+((x7870*x7872)));
evalcond[4]=(((cj0*x7871))+(((-1.0)*gconst142*r01*x7873))+((r00*x7877))+(((-1.0)*r02*x7875))+(((-1.0)*cj0*x7874)));
evalcond[5]=((((-1.0)*gconst142*r11*x7873))+((r10*x7877))+(((-1.0)*r12*x7875))+((sj0*x7871))+(((-1.0)*sj0*x7874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7878=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7878;
j4eval[1]=IKsign(x7878);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7879=((1.0)*cj5);
IkReal x7880=((((-1.0)*r01*x7879))+(((-1.0)*r00*sj5)));
j4eval[0]=x7880;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x7879)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7880);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7881=cj5*cj5;
IkReal x7882=r11*r11;
IkReal x7883=(r11*sj5);
IkReal x7884=(cj5*r10);
IkReal x7885=((r12*r12)+x7882+((x7881*(r10*r10)))+(((-1.0)*x7881*x7882))+(((-2.0)*x7883*x7884)));
j4eval[0]=x7885;
j4eval[1]=IKsign(x7885);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7883))+x7884))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7886=cj5*cj5;
IkReal x7887=r11*r11;
IkReal x7888=(cj5*r10);
IkReal x7889=(r11*sj5);
CheckValue<IkReal> x7890=IKPowWithIntegerCheck(IKsign(((r12*r12)+x7887+(((-2.0)*x7888*x7889))+((x7886*(r10*r10)))+(((-1.0)*x7886*x7887)))),-1);
if(!x7890.valid){
continue;
}
CheckValue<IkReal> x7891 = IKatan2WithCheck(IkReal(((((-1.0)*x7889))+x7888)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7890.value)))+(x7891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7892=IKsin(j4);
IkReal x7893=IKcos(j4);
IkReal x7894=(cj5*r10);
IkReal x7895=(r01*sj5);
IkReal x7896=(cj5*r00);
IkReal x7897=(cj5*r20);
IkReal x7898=((1.0)*x7893);
IkReal x7899=((1.0)*x7892);
IkReal x7900=(sj5*x7892);
evalcond[0]=((((-1.0)*x7897*x7899))+((r21*x7900))+(((-1.0)*r22*x7898)));
evalcond[1]=(((x7892*x7895))+(((-1.0)*x7896*x7899))+(((-1.0)*r02*x7898)));
evalcond[2]=((((-1.0)*r11*sj5*x7898))+((x7893*x7894))+(((-1.0)*r12*x7899)));
evalcond[3]=((1.0)+(((-1.0)*x7894*x7899))+(((-1.0)*r12*x7898))+((r11*x7900)));
evalcond[4]=(((cj2*sj1))+((x7893*x7897))+((cj1*sj2))+(((-1.0)*r21*sj5*x7898))+(((-1.0)*r22*x7899)));
evalcond[5]=((((-1.0)*x7895*x7898))+((x7893*x7896))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7901=((1.0)*cj5);
CheckValue<IkReal> x7902=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7901))+(((-1.0)*r00*sj5)))),-1);
if(!x7902.valid){
continue;
}
CheckValue<IkReal> x7903 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7902.value)))+(x7903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7904=IKsin(j4);
IkReal x7905=IKcos(j4);
IkReal x7906=(cj5*r10);
IkReal x7907=(r01*sj5);
IkReal x7908=(cj5*r00);
IkReal x7909=(cj5*r20);
IkReal x7910=((1.0)*x7905);
IkReal x7911=((1.0)*x7904);
IkReal x7912=(sj5*x7904);
evalcond[0]=(((r21*x7912))+(((-1.0)*r22*x7910))+(((-1.0)*x7909*x7911)));
evalcond[1]=((((-1.0)*r02*x7910))+(((-1.0)*x7908*x7911))+((x7904*x7907)));
evalcond[2]=((((-1.0)*r11*sj5*x7910))+(((-1.0)*r12*x7911))+((x7905*x7906)));
evalcond[3]=((1.0)+(((-1.0)*x7906*x7911))+((r11*x7912))+(((-1.0)*r12*x7910)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7911))+(((-1.0)*r21*sj5*x7910))+((x7905*x7909)));
evalcond[5]=((((-1.0)*x7907*x7910))+(((-1.0)*r02*x7911))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7905*x7908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7913=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7913.valid){
continue;
}
CheckValue<IkReal> x7914 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7913.value)))+(x7914.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7915=IKsin(j4);
IkReal x7916=IKcos(j4);
IkReal x7917=(cj5*r10);
IkReal x7918=(r01*sj5);
IkReal x7919=(cj5*r00);
IkReal x7920=(cj5*r20);
IkReal x7921=((1.0)*x7916);
IkReal x7922=((1.0)*x7915);
IkReal x7923=(sj5*x7915);
evalcond[0]=((((-1.0)*x7920*x7922))+(((-1.0)*r22*x7921))+((r21*x7923)));
evalcond[1]=((((-1.0)*r02*x7921))+((x7915*x7918))+(((-1.0)*x7919*x7922)));
evalcond[2]=((((-1.0)*r11*sj5*x7921))+(((-1.0)*r12*x7922))+((x7916*x7917)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7921))+((r11*x7923))+(((-1.0)*x7917*x7922)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7922))+(((-1.0)*r21*sj5*x7921))+((x7916*x7920)));
evalcond[5]=((((-1.0)*r02*x7922))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7916*x7919))+(((-1.0)*x7918*x7921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7924=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7924;
j4eval[1]=IKsign(x7924);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7925=((1.0)*cj5);
IkReal x7926=((((-1.0)*r21*x7925))+(((-1.0)*r20*sj5)));
j4eval[0]=x7926;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7925))))));
j4eval[2]=IKsign(x7926);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7927=cj5*cj5;
IkReal x7928=r11*r11;
IkReal x7929=(cj5*r10);
IkReal x7930=(r11*sj5);
IkReal x7931=((((2.0)*x7929*x7930))+(((-1.0)*x7928))+((x7927*x7928))+(((-1.0)*(r12*r12)))+(((-1.0)*x7927*(r10*r10))));
j4eval[0]=x7931;
j4eval[1]=((IKabs(((((-1.0)*x7930))+x7929)))+(IKabs(r12)));
j4eval[2]=IKsign(x7931);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7932=cj5*cj5;
IkReal x7933=r11*r11;
IkReal x7934=(cj5*r10);
IkReal x7935=(r11*sj5);
CheckValue<IkReal> x7936 = IKatan2WithCheck(IkReal(((((-1.0)*x7935))+x7934)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7936.valid){
continue;
}
CheckValue<IkReal> x7937=IKPowWithIntegerCheck(IKsign((((x7932*x7933))+(((2.0)*x7934*x7935))+(((-1.0)*x7933))+(((-1.0)*(r12*r12)))+(((-1.0)*x7932*(r10*r10))))),-1);
if(!x7937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7936.value)+(((1.5707963267949)*(x7937.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7938=IKsin(j4);
IkReal x7939=IKcos(j4);
IkReal x7940=(cj5*r10);
IkReal x7941=(r01*sj5);
IkReal x7942=(cj5*r00);
IkReal x7943=(cj5*r20);
IkReal x7944=((1.0)*x7939);
IkReal x7945=((1.0)*x7938);
IkReal x7946=(sj5*x7938);
evalcond[0]=(((r21*x7946))+(((-1.0)*r22*x7944))+(((-1.0)*x7943*x7945)));
evalcond[1]=((((-1.0)*r02*x7944))+((x7938*x7941))+(((-1.0)*x7942*x7945)));
evalcond[2]=((((-1.0)*r11*sj5*x7944))+(((-1.0)*r12*x7945))+((x7939*x7940)));
evalcond[3]=((-1.0)+(((-1.0)*x7940*x7945))+((r11*x7946))+(((-1.0)*r12*x7944)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7945))+(((-1.0)*r21*sj5*x7944))+((cj1*sj2))+((x7939*x7943)));
evalcond[5]=((((-1.0)*x7941*x7944))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7945))+((x7939*x7942))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7947=((1.0)*cj5);
CheckValue<IkReal> x7948=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7947))+(((-1.0)*r20*sj5)))),-1);
if(!x7948.valid){
continue;
}
CheckValue<IkReal> x7949 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x7947))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7948.value)))+(x7949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7950=IKsin(j4);
IkReal x7951=IKcos(j4);
IkReal x7952=(cj5*r10);
IkReal x7953=(r01*sj5);
IkReal x7954=(cj5*r00);
IkReal x7955=(cj5*r20);
IkReal x7956=((1.0)*x7951);
IkReal x7957=((1.0)*x7950);
IkReal x7958=(sj5*x7950);
evalcond[0]=((((-1.0)*r22*x7956))+(((-1.0)*x7955*x7957))+((r21*x7958)));
evalcond[1]=((((-1.0)*x7954*x7957))+((x7950*x7953))+(((-1.0)*r02*x7956)));
evalcond[2]=(((x7951*x7952))+(((-1.0)*r11*sj5*x7956))+(((-1.0)*r12*x7957)));
evalcond[3]=((-1.0)+(((-1.0)*x7952*x7957))+((r11*x7958))+(((-1.0)*r12*x7956)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7957))+((cj1*sj2))+((x7951*x7955))+(((-1.0)*r21*sj5*x7956)));
evalcond[5]=((((-1.0)*x7953*x7956))+(((-1.0)*sj1*sj2))+((x7951*x7954))+(((-1.0)*r02*x7957))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7959 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7959.valid){
continue;
}
CheckValue<IkReal> x7960=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7959.value)+(((1.5707963267949)*(x7960.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7961=IKsin(j4);
IkReal x7962=IKcos(j4);
IkReal x7963=(cj5*r10);
IkReal x7964=(r01*sj5);
IkReal x7965=(cj5*r00);
IkReal x7966=(cj5*r20);
IkReal x7967=((1.0)*x7962);
IkReal x7968=((1.0)*x7961);
IkReal x7969=(sj5*x7961);
evalcond[0]=(((r21*x7969))+(((-1.0)*r22*x7967))+(((-1.0)*x7966*x7968)));
evalcond[1]=(((x7961*x7964))+(((-1.0)*x7965*x7968))+(((-1.0)*r02*x7967)));
evalcond[2]=((((-1.0)*r11*sj5*x7967))+(((-1.0)*r12*x7968))+((x7962*x7963)));
evalcond[3]=((-1.0)+(((-1.0)*x7963*x7968))+((r11*x7969))+(((-1.0)*r12*x7967)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7968))+((cj1*sj2))+(((-1.0)*r21*sj5*x7967))+((x7962*x7966)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x7964*x7967))+(((-1.0)*r02*x7968))+((cj1*cj2))+((x7962*x7965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7970=((-1.0)*r00);
IkReal x7972 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7972)==0){
continue;
}
IkReal x7971=pow(x7972,-0.5);
CheckValue<IkReal> x7973 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7970),IKFAST_ATAN2_MAGTHRESH);
if(!x7973.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7973.value));
IkReal gconst145=(r01*x7971);
IkReal gconst146=(x7970*x7971);
CheckValue<IkReal> x7974 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7974.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7974.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7975=((-1.0)*r00);
IkReal x7976=x7971;
CheckValue<IkReal> x7978 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7975),IKFAST_ATAN2_MAGTHRESH);
if(!x7978.valid){
continue;
}
IkReal x7977=((-1.0)*(x7978.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7977;
IkReal gconst144=x7977;
IkReal gconst145=(r01*x7976);
IkReal gconst146=(x7975*x7976);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7979=((1.0)*sj0);
IkReal x7980=((1.0)*gconst145);
CheckValue<IkReal> x7981=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7980))+(((-1.0)*gconst146*r21)))),-1);
if(!x7981.valid){
continue;
}
CheckValue<IkReal> x7982 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7979)))),IkReal((((cj0*gconst146*r00))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x7979))+(((-1.0)*cj0*r01*x7980)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7981.value)))+(x7982.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7983=IKsin(j4);
IkReal x7984=IKcos(j4);
IkReal x7985=(gconst146*r10);
IkReal x7986=(sj1*sj2);
IkReal x7987=(gconst146*r20);
IkReal x7988=(gconst146*r00);
IkReal x7989=((1.0)*x7984);
IkReal x7990=((1.0)*x7983);
IkReal x7991=(gconst145*x7983);
IkReal x7992=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7989))+((r21*x7991))+(((-1.0)*x7987*x7990)));
evalcond[1]=(((r11*x7991))+(((-1.0)*r12*x7989))+cj0+(((-1.0)*x7985*x7990)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7991))+(((-1.0)*x7988*x7990))+(((-1.0)*r02*x7989)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x7989))+((cj1*sj2))+((x7984*x7987))+(((-1.0)*r22*x7990)));
evalcond[4]=(((x7984*x7988))+((cj0*x7986))+(((-1.0)*cj0*x7992))+(((-1.0)*r02*x7990))+(((-1.0)*gconst145*r01*x7989)));
evalcond[5]=((((-1.0)*r12*x7990))+((x7984*x7985))+(((-1.0)*gconst145*r11*x7989))+((sj0*x7986))+(((-1.0)*sj0*x7992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7993=((1.0)*gconst146);
CheckValue<IkReal> x7994=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7993))+(((-1.0)*gconst145*r10)))),-1);
if(!x7994.valid){
continue;
}
CheckValue<IkReal> x7995 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7993))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7994.value)))+(x7995.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7996=IKsin(j4);
IkReal x7997=IKcos(j4);
IkReal x7998=(gconst146*r10);
IkReal x7999=(sj1*sj2);
IkReal x8000=(gconst146*r20);
IkReal x8001=(gconst146*r00);
IkReal x8002=((1.0)*x7997);
IkReal x8003=((1.0)*x7996);
IkReal x8004=(gconst145*x7996);
IkReal x8005=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8004))+(((-1.0)*r22*x8002))+(((-1.0)*x8000*x8003)));
evalcond[1]=(cj0+((r11*x8004))+(((-1.0)*x7998*x8003))+(((-1.0)*r12*x8002)));
evalcond[2]=(((r01*x8004))+(((-1.0)*sj0))+(((-1.0)*x8001*x8003))+(((-1.0)*r02*x8002)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8002))+((x7997*x8000))+((cj1*sj2))+(((-1.0)*r22*x8003)));
evalcond[4]=(((x7997*x8001))+(((-1.0)*cj0*x8005))+(((-1.0)*gconst145*r01*x8002))+((cj0*x7999))+(((-1.0)*r02*x8003)));
evalcond[5]=(((x7997*x7998))+(((-1.0)*gconst145*r11*x8002))+((sj0*x7999))+(((-1.0)*r12*x8003))+(((-1.0)*sj0*x8005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8006=((-1.0)*r01);
IkReal x8008 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8008)==0){
continue;
}
IkReal x8007=pow(x8008,-0.5);
CheckValue<IkReal> x8009 = IKatan2WithCheck(IkReal(x8006),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8009.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8009.value))));
IkReal gconst148=(x8006*x8007);
IkReal gconst149=((1.0)*r00*x8007);
CheckValue<IkReal> x8010 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8010.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8010.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8011=((-1.0)*r01);
CheckValue<IkReal> x8014 = IKatan2WithCheck(IkReal(x8011),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8014.valid){
continue;
}
IkReal x8012=((1.0)*(x8014.value));
IkReal x8013=x8007;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8012)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8012)));
IkReal gconst148=(x8011*x8013);
IkReal gconst149=((1.0)*r00*x8013);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8015=((-1.0)*r01);
CheckValue<IkReal> x8018 = IKatan2WithCheck(IkReal(x8015),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8018.valid){
continue;
}
IkReal x8016=((1.0)*(x8018.value));
IkReal x8017=x8007;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8016)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8016)));
IkReal gconst148=(x8015*x8017);
IkReal gconst149=((1.0)*r00*x8017);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8019=((-1.0)*r01);
CheckValue<IkReal> x8022 = IKatan2WithCheck(IkReal(x8019),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8022.valid){
continue;
}
IkReal x8020=((1.0)*(x8022.value));
IkReal x8021=x8007;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8020)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8020)));
IkReal gconst148=(x8019*x8021);
IkReal gconst149=((1.0)*r00*x8021);
IkReal x8023=r02*r02;
IkReal x8024=(r12*sj0);
IkReal x8025=((1.0)*cj0);
IkReal x8026=x8007;
j4eval[0]=((IKabs(((((-1.0)*x8025*x8026))+((r02*x8024*x8026))+((cj0*x8023*x8026)))))+(IKabs(((((-1.0)*x8024))+(((-1.0)*r02*x8025))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8027=((1.0)*sj0);
IkReal x8028=((1.0)*gconst148);
CheckValue<IkReal> x8029 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8027))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x8028))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8027)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8029.valid){
continue;
}
CheckValue<IkReal> x8030=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8028))+(((-1.0)*gconst149*r21)))),-1);
if(!x8030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8029.value)+(((1.5707963267949)*(x8030.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8031=IKsin(j4);
IkReal x8032=IKcos(j4);
IkReal x8033=(gconst148*r11);
IkReal x8034=(sj1*sj2);
IkReal x8035=((1.0)*x8032);
IkReal x8036=(gconst149*x8032);
IkReal x8037=(gconst148*x8031);
IkReal x8038=((1.0)*cj1*cj2);
IkReal x8039=((1.0)*x8031);
evalcond[0]=((((-1.0)*gconst149*r20*x8039))+((r21*x8037))+(((-1.0)*r22*x8035)));
evalcond[1]=(cj0+(((-1.0)*r12*x8035))+(((-1.0)*gconst149*r10*x8039))+((x8031*x8033)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8035))+(((-1.0)*gconst149*r00*x8039))+((r01*x8037)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8035))+((cj1*sj2))+((r20*x8036))+(((-1.0)*r22*x8039)));
evalcond[4]=((((-1.0)*gconst148*r01*x8035))+((cj0*x8034))+(((-1.0)*r02*x8039))+(((-1.0)*cj0*x8038))+((r00*x8036)));
evalcond[5]=((((-1.0)*sj0*x8038))+((r10*x8036))+(((-1.0)*x8033*x8035))+(((-1.0)*r12*x8039))+((sj0*x8034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8040=((1.0)*gconst149);
CheckValue<IkReal> x8041 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8040))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8041.valid){
continue;
}
CheckValue<IkReal> x8042=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8040))+(((-1.0)*gconst148*r10)))),-1);
if(!x8042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8041.value)+(((1.5707963267949)*(x8042.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8043=IKsin(j4);
IkReal x8044=IKcos(j4);
IkReal x8045=(gconst148*r11);
IkReal x8046=(sj1*sj2);
IkReal x8047=((1.0)*x8044);
IkReal x8048=(gconst149*x8044);
IkReal x8049=(gconst148*x8043);
IkReal x8050=((1.0)*cj1*cj2);
IkReal x8051=((1.0)*x8043);
evalcond[0]=((((-1.0)*gconst149*r20*x8051))+((r21*x8049))+(((-1.0)*r22*x8047)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8051))+((x8043*x8045))+(((-1.0)*r12*x8047)));
evalcond[2]=(((r01*x8049))+(((-1.0)*sj0))+(((-1.0)*r02*x8047))+(((-1.0)*gconst149*r00*x8051)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8047))+((cj1*sj2))+((r20*x8048))+(((-1.0)*r22*x8051)));
evalcond[4]=((((-1.0)*gconst148*r01*x8047))+(((-1.0)*r02*x8051))+((cj0*x8046))+((r00*x8048))+(((-1.0)*cj0*x8050)));
evalcond[5]=((((-1.0)*r12*x8051))+((r10*x8048))+(((-1.0)*x8045*x8047))+(((-1.0)*sj0*x8050))+((sj0*x8046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8052=((1.0)*gconst149);
CheckValue<IkReal> x8053=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8052)))),-1);
if(!x8053.valid){
continue;
}
CheckValue<IkReal> x8054 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8052)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8053.value)))+(x8054.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8055=IKsin(j4);
IkReal x8056=IKcos(j4);
IkReal x8057=(gconst148*r11);
IkReal x8058=(sj1*sj2);
IkReal x8059=((1.0)*x8056);
IkReal x8060=(gconst149*x8056);
IkReal x8061=(gconst148*x8055);
IkReal x8062=((1.0)*cj1*cj2);
IkReal x8063=((1.0)*x8055);
evalcond[0]=(((r21*x8061))+(((-1.0)*gconst149*r20*x8063))+(((-1.0)*r22*x8059)));
evalcond[1]=((((-1.0)*r12*x8059))+cj0+((x8055*x8057))+(((-1.0)*gconst149*r10*x8063)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8061))+(((-1.0)*r02*x8059))+(((-1.0)*gconst149*r00*x8063)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8059))+((cj1*sj2))+((r20*x8060))+(((-1.0)*r22*x8063)));
evalcond[4]=((((-1.0)*cj0*x8062))+((r00*x8060))+(((-1.0)*gconst148*r01*x8059))+((cj0*x8058))+(((-1.0)*r02*x8063)));
evalcond[5]=(((r10*x8060))+(((-1.0)*sj0*x8062))+(((-1.0)*x8057*x8059))+((sj0*x8058))+(((-1.0)*r12*x8063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8064=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8064;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8064);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8065=((1.0)*cj5);
IkReal x8066=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8065)));
j4eval[0]=x8066;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8065)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8066);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8067=cj5*cj5;
IkReal x8068=r01*r01;
IkReal x8069=(r01*sj5);
IkReal x8070=(cj5*r00);
IkReal x8071=((((-1.0)*x8068))+(((2.0)*x8069*x8070))+(((-1.0)*(r02*r02)))+((x8067*x8068))+(((-1.0)*x8067*(r00*r00))));
j4eval[0]=x8071;
j4eval[1]=IKsign(x8071);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8069))+x8070))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8072=cj5*cj5;
IkReal x8073=r01*r01;
IkReal x8074=(r01*sj5);
IkReal x8075=(cj5*r00);
CheckValue<IkReal> x8076 = IKatan2WithCheck(IkReal(((((-1.0)*x8074))+x8075)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8076.valid){
continue;
}
CheckValue<IkReal> x8077=IKPowWithIntegerCheck(IKsign((((x8072*x8073))+(((-1.0)*x8073))+(((2.0)*x8074*x8075))+(((-1.0)*(r02*r02)))+(((-1.0)*x8072*(r00*r00))))),-1);
if(!x8077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8076.value)+(((1.5707963267949)*(x8077.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8078=IKsin(j4);
IkReal x8079=IKcos(j4);
IkReal x8080=(cj5*r10);
IkReal x8081=(r01*sj5);
IkReal x8082=(cj5*r00);
IkReal x8083=(cj5*r20);
IkReal x8084=((1.0)*x8079);
IkReal x8085=((1.0)*x8078);
IkReal x8086=(sj5*x8078);
evalcond[0]=((((-1.0)*x8083*x8085))+((r21*x8086))+(((-1.0)*r22*x8084)));
evalcond[1]=((((-1.0)*x8080*x8085))+((r11*x8086))+(((-1.0)*r12*x8084)));
evalcond[2]=((((-1.0)*r02*x8085))+((x8079*x8082))+(((-1.0)*x8081*x8084)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8084))+((x8078*x8081))+(((-1.0)*x8082*x8085)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8084))+((cj1*sj2))+((x8079*x8083))+(((-1.0)*r22*x8085)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8084))+((x8079*x8080))+(((-1.0)*r12*x8085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8087=((1.0)*cj5);
CheckValue<IkReal> x8088=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8087)))),-1);
if(!x8088.valid){
continue;
}
CheckValue<IkReal> x8089 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8087)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8088.value)))+(x8089.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8090=IKsin(j4);
IkReal x8091=IKcos(j4);
IkReal x8092=(cj5*r10);
IkReal x8093=(r01*sj5);
IkReal x8094=(cj5*r00);
IkReal x8095=(cj5*r20);
IkReal x8096=((1.0)*x8091);
IkReal x8097=((1.0)*x8090);
IkReal x8098=(sj5*x8090);
evalcond[0]=((((-1.0)*x8095*x8097))+(((-1.0)*r22*x8096))+((r21*x8098)));
evalcond[1]=((((-1.0)*x8092*x8097))+((r11*x8098))+(((-1.0)*r12*x8096)));
evalcond[2]=((((-1.0)*x8093*x8096))+((x8091*x8094))+(((-1.0)*r02*x8097)));
evalcond[3]=((-1.0)+(((-1.0)*x8094*x8097))+(((-1.0)*r02*x8096))+((x8090*x8093)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8096))+((x8091*x8095))+((cj1*sj2))+(((-1.0)*r22*x8097)));
evalcond[5]=((((-1.0)*r11*sj5*x8096))+((x8091*x8092))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8099=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8099.valid){
continue;
}
CheckValue<IkReal> x8100 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8099.value)))+(x8100.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8101=IKsin(j4);
IkReal x8102=IKcos(j4);
IkReal x8103=(cj5*r10);
IkReal x8104=(r01*sj5);
IkReal x8105=(cj5*r00);
IkReal x8106=(cj5*r20);
IkReal x8107=((1.0)*x8102);
IkReal x8108=((1.0)*x8101);
IkReal x8109=(sj5*x8101);
evalcond[0]=((((-1.0)*x8106*x8108))+(((-1.0)*r22*x8107))+((r21*x8109)));
evalcond[1]=(((r11*x8109))+(((-1.0)*x8103*x8108))+(((-1.0)*r12*x8107)));
evalcond[2]=(((x8102*x8105))+(((-1.0)*x8104*x8107))+(((-1.0)*r02*x8108)));
evalcond[3]=((-1.0)+(((-1.0)*x8105*x8108))+((x8101*x8104))+(((-1.0)*r02*x8107)));
evalcond[4]=((((-1.0)*r21*sj5*x8107))+((cj2*sj1))+((x8102*x8106))+((cj1*sj2))+(((-1.0)*r22*x8108)));
evalcond[5]=(((x8102*x8103))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8107))+(((-1.0)*r12*x8108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8110=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8110;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8110);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8111=((1.0)*cj5);
IkReal x8112=((((-1.0)*r21*x8111))+(((-1.0)*r20*sj5)));
j4eval[0]=x8112;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8111))))));
j4eval[2]=IKsign(x8112);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8113=cj5*cj5;
IkReal x8114=r01*r01;
IkReal x8115=(cj5*r00);
IkReal x8116=(r01*sj5);
IkReal x8117=((((-1.0)*x8113*x8114))+((x8113*(r00*r00)))+(r02*r02)+(((-2.0)*x8115*x8116))+x8114);
j4eval[0]=x8117;
j4eval[1]=((IKabs(r02))+(IKabs((x8115+(((-1.0)*x8116))))));
j4eval[2]=IKsign(x8117);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8118=cj5*cj5;
IkReal x8119=r01*r01;
IkReal x8120=(r01*sj5);
IkReal x8121=(cj5*r00);
CheckValue<IkReal> x8122=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8118*x8119))+((x8118*(r00*r00)))+(((-2.0)*x8120*x8121))+(r02*r02)+x8119)),-1);
if(!x8122.valid){
continue;
}
CheckValue<IkReal> x8123 = IKatan2WithCheck(IkReal((x8121+(((-1.0)*x8120)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8122.value)))+(x8123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8124=IKsin(j4);
IkReal x8125=IKcos(j4);
IkReal x8126=(cj5*r10);
IkReal x8127=(r01*sj5);
IkReal x8128=(cj5*r00);
IkReal x8129=(cj5*r20);
IkReal x8130=((1.0)*x8125);
IkReal x8131=((1.0)*x8124);
IkReal x8132=(sj5*x8124);
evalcond[0]=((((-1.0)*r22*x8130))+((r21*x8132))+(((-1.0)*x8129*x8131)));
evalcond[1]=(((r11*x8132))+(((-1.0)*r12*x8130))+(((-1.0)*x8126*x8131)));
evalcond[2]=((((-1.0)*r02*x8131))+((x8125*x8128))+(((-1.0)*x8127*x8130)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8130))+((x8124*x8127))+(((-1.0)*x8128*x8131)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8131))+(((-1.0)*r21*sj5*x8130))+((cj1*sj2))+((x8125*x8129)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x8131))+((x8125*x8126))+(((-1.0)*r11*sj5*x8130))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8133=((1.0)*cj5);
CheckValue<IkReal> x8134 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8134.valid){
continue;
}
CheckValue<IkReal> x8135=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8133))+(((-1.0)*r20*sj5)))),-1);
if(!x8135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8134.value)+(((1.5707963267949)*(x8135.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8136=IKsin(j4);
IkReal x8137=IKcos(j4);
IkReal x8138=(cj5*r10);
IkReal x8139=(r01*sj5);
IkReal x8140=(cj5*r00);
IkReal x8141=(cj5*r20);
IkReal x8142=((1.0)*x8137);
IkReal x8143=((1.0)*x8136);
IkReal x8144=(sj5*x8136);
evalcond[0]=((((-1.0)*x8141*x8143))+(((-1.0)*r22*x8142))+((r21*x8144)));
evalcond[1]=((((-1.0)*x8138*x8143))+((r11*x8144))+(((-1.0)*r12*x8142)));
evalcond[2]=((((-1.0)*x8139*x8142))+(((-1.0)*r02*x8143))+((x8137*x8140)));
evalcond[3]=((1.0)+((x8136*x8139))+(((-1.0)*x8140*x8143))+(((-1.0)*r02*x8142)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8143))+(((-1.0)*r21*sj5*x8142))+((x8137*x8141)));
evalcond[5]=((((-1.0)*r11*sj5*x8142))+(((-1.0)*sj1*sj2))+((x8137*x8138))+(((-1.0)*r12*x8143))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8145 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8145.valid){
continue;
}
CheckValue<IkReal> x8146=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8145.value)+(((1.5707963267949)*(x8146.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8147=IKsin(j4);
IkReal x8148=IKcos(j4);
IkReal x8149=(cj5*r10);
IkReal x8150=(r01*sj5);
IkReal x8151=(cj5*r00);
IkReal x8152=(cj5*r20);
IkReal x8153=((1.0)*x8148);
IkReal x8154=((1.0)*x8147);
IkReal x8155=(sj5*x8147);
evalcond[0]=((((-1.0)*r22*x8153))+((r21*x8155))+(((-1.0)*x8152*x8154)));
evalcond[1]=(((r11*x8155))+(((-1.0)*r12*x8153))+(((-1.0)*x8149*x8154)));
evalcond[2]=(((x8148*x8151))+(((-1.0)*x8150*x8153))+(((-1.0)*r02*x8154)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8153))+(((-1.0)*x8151*x8154))+((x8147*x8150)));
evalcond[4]=(((cj2*sj1))+((x8148*x8152))+((cj1*sj2))+(((-1.0)*r21*sj5*x8153))+(((-1.0)*r22*x8154)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x8148*x8149))+(((-1.0)*r11*sj5*x8153))+((cj1*cj2))+(((-1.0)*r12*x8154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8156=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8156);
rxp1_1=(px*r21);
rxp1_2=(r11*x8156);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8157=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8157);
rxp1_1=(px*r21);
rxp1_2=(r11*x8157);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8158=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8158);
rxp1_1=(px*r21);
rxp1_2=(r11*x8158);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8161=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8161.valid){
continue;
}
IkReal x8159=x8161.value;
IkReal x8160=(sj0*x8159);
cj4array[0]=((((-1.0)*sj1*sj2*x8160))+((cj1*cj2*x8160)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8162=IKsin(j4);
IkReal x8163=IKcos(j4);
IkReal x8164=(r21*sj5);
IkReal x8165=(cj5*r20);
IkReal x8166=((1.0)*x8162);
IkReal x8167=((1.0)*x8163);
evalcond[0]=((-1.0)*r02*x8162);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8167)));
evalcond[2]=((((-1.0)*x8165*x8166))+((x8162*x8164)));
evalcond[3]=(((r11*sj5*x8162))+(((-1.0)*cj5*r10*x8166)));
evalcond[4]=(((cj2*sj1))+((x8163*x8165))+((cj1*sj2))+(((-1.0)*x8164*x8167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8170=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8170.valid){
continue;
}
IkReal x8168=x8170.value;
IkReal x8169=((1.0)*x8168);
cj4array[0]=((((-1.0)*cj2*sj1*x8169))+(((-1.0)*cj1*sj2*x8169)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8171=IKsin(j4);
IkReal x8172=IKcos(j4);
IkReal x8173=(r11*sj5);
IkReal x8174=((1.0)*sj0);
IkReal x8175=((1.0)*x8172);
IkReal x8176=((1.0)*cj5*x8171);
evalcond[0]=((-1.0)*r02*x8171);
evalcond[1]=((((-1.0)*x8174))+(((-1.0)*r02*x8175)));
evalcond[2]=((((-1.0)*r20*x8176))+((r21*sj5*x8171)));
evalcond[3]=((((-1.0)*r10*x8176))+((x8171*x8173)));
evalcond[4]=(((cj5*r10*x8172))+(((-1.0)*cj1*cj2*x8174))+((sj0*sj1*sj2))+(((-1.0)*x8173*x8175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8177=IKPowWithIntegerCheck(r02,-1);
if(!x8177.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8177.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8178=IKsin(j4);
IkReal x8179=IKcos(j4);
IkReal x8180=(cj5*x8179);
IkReal x8181=(sj5*x8178);
IkReal x8182=((1.0)*sj5*x8179);
IkReal x8183=((1.0)*cj5*x8178);
evalcond[0]=((-1.0)*r02*x8178);
evalcond[1]=(((r21*x8181))+(((-1.0)*r20*x8183)));
evalcond[2]=(((r11*x8181))+(((-1.0)*r10*x8183)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8182))+((r20*x8180)));
evalcond[4]=(((r10*x8180))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*r11*x8182))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8184=((1.0)*sj0);
IkReal x8185=((1.0)*cj0);
CheckValue<IkReal> x8186 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8185))+(((-1.0)*r12*x8184)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8185))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8184)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8186.valid){
continue;
}
CheckValue<IkReal> x8187=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8186.value)+(((1.5707963267949)*(x8187.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8188=IKsin(j4);
IkReal x8189=IKcos(j4);
IkReal x8190=(cj5*r10);
IkReal x8191=(sj1*sj2);
IkReal x8192=(r01*sj5);
IkReal x8193=(cj5*r00);
IkReal x8194=(cj5*r20);
IkReal x8195=((1.0)*x8189);
IkReal x8196=((1.0)*cj1*cj2);
IkReal x8197=((1.0)*x8188);
IkReal x8198=(sj5*x8188);
evalcond[0]=(((r21*x8198))+(((-1.0)*r22*x8195))+(((-1.0)*x8194*x8197)));
evalcond[1]=(((r11*x8198))+cj0+(((-1.0)*r12*x8195))+(((-1.0)*x8190*x8197)));
evalcond[2]=((((-1.0)*r02*x8195))+(((-1.0)*sj0))+(((-1.0)*x8193*x8197))+((x8188*x8192)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8197))+((cj1*sj2))+(((-1.0)*r21*sj5*x8195))+((x8189*x8194)));
evalcond[4]=((((-1.0)*r02*x8197))+(((-1.0)*x8192*x8195))+(((-1.0)*cj0*x8196))+((x8189*x8193))+((cj0*x8191)));
evalcond[5]=(((sj0*x8191))+(((-1.0)*r12*x8197))+(((-1.0)*sj0*x8196))+(((-1.0)*r11*sj5*x8195))+((x8189*x8190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8199=((1.0)*cj5);
CheckValue<IkReal> x8200=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8199)))),-1);
if(!x8200.valid){
continue;
}
CheckValue<IkReal> x8201 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8200.value)))+(x8201.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8202=IKsin(j4);
IkReal x8203=IKcos(j4);
IkReal x8204=(cj5*r10);
IkReal x8205=(sj1*sj2);
IkReal x8206=(r01*sj5);
IkReal x8207=(cj5*r00);
IkReal x8208=(cj5*r20);
IkReal x8209=((1.0)*x8203);
IkReal x8210=((1.0)*cj1*cj2);
IkReal x8211=((1.0)*x8202);
IkReal x8212=(sj5*x8202);
evalcond[0]=((((-1.0)*x8208*x8211))+(((-1.0)*r22*x8209))+((r21*x8212)));
evalcond[1]=(((r11*x8212))+cj0+(((-1.0)*x8204*x8211))+(((-1.0)*r12*x8209)));
evalcond[2]=((((-1.0)*sj0))+((x8202*x8206))+(((-1.0)*r02*x8209))+(((-1.0)*x8207*x8211)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8203*x8208))+(((-1.0)*r21*sj5*x8209))+(((-1.0)*r22*x8211)));
evalcond[4]=((((-1.0)*cj0*x8210))+((cj0*x8205))+(((-1.0)*r02*x8211))+((x8203*x8207))+(((-1.0)*x8206*x8209)));
evalcond[5]=(((sj0*x8205))+((x8203*x8204))+(((-1.0)*r12*x8211))+(((-1.0)*sj0*x8210))+(((-1.0)*r11*sj5*x8209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8213=((1.0)*cj5);
CheckValue<IkReal> x8214 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8214.valid){
continue;
}
CheckValue<IkReal> x8215=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8213))+(((-1.0)*r00*sj5)))),-1);
if(!x8215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8214.value)+(((1.5707963267949)*(x8215.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8216=IKsin(j4);
IkReal x8217=IKcos(j4);
IkReal x8218=(cj5*r10);
IkReal x8219=(sj1*sj2);
IkReal x8220=(r01*sj5);
IkReal x8221=(cj5*r00);
IkReal x8222=(cj5*r20);
IkReal x8223=((1.0)*x8217);
IkReal x8224=((1.0)*cj1*cj2);
IkReal x8225=((1.0)*x8216);
IkReal x8226=(sj5*x8216);
evalcond[0]=(((r21*x8226))+(((-1.0)*r22*x8223))+(((-1.0)*x8222*x8225)));
evalcond[1]=(cj0+((r11*x8226))+(((-1.0)*x8218*x8225))+(((-1.0)*r12*x8223)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8221*x8225))+(((-1.0)*r02*x8223))+((x8216*x8220)));
evalcond[3]=(((cj2*sj1))+((x8217*x8222))+((cj1*sj2))+(((-1.0)*r21*sj5*x8223))+(((-1.0)*r22*x8225)));
evalcond[4]=((((-1.0)*x8220*x8223))+((x8217*x8221))+((cj0*x8219))+(((-1.0)*r02*x8225))+(((-1.0)*cj0*x8224)));
evalcond[5]=(((x8217*x8218))+(((-1.0)*r11*sj5*x8223))+(((-1.0)*r12*x8225))+(((-1.0)*sj0*x8224))+((sj0*x8219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8227=cj5*cj5;
IkReal x8228=r21*r21;
IkReal x8229=(cj2*sj1);
IkReal x8230=(cj1*sj2);
IkReal x8231=(r21*sj5);
IkReal x8232=((1.0)*cj5*r20);
CheckValue<IkReal> x8233=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8227*x8228))+(r22*r22)+((x8227*(r20*r20)))+x8228+(((-2.0)*cj5*r20*x8231)))),-1);
if(!x8233.valid){
continue;
}
CheckValue<IkReal> x8234 = IKatan2WithCheck(IkReal((((r22*x8229))+((r22*x8230)))),IkReal(((((-1.0)*x8229*x8232))+((x8229*x8231))+((x8230*x8231))+(((-1.0)*x8230*x8232)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8233.value)))+(x8234.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8235=IKsin(j4);
IkReal x8236=IKcos(j4);
IkReal x8237=(r21*sj5);
IkReal x8238=(cj5*r20);
IkReal x8239=((1.0)*x8236);
IkReal x8240=((1.0)*x8235);
evalcond[0]=(((x8235*x8237))+(((-1.0)*x8238*x8240))+(((-1.0)*r22*x8239)));
evalcond[1]=(((cj2*sj1))+((x8236*x8238))+((cj1*sj2))+(((-1.0)*r22*x8240))+(((-1.0)*x8237*x8239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8241=(cj5*sj4);
IkReal x8242=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8242))+(((-1.0)*r00*x8241)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x8241))+(((-1.0)*r11*x8242))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8242))+(((-1.0)*r00*x8241))))+IKsqr((((r10*x8241))+(((-1.0)*r11*x8242))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8242))+(((-1.0)*r00*x8241))), (((r10*x8241))+(((-1.0)*r11*x8242))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8243=IKcos(j0);
IkReal x8244=IKsin(j0);
IkReal x8245=(cj4*cj5);
IkReal x8246=((1.0)*cj1);
IkReal x8247=((0.39225)*sj1);
IkReal x8248=(r11*sj5);
IkReal x8249=(cj5*r11);
IkReal x8250=((1.0)*sj5);
IkReal x8251=((1.0)*sj4);
IkReal x8252=((1.0)*sj1);
IkReal x8253=((0.09465)*sj5);
IkReal x8254=(cj5*r01);
IkReal x8255=((0.425)*cj1);
IkReal x8256=((1.0)*cj4);
IkReal x8257=(sj2*x8243);
IkReal x8258=(sj2*x8244);
IkReal x8259=((0.39225)*cj1*cj2);
IkReal x8260=(cj2*x8243);
IkReal x8261=(cj2*x8244);
evalcond[0]=((((-1.0)*r12*x8256))+(((-1.0)*cj5*r10*x8251))+((sj4*x8248))+x8243);
evalcond[1]=(((r01*sj4*sj5))+(((-1.0)*cj5*r00*x8251))+(((-1.0)*r02*x8256))+(((-1.0)*x8244)));
evalcond[2]=((((-1.0)*x8254))+(((-1.0)*x8252*x8260))+(((-1.0)*x8246*x8257))+(((-1.0)*r00*x8250)));
evalcond[3]=((((-1.0)*x8252*x8261))+(((-1.0)*x8246*x8258))+(((-1.0)*r10*x8250))+(((-1.0)*x8249)));
evalcond[4]=(((sj1*x8257))+(((-1.0)*cj4*r01*x8250))+(((-1.0)*x8246*x8260))+(((-1.0)*r02*x8251))+((r00*x8245)));
evalcond[5]=((((-1.0)*x8248*x8256))+((r10*x8245))+(((-1.0)*r12*x8251))+((sj1*x8258))+(((-1.0)*x8246*x8261)));
evalcond[6]=((((-0.09465)*x8254))+(((-0.10915)*x8244))+(((-1.0)*r00*x8253))+(((-1.0)*px))+(((-1.0)*x8247*x8257))+((x8243*x8255))+((x8243*x8259)));
evalcond[7]=((((-0.09465)*x8249))+((x8244*x8259))+((x8244*x8255))+(((-1.0)*r10*x8253))+(((-1.0)*py))+(((0.10915)*x8243))+(((-1.0)*x8247*x8258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8262 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8262.valid){
continue;
}
CheckValue<IkReal> x8263=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8263.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8262.value)+(((1.5707963267949)*(x8263.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8264=IKcos(j0);
IkReal x8265=IKsin(j0);
IkReal x8266=((1.0)*cj1);
IkReal x8267=((0.39225)*sj1);
IkReal x8268=(cj5*r11);
IkReal x8269=((1.0)*sj5);
IkReal x8270=(cj5*r01);
IkReal x8271=((1.0)*sj1);
IkReal x8272=((0.09465)*sj5);
IkReal x8273=((0.39225)*cj1);
IkReal x8274=((0.425)*cj1);
IkReal x8275=(sj2*x8264);
IkReal x8276=(sj2*x8265);
IkReal x8277=(cj2*x8264);
IkReal x8278=(cj2*x8265);
evalcond[0]=((((-1.0)*x8271*x8277))+(((-1.0)*x8266*x8275))+(((-1.0)*r00*x8269))+(((-1.0)*x8270)));
evalcond[1]=((((-1.0)*x8271*x8278))+(((-1.0)*r10*x8269))+(((-1.0)*x8266*x8276))+(((-1.0)*x8268)));
evalcond[2]=((((-1.0)*x8267*x8275))+(((-1.0)*px))+(((-0.10915)*x8265))+((x8273*x8277))+(((-1.0)*r00*x8272))+((x8264*x8274))+(((-0.09465)*x8270)));
evalcond[3]=((((-1.0)*x8267*x8276))+((x8265*x8274))+(((-1.0)*py))+(((0.10915)*x8264))+(((-1.0)*r10*x8272))+((x8273*x8278))+(((-0.09465)*x8268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8279=((1.0)*cj5);
IkReal x8280=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8279)));
j4eval[0]=x8280;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8279)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8280);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8281=((1.0)*cj5);
IkReal x8282=((((-1.0)*r11*x8281))+(((-1.0)*r10*sj5)));
j4eval[0]=x8282;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8281))))));
j4eval[2]=IKsign(x8282);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8283=((1.0)*sj0);
IkReal x8284=((1.0)*cj0);
IkReal x8285=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8285;
j4eval[1]=((IKabs(((((-1.0)*r02*x8284))+(((-1.0)*r12*x8283)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8283))+(((-1.0)*r01*sj5*x8284))))));
j4eval[2]=IKsign(x8285);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8286=((-1.0)*r20);
IkReal x8288 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8288)==0){
continue;
}
IkReal x8287=pow(x8288,-0.5);
CheckValue<IkReal> x8289 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8286),IKFAST_ATAN2_MAGTHRESH);
if(!x8289.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8289.value));
IkReal gconst133=(r21*x8287);
IkReal gconst134=(x8286*x8287);
CheckValue<IkReal> x8290 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8290.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8290.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8291=((-1.0)*r20);
IkReal x8292=x8287;
CheckValue<IkReal> x8294 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8291),IKFAST_ATAN2_MAGTHRESH);
if(!x8294.valid){
continue;
}
IkReal x8293=((-1.0)*(x8294.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8293;
IkReal gconst132=x8293;
IkReal gconst133=(r21*x8292);
IkReal gconst134=(x8291*x8292);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8295=((-1.0)*r20);
IkReal x8296=x8287;
CheckValue<IkReal> x8298 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8295),IKFAST_ATAN2_MAGTHRESH);
if(!x8298.valid){
continue;
}
IkReal x8297=((-1.0)*(x8298.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8297;
IkReal gconst132=x8297;
IkReal gconst133=(r21*x8296);
IkReal gconst134=(x8295*x8296);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8299=((-1.0)*r20);
IkReal x8300=x8287;
CheckValue<IkReal> x8302 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8299),IKFAST_ATAN2_MAGTHRESH);
if(!x8302.valid){
continue;
}
IkReal x8301=((-1.0)*(x8302.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8301;
IkReal gconst132=x8301;
IkReal gconst133=(r21*x8300);
IkReal gconst134=(x8299*x8300);
IkReal x8303=r22*r22;
CheckValue<IkReal> x8306=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8303))),-1);
if(!x8306.valid){
continue;
}
IkReal x8304=x8306.value;
IkReal x8305=((((2.0)*x8304*(r20*r20)*(r21*r21)))+x8303+((x8304*(r20*r20*r20*r20)))+((x8304*(r21*r21*r21*r21))));
j4eval[0]=x8305;
j4eval[1]=IKsign(x8305);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8307=(gconst133*r21);
IkReal x8308=(cj1*sj2);
IkReal x8309=(gconst134*r20);
IkReal x8310=(cj2*sj1);
CheckValue<IkReal> x8311=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x8307*x8309))+(x8309*x8309)+(x8307*x8307))),-1);
if(!x8311.valid){
continue;
}
CheckValue<IkReal> x8312 = IKatan2WithCheck(IkReal((((r22*x8308))+((r22*x8310)))),IkReal(((((-1.0)*x8308*x8309))+((x8307*x8308))+(((-1.0)*x8309*x8310))+((x8307*x8310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8311.value)))+(x8312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8313=IKsin(j4);
IkReal x8314=IKcos(j4);
IkReal x8315=(sj1*sj2);
IkReal x8316=(gconst133*r11);
IkReal x8317=(gconst133*r21);
IkReal x8318=(gconst133*r01);
IkReal x8319=((1.0)*x8314);
IkReal x8320=(gconst134*x8314);
IkReal x8321=((1.0)*x8313);
IkReal x8322=((1.0)*cj1*cj2);
evalcond[0]=(((x8313*x8317))+(((-1.0)*gconst134*r20*x8321))+(((-1.0)*r22*x8319)));
evalcond[1]=(((x8313*x8316))+cj0+(((-1.0)*gconst134*r10*x8321))+(((-1.0)*r12*x8319)));
evalcond[2]=((((-1.0)*sj0))+((x8313*x8318))+(((-1.0)*gconst134*r00*x8321))+(((-1.0)*r02*x8319)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8317*x8319))+(((-1.0)*r22*x8321))+((cj1*sj2))+((r20*x8320)));
evalcond[4]=((((-1.0)*x8318*x8319))+((cj0*x8315))+((r00*x8320))+(((-1.0)*r02*x8321))+(((-1.0)*cj0*x8322)));
evalcond[5]=(((r10*x8320))+(((-1.0)*x8316*x8319))+((sj0*x8315))+(((-1.0)*sj0*x8322))+(((-1.0)*r12*x8321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8323=((1.0)*gconst134);
CheckValue<IkReal> x8324=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x8323)))),-1);
if(!x8324.valid){
continue;
}
CheckValue<IkReal> x8325 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8323))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8324.value)))+(x8325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8326=IKsin(j4);
IkReal x8327=IKcos(j4);
IkReal x8328=(sj1*sj2);
IkReal x8329=(gconst133*r11);
IkReal x8330=(gconst133*r21);
IkReal x8331=(gconst133*r01);
IkReal x8332=((1.0)*x8327);
IkReal x8333=(gconst134*x8327);
IkReal x8334=((1.0)*x8326);
IkReal x8335=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8332))+(((-1.0)*gconst134*r20*x8334))+((x8326*x8330)));
evalcond[1]=(cj0+(((-1.0)*r12*x8332))+(((-1.0)*gconst134*r10*x8334))+((x8326*x8329)));
evalcond[2]=((((-1.0)*gconst134*r00*x8334))+(((-1.0)*sj0))+(((-1.0)*r02*x8332))+((x8326*x8331)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8334))+((cj1*sj2))+(((-1.0)*x8330*x8332))+((r20*x8333)));
evalcond[4]=(((cj0*x8328))+((r00*x8333))+(((-1.0)*r02*x8334))+(((-1.0)*x8331*x8332))+(((-1.0)*cj0*x8335)));
evalcond[5]=((((-1.0)*r12*x8334))+((r10*x8333))+((sj0*x8328))+(((-1.0)*sj0*x8335))+(((-1.0)*x8329*x8332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8336=((1.0)*gconst134);
CheckValue<IkReal> x8337=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8336)))),-1);
if(!x8337.valid){
continue;
}
CheckValue<IkReal> x8338 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8336))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8337.value)))+(x8338.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8339=IKsin(j4);
IkReal x8340=IKcos(j4);
IkReal x8341=(sj1*sj2);
IkReal x8342=(gconst133*r11);
IkReal x8343=(gconst133*r21);
IkReal x8344=(gconst133*r01);
IkReal x8345=((1.0)*x8340);
IkReal x8346=(gconst134*x8340);
IkReal x8347=((1.0)*x8339);
IkReal x8348=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8345))+(((-1.0)*gconst134*r20*x8347))+((x8339*x8343)));
evalcond[1]=((((-1.0)*gconst134*r10*x8347))+cj0+((x8339*x8342))+(((-1.0)*r12*x8345)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8345))+(((-1.0)*gconst134*r00*x8347))+((x8339*x8344)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8343*x8345))+((cj1*sj2))+((r20*x8346))+(((-1.0)*r22*x8347)));
evalcond[4]=((((-1.0)*r02*x8347))+((cj0*x8341))+(((-1.0)*cj0*x8348))+(((-1.0)*x8344*x8345))+((r00*x8346)));
evalcond[5]=(((sj0*x8341))+(((-1.0)*x8342*x8345))+(((-1.0)*r12*x8347))+(((-1.0)*sj0*x8348))+((r10*x8346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8349=((-1.0)*r21);
IkReal x8351 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8351)==0){
continue;
}
IkReal x8350=pow(x8351,-0.5);
CheckValue<IkReal> x8352 = IKatan2WithCheck(IkReal(x8349),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8352.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8352.value))));
IkReal gconst136=(x8349*x8350);
IkReal gconst137=((1.0)*r20*x8350);
CheckValue<IkReal> x8353 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8353.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8353.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8354=((-1.0)*r21);
CheckValue<IkReal> x8357 = IKatan2WithCheck(IkReal(x8354),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8357.valid){
continue;
}
IkReal x8355=((1.0)*(x8357.value));
IkReal x8356=x8350;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8355)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8355)));
IkReal gconst136=(x8354*x8356);
IkReal gconst137=((1.0)*r20*x8356);
IkReal x8358=r22*r22;
IkReal x8359=((1.0)*x8358);
CheckValue<IkReal> x8363=IKPowWithIntegerCheck(((-1.0)+x8358),-1);
if(!x8363.valid){
continue;
}
IkReal x8360=x8363.value;
if((((1.0)+(((-1.0)*x8359)))) < -0.00001)
continue;
IkReal x8361=IKsqrt(((1.0)+(((-1.0)*x8359))));
IkReal x8362=(cj0*x8360*x8361);
j4eval[0]=((IKabs((x8362+(((-1.0)*x8359*x8362)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8364=((-1.0)*r21);
CheckValue<IkReal> x8367 = IKatan2WithCheck(IkReal(x8364),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8367.valid){
continue;
}
IkReal x8365=((1.0)*(x8367.value));
IkReal x8366=x8350;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8365)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8365)));
IkReal gconst136=(x8364*x8366);
IkReal gconst137=((1.0)*r20*x8366);
IkReal x8368=r22*r22;
IkReal x8369=((1.0)*x8368);
CheckValue<IkReal> x8373=IKPowWithIntegerCheck(((-1.0)+x8368),-1);
if(!x8373.valid){
continue;
}
IkReal x8370=x8373.value;
if((((1.0)+(((-1.0)*x8369)))) < -0.00001)
continue;
IkReal x8371=IKsqrt(((1.0)+(((-1.0)*x8369))));
IkReal x8372=(sj0*x8370*x8371);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8372+(((-1.0)*x8369*x8372))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8374=((-1.0)*r21);
CheckValue<IkReal> x8377 = IKatan2WithCheck(IkReal(x8374),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8377.valid){
continue;
}
IkReal x8375=((1.0)*(x8377.value));
IkReal x8376=x8350;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8375)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8375)));
IkReal gconst136=(x8374*x8376);
IkReal gconst137=((1.0)*r20*x8376);
IkReal x8378=r22*r22;
IkReal x8379=(r12*sj0);
IkReal x8380=(cj0*r02);
CheckValue<IkReal> x8384=IKPowWithIntegerCheck(((-1.0)+x8378),-1);
if(!x8384.valid){
continue;
}
IkReal x8381=x8384.value;
if((((1.0)+(((-1.0)*x8378)))) < -0.00001)
continue;
IkReal x8382=IKsqrt(((1.0)+(((-1.0)*x8378))));
IkReal x8383=(r22*x8381*x8382);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x8380))+(((-1.0)*x8379)))))+(IKabs((((x8380*x8383))+((x8379*x8383))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8385=((1.0)*sj0);
IkReal x8386=((1.0)*cj0);
CheckValue<IkReal> x8387=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8387.valid){
continue;
}
CheckValue<IkReal> x8388 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8386))+(((-1.0)*r12*x8385)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x8385))+(((-1.0)*gconst136*r01*x8386))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8387.value)))+(x8388.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8389=IKsin(j4);
IkReal x8390=IKcos(j4);
IkReal x8391=(gconst136*r01);
IkReal x8392=(gconst137*r10);
IkReal x8393=(sj1*sj2);
IkReal x8394=(gconst137*r20);
IkReal x8395=(gconst136*r11);
IkReal x8396=(gconst136*r21);
IkReal x8397=(gconst137*r00);
IkReal x8398=((1.0)*x8390);
IkReal x8399=((1.0)*cj1*cj2);
IkReal x8400=((1.0)*x8389);
evalcond[0]=(((x8389*x8396))+(((-1.0)*r22*x8398))+(((-1.0)*x8394*x8400)));
evalcond[1]=(cj0+(((-1.0)*x8392*x8400))+((x8389*x8395))+(((-1.0)*r12*x8398)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8398))+((x8389*x8391))+(((-1.0)*x8397*x8400)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8390*x8394))+(((-1.0)*r22*x8400))+(((-1.0)*x8396*x8398)));
evalcond[4]=(((x8390*x8397))+(((-1.0)*r02*x8400))+(((-1.0)*cj0*x8399))+(((-1.0)*x8391*x8398))+((cj0*x8393)));
evalcond[5]=((((-1.0)*sj0*x8399))+((x8390*x8392))+(((-1.0)*x8395*x8398))+((sj0*x8393))+(((-1.0)*r12*x8400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8401=((1.0)*gconst137);
CheckValue<IkReal> x8402 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8401))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8402.valid){
continue;
}
CheckValue<IkReal> x8403=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x8401)))),-1);
if(!x8403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8402.value)+(((1.5707963267949)*(x8403.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8404=IKsin(j4);
IkReal x8405=IKcos(j4);
IkReal x8406=(gconst136*r01);
IkReal x8407=(gconst137*r10);
IkReal x8408=(sj1*sj2);
IkReal x8409=(gconst137*r20);
IkReal x8410=(gconst136*r11);
IkReal x8411=(gconst136*r21);
IkReal x8412=(gconst137*r00);
IkReal x8413=((1.0)*x8405);
IkReal x8414=((1.0)*cj1*cj2);
IkReal x8415=((1.0)*x8404);
evalcond[0]=((((-1.0)*x8409*x8415))+((x8404*x8411))+(((-1.0)*r22*x8413)));
evalcond[1]=((((-1.0)*r12*x8413))+cj0+(((-1.0)*x8407*x8415))+((x8404*x8410)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8413))+(((-1.0)*x8412*x8415))+((x8404*x8406)));
evalcond[3]=(((cj2*sj1))+((x8405*x8409))+((cj1*sj2))+(((-1.0)*x8411*x8413))+(((-1.0)*r22*x8415)));
evalcond[4]=(((x8405*x8412))+(((-1.0)*cj0*x8414))+(((-1.0)*r02*x8415))+(((-1.0)*x8406*x8413))+((cj0*x8408)));
evalcond[5]=((((-1.0)*r12*x8415))+((sj0*x8408))+((x8405*x8407))+(((-1.0)*x8410*x8413))+(((-1.0)*sj0*x8414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8416=((1.0)*gconst137);
CheckValue<IkReal> x8417 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8416))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8417.valid){
continue;
}
CheckValue<IkReal> x8418=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x8416)))),-1);
if(!x8418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8417.value)+(((1.5707963267949)*(x8418.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8419=IKsin(j4);
IkReal x8420=IKcos(j4);
IkReal x8421=(gconst136*r01);
IkReal x8422=(gconst137*r10);
IkReal x8423=(sj1*sj2);
IkReal x8424=(gconst137*r20);
IkReal x8425=(gconst136*r11);
IkReal x8426=(gconst136*r21);
IkReal x8427=(gconst137*r00);
IkReal x8428=((1.0)*x8420);
IkReal x8429=((1.0)*cj1*cj2);
IkReal x8430=((1.0)*x8419);
evalcond[0]=((((-1.0)*x8424*x8430))+(((-1.0)*r22*x8428))+((x8419*x8426)));
evalcond[1]=(cj0+((x8419*x8425))+(((-1.0)*x8422*x8430))+(((-1.0)*r12*x8428)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8427*x8430))+(((-1.0)*r02*x8428))+((x8419*x8421)));
evalcond[3]=((((-1.0)*x8426*x8428))+((cj2*sj1))+((cj1*sj2))+((x8420*x8424))+(((-1.0)*r22*x8430)));
evalcond[4]=(((cj0*x8423))+(((-1.0)*cj0*x8429))+(((-1.0)*x8421*x8428))+((x8420*x8427))+(((-1.0)*r02*x8430)));
evalcond[5]=((((-1.0)*r12*x8430))+((sj0*x8423))+((x8420*x8422))+(((-1.0)*sj0*x8429))+(((-1.0)*x8425*x8428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8431=((-1.0)*r10);
IkReal x8433 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8433)==0){
continue;
}
IkReal x8432=pow(x8433,-0.5);
CheckValue<IkReal> x8434 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8431),IKFAST_ATAN2_MAGTHRESH);
if(!x8434.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8434.value));
IkReal gconst139=(r11*x8432);
IkReal gconst140=(x8431*x8432);
CheckValue<IkReal> x8435 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8435.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8435.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8436=((-1.0)*r10);
IkReal x8437=x8432;
CheckValue<IkReal> x8439 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8436),IKFAST_ATAN2_MAGTHRESH);
if(!x8439.valid){
continue;
}
IkReal x8438=((-1.0)*(x8439.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8438;
IkReal gconst138=x8438;
IkReal gconst139=(r11*x8437);
IkReal gconst140=(x8436*x8437);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8440=((1.0)*sj0);
IkReal x8441=((1.0)*gconst139);
CheckValue<IkReal> x8442=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8441)))),-1);
if(!x8442.valid){
continue;
}
CheckValue<IkReal> x8443 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8440))+(((-1.0)*cj0*r02)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x8441))+(((-1.0)*gconst139*r11*x8440))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8442.value)))+(x8443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8444=IKsin(j4);
IkReal x8445=IKcos(j4);
IkReal x8446=(gconst140*r00);
IkReal x8447=(sj1*sj2);
IkReal x8448=(gconst139*r11);
IkReal x8449=(gconst139*r01);
IkReal x8450=(gconst139*r21);
IkReal x8451=((1.0)*x8445);
IkReal x8452=((1.0)*x8444);
IkReal x8453=((1.0)*cj1*cj2);
IkReal x8454=(gconst140*x8445);
evalcond[0]=(((x8444*x8450))+(((-1.0)*r22*x8451))+(((-1.0)*gconst140*r20*x8452)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8452))+(((-1.0)*r12*x8451))+((x8444*x8448)));
evalcond[2]=((((-1.0)*sj0))+((x8444*x8449))+(((-1.0)*x8446*x8452))+(((-1.0)*r02*x8451)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8450*x8451))+((r20*x8454))+(((-1.0)*r22*x8452)));
evalcond[4]=(((x8445*x8446))+(((-1.0)*x8449*x8451))+(((-1.0)*cj0*x8453))+(((-1.0)*r02*x8452))+((cj0*x8447)));
evalcond[5]=((((-1.0)*sj0*x8453))+(((-1.0)*r12*x8452))+((sj0*x8447))+(((-1.0)*x8448*x8451))+((r10*x8454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8455=((1.0)*gconst140);
CheckValue<IkReal> x8456=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8455))+(((-1.0)*gconst139*r00)))),-1);
if(!x8456.valid){
continue;
}
CheckValue<IkReal> x8457 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x8455)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8456.value)))+(x8457.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8458=IKsin(j4);
IkReal x8459=IKcos(j4);
IkReal x8460=(gconst140*r00);
IkReal x8461=(sj1*sj2);
IkReal x8462=(gconst139*r11);
IkReal x8463=(gconst139*r01);
IkReal x8464=(gconst139*r21);
IkReal x8465=((1.0)*x8459);
IkReal x8466=((1.0)*x8458);
IkReal x8467=((1.0)*cj1*cj2);
IkReal x8468=(gconst140*x8459);
evalcond[0]=(((x8458*x8464))+(((-1.0)*gconst140*r20*x8466))+(((-1.0)*r22*x8465)));
evalcond[1]=(cj0+((x8458*x8462))+(((-1.0)*gconst140*r10*x8466))+(((-1.0)*r12*x8465)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8465))+((x8458*x8463))+(((-1.0)*x8460*x8466)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8466))+((r20*x8468))+(((-1.0)*x8464*x8465)));
evalcond[4]=((((-1.0)*r02*x8466))+((x8459*x8460))+((cj0*x8461))+(((-1.0)*x8463*x8465))+(((-1.0)*cj0*x8467)));
evalcond[5]=((((-1.0)*sj0*x8467))+((r10*x8468))+(((-1.0)*r12*x8466))+((sj0*x8461))+(((-1.0)*x8462*x8465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8469=((-1.0)*r11);
IkReal x8471 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8471)==0){
continue;
}
IkReal x8470=pow(x8471,-0.5);
CheckValue<IkReal> x8472 = IKatan2WithCheck(IkReal(x8469),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8472.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8472.value))));
IkReal gconst142=(x8469*x8470);
IkReal gconst143=((1.0)*r10*x8470);
CheckValue<IkReal> x8473 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8473.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8473.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8474=((-1.0)*r11);
CheckValue<IkReal> x8477 = IKatan2WithCheck(IkReal(x8474),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8477.valid){
continue;
}
IkReal x8475=((1.0)*(x8477.value));
IkReal x8476=x8470;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8475)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8475)));
IkReal gconst142=(x8474*x8476);
IkReal gconst143=((1.0)*r10*x8476);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8478=((-1.0)*r11);
CheckValue<IkReal> x8481 = IKatan2WithCheck(IkReal(x8478),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8481.valid){
continue;
}
IkReal x8479=((1.0)*(x8481.value));
IkReal x8480=x8470;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8479)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8479)));
IkReal gconst142=(x8478*x8480);
IkReal gconst143=((1.0)*r10*x8480);
IkReal x8482=r12*r12;
IkReal x8483=((1.0)*sj0);
IkReal x8484=(cj0*r02);
IkReal x8485=x8470;
j4eval[0]=((IKabs((((sj0*x8482*x8485))+(((-1.0)*x8483*x8485))+((r12*x8484*x8485)))))+(IKabs(((((-1.0)*x8484))+(((-1.0)*r12*x8483))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8486=((-1.0)*r11);
CheckValue<IkReal> x8489 = IKatan2WithCheck(IkReal(x8486),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8489.valid){
continue;
}
IkReal x8487=((1.0)*(x8489.value));
IkReal x8488=x8470;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8487)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8487)));
IkReal gconst142=(x8486*x8488);
IkReal gconst143=((1.0)*r10*x8488);
IkReal x8490=r12*r12;
IkReal x8491=(cj1*r22*sj2);
IkReal x8492=(cj2*r22*sj1);
CheckValue<IkReal> x8496=IKPowWithIntegerCheck(((-1.0)+x8490),-1);
if(!x8496.valid){
continue;
}
IkReal x8493=x8496.value;
if((((1.0)+(((-1.0)*x8490)))) < -0.00001)
continue;
IkReal x8494=IKsqrt(((1.0)+(((-1.0)*x8490))));
IkReal x8495=((1.0)*r12*x8493*x8494);
j4eval[0]=((IKabs(((((-1.0)*x8491*x8495))+(((-1.0)*x8492*x8495)))))+(IKabs((x8492+x8491))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8497=(gconst142*r21);
IkReal x8498=(cj1*sj2);
IkReal x8499=(cj2*sj1);
IkReal x8500=(gconst143*r20);
CheckValue<IkReal> x8501 = IKatan2WithCheck(IkReal((((r22*x8499))+((r22*x8498)))),IkReal(((((-1.0)*x8499*x8500))+((x8497*x8498))+((x8497*x8499))+(((-1.0)*x8498*x8500)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8501.valid){
continue;
}
CheckValue<IkReal> x8502=IKPowWithIntegerCheck(IKsign(((x8500*x8500)+(((-2.0)*x8497*x8500))+(r22*r22)+(x8497*x8497))),-1);
if(!x8502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8501.value)+(((1.5707963267949)*(x8502.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8503=IKsin(j4);
IkReal x8504=IKcos(j4);
IkReal x8505=(sj1*sj2);
IkReal x8506=(gconst143*r20);
IkReal x8507=((1.0)*x8504);
IkReal x8508=((1.0)*cj1*cj2);
IkReal x8509=((1.0)*x8503);
IkReal x8510=(gconst142*x8503);
IkReal x8511=(gconst143*x8504);
evalcond[0]=(((r21*x8510))+(((-1.0)*x8506*x8509))+(((-1.0)*r22*x8507)));
evalcond[1]=((((-1.0)*gconst143*r10*x8509))+cj0+((r11*x8510))+(((-1.0)*r12*x8507)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8509))+(((-1.0)*r02*x8507))+((r01*x8510)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8507))+((cj1*sj2))+(((-1.0)*r22*x8509))+((x8504*x8506)));
evalcond[4]=(((cj0*x8505))+(((-1.0)*r02*x8509))+(((-1.0)*gconst142*r01*x8507))+(((-1.0)*cj0*x8508))+((r00*x8511)));
evalcond[5]=(((sj0*x8505))+(((-1.0)*r12*x8509))+(((-1.0)*sj0*x8508))+(((-1.0)*gconst142*r11*x8507))+((r10*x8511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8512=((1.0)*sj0);
IkReal x8513=((1.0)*gconst142);
CheckValue<IkReal> x8514 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8512)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x8513))+(((-1.0)*gconst142*r11*x8512))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8514.valid){
continue;
}
CheckValue<IkReal> x8515=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8513))+(((-1.0)*gconst143*r21)))),-1);
if(!x8515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8514.value)+(((1.5707963267949)*(x8515.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8516=IKsin(j4);
IkReal x8517=IKcos(j4);
IkReal x8518=(sj1*sj2);
IkReal x8519=(gconst143*r20);
IkReal x8520=((1.0)*x8517);
IkReal x8521=((1.0)*cj1*cj2);
IkReal x8522=((1.0)*x8516);
IkReal x8523=(gconst142*x8516);
IkReal x8524=(gconst143*x8517);
evalcond[0]=(((r21*x8523))+(((-1.0)*x8519*x8522))+(((-1.0)*r22*x8520)));
evalcond[1]=((((-1.0)*gconst143*r10*x8522))+cj0+((r11*x8523))+(((-1.0)*r12*x8520)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8520))+((r01*x8523))+(((-1.0)*gconst143*r00*x8522)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8520))+((cj1*sj2))+((x8517*x8519))+(((-1.0)*r22*x8522)));
evalcond[4]=(((cj0*x8518))+(((-1.0)*r02*x8522))+(((-1.0)*cj0*x8521))+((r00*x8524))+(((-1.0)*gconst142*r01*x8520)));
evalcond[5]=(((sj0*x8518))+(((-1.0)*gconst142*r11*x8520))+(((-1.0)*sj0*x8521))+(((-1.0)*r12*x8522))+((r10*x8524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8525=((1.0)*gconst143);
CheckValue<IkReal> x8526 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8525))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8526.valid){
continue;
}
CheckValue<IkReal> x8527=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x8525)))),-1);
if(!x8527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8526.value)+(((1.5707963267949)*(x8527.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8528=IKsin(j4);
IkReal x8529=IKcos(j4);
IkReal x8530=(sj1*sj2);
IkReal x8531=(gconst143*r20);
IkReal x8532=((1.0)*x8529);
IkReal x8533=((1.0)*cj1*cj2);
IkReal x8534=((1.0)*x8528);
IkReal x8535=(gconst142*x8528);
IkReal x8536=(gconst143*x8529);
evalcond[0]=((((-1.0)*x8531*x8534))+(((-1.0)*r22*x8532))+((r21*x8535)));
evalcond[1]=(cj0+(((-1.0)*r12*x8532))+(((-1.0)*gconst143*r10*x8534))+((r11*x8535)));
evalcond[2]=((((-1.0)*r02*x8532))+(((-1.0)*sj0))+((r01*x8535))+(((-1.0)*gconst143*r00*x8534)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8534))+((cj1*sj2))+(((-1.0)*gconst142*r21*x8532))+((x8529*x8531)));
evalcond[4]=((((-1.0)*r02*x8534))+(((-1.0)*cj0*x8533))+((r00*x8536))+(((-1.0)*gconst142*r01*x8532))+((cj0*x8530)));
evalcond[5]=((((-1.0)*sj0*x8533))+(((-1.0)*gconst142*r11*x8532))+((r10*x8536))+(((-1.0)*r12*x8534))+((sj0*x8530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8537=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8537;
j4eval[1]=IKsign(x8537);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8538=((1.0)*cj5);
IkReal x8539=((((-1.0)*r01*x8538))+(((-1.0)*r00*sj5)));
j4eval[0]=x8539;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8538)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8539);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8540=cj5*cj5;
IkReal x8541=r11*r11;
IkReal x8542=(r11*sj5);
IkReal x8543=(cj5*r10);
IkReal x8544=((r12*r12)+(((-2.0)*x8542*x8543))+x8541+(((-1.0)*x8540*x8541))+((x8540*(r10*r10))));
j4eval[0]=x8544;
j4eval[1]=IKsign(x8544);
j4eval[2]=((IKabs(r12))+(IKabs((x8543+(((-1.0)*x8542))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8545=cj5*cj5;
IkReal x8546=r11*r11;
IkReal x8547=(cj5*r10);
IkReal x8548=(r11*sj5);
CheckValue<IkReal> x8549=IKPowWithIntegerCheck(IKsign(((r12*r12)+x8546+(((-1.0)*x8545*x8546))+((x8545*(r10*r10)))+(((-2.0)*x8547*x8548)))),-1);
if(!x8549.valid){
continue;
}
CheckValue<IkReal> x8550 = IKatan2WithCheck(IkReal((x8547+(((-1.0)*x8548)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8549.value)))+(x8550.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8551=IKsin(j4);
IkReal x8552=IKcos(j4);
IkReal x8553=(cj5*r10);
IkReal x8554=(r01*sj5);
IkReal x8555=(cj5*r00);
IkReal x8556=(cj5*r20);
IkReal x8557=((1.0)*x8552);
IkReal x8558=((1.0)*x8551);
IkReal x8559=(sj5*x8551);
evalcond[0]=(((r21*x8559))+(((-1.0)*r22*x8557))+(((-1.0)*x8556*x8558)));
evalcond[1]=(((x8551*x8554))+(((-1.0)*x8555*x8558))+(((-1.0)*r02*x8557)));
evalcond[2]=((((-1.0)*r12*x8558))+(((-1.0)*r11*sj5*x8557))+((x8552*x8553)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8557))+((r11*x8559))+(((-1.0)*x8553*x8558)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8558))+(((-1.0)*r21*sj5*x8557))+((cj1*sj2))+((x8552*x8556)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*x8554*x8557))+((sj1*sj2))+(((-1.0)*r02*x8558))+((x8552*x8555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8560=((1.0)*cj5);
CheckValue<IkReal> x8561=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8560))+(((-1.0)*r00*sj5)))),-1);
if(!x8561.valid){
continue;
}
CheckValue<IkReal> x8562 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8561.value)))+(x8562.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8563=IKsin(j4);
IkReal x8564=IKcos(j4);
IkReal x8565=(cj5*r10);
IkReal x8566=(r01*sj5);
IkReal x8567=(cj5*r00);
IkReal x8568=(cj5*r20);
IkReal x8569=((1.0)*x8564);
IkReal x8570=((1.0)*x8563);
IkReal x8571=(sj5*x8563);
evalcond[0]=(((r21*x8571))+(((-1.0)*r22*x8569))+(((-1.0)*x8568*x8570)));
evalcond[1]=(((x8563*x8566))+(((-1.0)*x8567*x8570))+(((-1.0)*r02*x8569)));
evalcond[2]=(((x8564*x8565))+(((-1.0)*r12*x8570))+(((-1.0)*r11*sj5*x8569)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8569))+((r11*x8571))+(((-1.0)*x8565*x8570)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8569))+((x8564*x8568))+(((-1.0)*r22*x8570)));
evalcond[5]=((((-1.0)*x8566*x8569))+(((-1.0)*r02*x8570))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8564*x8567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8572=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8572.valid){
continue;
}
CheckValue<IkReal> x8573 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8572.value)))+(x8573.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8574=IKsin(j4);
IkReal x8575=IKcos(j4);
IkReal x8576=(cj5*r10);
IkReal x8577=(r01*sj5);
IkReal x8578=(cj5*r00);
IkReal x8579=(cj5*r20);
IkReal x8580=((1.0)*x8575);
IkReal x8581=((1.0)*x8574);
IkReal x8582=(sj5*x8574);
evalcond[0]=((((-1.0)*r22*x8580))+((r21*x8582))+(((-1.0)*x8579*x8581)));
evalcond[1]=((((-1.0)*r02*x8580))+((x8574*x8577))+(((-1.0)*x8578*x8581)));
evalcond[2]=(((x8575*x8576))+(((-1.0)*r12*x8581))+(((-1.0)*r11*sj5*x8580)));
evalcond[3]=((1.0)+(((-1.0)*x8576*x8581))+((r11*x8582))+(((-1.0)*r12*x8580)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8581))+(((-1.0)*r21*sj5*x8580))+((cj1*sj2))+((x8575*x8579)));
evalcond[5]=((((-1.0)*x8577*x8580))+((x8575*x8578))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8583=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8583;
j4eval[1]=IKsign(x8583);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8584=((1.0)*cj5);
IkReal x8585=((((-1.0)*r21*x8584))+(((-1.0)*r20*sj5)));
j4eval[0]=x8585;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8584))))));
j4eval[2]=IKsign(x8585);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8586=cj5*cj5;
IkReal x8587=r11*r11;
IkReal x8588=(cj5*r10);
IkReal x8589=(r11*sj5);
IkReal x8590=(((x8586*x8587))+(((-1.0)*x8587))+(((-1.0)*(r12*r12)))+(((-1.0)*x8586*(r10*r10)))+(((2.0)*x8588*x8589)));
j4eval[0]=x8590;
j4eval[1]=((IKabs(r12))+(IKabs((x8588+(((-1.0)*x8589))))));
j4eval[2]=IKsign(x8590);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8591=cj5*cj5;
IkReal x8592=r11*r11;
IkReal x8593=(cj5*r10);
IkReal x8594=(r11*sj5);
CheckValue<IkReal> x8595 = IKatan2WithCheck(IkReal((x8593+(((-1.0)*x8594)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8595.valid){
continue;
}
CheckValue<IkReal> x8596=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8592))+(((-1.0)*x8591*(r10*r10)))+((x8591*x8592))+(((2.0)*x8593*x8594))+(((-1.0)*(r12*r12))))),-1);
if(!x8596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8595.value)+(((1.5707963267949)*(x8596.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8597=IKsin(j4);
IkReal x8598=IKcos(j4);
IkReal x8599=(cj5*r10);
IkReal x8600=(r01*sj5);
IkReal x8601=(cj5*r00);
IkReal x8602=(cj5*r20);
IkReal x8603=((1.0)*x8598);
IkReal x8604=((1.0)*x8597);
IkReal x8605=(sj5*x8597);
evalcond[0]=((((-1.0)*x8602*x8604))+(((-1.0)*r22*x8603))+((r21*x8605)));
evalcond[1]=(((x8597*x8600))+(((-1.0)*x8601*x8604))+(((-1.0)*r02*x8603)));
evalcond[2]=(((x8598*x8599))+(((-1.0)*r12*x8604))+(((-1.0)*r11*sj5*x8603)));
evalcond[3]=((-1.0)+((r11*x8605))+(((-1.0)*r12*x8603))+(((-1.0)*x8599*x8604)));
evalcond[4]=(((x8598*x8602))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8604))+(((-1.0)*r21*sj5*x8603)));
evalcond[5]=(((x8598*x8601))+(((-1.0)*r02*x8604))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x8600*x8603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8606=((1.0)*cj5);
CheckValue<IkReal> x8607=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8606))+(((-1.0)*r20*sj5)))),-1);
if(!x8607.valid){
continue;
}
CheckValue<IkReal> x8608 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x8606))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8607.value)))+(x8608.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8609=IKsin(j4);
IkReal x8610=IKcos(j4);
IkReal x8611=(cj5*r10);
IkReal x8612=(r01*sj5);
IkReal x8613=(cj5*r00);
IkReal x8614=(cj5*r20);
IkReal x8615=((1.0)*x8610);
IkReal x8616=((1.0)*x8609);
IkReal x8617=(sj5*x8609);
evalcond[0]=((((-1.0)*x8614*x8616))+(((-1.0)*r22*x8615))+((r21*x8617)));
evalcond[1]=((((-1.0)*r02*x8615))+((x8609*x8612))+(((-1.0)*x8613*x8616)));
evalcond[2]=((((-1.0)*r12*x8616))+(((-1.0)*r11*sj5*x8615))+((x8610*x8611)));
evalcond[3]=((-1.0)+((r11*x8617))+(((-1.0)*r12*x8615))+(((-1.0)*x8611*x8616)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8616))+(((-1.0)*r21*sj5*x8615))+((x8610*x8614)));
evalcond[5]=((((-1.0)*x8612*x8615))+(((-1.0)*r02*x8616))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x8610*x8613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8618 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8618.valid){
continue;
}
CheckValue<IkReal> x8619=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8618.value)+(((1.5707963267949)*(x8619.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8620=IKsin(j4);
IkReal x8621=IKcos(j4);
IkReal x8622=(cj5*r10);
IkReal x8623=(r01*sj5);
IkReal x8624=(cj5*r00);
IkReal x8625=(cj5*r20);
IkReal x8626=((1.0)*x8621);
IkReal x8627=((1.0)*x8620);
IkReal x8628=(sj5*x8620);
evalcond[0]=(((r21*x8628))+(((-1.0)*x8625*x8627))+(((-1.0)*r22*x8626)));
evalcond[1]=(((x8620*x8623))+(((-1.0)*x8624*x8627))+(((-1.0)*r02*x8626)));
evalcond[2]=((((-1.0)*r12*x8627))+((x8621*x8622))+(((-1.0)*r11*sj5*x8626)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8626))+(((-1.0)*x8622*x8627))+((r11*x8628)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8626))+(((-1.0)*r22*x8627))+((x8621*x8625)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x8623*x8626))+((x8621*x8624))+((cj1*cj2))+(((-1.0)*r02*x8627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8629=((-1.0)*r00);
IkReal x8631 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8631)==0){
continue;
}
IkReal x8630=pow(x8631,-0.5);
CheckValue<IkReal> x8632 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8629),IKFAST_ATAN2_MAGTHRESH);
if(!x8632.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8632.value));
IkReal gconst145=(r01*x8630);
IkReal gconst146=(x8629*x8630);
CheckValue<IkReal> x8633 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8633.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8633.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8634=((-1.0)*r00);
IkReal x8635=x8630;
CheckValue<IkReal> x8637 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8634),IKFAST_ATAN2_MAGTHRESH);
if(!x8637.valid){
continue;
}
IkReal x8636=((-1.0)*(x8637.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8636;
IkReal gconst144=x8636;
IkReal gconst145=(r01*x8635);
IkReal gconst146=(x8634*x8635);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8638=((1.0)*sj0);
IkReal x8639=((1.0)*gconst145);
CheckValue<IkReal> x8640=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*r20*x8639)))),-1);
if(!x8640.valid){
continue;
}
CheckValue<IkReal> x8641 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8638))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x8639))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x8638)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8640.value)))+(x8641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8642=IKsin(j4);
IkReal x8643=IKcos(j4);
IkReal x8644=(gconst146*r10);
IkReal x8645=(sj1*sj2);
IkReal x8646=(gconst146*r20);
IkReal x8647=(gconst146*r00);
IkReal x8648=((1.0)*x8643);
IkReal x8649=((1.0)*x8642);
IkReal x8650=(gconst145*x8642);
IkReal x8651=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8650))+(((-1.0)*r22*x8648))+(((-1.0)*x8646*x8649)));
evalcond[1]=((((-1.0)*x8644*x8649))+cj0+((r11*x8650))+(((-1.0)*r12*x8648)));
evalcond[2]=(((r01*x8650))+(((-1.0)*sj0))+(((-1.0)*x8647*x8649))+(((-1.0)*r02*x8648)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8649))+(((-1.0)*gconst145*r21*x8648))+((x8643*x8646)));
evalcond[4]=((((-1.0)*gconst145*r01*x8648))+((cj0*x8645))+(((-1.0)*r02*x8649))+(((-1.0)*cj0*x8651))+((x8643*x8647)));
evalcond[5]=((((-1.0)*sj0*x8651))+(((-1.0)*gconst145*r11*x8648))+(((-1.0)*r12*x8649))+((sj0*x8645))+((x8643*x8644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8652=((1.0)*gconst146);
CheckValue<IkReal> x8653=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8652))+(((-1.0)*gconst145*r10)))),-1);
if(!x8653.valid){
continue;
}
CheckValue<IkReal> x8654 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8652))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8653.value)))+(x8654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8655=IKsin(j4);
IkReal x8656=IKcos(j4);
IkReal x8657=(gconst146*r10);
IkReal x8658=(sj1*sj2);
IkReal x8659=(gconst146*r20);
IkReal x8660=(gconst146*r00);
IkReal x8661=((1.0)*x8656);
IkReal x8662=((1.0)*x8655);
IkReal x8663=(gconst145*x8655);
IkReal x8664=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8661))+(((-1.0)*x8659*x8662))+((r21*x8663)));
evalcond[1]=(cj0+(((-1.0)*r12*x8661))+(((-1.0)*x8657*x8662))+((r11*x8663)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8661))+((r01*x8663))+(((-1.0)*x8660*x8662)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8662))+(((-1.0)*gconst145*r21*x8661))+((x8656*x8659)));
evalcond[4]=((((-1.0)*cj0*x8664))+(((-1.0)*r02*x8662))+((x8656*x8660))+((cj0*x8658))+(((-1.0)*gconst145*r01*x8661)));
evalcond[5]=((((-1.0)*sj0*x8664))+(((-1.0)*gconst145*r11*x8661))+(((-1.0)*r12*x8662))+((sj0*x8658))+((x8656*x8657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8665=((-1.0)*r01);
IkReal x8667 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8667)==0){
continue;
}
IkReal x8666=pow(x8667,-0.5);
CheckValue<IkReal> x8668 = IKatan2WithCheck(IkReal(x8665),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8668.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8668.value))));
IkReal gconst148=(x8665*x8666);
IkReal gconst149=((1.0)*r00*x8666);
CheckValue<IkReal> x8669 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8669.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8669.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8670=((-1.0)*r01);
CheckValue<IkReal> x8673 = IKatan2WithCheck(IkReal(x8670),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8673.valid){
continue;
}
IkReal x8671=((1.0)*(x8673.value));
IkReal x8672=x8666;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8671)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8671)));
IkReal gconst148=(x8670*x8672);
IkReal gconst149=((1.0)*r00*x8672);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8674=((-1.0)*r01);
CheckValue<IkReal> x8677 = IKatan2WithCheck(IkReal(x8674),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8677.valid){
continue;
}
IkReal x8675=((1.0)*(x8677.value));
IkReal x8676=x8666;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8675)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8675)));
IkReal gconst148=(x8674*x8676);
IkReal gconst149=((1.0)*r00*x8676);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8678=((-1.0)*r01);
CheckValue<IkReal> x8681 = IKatan2WithCheck(IkReal(x8678),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8681.valid){
continue;
}
IkReal x8679=((1.0)*(x8681.value));
IkReal x8680=x8666;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8679)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8679)));
IkReal gconst148=(x8678*x8680);
IkReal gconst149=((1.0)*r00*x8680);
IkReal x8682=r02*r02;
IkReal x8683=(r12*sj0);
IkReal x8684=((1.0)*cj0);
IkReal x8685=x8666;
j4eval[0]=((IKabs(((((-1.0)*x8684*x8685))+((r02*x8683*x8685))+((cj0*x8682*x8685)))))+(IKabs(((((-1.0)*r02*x8684))+(((-1.0)*x8683))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8686=((1.0)*sj0);
IkReal x8687=((1.0)*gconst148);
CheckValue<IkReal> x8688=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x8687)))),-1);
if(!x8688.valid){
continue;
}
CheckValue<IkReal> x8689 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8686))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst148*r11*x8686))+((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x8687))+((cj0*gconst149*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8688.value)))+(x8689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8690=IKsin(j4);
IkReal x8691=IKcos(j4);
IkReal x8692=(gconst148*r11);
IkReal x8693=(sj1*sj2);
IkReal x8694=((1.0)*x8691);
IkReal x8695=(gconst149*x8691);
IkReal x8696=(gconst148*x8690);
IkReal x8697=((1.0)*cj1*cj2);
IkReal x8698=((1.0)*x8690);
evalcond[0]=(((r21*x8696))+(((-1.0)*gconst149*r20*x8698))+(((-1.0)*r22*x8694)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8698))+((x8690*x8692))+(((-1.0)*r12*x8694)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8694))+((r01*x8696))+(((-1.0)*gconst149*r00*x8698)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8694))+((r20*x8695))+(((-1.0)*r22*x8698)));
evalcond[4]=(((cj0*x8693))+(((-1.0)*cj0*x8697))+((r00*x8695))+(((-1.0)*r02*x8698))+(((-1.0)*gconst148*r01*x8694)));
evalcond[5]=(((sj0*x8693))+(((-1.0)*sj0*x8697))+((r10*x8695))+(((-1.0)*r12*x8698))+(((-1.0)*x8692*x8694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8699=((1.0)*gconst149);
CheckValue<IkReal> x8700 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8699))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8700.valid){
continue;
}
CheckValue<IkReal> x8701=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x8699)))),-1);
if(!x8701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8700.value)+(((1.5707963267949)*(x8701.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8702=IKsin(j4);
IkReal x8703=IKcos(j4);
IkReal x8704=(gconst148*r11);
IkReal x8705=(sj1*sj2);
IkReal x8706=((1.0)*x8703);
IkReal x8707=(gconst149*x8703);
IkReal x8708=(gconst148*x8702);
IkReal x8709=((1.0)*cj1*cj2);
IkReal x8710=((1.0)*x8702);
evalcond[0]=(((r21*x8708))+(((-1.0)*gconst149*r20*x8710))+(((-1.0)*r22*x8706)));
evalcond[1]=(cj0+((x8702*x8704))+(((-1.0)*gconst149*r10*x8710))+(((-1.0)*r12*x8706)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8710))+(((-1.0)*r02*x8706))+((r01*x8708)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8706))+((cj1*sj2))+(((-1.0)*r22*x8710))+((r20*x8707)));
evalcond[4]=((((-1.0)*cj0*x8709))+(((-1.0)*r02*x8710))+(((-1.0)*gconst148*r01*x8706))+((cj0*x8705))+((r00*x8707)));
evalcond[5]=(((r10*x8707))+(((-1.0)*x8704*x8706))+(((-1.0)*r12*x8710))+(((-1.0)*sj0*x8709))+((sj0*x8705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8711=((1.0)*gconst149);
CheckValue<IkReal> x8712=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8711))+(((-1.0)*gconst148*r00)))),-1);
if(!x8712.valid){
continue;
}
CheckValue<IkReal> x8713 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8712.value)))+(x8713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8714=IKsin(j4);
IkReal x8715=IKcos(j4);
IkReal x8716=(gconst148*r11);
IkReal x8717=(sj1*sj2);
IkReal x8718=((1.0)*x8715);
IkReal x8719=(gconst149*x8715);
IkReal x8720=(gconst148*x8714);
IkReal x8721=((1.0)*cj1*cj2);
IkReal x8722=((1.0)*x8714);
evalcond[0]=(((r21*x8720))+(((-1.0)*r22*x8718))+(((-1.0)*gconst149*r20*x8722)));
evalcond[1]=((((-1.0)*gconst149*r10*x8722))+((x8714*x8716))+cj0+(((-1.0)*r12*x8718)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8718))+(((-1.0)*gconst149*r00*x8722))+((r01*x8720)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8718))+((cj1*sj2))+((r20*x8719))+(((-1.0)*r22*x8722)));
evalcond[4]=((((-1.0)*cj0*x8721))+((cj0*x8717))+(((-1.0)*gconst148*r01*x8718))+((r00*x8719))+(((-1.0)*r02*x8722)));
evalcond[5]=((((-1.0)*x8716*x8718))+((sj0*x8717))+(((-1.0)*sj0*x8721))+((r10*x8719))+(((-1.0)*r12*x8722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8723=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8723;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8723);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8724=((1.0)*cj5);
IkReal x8725=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8724)));
j4eval[0]=x8725;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8724)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8725);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8726=cj5*cj5;
IkReal x8727=r01*r01;
IkReal x8728=(r01*sj5);
IkReal x8729=(cj5*r00);
IkReal x8730=(((x8726*x8727))+(((-1.0)*x8726*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x8727))+(((2.0)*x8728*x8729)));
j4eval[0]=x8730;
j4eval[1]=IKsign(x8730);
j4eval[2]=((IKabs(r02))+(IKabs((x8729+(((-1.0)*x8728))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8731=cj5*cj5;
IkReal x8732=r01*r01;
IkReal x8733=(r01*sj5);
IkReal x8734=(cj5*r00);
CheckValue<IkReal> x8735 = IKatan2WithCheck(IkReal((x8734+(((-1.0)*x8733)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8735.valid){
continue;
}
CheckValue<IkReal> x8736=IKPowWithIntegerCheck(IKsign((((x8731*x8732))+(((-1.0)*(r02*r02)))+(((-1.0)*x8731*(r00*r00)))+(((-1.0)*x8732))+(((2.0)*x8733*x8734)))),-1);
if(!x8736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8735.value)+(((1.5707963267949)*(x8736.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8737=IKsin(j4);
IkReal x8738=IKcos(j4);
IkReal x8739=(cj5*r10);
IkReal x8740=(r01*sj5);
IkReal x8741=(cj5*r00);
IkReal x8742=(cj5*r20);
IkReal x8743=((1.0)*x8738);
IkReal x8744=((1.0)*x8737);
IkReal x8745=(sj5*x8737);
evalcond[0]=((((-1.0)*x8742*x8744))+(((-1.0)*r22*x8743))+((r21*x8745)));
evalcond[1]=((((-1.0)*r12*x8743))+(((-1.0)*x8739*x8744))+((r11*x8745)));
evalcond[2]=((((-1.0)*x8740*x8743))+((x8738*x8741))+(((-1.0)*r02*x8744)));
evalcond[3]=((-1.0)+(((-1.0)*x8741*x8744))+((x8737*x8740))+(((-1.0)*r02*x8743)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8743))+((cj1*sj2))+(((-1.0)*r22*x8744))+((x8738*x8742)));
evalcond[5]=((((-1.0)*r12*x8744))+((x8738*x8739))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8746=((1.0)*cj5);
CheckValue<IkReal> x8747 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8746)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8747.valid){
continue;
}
CheckValue<IkReal> x8748=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8746))+(((-1.0)*r10*sj5)))),-1);
if(!x8748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8747.value)+(((1.5707963267949)*(x8748.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8749=IKsin(j4);
IkReal x8750=IKcos(j4);
IkReal x8751=(cj5*r10);
IkReal x8752=(r01*sj5);
IkReal x8753=(cj5*r00);
IkReal x8754=(cj5*r20);
IkReal x8755=((1.0)*x8750);
IkReal x8756=((1.0)*x8749);
IkReal x8757=(sj5*x8749);
evalcond[0]=((((-1.0)*x8754*x8756))+(((-1.0)*r22*x8755))+((r21*x8757)));
evalcond[1]=((((-1.0)*x8751*x8756))+((r11*x8757))+(((-1.0)*r12*x8755)));
evalcond[2]=(((x8750*x8753))+(((-1.0)*r02*x8756))+(((-1.0)*x8752*x8755)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8755))+(((-1.0)*x8753*x8756))+((x8749*x8752)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8756))+((x8750*x8754))+((cj1*sj2))+(((-1.0)*r21*sj5*x8755)));
evalcond[5]=(((x8750*x8751))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8755))+(((-1.0)*r12*x8756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8758=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8758.valid){
continue;
}
CheckValue<IkReal> x8759 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8758.value)))+(x8759.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8760=IKsin(j4);
IkReal x8761=IKcos(j4);
IkReal x8762=(cj5*r10);
IkReal x8763=(r01*sj5);
IkReal x8764=(cj5*r00);
IkReal x8765=(cj5*r20);
IkReal x8766=((1.0)*x8761);
IkReal x8767=((1.0)*x8760);
IkReal x8768=(sj5*x8760);
evalcond[0]=((((-1.0)*r22*x8766))+((r21*x8768))+(((-1.0)*x8765*x8767)));
evalcond[1]=((((-1.0)*r12*x8766))+((r11*x8768))+(((-1.0)*x8762*x8767)));
evalcond[2]=((((-1.0)*r02*x8767))+((x8761*x8764))+(((-1.0)*x8763*x8766)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8766))+((x8760*x8763))+(((-1.0)*x8764*x8767)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8761*x8765))+(((-1.0)*r22*x8767))+(((-1.0)*r21*sj5*x8766)));
evalcond[5]=((((-1.0)*r11*sj5*x8766))+((x8761*x8762))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8769=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8769;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8769);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8770=((1.0)*cj5);
IkReal x8771=((((-1.0)*r21*x8770))+(((-1.0)*r20*sj5)));
j4eval[0]=x8771;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x8770))+((r11*sj5))))));
j4eval[2]=IKsign(x8771);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8772=cj5*cj5;
IkReal x8773=r01*r01;
IkReal x8774=(cj5*r00);
IkReal x8775=(r01*sj5);
IkReal x8776=((((-2.0)*x8774*x8775))+((x8772*(r00*r00)))+x8773+(((-1.0)*x8772*x8773))+(r02*r02));
j4eval[0]=x8776;
j4eval[1]=((IKabs(r02))+(IKabs((x8774+(((-1.0)*x8775))))));
j4eval[2]=IKsign(x8776);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8777=cj5*cj5;
IkReal x8778=r01*r01;
IkReal x8779=(r01*sj5);
IkReal x8780=(cj5*r00);
CheckValue<IkReal> x8781=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8777*x8778))+x8778+((x8777*(r00*r00)))+(((-2.0)*x8779*x8780))+(r02*r02))),-1);
if(!x8781.valid){
continue;
}
CheckValue<IkReal> x8782 = IKatan2WithCheck(IkReal((x8780+(((-1.0)*x8779)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8781.value)))+(x8782.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8783=IKsin(j4);
IkReal x8784=IKcos(j4);
IkReal x8785=(cj5*r10);
IkReal x8786=(r01*sj5);
IkReal x8787=(cj5*r00);
IkReal x8788=(cj5*r20);
IkReal x8789=((1.0)*x8784);
IkReal x8790=((1.0)*x8783);
IkReal x8791=(sj5*x8783);
evalcond[0]=(((r21*x8791))+(((-1.0)*x8788*x8790))+(((-1.0)*r22*x8789)));
evalcond[1]=(((r11*x8791))+(((-1.0)*x8785*x8790))+(((-1.0)*r12*x8789)));
evalcond[2]=(((x8784*x8787))+(((-1.0)*x8786*x8789))+(((-1.0)*r02*x8790)));
evalcond[3]=((1.0)+((x8783*x8786))+(((-1.0)*r02*x8789))+(((-1.0)*x8787*x8790)));
evalcond[4]=(((cj2*sj1))+((x8784*x8788))+((cj1*sj2))+(((-1.0)*r21*sj5*x8789))+(((-1.0)*r22*x8790)));
evalcond[5]=((((-1.0)*r12*x8790))+((x8784*x8785))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8792=((1.0)*cj5);
CheckValue<IkReal> x8793=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8792))+(((-1.0)*r20*sj5)))),-1);
if(!x8793.valid){
continue;
}
CheckValue<IkReal> x8794 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8792)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8793.value)))+(x8794.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8795=IKsin(j4);
IkReal x8796=IKcos(j4);
IkReal x8797=(cj5*r10);
IkReal x8798=(r01*sj5);
IkReal x8799=(cj5*r00);
IkReal x8800=(cj5*r20);
IkReal x8801=((1.0)*x8796);
IkReal x8802=((1.0)*x8795);
IkReal x8803=(sj5*x8795);
evalcond[0]=(((r21*x8803))+(((-1.0)*r22*x8801))+(((-1.0)*x8800*x8802)));
evalcond[1]=((((-1.0)*r12*x8801))+((r11*x8803))+(((-1.0)*x8797*x8802)));
evalcond[2]=(((x8796*x8799))+(((-1.0)*r02*x8802))+(((-1.0)*x8798*x8801)));
evalcond[3]=((1.0)+((x8795*x8798))+(((-1.0)*r02*x8801))+(((-1.0)*x8799*x8802)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8802))+((x8796*x8800))+((cj1*sj2))+(((-1.0)*r21*sj5*x8801)));
evalcond[5]=((((-1.0)*r12*x8802))+((x8796*x8797))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8804 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8804.valid){
continue;
}
CheckValue<IkReal> x8805=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8804.value)+(((1.5707963267949)*(x8805.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8806=IKsin(j4);
IkReal x8807=IKcos(j4);
IkReal x8808=(cj5*r10);
IkReal x8809=(r01*sj5);
IkReal x8810=(cj5*r00);
IkReal x8811=(cj5*r20);
IkReal x8812=((1.0)*x8807);
IkReal x8813=((1.0)*x8806);
IkReal x8814=(sj5*x8806);
evalcond[0]=(((r21*x8814))+(((-1.0)*r22*x8812))+(((-1.0)*x8811*x8813)));
evalcond[1]=((((-1.0)*r12*x8812))+((r11*x8814))+(((-1.0)*x8808*x8813)));
evalcond[2]=(((x8807*x8810))+(((-1.0)*r02*x8813))+(((-1.0)*x8809*x8812)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8812))+((x8806*x8809))+(((-1.0)*x8810*x8813)));
evalcond[4]=((((-1.0)*r22*x8813))+((x8807*x8811))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8812)));
evalcond[5]=((((-1.0)*r12*x8813))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8812))+((x8807*x8808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8815=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8815);
rxp1_1=(px*r21);
rxp1_2=(r11*x8815);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8816=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8816);
rxp1_1=(px*r21);
rxp1_2=(r11*x8816);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8817=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8817);
rxp1_1=(px*r21);
rxp1_2=(r11*x8817);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8820=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8820.valid){
continue;
}
IkReal x8818=x8820.value;
IkReal x8819=(sj0*x8818);
cj4array[0]=((((-1.0)*sj1*sj2*x8819))+((cj1*cj2*x8819)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8821=IKsin(j4);
IkReal x8822=IKcos(j4);
IkReal x8823=(r21*sj5);
IkReal x8824=(cj5*r20);
IkReal x8825=((1.0)*x8821);
IkReal x8826=((1.0)*x8822);
evalcond[0]=((-1.0)*r02*x8821);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8826)));
evalcond[2]=((((-1.0)*x8824*x8825))+((x8821*x8823)));
evalcond[3]=((((-1.0)*cj5*r10*x8825))+((r11*sj5*x8821)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8822*x8824))+(((-1.0)*x8823*x8826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8829=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8829.valid){
continue;
}
IkReal x8827=x8829.value;
IkReal x8828=((1.0)*x8827);
cj4array[0]=((((-1.0)*cj1*sj2*x8828))+(((-1.0)*cj2*sj1*x8828)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8830=IKsin(j4);
IkReal x8831=IKcos(j4);
IkReal x8832=(r11*sj5);
IkReal x8833=((1.0)*sj0);
IkReal x8834=((1.0)*x8831);
IkReal x8835=((1.0)*cj5*x8830);
evalcond[0]=((-1.0)*r02*x8830);
evalcond[1]=((((-1.0)*r02*x8834))+(((-1.0)*x8833)));
evalcond[2]=((((-1.0)*r20*x8835))+((r21*sj5*x8830)));
evalcond[3]=((((-1.0)*r10*x8835))+((x8830*x8832)));
evalcond[4]=((((-1.0)*x8832*x8834))+(((-1.0)*cj1*cj2*x8833))+((cj5*r10*x8831))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8836=IKPowWithIntegerCheck(r02,-1);
if(!x8836.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8836.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8837=IKsin(j4);
IkReal x8838=IKcos(j4);
IkReal x8839=(cj5*x8838);
IkReal x8840=(sj5*x8837);
IkReal x8841=((1.0)*sj5*x8838);
IkReal x8842=((1.0)*cj5*x8837);
evalcond[0]=((-1.0)*r02*x8837);
evalcond[1]=(((r21*x8840))+(((-1.0)*r20*x8842)));
evalcond[2]=((((-1.0)*r10*x8842))+((r11*x8840)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8841))+((r20*x8839)));
evalcond[4]=(((r10*x8839))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r11*x8841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8843=((1.0)*sj0);
IkReal x8844=((1.0)*cj0);
CheckValue<IkReal> x8845 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8844))+(((-1.0)*r12*x8843)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8844))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8843)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8845.valid){
continue;
}
CheckValue<IkReal> x8846=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8845.value)+(((1.5707963267949)*(x8846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8847=IKsin(j4);
IkReal x8848=IKcos(j4);
IkReal x8849=(cj5*r10);
IkReal x8850=(sj1*sj2);
IkReal x8851=(r01*sj5);
IkReal x8852=(cj5*r00);
IkReal x8853=(cj5*r20);
IkReal x8854=((1.0)*x8848);
IkReal x8855=((1.0)*cj1*cj2);
IkReal x8856=((1.0)*x8847);
IkReal x8857=(sj5*x8847);
evalcond[0]=((((-1.0)*r22*x8854))+(((-1.0)*x8853*x8856))+((r21*x8857)));
evalcond[1]=(cj0+(((-1.0)*x8849*x8856))+(((-1.0)*r12*x8854))+((r11*x8857)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8852*x8856))+((x8847*x8851))+(((-1.0)*r02*x8854)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8856))+((cj1*sj2))+((x8848*x8853))+(((-1.0)*r21*sj5*x8854)));
evalcond[4]=((((-1.0)*x8851*x8854))+(((-1.0)*cj0*x8855))+((cj0*x8850))+((x8848*x8852))+(((-1.0)*r02*x8856)));
evalcond[5]=(((sj0*x8850))+((x8848*x8849))+(((-1.0)*r12*x8856))+(((-1.0)*r11*sj5*x8854))+(((-1.0)*sj0*x8855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8858=((1.0)*cj5);
CheckValue<IkReal> x8859 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8858)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8859.valid){
continue;
}
CheckValue<IkReal> x8860=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8858)))),-1);
if(!x8860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8859.value)+(((1.5707963267949)*(x8860.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8861=IKsin(j4);
IkReal x8862=IKcos(j4);
IkReal x8863=(cj5*r10);
IkReal x8864=(sj1*sj2);
IkReal x8865=(r01*sj5);
IkReal x8866=(cj5*r00);
IkReal x8867=(cj5*r20);
IkReal x8868=((1.0)*x8862);
IkReal x8869=((1.0)*cj1*cj2);
IkReal x8870=((1.0)*x8861);
IkReal x8871=(sj5*x8861);
evalcond[0]=((((-1.0)*x8867*x8870))+(((-1.0)*r22*x8868))+((r21*x8871)));
evalcond[1]=(cj0+((r11*x8871))+(((-1.0)*x8863*x8870))+(((-1.0)*r12*x8868)));
evalcond[2]=((((-1.0)*sj0))+((x8861*x8865))+(((-1.0)*x8866*x8870))+(((-1.0)*r02*x8868)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8870))+((cj1*sj2))+(((-1.0)*r21*sj5*x8868))+((x8862*x8867)));
evalcond[4]=((((-1.0)*r02*x8870))+(((-1.0)*x8865*x8868))+((x8862*x8866))+(((-1.0)*cj0*x8869))+((cj0*x8864)));
evalcond[5]=((((-1.0)*r11*sj5*x8868))+((x8862*x8863))+(((-1.0)*sj0*x8869))+(((-1.0)*r12*x8870))+((sj0*x8864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8872=((1.0)*cj5);
CheckValue<IkReal> x8873 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8872)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8873.valid){
continue;
}
CheckValue<IkReal> x8874=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8872))+(((-1.0)*r00*sj5)))),-1);
if(!x8874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8873.value)+(((1.5707963267949)*(x8874.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8875=IKsin(j4);
IkReal x8876=IKcos(j4);
IkReal x8877=(cj5*r10);
IkReal x8878=(sj1*sj2);
IkReal x8879=(r01*sj5);
IkReal x8880=(cj5*r00);
IkReal x8881=(cj5*r20);
IkReal x8882=((1.0)*x8876);
IkReal x8883=((1.0)*cj1*cj2);
IkReal x8884=((1.0)*x8875);
IkReal x8885=(sj5*x8875);
evalcond[0]=((((-1.0)*x8881*x8884))+(((-1.0)*r22*x8882))+((r21*x8885)));
evalcond[1]=(cj0+(((-1.0)*r12*x8882))+(((-1.0)*x8877*x8884))+((r11*x8885)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8882))+(((-1.0)*x8880*x8884))+((x8875*x8879)));
evalcond[3]=((((-1.0)*r22*x8884))+((cj2*sj1))+((cj1*sj2))+((x8876*x8881))+(((-1.0)*r21*sj5*x8882)));
evalcond[4]=((((-1.0)*cj0*x8883))+(((-1.0)*r02*x8884))+((x8876*x8880))+(((-1.0)*x8879*x8882))+((cj0*x8878)));
evalcond[5]=((((-1.0)*r12*x8884))+(((-1.0)*r11*sj5*x8882))+(((-1.0)*sj0*x8883))+((sj0*x8878))+((x8876*x8877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8886=cj1*cj1;
IkReal x8887=cj2*cj2;
IkReal x8888=(sj1*sj2);
IkReal x8889=((156900000.0)*py);
IkReal x8890=(cj1*cj5);
IkReal x8891=((14850585.0)*cj2);
IkReal x8892=(r00*sj5);
IkReal x8893=((16090500.0)*cj1);
IkReal x8894=((4132419.0)*cj5);
IkReal x8895=(r10*sj5);
IkReal x8896=((170000000.0)*cj1);
IkReal x8897=((156900000.0)*px);
IkReal x8898=(cj1*cj2);
IkReal x8899=((14850585.0)*cj5);
CheckValue<IkReal> x8900 = IKatan2WithCheck(IkReal(((((-43660000.0)*px))+(((-1.0)*r01*x8894))+(((-4132419.0)*x8892))+((py*x8896))+((x8889*x8898))+((x8893*x8895))+(((-14850585.0)*x8888*x8895))+(((-1.0)*x8888*x8889))+(((-1.0)*r11*x8888*x8899))+(((16090500.0)*r11*x8890))+((cj1*x8891*x8895))+((r11*x8890*x8891)))),IkReal(((((-1.0)*r01*x8888*x8899))+(((16090500.0)*r01*x8890))+(((43660000.0)*py))+((px*x8896))+(((-14850585.0)*x8888*x8892))+((x8897*x8898))+((r01*x8890*x8891))+((r11*x8894))+((cj1*x8891*x8892))+(((4132419.0)*x8895))+(((-1.0)*x8888*x8897))+((x8892*x8893)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8900.valid){
continue;
}
CheckValue<IkReal> x8901=IKPowWithIntegerCheck(IKsign(((66309514.0)+(((-133365000.0)*cj1*x8888))+(((133365000.0)*cj2*x8886))+(((-61544025.0)*x8887))+(((-123088050.0)*x8888*x8898))+(((10705975.0)*x8886))+(((123088050.0)*x8886*x8887)))),-1);
if(!x8901.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8900.value)+(((1.5707963267949)*(x8901.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8902=IKcos(j0);
IkReal x8903=IKsin(j0);
IkReal x8904=((0.425)*cj1);
IkReal x8905=(cj1*cj2);
IkReal x8906=(sj1*sj2);
IkReal x8907=((0.09465)*cj5);
IkReal x8908=((0.09465)*sj5);
IkReal x8909=((0.39225)*x8903);
IkReal x8910=((0.39225)*x8902);
evalcond[0]=(((x8902*x8904))+(((-1.0)*px))+((x8905*x8910))+(((-0.10915)*x8903))+(((-1.0)*r00*x8908))+(((-1.0)*r01*x8907))+(((-1.0)*x8906*x8910)));
evalcond[1]=(((x8905*x8909))+(((-1.0)*r10*x8908))+((x8903*x8904))+(((0.10915)*x8902))+(((-1.0)*x8906*x8909))+(((-1.0)*py))+(((-1.0)*r11*x8907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8911=((1.0)*cj5);
IkReal x8912=((((-1.0)*r01*x8911))+(((-1.0)*r00*sj5)));
j4eval[0]=x8912;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8911)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8912);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8913=((1.0)*cj5);
IkReal x8914=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8913)));
j4eval[0]=x8914;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x8913))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x8914);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8915=((1.0)*sj0);
IkReal x8916=((1.0)*cj0);
IkReal x8917=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8917;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x8915))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8916)))))+(IKabs(((((-1.0)*r02*x8916))+(((-1.0)*r12*x8915))))));
j4eval[2]=IKsign(x8917);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8918=((-1.0)*r20);
IkReal x8920 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8920)==0){
continue;
}
IkReal x8919=pow(x8920,-0.5);
CheckValue<IkReal> x8921 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8918),IKFAST_ATAN2_MAGTHRESH);
if(!x8921.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8921.value));
IkReal gconst1=(r21*x8919);
IkReal gconst2=(x8918*x8919);
CheckValue<IkReal> x8922 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8922.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8922.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8923=((-1.0)*r20);
IkReal x8924=x8919;
CheckValue<IkReal> x8926 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8923),IKFAST_ATAN2_MAGTHRESH);
if(!x8926.valid){
continue;
}
IkReal x8925=((-1.0)*(x8926.value));
sj5=gconst1;
cj5=gconst2;
j5=x8925;
IkReal gconst0=x8925;
IkReal gconst1=(r21*x8924);
IkReal gconst2=(x8923*x8924);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8927=((-1.0)*r20);
IkReal x8928=x8919;
CheckValue<IkReal> x8930 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8927),IKFAST_ATAN2_MAGTHRESH);
if(!x8930.valid){
continue;
}
IkReal x8929=((-1.0)*(x8930.value));
sj5=gconst1;
cj5=gconst2;
j5=x8929;
IkReal gconst0=x8929;
IkReal gconst1=(r21*x8928);
IkReal gconst2=(x8927*x8928);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8931=((-1.0)*r20);
IkReal x8932=x8919;
CheckValue<IkReal> x8934 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8931),IKFAST_ATAN2_MAGTHRESH);
if(!x8934.valid){
continue;
}
IkReal x8933=((-1.0)*(x8934.value));
sj5=gconst1;
cj5=gconst2;
j5=x8933;
IkReal gconst0=x8933;
IkReal gconst1=(r21*x8932);
IkReal gconst2=(x8931*x8932);
IkReal x8935=r22*r22;
CheckValue<IkReal> x8939=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8935))),-1);
if(!x8939.valid){
continue;
}
IkReal x8936=x8939.value;
IkReal x8937=(sj3*x8936);
IkReal x8938=(((x8937*(r21*r21*r21*r21)))+((x8937*(r20*r20*r20*r20)))+((sj3*x8935))+(((2.0)*x8937*(r20*r20)*(r21*r21))));
j4eval[0]=x8938;
j4eval[1]=IKsign(x8938);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8940=((-1.0)*r20);
IkReal x8941=x8919;
CheckValue<IkReal> x8943 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8940),IKFAST_ATAN2_MAGTHRESH);
if(!x8943.valid){
continue;
}
IkReal x8942=((-1.0)*(x8943.value));
sj5=gconst1;
cj5=gconst2;
j5=x8942;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8942;
IkReal gconst1=(r21*x8941);
IkReal gconst2=(x8940*x8941);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8944=((-1.0)*r20);
IkReal x8945=x8919;
CheckValue<IkReal> x8947 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8944),IKFAST_ATAN2_MAGTHRESH);
if(!x8947.valid){
continue;
}
IkReal x8946=((-1.0)*(x8947.value));
sj5=gconst1;
cj5=gconst2;
j5=x8946;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8946;
IkReal gconst1=(r21*x8945);
IkReal gconst2=(x8944*x8945);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8948=((-1.0)*r20);
IkReal x8949=x8919;
CheckValue<IkReal> x8951 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8948),IKFAST_ATAN2_MAGTHRESH);
if(!x8951.valid){
continue;
}
IkReal x8950=((-1.0)*(x8951.value));
sj5=gconst1;
cj5=gconst2;
j5=x8950;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8950;
IkReal gconst1=(r21*x8949);
IkReal gconst2=(x8948*x8949);
IkReal x8952=((1.0)*(r22*r22));
CheckValue<IkReal> x8956=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8952))),-1);
if(!x8956.valid){
continue;
}
IkReal x8953=x8956.value;
IkReal x8954=((1.0)*x8953);
IkReal x8955=((((-1.0)*x8954*(r20*r20*r20*r20)))+(((-1.0)*x8954*(r21*r21*r21*r21)))+(((-2.0)*x8953*(r20*r20)*(r21*r21)))+(((-1.0)*x8952)));
j4eval[0]=x8955;
j4eval[1]=IKsign(x8955);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8957=((-1.0)*r20);
IkReal x8958=x8919;
CheckValue<IkReal> x8960 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8957),IKFAST_ATAN2_MAGTHRESH);
if(!x8960.valid){
continue;
}
IkReal x8959=((-1.0)*(x8960.value));
sj5=gconst1;
cj5=gconst2;
j5=x8959;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8959;
IkReal gconst1=(r21*x8958);
IkReal gconst2=(x8957*x8958);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8961=((-1.0)*r20);
IkReal x8962=x8919;
CheckValue<IkReal> x8964 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8961),IKFAST_ATAN2_MAGTHRESH);
if(!x8964.valid){
continue;
}
IkReal x8963=((-1.0)*(x8964.value));
sj5=gconst1;
cj5=gconst2;
j5=x8963;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8963;
IkReal gconst1=(r21*x8962);
IkReal gconst2=(x8961*x8962);
IkReal x8965=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8969=IKPowWithIntegerCheck(x8965,-1);
if(!x8969.valid){
continue;
}
IkReal x8966=x8969.value;
IkReal x8967=((1.0)*x8966);
IkReal x8968=((((-1.0)*x8967*(r10*r10)*(r20*r20)))+(((-1.0)*x8967*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8966)));
j4eval[0]=x8968;
j4eval[1]=r12;
j4eval[2]=x8965;
j4eval[3]=IKsign(x8968);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8970=((-1.0)*r20);
IkReal x8971=x8919;
CheckValue<IkReal> x8973 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8970),IKFAST_ATAN2_MAGTHRESH);
if(!x8973.valid){
continue;
}
IkReal x8972=((-1.0)*(x8973.value));
sj5=gconst1;
cj5=gconst2;
j5=x8972;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8972;
IkReal gconst1=(r21*x8971);
IkReal gconst2=(x8970*x8971);
IkReal x8974=r22*r22;
IkReal x8975=(cj1*r12*sj2);
IkReal x8976=(cj2*r12*sj1);
CheckValue<IkReal> x8980=IKPowWithIntegerCheck(((-1.0)+x8974),-1);
if(!x8980.valid){
continue;
}
IkReal x8977=x8980.value;
if((((1.0)+(((-1.0)*x8974)))) < -0.00001)
continue;
IkReal x8978=IKsqrt(((1.0)+(((-1.0)*x8974))));
IkReal x8979=(r22*x8977*x8978);
j4eval[0]=((IKabs(((((-1.0)*x8975))+(((-1.0)*x8976)))))+(IKabs((((x8976*x8979))+((x8975*x8979))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8981=(cj1*sj2);
IkReal x8982=(cj2*sj1);
IkReal x8983=((1.0)*r12);
IkReal x8984=(gconst1*r11);
IkReal x8985=((1.0)*gconst2*r10);
CheckValue<IkReal> x8986=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8986.valid){
continue;
}
CheckValue<IkReal> x8987 = IKatan2WithCheck(IkReal(((((-1.0)*x8982*x8985))+(((-1.0)*x8981*x8985))+((x8981*x8984))+((x8982*x8984)))),IkReal(((((-1.0)*x8982*x8983))+(((-1.0)*x8981*x8983)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8986.value)))+(x8987.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8988=IKcos(j4);
IkReal x8989=IKsin(j4);
IkReal x8990=((1.0)*x8988);
IkReal x8991=(gconst1*x8988);
IkReal x8992=(gconst1*x8989);
IkReal x8993=((1.0)*gconst2*x8989);
evalcond[0]=(((r11*x8991))+((r12*x8989))+(((-1.0)*gconst2*r10*x8990)));
evalcond[1]=(((r21*x8992))+(((-1.0)*r22*x8990))+(((-1.0)*r20*x8993)));
evalcond[2]=(((r01*x8992))+(((-1.0)*r02*x8990))+(((-1.0)*r00*x8993)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8990))+((r11*x8992))+(((-1.0)*r10*x8993)));
evalcond[4]=(((cj2*sj1))+((r22*x8989))+((r21*x8991))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8990)));
evalcond[5]=(((r02*x8989))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8991))+(((-1.0)*gconst2*r00*x8990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8994=(gconst2*r10);
IkReal x8995=(gconst1*r11);
CheckValue<IkReal> x8996=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8995*x8995)))+(((-1.0)*(x8994*x8994)))+(((-1.0)*(r12*r12)))+(((2.0)*x8994*x8995)))),-1);
if(!x8996.valid){
continue;
}
CheckValue<IkReal> x8997 = IKatan2WithCheck(IkReal((x8995+(((-1.0)*x8994)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8996.value)))+(x8997.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8998=IKcos(j4);
IkReal x8999=IKsin(j4);
IkReal x9000=((1.0)*x8998);
IkReal x9001=(gconst1*x8998);
IkReal x9002=(gconst1*x8999);
IkReal x9003=((1.0)*gconst2*x8999);
evalcond[0]=((((-1.0)*gconst2*r10*x9000))+((r12*x8999))+((r11*x9001)));
evalcond[1]=((((-1.0)*r22*x9000))+((r21*x9002))+(((-1.0)*r20*x9003)));
evalcond[2]=((((-1.0)*r02*x9000))+(((-1.0)*r00*x9003))+((r01*x9002)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9000))+(((-1.0)*r10*x9003))+((r11*x9002)));
evalcond[4]=(((cj2*sj1))+((r21*x9001))+((cj1*sj2))+((r22*x8999))+(((-1.0)*gconst2*r20*x9000)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9000))+((r02*x8999))+((r01*x9001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9004=((1.0)*gconst2);
CheckValue<IkReal> x9005 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9004)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9005.valid){
continue;
}
CheckValue<IkReal> x9006=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9004)))),-1);
if(!x9006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9005.value)+(((1.5707963267949)*(x9006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9007=IKcos(j4);
IkReal x9008=IKsin(j4);
IkReal x9009=((1.0)*x9007);
IkReal x9010=(gconst1*x9007);
IkReal x9011=(gconst1*x9008);
IkReal x9012=((1.0)*gconst2*x9008);
evalcond[0]=((((-1.0)*gconst2*r10*x9009))+((r12*x9008))+((r11*x9010)));
evalcond[1]=((((-1.0)*r22*x9009))+(((-1.0)*r20*x9012))+((r21*x9011)));
evalcond[2]=((((-1.0)*r02*x9009))+(((-1.0)*r00*x9012))+((r01*x9011)));
evalcond[3]=((1.0)+(((-1.0)*r10*x9012))+(((-1.0)*r12*x9009))+((r11*x9011)));
evalcond[4]=(((cj2*sj1))+((r22*x9008))+((cj1*sj2))+((r21*x9010))+(((-1.0)*gconst2*r20*x9009)));
evalcond[5]=(((r02*x9008))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9009))+((r01*x9010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9013=((-1.0)*r20);
IkReal x9014=x8919;
CheckValue<IkReal> x9016 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9013),IKFAST_ATAN2_MAGTHRESH);
if(!x9016.valid){
continue;
}
IkReal x9015=((-1.0)*(x9016.value));
sj5=gconst1;
cj5=gconst2;
j5=x9015;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9015;
IkReal gconst1=(r21*x9014);
IkReal gconst2=(x9013*x9014);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9017=((-1.0)*r20);
IkReal x9018=x8919;
CheckValue<IkReal> x9020 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9017),IKFAST_ATAN2_MAGTHRESH);
if(!x9020.valid){
continue;
}
IkReal x9019=((-1.0)*(x9020.value));
sj5=gconst1;
cj5=gconst2;
j5=x9019;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9019;
IkReal gconst1=(r21*x9018);
IkReal gconst2=(x9017*x9018);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9021=((-1.0)*r20);
IkReal x9022=x8919;
CheckValue<IkReal> x9024 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9021),IKFAST_ATAN2_MAGTHRESH);
if(!x9024.valid){
continue;
}
IkReal x9023=((-1.0)*(x9024.value));
sj5=gconst1;
cj5=gconst2;
j5=x9023;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9023;
IkReal gconst1=(r21*x9022);
IkReal gconst2=(x9021*x9022);
IkReal x9025=r22*r22;
IkReal x9026=(cj1*r12*sj2);
IkReal x9027=(cj2*r12*sj1);
CheckValue<IkReal> x9031=IKPowWithIntegerCheck(((-1.0)+x9025),-1);
if(!x9031.valid){
continue;
}
IkReal x9028=x9031.value;
if((((1.0)+(((-1.0)*x9025)))) < -0.00001)
continue;
IkReal x9029=IKsqrt(((1.0)+(((-1.0)*x9025))));
IkReal x9030=(r22*x9028*x9029);
j4eval[0]=((IKabs((((x9027*x9030))+((x9026*x9030)))))+(IKabs(((((-1.0)*x9027))+(((-1.0)*x9026))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9032=(cj1*sj2);
IkReal x9033=(cj2*sj1);
IkReal x9034=((1.0)*r12);
IkReal x9035=(gconst1*r11);
IkReal x9036=((1.0)*gconst2*r10);
CheckValue<IkReal> x9037=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9037.valid){
continue;
}
CheckValue<IkReal> x9038 = IKatan2WithCheck(IkReal(((((-1.0)*x9033*x9036))+(((-1.0)*x9032*x9036))+((x9033*x9035))+((x9032*x9035)))),IkReal(((((-1.0)*x9033*x9034))+(((-1.0)*x9032*x9034)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9037.value)))+(x9038.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9039=IKcos(j4);
IkReal x9040=IKsin(j4);
IkReal x9041=((1.0)*x9039);
IkReal x9042=(gconst1*x9039);
IkReal x9043=(gconst1*x9040);
IkReal x9044=((1.0)*gconst2*x9040);
evalcond[0]=(((r12*x9040))+((r11*x9042))+(((-1.0)*gconst2*r10*x9041)));
evalcond[1]=((((-1.0)*r22*x9041))+(((-1.0)*r20*x9044))+((r21*x9043)));
evalcond[2]=(((r01*x9043))+(((-1.0)*r00*x9044))+(((-1.0)*r02*x9041)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9044))+(((-1.0)*r12*x9041))+((r11*x9043)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9040))+((r21*x9042))+(((-1.0)*gconst2*r20*x9041)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9042))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9041))+((r02*x9040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9045=(gconst1*r11);
IkReal x9046=(gconst2*r10);
CheckValue<IkReal> x9047 = IKatan2WithCheck(IkReal(((((-1.0)*x9046))+x9045)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9047.valid){
continue;
}
CheckValue<IkReal> x9048=IKPowWithIntegerCheck(IKsign(((x9045*x9045)+(r12*r12)+(x9046*x9046)+(((-2.0)*x9045*x9046)))),-1);
if(!x9048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9047.value)+(((1.5707963267949)*(x9048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9049=IKcos(j4);
IkReal x9050=IKsin(j4);
IkReal x9051=((1.0)*x9049);
IkReal x9052=(gconst1*x9049);
IkReal x9053=(gconst1*x9050);
IkReal x9054=((1.0)*gconst2*x9050);
evalcond[0]=((((-1.0)*gconst2*r10*x9051))+((r12*x9050))+((r11*x9052)));
evalcond[1]=((((-1.0)*r22*x9051))+(((-1.0)*r20*x9054))+((r21*x9053)));
evalcond[2]=((((-1.0)*r02*x9051))+(((-1.0)*r00*x9054))+((r01*x9053)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9054))+(((-1.0)*r12*x9051))+((r11*x9053)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9050))+(((-1.0)*gconst2*r20*x9051))+((r21*x9052)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9052))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9051))+((r02*x9050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9055 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9055.valid){
continue;
}
CheckValue<IkReal> x9056=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9055.value)+(((1.5707963267949)*(x9056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9057=IKcos(j4);
IkReal x9058=IKsin(j4);
IkReal x9059=((1.0)*x9057);
IkReal x9060=(gconst1*x9057);
IkReal x9061=(gconst1*x9058);
IkReal x9062=((1.0)*gconst2*x9058);
evalcond[0]=(((r11*x9060))+(((-1.0)*gconst2*r10*x9059))+((r12*x9058)));
evalcond[1]=((((-1.0)*r20*x9062))+(((-1.0)*r22*x9059))+((r21*x9061)));
evalcond[2]=((((-1.0)*r02*x9059))+((r01*x9061))+(((-1.0)*r00*x9062)));
evalcond[3]=((-1.0)+((r11*x9061))+(((-1.0)*r10*x9062))+(((-1.0)*r12*x9059)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x9060))+((r22*x9058))+(((-1.0)*gconst2*r20*x9059)));
evalcond[5]=(((r01*x9060))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9059))+((r02*x9058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9063=((-1.0)*r20);
IkReal x9064=x8919;
CheckValue<IkReal> x9066 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9063),IKFAST_ATAN2_MAGTHRESH);
if(!x9066.valid){
continue;
}
IkReal x9065=((-1.0)*(x9066.value));
sj5=gconst1;
cj5=gconst2;
j5=x9065;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9065;
IkReal gconst1=(r21*x9064);
IkReal gconst2=(x9063*x9064);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9067=((-1.0)*r20);
IkReal x9068=x8919;
CheckValue<IkReal> x9070 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9067),IKFAST_ATAN2_MAGTHRESH);
if(!x9070.valid){
continue;
}
IkReal x9069=((-1.0)*(x9070.value));
sj5=gconst1;
cj5=gconst2;
j5=x9069;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9069;
IkReal gconst1=(r21*x9068);
IkReal gconst2=(x9067*x9068);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9071=((-1.0)*r20);
IkReal x9072=x8919;
CheckValue<IkReal> x9074 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9071),IKFAST_ATAN2_MAGTHRESH);
if(!x9074.valid){
continue;
}
IkReal x9073=((-1.0)*(x9074.value));
sj5=gconst1;
cj5=gconst2;
j5=x9073;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9073;
IkReal gconst1=(r21*x9072);
IkReal gconst2=(x9071*x9072);
IkReal x9075=r22*r22;
IkReal x9076=((1.0)*r02);
IkReal x9077=(cj1*sj2);
IkReal x9078=(cj2*sj1);
CheckValue<IkReal> x9082=IKPowWithIntegerCheck(((-1.0)+x9075),-1);
if(!x9082.valid){
continue;
}
IkReal x9079=x9082.value;
if((((1.0)+(((-1.0)*x9075)))) < -0.00001)
continue;
IkReal x9080=IKsqrt(((1.0)+(((-1.0)*x9075))));
IkReal x9081=(r02*r22*x9079*x9080);
j4eval[0]=((IKabs(((((-1.0)*x9076*x9077))+(((-1.0)*x9076*x9078)))))+(IKabs((((x9078*x9081))+((x9077*x9081))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9083=(cj1*sj2);
IkReal x9084=(gconst1*r01);
IkReal x9085=((1.0)*r02);
IkReal x9086=(cj2*sj1);
IkReal x9087=((1.0)*gconst2*r00);
CheckValue<IkReal> x9088 = IKatan2WithCheck(IkReal((((x9083*x9084))+(((-1.0)*x9086*x9087))+(((-1.0)*x9083*x9087))+((x9084*x9086)))),IkReal(((((-1.0)*x9085*x9086))+(((-1.0)*x9083*x9085)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9088.valid){
continue;
}
CheckValue<IkReal> x9089=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9088.value)+(((1.5707963267949)*(x9089.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9090=IKcos(j4);
IkReal x9091=IKsin(j4);
IkReal x9092=((1.0)*x9090);
IkReal x9093=(gconst1*x9090);
IkReal x9094=(gconst1*x9091);
IkReal x9095=((1.0)*gconst2*x9091);
evalcond[0]=((((-1.0)*gconst2*r00*x9092))+((r01*x9093))+((r02*x9091)));
evalcond[1]=((((-1.0)*r20*x9095))+((r21*x9094))+(((-1.0)*r22*x9092)));
evalcond[2]=(((r11*x9094))+(((-1.0)*r10*x9095))+(((-1.0)*r12*x9092)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9095))+((r01*x9094))+(((-1.0)*r02*x9092)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9092))+((cj1*sj2))+((r21*x9093))+((r22*x9091)));
evalcond[5]=(((r11*x9093))+((r12*x9091))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9096=(gconst1*r01);
IkReal x9097=(gconst2*r00);
CheckValue<IkReal> x9098 = IKatan2WithCheck(IkReal((x9096+(((-1.0)*x9097)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9098.valid){
continue;
}
CheckValue<IkReal> x9099=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9096*x9097))+(x9096*x9096)+(x9097*x9097)+(r02*r02))),-1);
if(!x9099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9098.value)+(((1.5707963267949)*(x9099.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9100=IKcos(j4);
IkReal x9101=IKsin(j4);
IkReal x9102=((1.0)*x9100);
IkReal x9103=(gconst1*x9100);
IkReal x9104=(gconst1*x9101);
IkReal x9105=((1.0)*gconst2*x9101);
evalcond[0]=(((r02*x9101))+(((-1.0)*gconst2*r00*x9102))+((r01*x9103)));
evalcond[1]=((((-1.0)*r22*x9102))+((r21*x9104))+(((-1.0)*r20*x9105)));
evalcond[2]=((((-1.0)*r10*x9105))+(((-1.0)*r12*x9102))+((r11*x9104)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9102))+(((-1.0)*r00*x9105))+((r01*x9104)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9101))+((r21*x9103))+(((-1.0)*gconst2*r20*x9102)));
evalcond[5]=((((-1.0)*gconst2*r10*x9102))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9101))+((r11*x9103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9106=((1.0)*gconst2);
CheckValue<IkReal> x9107 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9106))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9107.valid){
continue;
}
CheckValue<IkReal> x9108=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9106)))),-1);
if(!x9108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9107.value)+(((1.5707963267949)*(x9108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9109=IKcos(j4);
IkReal x9110=IKsin(j4);
IkReal x9111=((1.0)*x9109);
IkReal x9112=(gconst1*x9109);
IkReal x9113=(gconst1*x9110);
IkReal x9114=((1.0)*gconst2*x9110);
evalcond[0]=((((-1.0)*gconst2*r00*x9111))+((r01*x9112))+((r02*x9110)));
evalcond[1]=(((r21*x9113))+(((-1.0)*r22*x9111))+(((-1.0)*r20*x9114)));
evalcond[2]=((((-1.0)*r10*x9114))+((r11*x9113))+(((-1.0)*r12*x9111)));
evalcond[3]=((-1.0)+((r01*x9113))+(((-1.0)*r02*x9111))+(((-1.0)*r00*x9114)));
evalcond[4]=(((r21*x9112))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9111))+((r22*x9110)));
evalcond[5]=(((r12*x9110))+((r11*x9112))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9115=((-1.0)*r20);
IkReal x9116=x8919;
CheckValue<IkReal> x9118 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9115),IKFAST_ATAN2_MAGTHRESH);
if(!x9118.valid){
continue;
}
IkReal x9117=((-1.0)*(x9118.value));
sj5=gconst1;
cj5=gconst2;
j5=x9117;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9117;
IkReal gconst1=(r21*x9116);
IkReal gconst2=(x9115*x9116);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9119=((-1.0)*r20);
IkReal x9120=x8919;
CheckValue<IkReal> x9122 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9119),IKFAST_ATAN2_MAGTHRESH);
if(!x9122.valid){
continue;
}
IkReal x9121=((-1.0)*(x9122.value));
sj5=gconst1;
cj5=gconst2;
j5=x9121;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9121;
IkReal gconst1=(r21*x9120);
IkReal gconst2=(x9119*x9120);
IkReal x9123=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9127=IKPowWithIntegerCheck(x9123,-1);
if(!x9127.valid){
continue;
}
IkReal x9124=x9127.value;
IkReal x9125=((1.0)*x9124);
IkReal x9126=((((-2.0)*r00*r01*r20*r21*x9124))+(((-1.0)*x9125*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x9125*(r01*r01)*(r21*r21))));
j4eval[0]=x9126;
j4eval[1]=IKsign(x9126);
j4eval[2]=r02;
j4eval[3]=x9123;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9128=((-1.0)*r20);
IkReal x9129=x8919;
CheckValue<IkReal> x9131 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9128),IKFAST_ATAN2_MAGTHRESH);
if(!x9131.valid){
continue;
}
IkReal x9130=((-1.0)*(x9131.value));
sj5=gconst1;
cj5=gconst2;
j5=x9130;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9130;
IkReal gconst1=(r21*x9129);
IkReal gconst2=(x9128*x9129);
IkReal x9132=r22*r22;
IkReal x9133=((1.0)*r02);
IkReal x9134=(cj1*sj2);
IkReal x9135=(cj2*sj1);
CheckValue<IkReal> x9139=IKPowWithIntegerCheck(((-1.0)+x9132),-1);
if(!x9139.valid){
continue;
}
IkReal x9136=x9139.value;
if((((1.0)+(((-1.0)*x9132)))) < -0.00001)
continue;
IkReal x9137=IKsqrt(((1.0)+(((-1.0)*x9132))));
IkReal x9138=(r02*r22*x9136*x9137);
j4eval[0]=((IKabs(((((-1.0)*x9133*x9135))+(((-1.0)*x9133*x9134)))))+(IKabs((((x9134*x9138))+((x9135*x9138))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9140=(cj1*sj2);
IkReal x9141=(gconst1*r01);
IkReal x9142=((1.0)*r02);
IkReal x9143=(cj2*sj1);
IkReal x9144=((1.0)*gconst2*r00);
CheckValue<IkReal> x9145 = IKatan2WithCheck(IkReal(((((-1.0)*x9140*x9144))+(((-1.0)*x9143*x9144))+((x9140*x9141))+((x9141*x9143)))),IkReal(((((-1.0)*x9142*x9143))+(((-1.0)*x9140*x9142)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9145.valid){
continue;
}
CheckValue<IkReal> x9146=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9145.value)+(((1.5707963267949)*(x9146.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9147=IKcos(j4);
IkReal x9148=IKsin(j4);
IkReal x9149=((1.0)*x9147);
IkReal x9150=(gconst1*x9147);
IkReal x9151=(gconst1*x9148);
IkReal x9152=((1.0)*gconst2*x9148);
evalcond[0]=((((-1.0)*gconst2*r00*x9149))+((r01*x9150))+((r02*x9148)));
evalcond[1]=((((-1.0)*r20*x9152))+(((-1.0)*r22*x9149))+((r21*x9151)));
evalcond[2]=(((r11*x9151))+(((-1.0)*r10*x9152))+(((-1.0)*r12*x9149)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9149))+((r01*x9151))+(((-1.0)*r00*x9152)));
evalcond[4]=((((-1.0)*gconst2*r20*x9149))+((cj2*sj1))+((cj1*sj2))+((r21*x9150))+((r22*x9148)));
evalcond[5]=(((r11*x9150))+(((-1.0)*gconst2*r10*x9149))+(((-1.0)*sj1*sj2))+((r12*x9148))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9153=(gconst1*r01);
IkReal x9154=(gconst2*r00);
CheckValue<IkReal> x9155 = IKatan2WithCheck(IkReal((x9153+(((-1.0)*x9154)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9155.valid){
continue;
}
CheckValue<IkReal> x9156=IKPowWithIntegerCheck(IKsign(((((2.0)*x9153*x9154))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9153*x9153)))+(((-1.0)*(x9154*x9154))))),-1);
if(!x9156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9155.value)+(((1.5707963267949)*(x9156.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9157=IKcos(j4);
IkReal x9158=IKsin(j4);
IkReal x9159=((1.0)*x9157);
IkReal x9160=(gconst1*x9157);
IkReal x9161=(gconst1*x9158);
IkReal x9162=((1.0)*gconst2*x9158);
evalcond[0]=(((r01*x9160))+((r02*x9158))+(((-1.0)*gconst2*r00*x9159)));
evalcond[1]=((((-1.0)*r22*x9159))+((r21*x9161))+(((-1.0)*r20*x9162)));
evalcond[2]=((((-1.0)*r12*x9159))+(((-1.0)*r10*x9162))+((r11*x9161)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9159))+((r01*x9161))+(((-1.0)*r00*x9162)));
evalcond[4]=(((cj2*sj1))+((r22*x9158))+(((-1.0)*gconst2*r20*x9159))+((cj1*sj2))+((r21*x9160)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9159))+((r11*x9160))+((cj1*cj2))+((r12*x9158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9163 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9163.valid){
continue;
}
CheckValue<IkReal> x9164=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9163.value)+(((1.5707963267949)*(x9164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9165=IKcos(j4);
IkReal x9166=IKsin(j4);
IkReal x9167=((1.0)*x9165);
IkReal x9168=(gconst1*x9165);
IkReal x9169=(gconst1*x9166);
IkReal x9170=((1.0)*gconst2*x9166);
evalcond[0]=(((r01*x9168))+((r02*x9166))+(((-1.0)*gconst2*r00*x9167)));
evalcond[1]=((((-1.0)*r22*x9167))+((r21*x9169))+(((-1.0)*r20*x9170)));
evalcond[2]=((((-1.0)*r12*x9167))+(((-1.0)*r10*x9170))+((r11*x9169)));
evalcond[3]=((1.0)+((r01*x9169))+(((-1.0)*r02*x9167))+(((-1.0)*r00*x9170)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9166))+((r21*x9168))+(((-1.0)*gconst2*r20*x9167)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9167))+((r11*x9168))+((r12*x9166))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9171=((-1.0)*r20);
IkReal x9172=((-1.0)*px);
CheckValue<IkReal> x9174 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9171),IKFAST_ATAN2_MAGTHRESH);
if(!x9174.valid){
continue;
}
IkReal x9173=((-1.0)*(x9174.value));
sj5=gconst1;
cj5=gconst2;
j5=x9173;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9172);
rxp1_1=(px*r21);
rxp1_2=(r11*x9172);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9173;
IkReal gconst1=r21;
IkReal gconst2=x9171;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9175=((-1.0)*r20);
IkReal x9176=((-1.0)*px);
CheckValue<IkReal> x9178 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9175),IKFAST_ATAN2_MAGTHRESH);
if(!x9178.valid){
continue;
}
IkReal x9177=((-1.0)*(x9178.value));
sj5=gconst1;
cj5=gconst2;
j5=x9177;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9176);
rxp1_1=(px*r21);
rxp1_2=(r11*x9176);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9177;
IkReal gconst1=r21;
IkReal gconst2=x9175;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9179=((-1.0)*r20);
IkReal x9180=((-1.0)*px);
CheckValue<IkReal> x9182 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9179),IKFAST_ATAN2_MAGTHRESH);
if(!x9182.valid){
continue;
}
IkReal x9181=((-1.0)*(x9182.value));
sj5=gconst1;
cj5=gconst2;
j5=x9181;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9180);
rxp1_1=(px*r21);
rxp1_2=(r11*x9180);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9181;
IkReal gconst1=r21;
IkReal gconst2=x9179;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9185=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9185.valid){
continue;
}
IkReal x9183=x9185.value;
IkReal x9184=(sj0*x9183);
cj4array[0]=(((cj1*cj2*x9184))+(((-1.0)*sj1*sj2*x9184)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9186=IKsin(j4);
IkReal x9187=IKcos(j4);
IkReal x9188=((1.0)*gconst2);
IkReal x9189=(gconst1*r21);
evalcond[0]=(r02*x9186);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9187)));
evalcond[2]=((((-1.0)*r20*x9186*x9188))+((x9186*x9189)));
evalcond[3]=(((gconst1*r11*x9186))+(((-1.0)*r10*x9186*x9188)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x9187*x9188))+((x9187*x9189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9192=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9192.valid){
continue;
}
IkReal x9190=x9192.value;
IkReal x9191=((1.0)*x9190);
cj4array[0]=((((-1.0)*cj2*sj1*x9191))+(((-1.0)*cj1*sj2*x9191)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9193=IKsin(j4);
IkReal x9194=IKcos(j4);
IkReal x9195=((1.0)*sj0);
IkReal x9196=(gconst1*x9193);
IkReal x9197=((1.0)*x9194);
IkReal x9198=((1.0)*gconst2*x9193);
evalcond[0]=(r02*x9193);
evalcond[1]=((((-1.0)*r02*x9197))+(((-1.0)*x9195)));
evalcond[2]=((((-1.0)*r20*x9198))+((r21*x9196)));
evalcond[3]=((((-1.0)*r10*x9198))+((r11*x9196)));
evalcond[4]=((((-1.0)*gconst2*r10*x9197))+((gconst1*r11*x9194))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x9195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9199=IKPowWithIntegerCheck(r02,-1);
if(!x9199.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9199.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9200=IKsin(j4);
IkReal x9201=IKcos(j4);
IkReal x9202=(gconst1*r21);
IkReal x9203=(gconst1*r11);
IkReal x9204=((1.0)*gconst2*r10);
IkReal x9205=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9200);
evalcond[1]=(((x9200*x9202))+(((-1.0)*x9200*x9205)));
evalcond[2]=(((x9200*x9203))+(((-1.0)*x9200*x9204)));
evalcond[3]=((((-1.0)*x9201*x9205))+((cj2*sj1))+((x9201*x9202))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x9201*x9204))+((x9201*x9203))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9206=(cj2*sj1);
IkReal x9207=(cj1*sj2);
IkReal x9208=(gconst1*r21);
IkReal x9209=((1.0)*gconst2*r20);
CheckValue<IkReal> x9210 = IKatan2WithCheck(IkReal((((r22*x9207))+((r22*x9206)))),IkReal((((x9207*x9208))+(((-1.0)*x9207*x9209))+((x9206*x9208))+(((-1.0)*x9206*x9209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9210.valid){
continue;
}
CheckValue<IkReal> x9211=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r20*x9209))+(((2.0)*gconst2*r20*x9208))+(((-1.0)*(x9208*x9208)))+(((-1.0)*(r22*r22))))),-1);
if(!x9211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9210.value)+(((1.5707963267949)*(x9211.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9212=IKsin(j4);
IkReal x9213=IKcos(j4);
IkReal x9214=(sj1*sj2);
IkReal x9215=(gconst2*r10);
IkReal x9216=(gconst2*r00);
IkReal x9217=(gconst2*r20);
IkReal x9218=((1.0)*x9213);
IkReal x9219=(gconst1*x9213);
IkReal x9220=((1.0)*cj1*cj2);
IkReal x9221=(gconst1*x9212);
IkReal x9222=((1.0)*x9212);
evalcond[0]=((((-1.0)*x9217*x9222))+((r21*x9221))+(((-1.0)*r22*x9218)));
evalcond[1]=(cj0+((r11*x9221))+(((-1.0)*r12*x9218))+(((-1.0)*x9215*x9222)));
evalcond[2]=(((r01*x9221))+(((-1.0)*r02*x9218))+(((-1.0)*sj0))+(((-1.0)*x9216*x9222)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9217*x9218))+((r21*x9219))+((cj1*sj2))+((r22*x9212)));
evalcond[4]=((((-1.0)*x9216*x9218))+(((-1.0)*cj0*x9220))+((r02*x9212))+((cj0*x9214))+((r01*x9219)));
evalcond[5]=(((r12*x9212))+((sj0*x9214))+((r11*x9219))+(((-1.0)*sj0*x9220))+(((-1.0)*x9215*x9218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9223=((1.0)*gconst2);
CheckValue<IkReal> x9224=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9223)))),-1);
if(!x9224.valid){
continue;
}
CheckValue<IkReal> x9225 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9223))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9224.value)))+(x9225.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9226=IKsin(j4);
IkReal x9227=IKcos(j4);
IkReal x9228=(sj1*sj2);
IkReal x9229=(gconst2*r10);
IkReal x9230=(gconst2*r00);
IkReal x9231=(gconst2*r20);
IkReal x9232=((1.0)*x9227);
IkReal x9233=(gconst1*x9227);
IkReal x9234=((1.0)*cj1*cj2);
IkReal x9235=(gconst1*x9226);
IkReal x9236=((1.0)*x9226);
evalcond[0]=(((r21*x9235))+(((-1.0)*x9231*x9236))+(((-1.0)*r22*x9232)));
evalcond[1]=(cj0+(((-1.0)*r12*x9232))+((r11*x9235))+(((-1.0)*x9229*x9236)));
evalcond[2]=((((-1.0)*sj0))+((r01*x9235))+(((-1.0)*r02*x9232))+(((-1.0)*x9230*x9236)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9233))+((r22*x9226))+(((-1.0)*x9231*x9232)));
evalcond[4]=((((-1.0)*cj0*x9234))+((r02*x9226))+((cj0*x9228))+((r01*x9233))+(((-1.0)*x9230*x9232)));
evalcond[5]=((((-1.0)*sj0*x9234))+((r12*x9226))+((sj0*x9228))+((r11*x9233))+(((-1.0)*x9229*x9232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9237=((1.0)*gconst2);
CheckValue<IkReal> x9238=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9237)))),-1);
if(!x9238.valid){
continue;
}
CheckValue<IkReal> x9239 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9237))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9238.value)))+(x9239.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9240=IKsin(j4);
IkReal x9241=IKcos(j4);
IkReal x9242=(sj1*sj2);
IkReal x9243=(gconst2*r10);
IkReal x9244=(gconst2*r00);
IkReal x9245=(gconst2*r20);
IkReal x9246=((1.0)*x9241);
IkReal x9247=(gconst1*x9241);
IkReal x9248=((1.0)*cj1*cj2);
IkReal x9249=(gconst1*x9240);
IkReal x9250=((1.0)*x9240);
evalcond[0]=((((-1.0)*r22*x9246))+((r21*x9249))+(((-1.0)*x9245*x9250)));
evalcond[1]=(cj0+(((-1.0)*r12*x9246))+((r11*x9249))+(((-1.0)*x9243*x9250)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x9244*x9250))+((r01*x9249))+(((-1.0)*r02*x9246)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9247))+((r22*x9240))+(((-1.0)*x9245*x9246)));
evalcond[4]=((((-1.0)*x9244*x9246))+((cj0*x9242))+((r02*x9240))+((r01*x9247))+(((-1.0)*cj0*x9248)));
evalcond[5]=(((r12*x9240))+((sj0*x9242))+((r11*x9247))+(((-1.0)*sj0*x9248))+(((-1.0)*x9243*x9246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9251=((-1.0)*r20);
IkReal x9252=x8919;
CheckValue<IkReal> x9254 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9251),IKFAST_ATAN2_MAGTHRESH);
if(!x9254.valid){
continue;
}
IkReal x9253=((-1.0)*(x9254.value));
sj5=gconst1;
cj5=gconst2;
j5=x9253;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9253;
IkReal gconst1=(r21*x9252);
IkReal gconst2=(x9251*x9252);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9255=((-1.0)*r20);
IkReal x9256=x8919;
CheckValue<IkReal> x9258 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9255),IKFAST_ATAN2_MAGTHRESH);
if(!x9258.valid){
continue;
}
IkReal x9257=((-1.0)*(x9258.value));
sj5=gconst1;
cj5=gconst2;
j5=x9257;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9257;
IkReal gconst1=(r21*x9256);
IkReal gconst2=(x9255*x9256);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9259=((-1.0)*r20);
IkReal x9260=x8919;
CheckValue<IkReal> x9262 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9259),IKFAST_ATAN2_MAGTHRESH);
if(!x9262.valid){
continue;
}
IkReal x9261=((-1.0)*(x9262.value));
sj5=gconst1;
cj5=gconst2;
j5=x9261;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9261;
IkReal gconst1=(r21*x9260);
IkReal gconst2=(x9259*x9260);
IkReal x9263=r22*r22;
CheckValue<IkReal> x9266=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9263))),-1);
if(!x9266.valid){
continue;
}
IkReal x9264=x9266.value;
IkReal x9265=(x9263+(((2.0)*x9264*(r20*r20)*(r21*r21)))+((x9264*(r21*r21*r21*r21)))+((x9264*(r20*r20*r20*r20))));
j4eval[0]=x9265;
j4eval[1]=IKsign(x9265);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9267=((-1.0)*r20);
IkReal x9268=x8919;
CheckValue<IkReal> x9270 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9267),IKFAST_ATAN2_MAGTHRESH);
if(!x9270.valid){
continue;
}
IkReal x9269=((-1.0)*(x9270.value));
sj5=gconst1;
cj5=gconst2;
j5=x9269;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9269;
IkReal gconst1=(r21*x9268);
IkReal gconst2=(x9267*x9268);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9271=((-1.0)*r20);
IkReal x9272=x8919;
CheckValue<IkReal> x9274 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9271),IKFAST_ATAN2_MAGTHRESH);
if(!x9274.valid){
continue;
}
IkReal x9273=((-1.0)*(x9274.value));
sj5=gconst1;
cj5=gconst2;
j5=x9273;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9273;
IkReal gconst1=(r21*x9272);
IkReal gconst2=(x9271*x9272);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9275=((-1.0)*r20);
IkReal x9276=x8919;
CheckValue<IkReal> x9278 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9275),IKFAST_ATAN2_MAGTHRESH);
if(!x9278.valid){
continue;
}
IkReal x9277=((-1.0)*(x9278.value));
sj5=gconst1;
cj5=gconst2;
j5=x9277;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9277;
IkReal gconst1=(r21*x9276);
IkReal gconst2=(x9275*x9276);
IkReal x9279=r22*r22;
IkReal x9280=(cj1*r12*sj2);
IkReal x9281=(cj2*r12*sj1);
CheckValue<IkReal> x9285=IKPowWithIntegerCheck(((-1.0)+x9279),-1);
if(!x9285.valid){
continue;
}
IkReal x9282=x9285.value;
if((((1.0)+(((-1.0)*x9279)))) < -0.00001)
continue;
IkReal x9283=IKsqrt(((1.0)+(((-1.0)*x9279))));
IkReal x9284=((1.0)*r22*x9282*x9283);
j4eval[0]=((IKabs((x9281+x9280)))+(IKabs(((((-1.0)*x9281*x9284))+(((-1.0)*x9280*x9284))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9286=((1.0)*gconst1);
IkReal x9287=(cj2*sj1);
IkReal x9288=(gconst2*r10);
IkReal x9289=(cj1*sj2);
CheckValue<IkReal> x9290=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9286)))),-1);
if(!x9290.valid){
continue;
}
CheckValue<IkReal> x9291 = IKatan2WithCheck(IkReal((((x9287*x9288))+((x9288*x9289))+(((-1.0)*r11*x9286*x9289))+(((-1.0)*r11*x9286*x9287)))),IkReal((((r12*x9289))+((r12*x9287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9290.value)))+(x9291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9292=IKsin(j4);
IkReal x9293=IKcos(j4);
IkReal x9294=((1.0)*x9293);
IkReal x9295=(gconst2*x9293);
IkReal x9296=(gconst1*x9292);
IkReal x9297=((1.0)*x9292);
evalcond[0]=((((-1.0)*gconst2*r20*x9297))+(((-1.0)*r22*x9294))+((r21*x9296)));
evalcond[1]=((((-1.0)*gconst2*r00*x9297))+((r01*x9296))+(((-1.0)*r02*x9294)));
evalcond[2]=((((-1.0)*gconst1*r11*x9294))+((r10*x9295))+(((-1.0)*r12*x9297)));
evalcond[3]=((1.0)+((r11*x9296))+(((-1.0)*gconst2*r10*x9297))+(((-1.0)*r12*x9294)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9294))+((cj1*sj2))+(((-1.0)*r22*x9297))+((r20*x9295)));
evalcond[5]=(((r00*x9295))+(((-1.0)*gconst1*r01*x9294))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9298=(gconst1*r11);
IkReal x9299=(gconst2*r10);
CheckValue<IkReal> x9300=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9298*x9298)+(x9299*x9299)+(((-2.0)*x9298*x9299)))),-1);
if(!x9300.valid){
continue;
}
CheckValue<IkReal> x9301 = IKatan2WithCheck(IkReal((x9299+(((-1.0)*x9298)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9300.value)))+(x9301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9302=IKsin(j4);
IkReal x9303=IKcos(j4);
IkReal x9304=((1.0)*x9303);
IkReal x9305=(gconst2*x9303);
IkReal x9306=(gconst1*x9302);
IkReal x9307=((1.0)*x9302);
evalcond[0]=(((r21*x9306))+(((-1.0)*r22*x9304))+(((-1.0)*gconst2*r20*x9307)));
evalcond[1]=((((-1.0)*gconst2*r00*x9307))+((r01*x9306))+(((-1.0)*r02*x9304)));
evalcond[2]=((((-1.0)*gconst1*r11*x9304))+((r10*x9305))+(((-1.0)*r12*x9307)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9307))+((r11*x9306))+(((-1.0)*r12*x9304)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9304))+((cj1*sj2))+((r20*x9305))+(((-1.0)*r22*x9307)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9304))+(((-1.0)*r02*x9307))+((r00*x9305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9308=((1.0)*gconst2);
CheckValue<IkReal> x9309=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9308)))),-1);
if(!x9309.valid){
continue;
}
CheckValue<IkReal> x9310 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9308))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9309.value)))+(x9310.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9311=IKsin(j4);
IkReal x9312=IKcos(j4);
IkReal x9313=((1.0)*x9312);
IkReal x9314=(gconst2*x9312);
IkReal x9315=(gconst1*x9311);
IkReal x9316=((1.0)*x9311);
evalcond[0]=(((r21*x9315))+(((-1.0)*r22*x9313))+(((-1.0)*gconst2*r20*x9316)));
evalcond[1]=((((-1.0)*gconst2*r00*x9316))+((r01*x9315))+(((-1.0)*r02*x9313)));
evalcond[2]=((((-1.0)*gconst1*r11*x9313))+((r10*x9314))+(((-1.0)*r12*x9316)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9316))+((r11*x9315))+(((-1.0)*r12*x9313)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9313))+((cj1*sj2))+((r20*x9314))+(((-1.0)*r22*x9316)));
evalcond[5]=((((-1.0)*gconst1*r01*x9313))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9316))+((r00*x9314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9317=((-1.0)*r20);
IkReal x9318=x8919;
CheckValue<IkReal> x9320 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9317),IKFAST_ATAN2_MAGTHRESH);
if(!x9320.valid){
continue;
}
IkReal x9319=((-1.0)*(x9320.value));
sj5=gconst1;
cj5=gconst2;
j5=x9319;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9319;
IkReal gconst1=(r21*x9318);
IkReal gconst2=(x9317*x9318);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9321=((-1.0)*r20);
IkReal x9322=x8919;
CheckValue<IkReal> x9324 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9321),IKFAST_ATAN2_MAGTHRESH);
if(!x9324.valid){
continue;
}
IkReal x9323=((-1.0)*(x9324.value));
sj5=gconst1;
cj5=gconst2;
j5=x9323;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9323;
IkReal gconst1=(r21*x9322);
IkReal gconst2=(x9321*x9322);
IkReal x9325=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9329=IKPowWithIntegerCheck(x9325,-1);
if(!x9329.valid){
continue;
}
IkReal x9326=x9329.value;
IkReal x9327=((1.0)*x9326);
IkReal x9328=((((-1.0)*x9327*(r11*r11)*(r21*r21)))+(((-1.0)*x9327*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9326)));
j4eval[0]=x9328;
j4eval[1]=r12;
j4eval[2]=x9325;
j4eval[3]=IKsign(x9328);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9330=((-1.0)*r20);
IkReal x9331=x8919;
CheckValue<IkReal> x9333 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9330),IKFAST_ATAN2_MAGTHRESH);
if(!x9333.valid){
continue;
}
IkReal x9332=((-1.0)*(x9333.value));
sj5=gconst1;
cj5=gconst2;
j5=x9332;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9332;
IkReal gconst1=(r21*x9331);
IkReal gconst2=(x9330*x9331);
IkReal x9334=r22*r22;
IkReal x9335=(cj1*r12*sj2);
IkReal x9336=(cj2*r12*sj1);
CheckValue<IkReal> x9340=IKPowWithIntegerCheck(((-1.0)+x9334),-1);
if(!x9340.valid){
continue;
}
IkReal x9337=x9340.value;
if((((1.0)+(((-1.0)*x9334)))) < -0.00001)
continue;
IkReal x9338=IKsqrt(((1.0)+(((-1.0)*x9334))));
IkReal x9339=((1.0)*r22*x9337*x9338);
j4eval[0]=((IKabs((x9335+x9336)))+(IKabs(((((-1.0)*x9335*x9339))+(((-1.0)*x9336*x9339))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9341=((1.0)*gconst1);
IkReal x9342=(cj2*sj1);
IkReal x9343=(gconst2*r10);
IkReal x9344=(cj1*sj2);
CheckValue<IkReal> x9345 = IKatan2WithCheck(IkReal((((x9342*x9343))+(((-1.0)*r11*x9341*x9344))+(((-1.0)*r11*x9341*x9342))+((x9343*x9344)))),IkReal((((r12*x9342))+((r12*x9344)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9345.valid){
continue;
}
CheckValue<IkReal> x9346=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9341)))),-1);
if(!x9346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9345.value)+(((1.5707963267949)*(x9346.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9347=IKsin(j4);
IkReal x9348=IKcos(j4);
IkReal x9349=((1.0)*x9348);
IkReal x9350=(gconst2*x9348);
IkReal x9351=(gconst1*x9347);
IkReal x9352=((1.0)*x9347);
evalcond[0]=((((-1.0)*r22*x9349))+(((-1.0)*gconst2*r20*x9352))+((r21*x9351)));
evalcond[1]=(((r01*x9351))+(((-1.0)*r02*x9349))+(((-1.0)*gconst2*r00*x9352)));
evalcond[2]=((((-1.0)*r12*x9352))+((r10*x9350))+(((-1.0)*gconst1*r11*x9349)));
evalcond[3]=((-1.0)+((r11*x9351))+(((-1.0)*r12*x9349))+(((-1.0)*gconst2*r10*x9352)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9352))+((cj1*sj2))+((r20*x9350))+(((-1.0)*gconst1*r21*x9349)));
evalcond[5]=((((-1.0)*gconst1*r01*x9349))+(((-1.0)*r02*x9352))+(((-1.0)*sj1*sj2))+((r00*x9350))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9353=(gconst1*r11);
IkReal x9354=(gconst2*r10);
CheckValue<IkReal> x9355 = IKatan2WithCheck(IkReal((x9354+(((-1.0)*x9353)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9355.valid){
continue;
}
CheckValue<IkReal> x9356=IKPowWithIntegerCheck(IKsign(((((2.0)*x9353*x9354))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9353*x9353)))+(((-1.0)*(x9354*x9354))))),-1);
if(!x9356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9355.value)+(((1.5707963267949)*(x9356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9357=IKsin(j4);
IkReal x9358=IKcos(j4);
IkReal x9359=((1.0)*x9358);
IkReal x9360=(gconst2*x9358);
IkReal x9361=(gconst1*x9357);
IkReal x9362=((1.0)*x9357);
evalcond[0]=(((r21*x9361))+(((-1.0)*r22*x9359))+(((-1.0)*gconst2*r20*x9362)));
evalcond[1]=((((-1.0)*r02*x9359))+((r01*x9361))+(((-1.0)*gconst2*r00*x9362)));
evalcond[2]=((((-1.0)*gconst1*r11*x9359))+(((-1.0)*r12*x9362))+((r10*x9360)));
evalcond[3]=((-1.0)+((r11*x9361))+(((-1.0)*r12*x9359))+(((-1.0)*gconst2*r10*x9362)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9359))+(((-1.0)*r22*x9362))+((r20*x9360)));
evalcond[5]=((((-1.0)*gconst1*r01*x9359))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x9362))+((cj1*cj2))+((r00*x9360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9363 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9363.valid){
continue;
}
CheckValue<IkReal> x9364=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9363.value)+(((1.5707963267949)*(x9364.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9365=IKsin(j4);
IkReal x9366=IKcos(j4);
IkReal x9367=((1.0)*x9366);
IkReal x9368=(gconst2*x9366);
IkReal x9369=(gconst1*x9365);
IkReal x9370=((1.0)*x9365);
evalcond[0]=(((r21*x9369))+(((-1.0)*gconst2*r20*x9370))+(((-1.0)*r22*x9367)));
evalcond[1]=((((-1.0)*r02*x9367))+(((-1.0)*gconst2*r00*x9370))+((r01*x9369)));
evalcond[2]=((((-1.0)*gconst1*r11*x9367))+(((-1.0)*r12*x9370))+((r10*x9368)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9370))+((r11*x9369))+(((-1.0)*r12*x9367)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9367))+((cj1*sj2))+(((-1.0)*r22*x9370))+((r20*x9368)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9370))+(((-1.0)*gconst1*r01*x9367))+((cj1*cj2))+((r00*x9368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9371=((-1.0)*r20);
IkReal x9372=x8919;
CheckValue<IkReal> x9374 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9371),IKFAST_ATAN2_MAGTHRESH);
if(!x9374.valid){
continue;
}
IkReal x9373=((-1.0)*(x9374.value));
sj5=gconst1;
cj5=gconst2;
j5=x9373;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9373;
IkReal gconst1=(r21*x9372);
IkReal gconst2=(x9371*x9372);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9375=((-1.0)*r20);
IkReal x9376=x8919;
CheckValue<IkReal> x9378 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9375),IKFAST_ATAN2_MAGTHRESH);
if(!x9378.valid){
continue;
}
IkReal x9377=((-1.0)*(x9378.value));
sj5=gconst1;
cj5=gconst2;
j5=x9377;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9377;
IkReal gconst1=(r21*x9376);
IkReal gconst2=(x9375*x9376);
IkReal x9379=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9383=IKPowWithIntegerCheck(x9379,-1);
if(!x9383.valid){
continue;
}
IkReal x9380=x9383.value;
IkReal x9381=((1.0)*x9380);
IkReal x9382=((((-1.0)*x9381*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x9381*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x9380)));
j4eval[0]=x9382;
j4eval[1]=IKsign(x9382);
j4eval[2]=r02;
j4eval[3]=x9379;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9384=((-1.0)*r20);
IkReal x9385=x8919;
CheckValue<IkReal> x9387 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9384),IKFAST_ATAN2_MAGTHRESH);
if(!x9387.valid){
continue;
}
IkReal x9386=((-1.0)*(x9387.value));
sj5=gconst1;
cj5=gconst2;
j5=x9386;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9386;
IkReal gconst1=(r21*x9385);
IkReal gconst2=(x9384*x9385);
IkReal x9388=r22*r22;
IkReal x9389=(cj1*r02*sj2);
IkReal x9390=(cj2*r02*sj1);
CheckValue<IkReal> x9394=IKPowWithIntegerCheck(((-1.0)+x9388),-1);
if(!x9394.valid){
continue;
}
IkReal x9391=x9394.value;
if((((1.0)+(((-1.0)*x9388)))) < -0.00001)
continue;
IkReal x9392=IKsqrt(((1.0)+(((-1.0)*x9388))));
IkReal x9393=((1.0)*r22*x9391*x9392);
j4eval[0]=((IKabs((x9389+x9390)))+(IKabs(((((-1.0)*x9390*x9393))+(((-1.0)*x9389*x9393))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9395=(cj2*sj1);
IkReal x9396=(cj1*sj2);
IkReal x9397=(gconst2*r00);
IkReal x9398=((1.0)*gconst1*r01);
CheckValue<IkReal> x9399 = IKatan2WithCheck(IkReal((((x9396*x9397))+((x9395*x9397))+(((-1.0)*x9396*x9398))+(((-1.0)*x9395*x9398)))),IkReal((((r02*x9396))+((r02*x9395)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9399.valid){
continue;
}
CheckValue<IkReal> x9400=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9399.value)+(((1.5707963267949)*(x9400.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9401=IKsin(j4);
IkReal x9402=IKcos(j4);
IkReal x9403=(gconst1*r11);
IkReal x9404=(gconst1*r21);
IkReal x9405=(gconst1*r01);
IkReal x9406=((1.0)*x9402);
IkReal x9407=(gconst2*x9402);
IkReal x9408=((1.0)*x9401);
evalcond[0]=((((-1.0)*r22*x9406))+((x9401*x9404))+(((-1.0)*gconst2*r20*x9408)));
evalcond[1]=((((-1.0)*gconst2*r10*x9408))+((x9401*x9403))+(((-1.0)*r12*x9406)));
evalcond[2]=((((-1.0)*x9405*x9406))+(((-1.0)*r02*x9408))+((r00*x9407)));
evalcond[3]=((-1.0)+((x9401*x9405))+(((-1.0)*r02*x9406))+(((-1.0)*gconst2*r00*x9408)));
evalcond[4]=((((-1.0)*r22*x9408))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9404*x9406))+((r20*x9407)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9408))+((r10*x9407))+(((-1.0)*x9403*x9406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9409=(gconst2*r00);
IkReal x9410=(gconst1*r01);
CheckValue<IkReal> x9411 = IKatan2WithCheck(IkReal((x9409+(((-1.0)*x9410)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9411.valid){
continue;
}
CheckValue<IkReal> x9412=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9410*x9410)))+(((-1.0)*(r02*r02)))+(((2.0)*x9409*x9410))+(((-1.0)*(x9409*x9409))))),-1);
if(!x9412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9411.value)+(((1.5707963267949)*(x9412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9413=IKsin(j4);
IkReal x9414=IKcos(j4);
IkReal x9415=(gconst1*r11);
IkReal x9416=(gconst1*r21);
IkReal x9417=(gconst1*r01);
IkReal x9418=((1.0)*x9414);
IkReal x9419=(gconst2*x9414);
IkReal x9420=((1.0)*x9413);
evalcond[0]=(((x9413*x9416))+(((-1.0)*r22*x9418))+(((-1.0)*gconst2*r20*x9420)));
evalcond[1]=((((-1.0)*r12*x9418))+((x9413*x9415))+(((-1.0)*gconst2*r10*x9420)));
evalcond[2]=(((r00*x9419))+(((-1.0)*r02*x9420))+(((-1.0)*x9417*x9418)));
evalcond[3]=((-1.0)+((x9413*x9417))+(((-1.0)*r02*x9418))+(((-1.0)*gconst2*r00*x9420)));
evalcond[4]=(((r20*x9419))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9416*x9418))+(((-1.0)*r22*x9420)));
evalcond[5]=(((r10*x9419))+(((-1.0)*x9415*x9418))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9421=((1.0)*gconst2);
CheckValue<IkReal> x9422 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9421))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9422.valid){
continue;
}
CheckValue<IkReal> x9423=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9421)))),-1);
if(!x9423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9422.value)+(((1.5707963267949)*(x9423.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9424=IKsin(j4);
IkReal x9425=IKcos(j4);
IkReal x9426=(gconst1*r11);
IkReal x9427=(gconst1*r21);
IkReal x9428=(gconst1*r01);
IkReal x9429=((1.0)*x9425);
IkReal x9430=(gconst2*x9425);
IkReal x9431=((1.0)*x9424);
evalcond[0]=(((x9424*x9427))+(((-1.0)*r22*x9429))+(((-1.0)*gconst2*r20*x9431)));
evalcond[1]=((((-1.0)*gconst2*r10*x9431))+((x9424*x9426))+(((-1.0)*r12*x9429)));
evalcond[2]=((((-1.0)*x9428*x9429))+(((-1.0)*r02*x9431))+((r00*x9430)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r00*x9431))+((x9424*x9428))+(((-1.0)*r02*x9429)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9430))+(((-1.0)*r22*x9431))+(((-1.0)*x9427*x9429)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9426*x9429))+(((-1.0)*r12*x9431))+((r10*x9430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9432=((-1.0)*r20);
IkReal x9433=x8919;
CheckValue<IkReal> x9435 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9432),IKFAST_ATAN2_MAGTHRESH);
if(!x9435.valid){
continue;
}
IkReal x9434=((-1.0)*(x9435.value));
sj5=gconst1;
cj5=gconst2;
j5=x9434;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9434;
IkReal gconst1=(r21*x9433);
IkReal gconst2=(x9432*x9433);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9436=((-1.0)*r20);
IkReal x9437=x8919;
CheckValue<IkReal> x9439 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9436),IKFAST_ATAN2_MAGTHRESH);
if(!x9439.valid){
continue;
}
IkReal x9438=((-1.0)*(x9439.value));
sj5=gconst1;
cj5=gconst2;
j5=x9438;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9438;
IkReal gconst1=(r21*x9437);
IkReal gconst2=(x9436*x9437);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9440=((-1.0)*r20);
IkReal x9441=x8919;
CheckValue<IkReal> x9443 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9440),IKFAST_ATAN2_MAGTHRESH);
if(!x9443.valid){
continue;
}
IkReal x9442=((-1.0)*(x9443.value));
sj5=gconst1;
cj5=gconst2;
j5=x9442;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9442;
IkReal gconst1=(r21*x9441);
IkReal gconst2=(x9440*x9441);
IkReal x9444=r22*r22;
IkReal x9445=(cj1*r02*sj2);
IkReal x9446=(cj2*r02*sj1);
CheckValue<IkReal> x9450=IKPowWithIntegerCheck(((-1.0)+x9444),-1);
if(!x9450.valid){
continue;
}
IkReal x9447=x9450.value;
if((((1.0)+(((-1.0)*x9444)))) < -0.00001)
continue;
IkReal x9448=IKsqrt(((1.0)+(((-1.0)*x9444))));
IkReal x9449=((1.0)*r22*x9447*x9448);
j4eval[0]=((IKabs(((((-1.0)*x9446*x9449))+(((-1.0)*x9445*x9449)))))+(IKabs((x9446+x9445))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9451=(cj2*sj1);
IkReal x9452=(cj1*sj2);
IkReal x9453=(gconst2*r00);
IkReal x9454=((1.0)*gconst1*r01);
CheckValue<IkReal> x9455 = IKatan2WithCheck(IkReal((((x9451*x9453))+(((-1.0)*x9451*x9454))+(((-1.0)*x9452*x9454))+((x9452*x9453)))),IkReal((((r02*x9451))+((r02*x9452)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9455.valid){
continue;
}
CheckValue<IkReal> x9456=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9455.value)+(((1.5707963267949)*(x9456.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9457=IKsin(j4);
IkReal x9458=IKcos(j4);
IkReal x9459=(gconst1*r11);
IkReal x9460=(gconst1*r21);
IkReal x9461=(gconst1*r01);
IkReal x9462=((1.0)*x9458);
IkReal x9463=(gconst2*x9458);
IkReal x9464=((1.0)*x9457);
evalcond[0]=(((x9457*x9460))+(((-1.0)*gconst2*r20*x9464))+(((-1.0)*r22*x9462)));
evalcond[1]=(((x9457*x9459))+(((-1.0)*r12*x9462))+(((-1.0)*gconst2*r10*x9464)));
evalcond[2]=(((r00*x9463))+(((-1.0)*r02*x9464))+(((-1.0)*x9461*x9462)));
evalcond[3]=((1.0)+((x9457*x9461))+(((-1.0)*gconst2*r00*x9464))+(((-1.0)*r02*x9462)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9464))+((r20*x9463))+(((-1.0)*x9460*x9462)));
evalcond[5]=(((r10*x9463))+(((-1.0)*sj1*sj2))+(((-1.0)*x9459*x9462))+(((-1.0)*r12*x9464))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9465=(gconst1*r01);
IkReal x9466=(gconst2*r00);
CheckValue<IkReal> x9467=IKPowWithIntegerCheck(IKsign(((x9466*x9466)+(x9465*x9465)+(r02*r02)+(((-2.0)*x9465*x9466)))),-1);
if(!x9467.valid){
continue;
}
CheckValue<IkReal> x9468 = IKatan2WithCheck(IkReal((x9466+(((-1.0)*x9465)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9467.value)))+(x9468.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9469=IKsin(j4);
IkReal x9470=IKcos(j4);
IkReal x9471=(gconst1*r11);
IkReal x9472=(gconst1*r21);
IkReal x9473=(gconst1*r01);
IkReal x9474=((1.0)*x9470);
IkReal x9475=(gconst2*x9470);
IkReal x9476=((1.0)*x9469);
evalcond[0]=(((x9469*x9472))+(((-1.0)*gconst2*r20*x9476))+(((-1.0)*r22*x9474)));
evalcond[1]=(((x9469*x9471))+(((-1.0)*r12*x9474))+(((-1.0)*gconst2*r10*x9476)));
evalcond[2]=((((-1.0)*r02*x9476))+((r00*x9475))+(((-1.0)*x9473*x9474)));
evalcond[3]=((1.0)+((x9469*x9473))+(((-1.0)*r02*x9474))+(((-1.0)*gconst2*r00*x9476)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9476))+((r20*x9475))+(((-1.0)*x9472*x9474)));
evalcond[5]=((((-1.0)*x9471*x9474))+((r10*x9475))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9476))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9477 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9477.valid){
continue;
}
CheckValue<IkReal> x9478=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9477.value)+(((1.5707963267949)*(x9478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9479=IKsin(j4);
IkReal x9480=IKcos(j4);
IkReal x9481=(gconst1*r11);
IkReal x9482=(gconst1*r21);
IkReal x9483=(gconst1*r01);
IkReal x9484=((1.0)*x9480);
IkReal x9485=(gconst2*x9480);
IkReal x9486=((1.0)*x9479);
evalcond[0]=(((x9479*x9482))+(((-1.0)*r22*x9484))+(((-1.0)*gconst2*r20*x9486)));
evalcond[1]=(((x9479*x9481))+(((-1.0)*gconst2*r10*x9486))+(((-1.0)*r12*x9484)));
evalcond[2]=(((r00*x9485))+(((-1.0)*r02*x9486))+(((-1.0)*x9483*x9484)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x9486))+(((-1.0)*r02*x9484))+((x9479*x9483)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9485))+(((-1.0)*x9482*x9484))+(((-1.0)*r22*x9486)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x9481*x9484))+((cj1*cj2))+((r10*x9485))+(((-1.0)*r12*x9486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9487=((-1.0)*r20);
IkReal x9488=((-1.0)*px);
CheckValue<IkReal> x9490 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9487),IKFAST_ATAN2_MAGTHRESH);
if(!x9490.valid){
continue;
}
IkReal x9489=((-1.0)*(x9490.value));
sj5=gconst1;
cj5=gconst2;
j5=x9489;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9488);
rxp1_1=(px*r21);
rxp1_2=(r11*x9488);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9489;
IkReal gconst1=r21;
IkReal gconst2=x9487;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9491=((-1.0)*r20);
IkReal x9492=((-1.0)*px);
CheckValue<IkReal> x9494 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9491),IKFAST_ATAN2_MAGTHRESH);
if(!x9494.valid){
continue;
}
IkReal x9493=((-1.0)*(x9494.value));
sj5=gconst1;
cj5=gconst2;
j5=x9493;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9492);
rxp1_1=(px*r21);
rxp1_2=(r11*x9492);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9493;
IkReal gconst1=r21;
IkReal gconst2=x9491;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9495=((-1.0)*r20);
IkReal x9496=((-1.0)*px);
CheckValue<IkReal> x9498 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9495),IKFAST_ATAN2_MAGTHRESH);
if(!x9498.valid){
continue;
}
IkReal x9497=((-1.0)*(x9498.value));
sj5=gconst1;
cj5=gconst2;
j5=x9497;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9496);
rxp1_1=(px*r21);
rxp1_2=(r11*x9496);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9497;
IkReal gconst1=r21;
IkReal gconst2=x9495;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9501=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9501.valid){
continue;
}
IkReal x9499=x9501.value;
IkReal x9500=(sj0*x9499);
cj4array[0]=((((-1.0)*sj1*sj2*x9500))+((cj1*cj2*x9500)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9502=IKsin(j4);
IkReal x9503=IKcos(j4);
IkReal x9504=(gconst1*x9502);
IkReal x9505=((1.0)*x9503);
IkReal x9506=((1.0)*gconst2*x9502);
evalcond[0]=((-1.0)*r02*x9502);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9505)));
evalcond[2]=(((r21*x9504))+(((-1.0)*r20*x9506)));
evalcond[3]=(((r11*x9504))+(((-1.0)*r10*x9506)));
evalcond[4]=((((-1.0)*gconst1*r21*x9505))+((cj2*sj1))+((cj1*sj2))+((gconst2*r20*x9503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9509=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9509.valid){
continue;
}
IkReal x9507=x9509.value;
IkReal x9508=((1.0)*x9507);
cj4array[0]=((((-1.0)*cj2*sj1*x9508))+(((-1.0)*cj1*sj2*x9508)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9510=IKsin(j4);
IkReal x9511=IKcos(j4);
IkReal x9512=(gconst2*r10);
IkReal x9513=((1.0)*sj0);
IkReal x9514=(gconst1*r11);
IkReal x9515=((1.0)*x9510);
IkReal x9516=((1.0)*x9511);
evalcond[0]=((-1.0)*r02*x9510);
evalcond[1]=((((-1.0)*r02*x9516))+(((-1.0)*x9513)));
evalcond[2]=((((-1.0)*gconst2*r20*x9515))+((gconst1*r21*x9510)));
evalcond[3]=((((-1.0)*x9512*x9515))+((x9510*x9514)));
evalcond[4]=((((-1.0)*x9514*x9516))+(((-1.0)*cj1*cj2*x9513))+((x9511*x9512))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9517=IKPowWithIntegerCheck(r02,-1);
if(!x9517.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9517.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9518=IKsin(j4);
IkReal x9519=IKcos(j4);
IkReal x9520=(gconst2*r10);
IkReal x9521=(gconst1*r11);
IkReal x9522=(gconst1*r21);
IkReal x9523=(gconst2*r20);
IkReal x9524=((1.0)*x9518);
IkReal x9525=((1.0)*x9519);
evalcond[0]=((-1.0)*r02*x9518);
evalcond[1]=(((x9518*x9522))+(((-1.0)*x9523*x9524)));
evalcond[2]=(((x9518*x9521))+(((-1.0)*x9520*x9524)));
evalcond[3]=(((cj2*sj1))+((x9519*x9523))+((cj1*sj2))+(((-1.0)*x9522*x9525)));
evalcond[4]=((((-1.0)*x9521*x9525))+((x9519*x9520))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9526=(cj2*sj1);
IkReal x9527=(cj1*sj2);
IkReal x9528=(gconst1*r21);
IkReal x9529=((1.0)*gconst2*r20);
CheckValue<IkReal> x9530=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x9528*x9528)+(((gconst2*gconst2)*(r20*r20)))+(((-2.0)*gconst2*r20*x9528)))),-1);
if(!x9530.valid){
continue;
}
CheckValue<IkReal> x9531 = IKatan2WithCheck(IkReal((((r22*x9526))+((r22*x9527)))),IkReal(((((-1.0)*x9527*x9529))+(((-1.0)*x9526*x9529))+((x9527*x9528))+((x9526*x9528)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9530.value)))+(x9531.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9532=IKsin(j4);
IkReal x9533=IKcos(j4);
IkReal x9534=(gconst1*r11);
IkReal x9535=(sj1*sj2);
IkReal x9536=(gconst1*r21);
IkReal x9537=(gconst1*r01);
IkReal x9538=((1.0)*x9533);
IkReal x9539=(gconst2*x9533);
IkReal x9540=((1.0)*cj1*cj2);
IkReal x9541=((1.0)*x9532);
evalcond[0]=((((-1.0)*r22*x9538))+((x9532*x9536))+(((-1.0)*gconst2*r20*x9541)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x9541))+((x9532*x9534))+(((-1.0)*r12*x9538)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x9538))+((x9532*x9537))+(((-1.0)*gconst2*r00*x9541)));
evalcond[3]=((((-1.0)*x9536*x9538))+((cj2*sj1))+((r20*x9539))+((cj1*sj2))+(((-1.0)*r22*x9541)));
evalcond[4]=((((-1.0)*cj0*x9540))+(((-1.0)*r02*x9541))+((cj0*x9535))+((r00*x9539))+(((-1.0)*x9537*x9538)));
evalcond[5]=((((-1.0)*r12*x9541))+(((-1.0)*sj0*x9540))+((r10*x9539))+((sj0*x9535))+(((-1.0)*x9534*x9538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9542=((1.0)*gconst2);
CheckValue<IkReal> x9543=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9542)))),-1);
if(!x9543.valid){
continue;
}
CheckValue<IkReal> x9544 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9542))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9543.value)))+(x9544.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9545=IKsin(j4);
IkReal x9546=IKcos(j4);
IkReal x9547=(gconst1*r11);
IkReal x9548=(sj1*sj2);
IkReal x9549=(gconst1*r21);
IkReal x9550=(gconst1*r01);
IkReal x9551=((1.0)*x9546);
IkReal x9552=(gconst2*x9546);
IkReal x9553=((1.0)*cj1*cj2);
IkReal x9554=((1.0)*x9545);
evalcond[0]=((((-1.0)*r22*x9551))+((x9545*x9549))+(((-1.0)*gconst2*r20*x9554)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x9554))+((x9545*x9547))+(((-1.0)*r12*x9551)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x9551))+((x9545*x9550))+(((-1.0)*gconst2*r00*x9554)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x9554))+((cj1*sj2))+((r20*x9552))+(((-1.0)*x9549*x9551)));
evalcond[4]=((((-1.0)*cj0*x9553))+(((-1.0)*r02*x9554))+(((-1.0)*x9550*x9551))+((cj0*x9548))+((r00*x9552)));
evalcond[5]=((((-1.0)*sj0*x9553))+((r10*x9552))+(((-1.0)*x9547*x9551))+(((-1.0)*r12*x9554))+((sj0*x9548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9555=((1.0)*gconst2);
CheckValue<IkReal> x9556=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9555)))),-1);
if(!x9556.valid){
continue;
}
CheckValue<IkReal> x9557 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9555)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9556.value)))+(x9557.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9558=IKsin(j4);
IkReal x9559=IKcos(j4);
IkReal x9560=(gconst1*r11);
IkReal x9561=(sj1*sj2);
IkReal x9562=(gconst1*r21);
IkReal x9563=(gconst1*r01);
IkReal x9564=((1.0)*x9559);
IkReal x9565=(gconst2*x9559);
IkReal x9566=((1.0)*cj1*cj2);
IkReal x9567=((1.0)*x9558);
evalcond[0]=(((x9558*x9562))+(((-1.0)*gconst2*r20*x9567))+(((-1.0)*r22*x9564)));
evalcond[1]=(((x9558*x9560))+cj0+(((-1.0)*gconst2*r10*x9567))+(((-1.0)*r12*x9564)));
evalcond[2]=((((-1.0)*gconst2*r00*x9567))+((x9558*x9563))+(((-1.0)*sj0))+(((-1.0)*r02*x9564)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9567))+(((-1.0)*x9562*x9564))+((r20*x9565)));
evalcond[4]=(((cj0*x9561))+((r00*x9565))+(((-1.0)*x9563*x9564))+(((-1.0)*cj0*x9566))+(((-1.0)*r02*x9567)));
evalcond[5]=(((sj0*x9561))+(((-1.0)*r12*x9567))+(((-1.0)*sj0*x9566))+(((-1.0)*x9560*x9564))+((r10*x9565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9568=((-1.0)*r20);
IkReal x9569=x8919;
CheckValue<IkReal> x9571 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9568),IKFAST_ATAN2_MAGTHRESH);
if(!x9571.valid){
continue;
}
IkReal x9570=((-1.0)*(x9571.value));
sj5=gconst1;
cj5=gconst2;
j5=x9570;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9570;
IkReal gconst1=(r21*x9569);
IkReal gconst2=(x9568*x9569);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9572=((-1.0)*r20);
IkReal x9573=x8919;
CheckValue<IkReal> x9575 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9572),IKFAST_ATAN2_MAGTHRESH);
if(!x9575.valid){
continue;
}
IkReal x9574=((-1.0)*(x9575.value));
sj5=gconst1;
cj5=gconst2;
j5=x9574;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9574;
IkReal gconst1=(r21*x9573);
IkReal gconst2=(x9572*x9573);
CheckValue<IkReal> x9583=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9583.valid){
continue;
}
IkReal x9576=x9583.value;
IkReal x9577=(sj3*x9576);
IkReal x9578=(r11*x9577);
IkReal x9579=(r00*x9577);
IkReal x9580=(r01*x9577);
IkReal x9581=(r10*x9577);
IkReal x9582=(r20*r21*x9577);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9579*(r20*r20)))+((r00*r20*r21*x9578))+((r10*r20*r21*x9580))+((r01*x9578*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9584=gconst2*gconst2;
IkReal x9585=gconst1*gconst1;
IkReal x9586=((1.0)*cj3);
IkReal x9587=((1.0)*sj3);
IkReal x9588=(r11*sj3);
IkReal x9589=(r10*sj3);
IkReal x9590=(gconst1*gconst2*r00);
IkReal x9591=(gconst1*gconst2*r01);
IkReal x9592=(r00*x9584);
IkReal x9593=(r01*x9585);
CheckValue<IkReal> x9594=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9586*x9593))+(((-1.0)*r02*r12*x9586))+((cj3*r11*x9590))+(((-1.0)*r10*x9586*x9592))+((cj3*r10*x9591)))),-1);
if(!x9594.valid){
continue;
}
CheckValue<IkReal> x9595 = IKatan2WithCheck(IkReal((((gconst2*r02*x9588))+((gconst1*r02*x9589)))),IkReal(((((-1.0)*r11*x9587*x9592))+((x9588*x9591))+((x9589*x9593))+(((-1.0)*r10*x9587*x9590)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9594.value)))+(x9595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9596=IKsin(j4);
IkReal x9597=IKcos(j4);
IkReal x9598=(sj1*sj2);
IkReal x9599=(gconst1*sj3);
IkReal x9600=(cj3*gconst1);
IkReal x9601=(cj3*gconst2);
IkReal x9602=((1.0)*cj2);
IkReal x9603=(cj1*sj2);
IkReal x9604=(gconst2*sj3);
IkReal x9605=(cj1*x9602);
IkReal x9606=((1.0)*x9597);
IkReal x9607=((1.0)*x9596);
IkReal x9608=(gconst1*x9596);
IkReal x9609=(cj3*x9596);
IkReal x9610=(x9597*x9604);
evalcond[0]=((((-1.0)*r22*x9606))+((r21*x9608))+(((-1.0)*gconst2*r20*x9607)));
evalcond[1]=(((r01*x9608))+(((-1.0)*r02*x9606))+(((-1.0)*gconst2*r00*x9607)));
evalcond[2]=((1.0)+((r11*x9608))+(((-1.0)*r12*x9606))+(((-1.0)*gconst2*r10*x9607)));
evalcond[3]=((((-1.0)*r10*x9601*x9606))+((r11*x9597*x9600))+((r12*x9609))+((r11*x9604))+((r10*x9599)));
evalcond[4]=(((r10*x9610))+((r10*x9600))+((r11*x9601))+(((-1.0)*r12*sj3*x9607))+(((-1.0)*r11*x9599*x9606)));
evalcond[5]=(((r20*x9599))+((cj2*sj1))+((r21*x9604))+(((-1.0)*r20*x9601*x9606))+x9603+((r22*x9609))+((r21*x9597*x9600)));
evalcond[6]=((((-1.0)*x9605))+((r00*x9599))+((r01*x9597*x9600))+((r01*x9604))+x9598+(((-1.0)*r00*x9601*x9606))+((r02*x9609)));
evalcond[7]=(((r20*x9610))+((r21*x9601))+(((-1.0)*x9605))+((r20*x9600))+x9598+(((-1.0)*r22*sj3*x9607))+(((-1.0)*r21*x9599*x9606)));
evalcond[8]=((((-1.0)*r02*sj3*x9607))+(((-1.0)*sj1*x9602))+((r00*x9610))+((r00*x9600))+((r01*x9601))+(((-1.0)*x9603))+(((-1.0)*r01*x9599*x9606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9611=gconst2*gconst2;
IkReal x9612=gconst1*gconst1;
IkReal x9613=(gconst2*r11);
IkReal x9614=(cj3*r02);
IkReal x9615=(gconst1*r01);
IkReal x9616=(cj3*r10);
IkReal x9617=(r10*sj3);
IkReal x9618=((1.0)*gconst1*r00);
IkReal x9619=(r01*x9612);
IkReal x9620=(r00*x9611);
CheckValue<IkReal> x9621=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x9617*x9620))+(((-1.0)*sj3*x9613*x9618))+(((-1.0)*gconst2*x9615*x9617))+((r11*sj3*x9619)))),-1);
if(!x9621.valid){
continue;
}
CheckValue<IkReal> x9622 = IKatan2WithCheck(IkReal((((gconst1*r10*x9614))+((x9613*x9614)))),IkReal((((x9616*x9619))+(((-1.0)*gconst2*x9616*x9618))+((cj3*x9613*x9615))+(((-1.0)*cj3*r11*x9620)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9621.value)))+(x9622.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9623=IKsin(j4);
IkReal x9624=IKcos(j4);
IkReal x9625=(sj1*sj2);
IkReal x9626=(gconst1*sj3);
IkReal x9627=(cj3*gconst1);
IkReal x9628=(cj3*gconst2);
IkReal x9629=((1.0)*cj2);
IkReal x9630=(cj1*sj2);
IkReal x9631=(gconst2*sj3);
IkReal x9632=(cj1*x9629);
IkReal x9633=((1.0)*x9624);
IkReal x9634=((1.0)*x9623);
IkReal x9635=(gconst1*x9623);
IkReal x9636=(cj3*x9623);
IkReal x9637=(x9624*x9631);
evalcond[0]=((((-1.0)*r22*x9633))+((r21*x9635))+(((-1.0)*gconst2*r20*x9634)));
evalcond[1]=(((r01*x9635))+(((-1.0)*gconst2*r00*x9634))+(((-1.0)*r02*x9633)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9634))+(((-1.0)*r12*x9633))+((r11*x9635)));
evalcond[3]=(((r10*x9626))+((r12*x9636))+((r11*x9631))+(((-1.0)*r10*x9628*x9633))+((r11*x9624*x9627)));
evalcond[4]=((((-1.0)*r11*x9626*x9633))+((r10*x9637))+((r10*x9627))+(((-1.0)*r12*sj3*x9634))+((r11*x9628)));
evalcond[5]=(((cj2*sj1))+((r20*x9626))+(((-1.0)*r20*x9628*x9633))+((r21*x9631))+((r22*x9636))+x9630+((r21*x9624*x9627)));
evalcond[6]=(((r01*x9631))+((r00*x9626))+(((-1.0)*r00*x9628*x9633))+x9625+((r02*x9636))+((r01*x9624*x9627))+(((-1.0)*x9632)));
evalcond[7]=(((r20*x9627))+((r20*x9637))+((r21*x9628))+(((-1.0)*r22*sj3*x9634))+x9625+(((-1.0)*r21*x9626*x9633))+(((-1.0)*x9632)));
evalcond[8]=(((r01*x9628))+((r00*x9637))+((r00*x9627))+(((-1.0)*x9630))+(((-1.0)*r02*sj3*x9634))+(((-1.0)*sj1*x9629))+(((-1.0)*r01*x9626*x9633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9638=((1.0)*gconst2);
CheckValue<IkReal> x9639=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9638)))),-1);
if(!x9639.valid){
continue;
}
CheckValue<IkReal> x9640 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9638)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9640.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9639.value)))+(x9640.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9641=IKsin(j4);
IkReal x9642=IKcos(j4);
IkReal x9643=(sj1*sj2);
IkReal x9644=(gconst1*sj3);
IkReal x9645=(cj3*gconst1);
IkReal x9646=(cj3*gconst2);
IkReal x9647=((1.0)*cj2);
IkReal x9648=(cj1*sj2);
IkReal x9649=(gconst2*sj3);
IkReal x9650=(cj1*x9647);
IkReal x9651=((1.0)*x9642);
IkReal x9652=((1.0)*x9641);
IkReal x9653=(gconst1*x9641);
IkReal x9654=(cj3*x9641);
IkReal x9655=(x9642*x9649);
evalcond[0]=((((-1.0)*gconst2*r20*x9652))+((r21*x9653))+(((-1.0)*r22*x9651)));
evalcond[1]=(((r01*x9653))+(((-1.0)*gconst2*r00*x9652))+(((-1.0)*r02*x9651)));
evalcond[2]=((1.0)+((r11*x9653))+(((-1.0)*r12*x9651))+(((-1.0)*gconst2*r10*x9652)));
evalcond[3]=((((-1.0)*r10*x9646*x9651))+((r11*x9649))+((r12*x9654))+((r11*x9642*x9645))+((r10*x9644)));
evalcond[4]=(((r11*x9646))+(((-1.0)*r11*x9644*x9651))+((r10*x9645))+((r10*x9655))+(((-1.0)*r12*sj3*x9652)));
evalcond[5]=(((cj2*sj1))+((r21*x9642*x9645))+x9648+((r20*x9644))+((r22*x9654))+(((-1.0)*r20*x9646*x9651))+((r21*x9649)));
evalcond[6]=(((r01*x9642*x9645))+((r00*x9644))+((r01*x9649))+x9643+(((-1.0)*r00*x9646*x9651))+((r02*x9654))+(((-1.0)*x9650)));
evalcond[7]=(((r20*x9655))+x9643+((r20*x9645))+(((-1.0)*r22*sj3*x9652))+((r21*x9646))+(((-1.0)*r21*x9644*x9651))+(((-1.0)*x9650)));
evalcond[8]=((((-1.0)*sj1*x9647))+(((-1.0)*r02*sj3*x9652))+((r00*x9655))+((r00*x9645))+((r01*x9646))+(((-1.0)*x9648))+(((-1.0)*r01*x9644*x9651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9656=((-1.0)*r20);
IkReal x9657=x8919;
CheckValue<IkReal> x9659 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9656),IKFAST_ATAN2_MAGTHRESH);
if(!x9659.valid){
continue;
}
IkReal x9658=((-1.0)*(x9659.value));
sj5=gconst1;
cj5=gconst2;
j5=x9658;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9658;
IkReal gconst1=(r21*x9657);
IkReal gconst2=(x9656*x9657);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9660=((-1.0)*r20);
IkReal x9661=x8919;
CheckValue<IkReal> x9663 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9660),IKFAST_ATAN2_MAGTHRESH);
if(!x9663.valid){
continue;
}
IkReal x9662=((-1.0)*(x9663.value));
sj5=gconst1;
cj5=gconst2;
j5=x9662;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9662;
IkReal gconst1=(r21*x9661);
IkReal gconst2=(x9660*x9661);
CheckValue<IkReal> x9671=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9671.valid){
continue;
}
IkReal x9664=x9671.value;
IkReal x9665=(sj3*x9664);
IkReal x9666=(r11*x9665);
IkReal x9667=(r00*x9665);
IkReal x9668=(r01*x9665);
IkReal x9669=(r10*x9665);
IkReal x9670=(r20*r21*x9665);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9666))+((r10*r20*r21*x9668))+((r10*x9667*(r20*r20)))+((r01*x9666*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9672=gconst2*gconst2;
IkReal x9673=gconst1*gconst1;
IkReal x9674=((1.0)*cj3);
IkReal x9675=((1.0)*sj3);
IkReal x9676=(r11*sj3);
IkReal x9677=(r10*sj3);
IkReal x9678=(gconst1*gconst2*r00);
IkReal x9679=(gconst1*gconst2*r01);
IkReal x9680=(r00*x9672);
IkReal x9681=(r01*x9673);
CheckValue<IkReal> x9682=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9674))+(((-1.0)*r11*x9674*x9681))+(((-1.0)*r10*x9674*x9680))+((cj3*r11*x9678))+((cj3*r10*x9679)))),-1);
if(!x9682.valid){
continue;
}
CheckValue<IkReal> x9683 = IKatan2WithCheck(IkReal((((gconst1*r02*x9677))+((gconst2*r02*x9676)))),IkReal((((x9677*x9681))+(((-1.0)*r10*x9675*x9678))+((x9676*x9679))+(((-1.0)*r11*x9675*x9680)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9682.value)))+(x9683.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9684=IKsin(j4);
IkReal x9685=IKcos(j4);
IkReal x9686=(cj2*sj1);
IkReal x9687=(cj1*sj2);
IkReal x9688=(gconst1*sj3);
IkReal x9689=(cj3*gconst1);
IkReal x9690=(sj1*sj2);
IkReal x9691=(cj3*gconst2);
IkReal x9692=(cj1*cj2);
IkReal x9693=(gconst2*sj3);
IkReal x9694=((1.0)*x9685);
IkReal x9695=((1.0)*x9684);
IkReal x9696=(gconst1*x9684);
IkReal x9697=(cj3*x9684);
IkReal x9698=(x9687+x9686);
IkReal x9699=(x9685*x9693);
evalcond[0]=(((r21*x9696))+(((-1.0)*r22*x9694))+(((-1.0)*gconst2*r20*x9695)));
evalcond[1]=((((-1.0)*gconst2*r00*x9695))+(((-1.0)*r02*x9694))+((r01*x9696)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9695))+(((-1.0)*r12*x9694))+((r11*x9696)));
evalcond[3]=(((r11*x9685*x9689))+(((-1.0)*r10*x9691*x9694))+((r12*x9697))+((r11*x9693))+((r10*x9688)));
evalcond[4]=(((r11*x9691))+((r10*x9699))+(((-1.0)*r12*sj3*x9695))+((r10*x9689))+(((-1.0)*r11*x9688*x9694)));
evalcond[5]=((((-1.0)*r20*x9691*x9694))+((r22*x9697))+((r21*x9685*x9689))+((r21*x9693))+x9698+((r20*x9688)));
evalcond[6]=((((-1.0)*x9690))+((r02*x9697))+x9692+((r01*x9693))+((r00*x9688))+(((-1.0)*r00*x9691*x9694))+((r01*x9685*x9689)));
evalcond[7]=((((-1.0)*r02*sj3*x9695))+x9698+((r00*x9699))+((r01*x9691))+((r00*x9689))+(((-1.0)*r01*x9688*x9694)));
evalcond[8]=((((-1.0)*x9692))+(((-1.0)*r22*sj3*x9695))+((r21*x9691))+x9690+(((-1.0)*r21*x9688*x9694))+((r20*x9689))+((r20*x9699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9700=gconst2*gconst2;
IkReal x9701=gconst1*gconst1;
IkReal x9702=(gconst2*r11);
IkReal x9703=(cj3*r02);
IkReal x9704=(gconst1*r01);
IkReal x9705=(cj3*r10);
IkReal x9706=(r10*sj3);
IkReal x9707=((1.0)*gconst1*r00);
IkReal x9708=(r01*x9701);
IkReal x9709=(r00*x9700);
CheckValue<IkReal> x9710=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x9706*x9709))+(((-1.0)*sj3*x9702*x9707))+((r11*sj3*x9708))+(((-1.0)*gconst2*x9704*x9706)))),-1);
if(!x9710.valid){
continue;
}
CheckValue<IkReal> x9711 = IKatan2WithCheck(IkReal((((x9702*x9703))+((gconst1*r10*x9703)))),IkReal(((((-1.0)*cj3*r11*x9709))+((x9705*x9708))+((cj3*x9702*x9704))+(((-1.0)*gconst2*x9705*x9707)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9710.value)))+(x9711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9712=IKsin(j4);
IkReal x9713=IKcos(j4);
IkReal x9714=(cj2*sj1);
IkReal x9715=(cj1*sj2);
IkReal x9716=(gconst1*sj3);
IkReal x9717=(cj3*gconst1);
IkReal x9718=(sj1*sj2);
IkReal x9719=(cj3*gconst2);
IkReal x9720=(cj1*cj2);
IkReal x9721=(gconst2*sj3);
IkReal x9722=((1.0)*x9713);
IkReal x9723=((1.0)*x9712);
IkReal x9724=(gconst1*x9712);
IkReal x9725=(cj3*x9712);
IkReal x9726=(x9715+x9714);
IkReal x9727=(x9713*x9721);
evalcond[0]=((((-1.0)*gconst2*r20*x9723))+(((-1.0)*r22*x9722))+((r21*x9724)));
evalcond[1]=(((r01*x9724))+(((-1.0)*r02*x9722))+(((-1.0)*gconst2*r00*x9723)));
evalcond[2]=((-1.0)+((r11*x9724))+(((-1.0)*r12*x9722))+(((-1.0)*gconst2*r10*x9723)));
evalcond[3]=(((r11*x9721))+((r12*x9725))+(((-1.0)*r10*x9719*x9722))+((r10*x9716))+((r11*x9713*x9717)));
evalcond[4]=((((-1.0)*r12*sj3*x9723))+(((-1.0)*r11*x9716*x9722))+((r11*x9719))+((r10*x9717))+((r10*x9727)));
evalcond[5]=(x9726+((r20*x9716))+(((-1.0)*r20*x9719*x9722))+((r21*x9713*x9717))+((r21*x9721))+((r22*x9725)));
evalcond[6]=(((r01*x9721))+((r02*x9725))+x9720+((r01*x9713*x9717))+((r00*x9716))+(((-1.0)*x9718))+(((-1.0)*r00*x9719*x9722)));
evalcond[7]=((((-1.0)*r02*sj3*x9723))+x9726+((r01*x9719))+((r00*x9717))+(((-1.0)*r01*x9716*x9722))+((r00*x9727)));
evalcond[8]=((((-1.0)*r21*x9716*x9722))+x9718+((r20*x9727))+((r20*x9717))+(((-1.0)*r22*sj3*x9723))+((r21*x9719))+(((-1.0)*x9720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9728 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9728.valid){
continue;
}
CheckValue<IkReal> x9729=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9728.value)+(((1.5707963267949)*(x9729.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9730=IKsin(j4);
IkReal x9731=IKcos(j4);
IkReal x9732=(cj2*sj1);
IkReal x9733=(cj1*sj2);
IkReal x9734=(gconst1*sj3);
IkReal x9735=(cj3*gconst1);
IkReal x9736=(sj1*sj2);
IkReal x9737=(cj3*gconst2);
IkReal x9738=(cj1*cj2);
IkReal x9739=(gconst2*sj3);
IkReal x9740=((1.0)*x9731);
IkReal x9741=((1.0)*x9730);
IkReal x9742=(gconst1*x9730);
IkReal x9743=(cj3*x9730);
IkReal x9744=(x9733+x9732);
IkReal x9745=(x9731*x9739);
evalcond[0]=(((r21*x9742))+(((-1.0)*gconst2*r20*x9741))+(((-1.0)*r22*x9740)));
evalcond[1]=((((-1.0)*gconst2*r00*x9741))+(((-1.0)*r02*x9740))+((r01*x9742)));
evalcond[2]=((-1.0)+((r11*x9742))+(((-1.0)*gconst2*r10*x9741))+(((-1.0)*r12*x9740)));
evalcond[3]=(((r11*x9739))+((r11*x9731*x9735))+(((-1.0)*r10*x9737*x9740))+((r12*x9743))+((r10*x9734)));
evalcond[4]=(((r11*x9737))+((r10*x9745))+(((-1.0)*r12*sj3*x9741))+(((-1.0)*r11*x9734*x9740))+((r10*x9735)));
evalcond[5]=(((r22*x9743))+((r21*x9731*x9735))+((r20*x9734))+x9744+(((-1.0)*r20*x9737*x9740))+((r21*x9739)));
evalcond[6]=(((r01*x9731*x9735))+((r02*x9743))+x9738+(((-1.0)*r00*x9737*x9740))+((r01*x9739))+(((-1.0)*x9736))+((r00*x9734)));
evalcond[7]=((((-1.0)*r02*sj3*x9741))+x9744+(((-1.0)*r01*x9734*x9740))+((r00*x9745))+((r01*x9737))+((r00*x9735)));
evalcond[8]=(((r20*x9735))+x9736+((r20*x9745))+((r21*x9737))+(((-1.0)*r22*sj3*x9741))+(((-1.0)*x9738))+(((-1.0)*r21*x9734*x9740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9746=((-1.0)*r20);
IkReal x9747=x8919;
CheckValue<IkReal> x9749 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9746),IKFAST_ATAN2_MAGTHRESH);
if(!x9749.valid){
continue;
}
IkReal x9748=((-1.0)*(x9749.value));
sj5=gconst1;
cj5=gconst2;
j5=x9748;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9748;
IkReal gconst1=(r21*x9747);
IkReal gconst2=(x9746*x9747);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9750=((-1.0)*r20);
IkReal x9751=x8919;
CheckValue<IkReal> x9753 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9750),IKFAST_ATAN2_MAGTHRESH);
if(!x9753.valid){
continue;
}
IkReal x9752=((-1.0)*(x9753.value));
sj5=gconst1;
cj5=gconst2;
j5=x9752;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9752;
IkReal gconst1=(r21*x9751);
IkReal gconst2=(x9750*x9751);
CheckValue<IkReal> x9761=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9761.valid){
continue;
}
IkReal x9754=x9761.value;
IkReal x9755=(sj3*x9754);
IkReal x9756=(r11*x9755);
IkReal x9757=(r00*x9755);
IkReal x9758=(r01*x9755);
IkReal x9759=(r10*x9755);
IkReal x9760=(r20*r21*x9755);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9756))+((r10*x9757*(r20*r20)))+((r10*r20*r21*x9758))+((r01*x9756*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9762=gconst1*gconst1;
IkReal x9763=gconst2*gconst2;
IkReal x9764=((1.0)*cj3);
IkReal x9765=(gconst2*r10);
IkReal x9766=(r01*sj3);
IkReal x9767=(gconst1*r00*sj3);
IkReal x9768=(gconst1*gconst2*r11);
IkReal x9769=(r10*x9763);
IkReal x9770=(r11*x9762);
CheckValue<IkReal> x9771 = IKatan2WithCheck(IkReal((((r12*x9767))+((gconst2*r12*x9766)))),IkReal(((((-1.0)*x9766*x9769))+((r00*sj3*x9770))+((x9766*x9768))+(((-1.0)*x9765*x9767)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9771.valid){
continue;
}
CheckValue<IkReal> x9772=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9768))+(((-1.0)*r01*x9764*x9770))+(((-1.0)*r02*r12*x9764))+((cj3*gconst1*r01*x9765))+(((-1.0)*r00*x9764*x9769)))),-1);
if(!x9772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9771.value)+(((1.5707963267949)*(x9772.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9773=IKsin(j4);
IkReal x9774=IKcos(j4);
IkReal x9775=(sj1*sj2);
IkReal x9776=(gconst1*sj3);
IkReal x9777=(cj3*gconst1);
IkReal x9778=(cj3*gconst2);
IkReal x9779=((1.0)*cj2);
IkReal x9780=(cj1*sj2);
IkReal x9781=(gconst2*sj3);
IkReal x9782=(cj1*x9779);
IkReal x9783=((1.0)*x9774);
IkReal x9784=((1.0)*x9773);
IkReal x9785=(gconst1*x9773);
IkReal x9786=(cj3*x9773);
IkReal x9787=(x9774*x9781);
evalcond[0]=(((r21*x9785))+(((-1.0)*gconst2*r20*x9784))+(((-1.0)*r22*x9783)));
evalcond[1]=((((-1.0)*r12*x9783))+((r11*x9785))+(((-1.0)*gconst2*r10*x9784)));
evalcond[2]=((-1.0)+((r01*x9785))+(((-1.0)*gconst2*r00*x9784))+(((-1.0)*r02*x9783)));
evalcond[3]=(((r01*x9781))+((r00*x9776))+((r01*x9774*x9777))+((r02*x9786))+(((-1.0)*r00*x9778*x9783)));
evalcond[4]=(((r00*x9787))+(((-1.0)*r02*sj3*x9784))+((r01*x9778))+((r00*x9777))+(((-1.0)*r01*x9776*x9783)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x9778*x9783))+((r21*x9781))+((r22*x9786))+x9780+((r20*x9776))+((r21*x9774*x9777)));
evalcond[6]=(((r10*x9776))+x9775+((r11*x9781))+(((-1.0)*r10*x9778*x9783))+((r12*x9786))+(((-1.0)*x9782))+((r11*x9774*x9777)));
evalcond[7]=((((-1.0)*r22*sj3*x9784))+x9775+((r21*x9778))+(((-1.0)*r21*x9776*x9783))+((r20*x9777))+((r20*x9787))+(((-1.0)*x9782)));
evalcond[8]=(((r10*x9777))+(((-1.0)*r11*x9776*x9783))+(((-1.0)*r12*sj3*x9784))+((r10*x9787))+(((-1.0)*sj1*x9779))+(((-1.0)*x9780))+((r11*x9778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9788=gconst2*gconst2;
IkReal x9789=gconst1*gconst1;
IkReal x9790=(gconst1*r00);
IkReal x9791=(r11*sj3);
IkReal x9792=((1.0)*gconst2);
IkReal x9793=(cj3*r12);
IkReal x9794=(cj3*r11);
IkReal x9795=(gconst2*r01);
IkReal x9796=(cj3*r10);
IkReal x9797=(r10*sj3);
CheckValue<IkReal> x9798 = IKatan2WithCheck(IkReal((((x9790*x9793))+((x9793*x9795)))),IkReal((((gconst1*x9794*x9795))+(((-1.0)*r01*x9788*x9796))+((r00*x9789*x9794))+(((-1.0)*x9790*x9792*x9796)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9798.valid){
continue;
}
CheckValue<IkReal> x9799=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst1*r01*x9792*x9797))+(((-1.0)*x9790*x9791*x9792))+((r00*x9788*x9797))+((r01*x9789*x9791)))),-1);
if(!x9799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9798.value)+(((1.5707963267949)*(x9799.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9800=IKsin(j4);
IkReal x9801=IKcos(j4);
IkReal x9802=(sj1*sj2);
IkReal x9803=(gconst1*sj3);
IkReal x9804=(cj3*gconst1);
IkReal x9805=(cj3*gconst2);
IkReal x9806=((1.0)*cj2);
IkReal x9807=(cj1*sj2);
IkReal x9808=(gconst2*sj3);
IkReal x9809=(cj1*x9806);
IkReal x9810=((1.0)*x9801);
IkReal x9811=((1.0)*x9800);
IkReal x9812=(gconst1*x9800);
IkReal x9813=(cj3*x9800);
IkReal x9814=(x9801*x9808);
evalcond[0]=(((r21*x9812))+(((-1.0)*r22*x9810))+(((-1.0)*gconst2*r20*x9811)));
evalcond[1]=((((-1.0)*gconst2*r10*x9811))+((r11*x9812))+(((-1.0)*r12*x9810)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9811))+(((-1.0)*r02*x9810))+((r01*x9812)));
evalcond[3]=(((r00*x9803))+((r02*x9813))+((r01*x9801*x9804))+(((-1.0)*r00*x9805*x9810))+((r01*x9808)));
evalcond[4]=(((r00*x9804))+(((-1.0)*r01*x9803*x9810))+(((-1.0)*r02*sj3*x9811))+((r01*x9805))+((r00*x9814)));
evalcond[5]=(((cj2*sj1))+((r21*x9808))+((r21*x9801*x9804))+((r22*x9813))+(((-1.0)*r20*x9805*x9810))+((r20*x9803))+x9807);
evalcond[6]=(((r10*x9803))+(((-1.0)*x9809))+((r12*x9813))+((r11*x9808))+(((-1.0)*r10*x9805*x9810))+((r11*x9801*x9804))+x9802);
evalcond[7]=(((r21*x9805))+(((-1.0)*x9809))+(((-1.0)*r22*sj3*x9811))+(((-1.0)*r21*x9803*x9810))+((r20*x9804))+x9802+((r20*x9814)));
evalcond[8]=(((r10*x9804))+(((-1.0)*x9807))+((r11*x9805))+(((-1.0)*r12*sj3*x9811))+(((-1.0)*sj1*x9806))+(((-1.0)*r11*x9803*x9810))+((r10*x9814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9815=((1.0)*gconst2);
CheckValue<IkReal> x9816=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9815)))),-1);
if(!x9816.valid){
continue;
}
CheckValue<IkReal> x9817 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9815)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9816.value)))+(x9817.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9818=IKsin(j4);
IkReal x9819=IKcos(j4);
IkReal x9820=(sj1*sj2);
IkReal x9821=(gconst1*sj3);
IkReal x9822=(cj3*gconst1);
IkReal x9823=(cj3*gconst2);
IkReal x9824=((1.0)*cj2);
IkReal x9825=(cj1*sj2);
IkReal x9826=(gconst2*sj3);
IkReal x9827=(cj1*x9824);
IkReal x9828=((1.0)*x9819);
IkReal x9829=((1.0)*x9818);
IkReal x9830=(gconst1*x9818);
IkReal x9831=(cj3*x9818);
IkReal x9832=(x9819*x9826);
evalcond[0]=(((r21*x9830))+(((-1.0)*gconst2*r20*x9829))+(((-1.0)*r22*x9828)));
evalcond[1]=(((r11*x9830))+(((-1.0)*r12*x9828))+(((-1.0)*gconst2*r10*x9829)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9829))+((r01*x9830))+(((-1.0)*r02*x9828)));
evalcond[3]=((((-1.0)*r00*x9823*x9828))+((r00*x9821))+((r01*x9826))+((r02*x9831))+((r01*x9819*x9822)));
evalcond[4]=(((r00*x9832))+(((-1.0)*r01*x9821*x9828))+((r00*x9822))+((r01*x9823))+(((-1.0)*r02*sj3*x9829)));
evalcond[5]=(((r20*x9821))+((cj2*sj1))+((r22*x9831))+((r21*x9826))+((r21*x9819*x9822))+(((-1.0)*r20*x9823*x9828))+x9825);
evalcond[6]=(((r11*x9826))+((r11*x9819*x9822))+(((-1.0)*x9827))+(((-1.0)*r10*x9823*x9828))+((r12*x9831))+x9820+((r10*x9821)));
evalcond[7]=(((r20*x9822))+(((-1.0)*x9827))+(((-1.0)*r22*sj3*x9829))+((r21*x9823))+(((-1.0)*r21*x9821*x9828))+((r20*x9832))+x9820);
evalcond[8]=(((r10*x9832))+((r11*x9823))+(((-1.0)*r11*x9821*x9828))+(((-1.0)*r12*sj3*x9829))+(((-1.0)*x9825))+((r10*x9822))+(((-1.0)*sj1*x9824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9833=((-1.0)*r20);
IkReal x9834=x8919;
CheckValue<IkReal> x9836 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9833),IKFAST_ATAN2_MAGTHRESH);
if(!x9836.valid){
continue;
}
IkReal x9835=((-1.0)*(x9836.value));
sj5=gconst1;
cj5=gconst2;
j5=x9835;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9835;
IkReal gconst1=(r21*x9834);
IkReal gconst2=(x9833*x9834);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9837=((-1.0)*r20);
IkReal x9838=x8919;
CheckValue<IkReal> x9840 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9837),IKFAST_ATAN2_MAGTHRESH);
if(!x9840.valid){
continue;
}
IkReal x9839=((-1.0)*(x9840.value));
sj5=gconst1;
cj5=gconst2;
j5=x9839;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9839;
IkReal gconst1=(r21*x9838);
IkReal gconst2=(x9837*x9838);
CheckValue<IkReal> x9848=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9848.valid){
continue;
}
IkReal x9841=x9848.value;
IkReal x9842=(sj3*x9841);
IkReal x9843=(r11*x9842);
IkReal x9844=(r00*x9842);
IkReal x9845=(r01*x9842);
IkReal x9846=(r10*x9842);
IkReal x9847=(r20*r21*x9842);
j4eval[0]=IKsign((((r00*r20*r21*x9843))+((r02*r12*sj3))+((r10*x9844*(r20*r20)))+((r10*r20*r21*x9845))+((r01*x9843*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9849=gconst1*gconst1;
IkReal x9850=gconst2*gconst2;
IkReal x9851=((1.0)*cj3);
IkReal x9852=(gconst2*r10);
IkReal x9853=(r01*sj3);
IkReal x9854=(gconst1*r00*sj3);
IkReal x9855=(gconst1*gconst2*r11);
IkReal x9856=(r10*x9850);
IkReal x9857=(r11*x9849);
CheckValue<IkReal> x9858=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9855))+(((-1.0)*r02*r12*x9851))+(((-1.0)*r00*x9851*x9856))+(((-1.0)*r01*x9851*x9857))+((cj3*gconst1*r01*x9852)))),-1);
if(!x9858.valid){
continue;
}
CheckValue<IkReal> x9859 = IKatan2WithCheck(IkReal((((gconst2*r12*x9853))+((r12*x9854)))),IkReal(((((-1.0)*x9852*x9854))+((x9853*x9855))+(((-1.0)*x9853*x9856))+((r00*sj3*x9857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9858.value)))+(x9859.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9860=IKsin(j4);
IkReal x9861=IKcos(j4);
IkReal x9862=(cj2*sj1);
IkReal x9863=(cj1*sj2);
IkReal x9864=(gconst1*sj3);
IkReal x9865=(cj3*gconst1);
IkReal x9866=(sj1*sj2);
IkReal x9867=(cj3*gconst2);
IkReal x9868=(cj1*cj2);
IkReal x9869=(gconst2*sj3);
IkReal x9870=((1.0)*x9861);
IkReal x9871=((1.0)*x9860);
IkReal x9872=(gconst1*x9860);
IkReal x9873=(cj3*x9860);
IkReal x9874=(x9863+x9862);
IkReal x9875=(x9861*x9869);
evalcond[0]=((((-1.0)*gconst2*r20*x9871))+((r21*x9872))+(((-1.0)*r22*x9870)));
evalcond[1]=((((-1.0)*gconst2*r10*x9871))+((r11*x9872))+(((-1.0)*r12*x9870)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9870))+(((-1.0)*gconst2*r00*x9871))+((r01*x9872)));
evalcond[3]=(((r02*x9873))+((r01*x9861*x9865))+((r00*x9864))+(((-1.0)*r00*x9867*x9870))+((r01*x9869)));
evalcond[4]=((((-1.0)*r01*x9864*x9870))+((r00*x9865))+(((-1.0)*r02*sj3*x9871))+((r01*x9867))+((r00*x9875)));
evalcond[5]=((((-1.0)*r20*x9867*x9870))+((r21*x9861*x9865))+((r22*x9873))+((r21*x9869))+((r20*x9864))+x9874);
evalcond[6]=(((r12*x9873))+((r11*x9869))+(((-1.0)*x9866))+((r10*x9864))+x9868+(((-1.0)*r10*x9867*x9870))+((r11*x9861*x9865)));
evalcond[7]=((((-1.0)*r12*sj3*x9871))+((r10*x9875))+((r11*x9867))+((r10*x9865))+(((-1.0)*r11*x9864*x9870))+x9874);
evalcond[8]=((((-1.0)*r21*x9864*x9870))+((r20*x9875))+(((-1.0)*x9868))+(((-1.0)*r22*sj3*x9871))+((r21*x9867))+((r20*x9865))+x9866);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9876=gconst2*gconst2;
IkReal x9877=gconst1*gconst1;
IkReal x9878=(gconst1*r00);
IkReal x9879=(r11*sj3);
IkReal x9880=((1.0)*gconst2);
IkReal x9881=(cj3*r12);
IkReal x9882=(cj3*r11);
IkReal x9883=(gconst2*r01);
IkReal x9884=(cj3*r10);
IkReal x9885=(r10*sj3);
CheckValue<IkReal> x9886 = IKatan2WithCheck(IkReal((((x9878*x9881))+((x9881*x9883)))),IkReal((((gconst1*x9882*x9883))+(((-1.0)*x9878*x9880*x9884))+(((-1.0)*r01*x9876*x9884))+((r00*x9877*x9882)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9886.valid){
continue;
}
CheckValue<IkReal> x9887=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst1*r01*x9880*x9885))+((r00*x9876*x9885))+((r01*x9877*x9879))+(((-1.0)*x9878*x9879*x9880)))),-1);
if(!x9887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9886.value)+(((1.5707963267949)*(x9887.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9888=IKsin(j4);
IkReal x9889=IKcos(j4);
IkReal x9890=(cj2*sj1);
IkReal x9891=(cj1*sj2);
IkReal x9892=(gconst1*sj3);
IkReal x9893=(cj3*gconst1);
IkReal x9894=(sj1*sj2);
IkReal x9895=(cj3*gconst2);
IkReal x9896=(cj1*cj2);
IkReal x9897=(gconst2*sj3);
IkReal x9898=((1.0)*x9889);
IkReal x9899=((1.0)*x9888);
IkReal x9900=(gconst1*x9888);
IkReal x9901=(cj3*x9888);
IkReal x9902=(x9890+x9891);
IkReal x9903=(x9889*x9897);
evalcond[0]=((((-1.0)*gconst2*r20*x9899))+((r21*x9900))+(((-1.0)*r22*x9898)));
evalcond[1]=((((-1.0)*r12*x9898))+((r11*x9900))+(((-1.0)*gconst2*r10*x9899)));
evalcond[2]=((1.0)+((r01*x9900))+(((-1.0)*gconst2*r00*x9899))+(((-1.0)*r02*x9898)));
evalcond[3]=(((r02*x9901))+((r01*x9897))+((r00*x9892))+((r01*x9889*x9893))+(((-1.0)*r00*x9895*x9898)));
evalcond[4]=(((r01*x9895))+((r00*x9893))+((r00*x9903))+(((-1.0)*r01*x9892*x9898))+(((-1.0)*r02*sj3*x9899)));
evalcond[5]=(((r21*x9889*x9893))+(((-1.0)*r20*x9895*x9898))+((r22*x9901))+((r21*x9897))+((r20*x9892))+x9902);
evalcond[6]=(((r11*x9889*x9893))+((r12*x9901))+((r11*x9897))+(((-1.0)*x9894))+((r10*x9892))+x9896+(((-1.0)*r10*x9895*x9898)));
evalcond[7]=((((-1.0)*r11*x9892*x9898))+((r11*x9895))+x9902+((r10*x9893))+((r10*x9903))+(((-1.0)*r12*sj3*x9899)));
evalcond[8]=(((r20*x9903))+(((-1.0)*r21*x9892*x9898))+((r21*x9895))+(((-1.0)*x9896))+((r20*x9893))+x9894+(((-1.0)*r22*sj3*x9899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9904 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9904.valid){
continue;
}
CheckValue<IkReal> x9905=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9904.value)+(((1.5707963267949)*(x9905.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9906=IKsin(j4);
IkReal x9907=IKcos(j4);
IkReal x9908=(cj2*sj1);
IkReal x9909=(cj1*sj2);
IkReal x9910=(gconst1*sj3);
IkReal x9911=(cj3*gconst1);
IkReal x9912=(sj1*sj2);
IkReal x9913=(cj3*gconst2);
IkReal x9914=(cj1*cj2);
IkReal x9915=(gconst2*sj3);
IkReal x9916=((1.0)*x9907);
IkReal x9917=((1.0)*x9906);
IkReal x9918=(gconst1*x9906);
IkReal x9919=(cj3*x9906);
IkReal x9920=(x9908+x9909);
IkReal x9921=(x9907*x9915);
evalcond[0]=((((-1.0)*gconst2*r20*x9917))+(((-1.0)*r22*x9916))+((r21*x9918)));
evalcond[1]=((((-1.0)*gconst2*r10*x9917))+(((-1.0)*r12*x9916))+((r11*x9918)));
evalcond[2]=((1.0)+((r01*x9918))+(((-1.0)*r02*x9916))+(((-1.0)*gconst2*r00*x9917)));
evalcond[3]=(((r01*x9915))+((r00*x9910))+(((-1.0)*r00*x9913*x9916))+((r01*x9907*x9911))+((r02*x9919)));
evalcond[4]=((((-1.0)*r01*x9910*x9916))+((r01*x9913))+((r00*x9911))+((r00*x9921))+(((-1.0)*r02*sj3*x9917)));
evalcond[5]=(((r20*x9910))+(((-1.0)*r20*x9913*x9916))+((r22*x9919))+((r21*x9915))+((r21*x9907*x9911))+x9920);
evalcond[6]=(((r12*x9919))+((r11*x9907*x9911))+(((-1.0)*x9912))+((r11*x9915))+(((-1.0)*r10*x9913*x9916))+x9914+((r10*x9910)));
evalcond[7]=(((r10*x9921))+(((-1.0)*r11*x9910*x9916))+((r11*x9913))+x9920+((r10*x9911))+(((-1.0)*r12*sj3*x9917)));
evalcond[8]=((((-1.0)*r22*sj3*x9917))+((r20*x9911))+(((-1.0)*x9914))+((r20*x9921))+(((-1.0)*r21*x9910*x9916))+((r21*x9913))+x9912);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9922=((-1.0)*r20);
IkReal x9923=((-1.0)*px);
CheckValue<IkReal> x9925 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9922),IKFAST_ATAN2_MAGTHRESH);
if(!x9925.valid){
continue;
}
IkReal x9924=((-1.0)*(x9925.value));
sj5=gconst1;
cj5=gconst2;
j5=x9924;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9923);
rxp1_1=(px*r21);
rxp1_2=(r11*x9923);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9924;
IkReal gconst1=r21;
IkReal gconst2=x9922;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9926=((-1.0)*r20);
IkReal x9927=((-1.0)*px);
CheckValue<IkReal> x9929 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9926),IKFAST_ATAN2_MAGTHRESH);
if(!x9929.valid){
continue;
}
IkReal x9928=((-1.0)*(x9929.value));
sj5=gconst1;
cj5=gconst2;
j5=x9928;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9927);
rxp1_1=(px*r21);
rxp1_2=(r11*x9927);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9928;
IkReal gconst1=r21;
IkReal gconst2=x9926;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9930=((-1.0)*r20);
IkReal x9931=((-1.0)*px);
CheckValue<IkReal> x9933 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9930),IKFAST_ATAN2_MAGTHRESH);
if(!x9933.valid){
continue;
}
IkReal x9932=((-1.0)*(x9933.value));
sj5=gconst1;
cj5=gconst2;
j5=x9932;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9931);
rxp1_1=(px*r21);
rxp1_2=(r11*x9931);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9932;
IkReal gconst1=r21;
IkReal gconst2=x9930;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9934=((-1.0)*r20);
IkReal x9935=((-1.0)*px);
CheckValue<IkReal> x9937 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9934),IKFAST_ATAN2_MAGTHRESH);
if(!x9937.valid){
continue;
}
IkReal x9936=((-1.0)*(x9937.value));
sj5=gconst1;
cj5=gconst2;
j5=x9936;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9935);
rxp1_1=(px*r21);
rxp1_2=(r11*x9935);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9936;
IkReal gconst1=r21;
IkReal gconst2=x9934;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9938=((-1.0)*r20);
IkReal x9939=((-1.0)*px);
CheckValue<IkReal> x9941 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9938),IKFAST_ATAN2_MAGTHRESH);
if(!x9941.valid){
continue;
}
IkReal x9940=((-1.0)*(x9941.value));
sj5=gconst1;
cj5=gconst2;
j5=x9940;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9939);
rxp1_1=(px*r21);
rxp1_2=(r11*x9939);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9940;
IkReal gconst1=r21;
IkReal gconst2=x9938;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9942=((-1.0)*r20);
IkReal x9943=((-1.0)*px);
CheckValue<IkReal> x9945 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9942),IKFAST_ATAN2_MAGTHRESH);
if(!x9945.valid){
continue;
}
IkReal x9944=((-1.0)*(x9945.value));
sj5=gconst1;
cj5=gconst2;
j5=x9944;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9943);
rxp1_1=(px*r21);
rxp1_2=(r11*x9943);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9944;
IkReal gconst1=r21;
IkReal gconst2=x9942;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9948=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9948.valid){
continue;
}
IkReal x9946=x9948.value;
IkReal x9947=(sj0*x9946);
cj4array[0]=(((cj1*sj2*x9947))+((cj2*sj1*x9947)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9949=IKsin(j4);
IkReal x9950=IKcos(j4);
IkReal x9951=(gconst1*x9949);
IkReal x9952=((1.0)*x9950);
IkReal x9953=((1.0)*gconst2*x9949);
evalcond[0]=((-1.0)*r02*x9949);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9952)));
evalcond[2]=((((-1.0)*r20*x9953))+((r21*x9951)));
evalcond[3]=(((r11*x9951))+(((-1.0)*r10*x9953)));
evalcond[4]=((((-1.0)*gconst1*r21*x9952))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst2*r20*x9950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9955=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9955.valid){
continue;
}
IkReal x9954=x9955.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9954))+((cj1*cj2*x9954)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9956=IKsin(j4);
IkReal x9957=IKcos(j4);
IkReal x9958=(gconst2*r10);
IkReal x9959=((1.0)*sj0);
IkReal x9960=((1.0)*x9956);
IkReal x9961=(gconst1*x9956);
IkReal x9962=((1.0)*x9957);
evalcond[0]=((-1.0)*r02*x9956);
evalcond[1]=((((-1.0)*r02*x9962))+(((-1.0)*x9959)));
evalcond[2]=(((r21*x9961))+(((-1.0)*gconst2*r20*x9960)));
evalcond[3]=((((-1.0)*x9958*x9960))+((r11*x9961)));
evalcond[4]=(((x9957*x9958))+(((-1.0)*gconst1*r11*x9962))+(((-1.0)*cj2*sj1*x9959))+(((-1.0)*cj1*sj2*x9959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9963=IKPowWithIntegerCheck(r02,-1);
if(!x9963.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9963.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9964=IKsin(j4);
IkReal x9965=IKcos(j4);
IkReal x9966=(gconst2*r10);
IkReal x9967=((1.0)*sj0);
IkReal x9968=(gconst1*r11);
IkReal x9969=(gconst1*r21);
IkReal x9970=(gconst2*r20);
IkReal x9971=((1.0)*x9964);
IkReal x9972=((1.0)*x9965);
evalcond[0]=((-1.0)*r02*x9964);
evalcond[1]=(((x9964*x9969))+(((-1.0)*x9970*x9971)));
evalcond[2]=((((-1.0)*x9966*x9971))+((x9964*x9968)));
evalcond[3]=((((-1.0)*x9969*x9972))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x9965*x9970)));
evalcond[4]=((((-1.0)*cj2*sj1*x9967))+(((-1.0)*cj1*sj2*x9967))+(((-1.0)*x9968*x9972))+((x9965*x9966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9973=((-1.0)*r20);
IkReal x9974=((-1.0)*px);
CheckValue<IkReal> x9976 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9973),IKFAST_ATAN2_MAGTHRESH);
if(!x9976.valid){
continue;
}
IkReal x9975=((-1.0)*(x9976.value));
sj5=gconst1;
cj5=gconst2;
j5=x9975;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9974);
rxp1_1=(px*r21);
rxp1_2=(r11*x9974);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9975;
IkReal gconst1=r21;
IkReal gconst2=x9973;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9977=((-1.0)*r20);
IkReal x9978=((-1.0)*px);
CheckValue<IkReal> x9980 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9977),IKFAST_ATAN2_MAGTHRESH);
if(!x9980.valid){
continue;
}
IkReal x9979=((-1.0)*(x9980.value));
sj5=gconst1;
cj5=gconst2;
j5=x9979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9978);
rxp1_1=(px*r21);
rxp1_2=(r11*x9978);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9979;
IkReal gconst1=r21;
IkReal gconst2=x9977;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9981=((-1.0)*r20);
IkReal x9982=((-1.0)*px);
CheckValue<IkReal> x9984 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9981),IKFAST_ATAN2_MAGTHRESH);
if(!x9984.valid){
continue;
}
IkReal x9983=((-1.0)*(x9984.value));
sj5=gconst1;
cj5=gconst2;
j5=x9983;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9982);
rxp1_1=(px*r21);
rxp1_2=(r11*x9982);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9983;
IkReal gconst1=r21;
IkReal gconst2=x9981;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9987=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9987.valid){
continue;
}
IkReal x9985=x9987.value;
IkReal x9986=(sj0*x9985);
cj4array[0]=(((cj1*sj2*x9986))+((cj2*sj1*x9986)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9988=IKsin(j4);
IkReal x9989=IKcos(j4);
IkReal x9990=((1.0)*gconst2);
IkReal x9991=(gconst1*r21);
evalcond[0]=(r02*x9988);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9989)));
evalcond[2]=((((-1.0)*r20*x9988*x9990))+((x9988*x9991)));
evalcond[3]=(((gconst1*r11*x9988))+(((-1.0)*r10*x9988*x9990)));
evalcond[4]=((((-1.0)*r20*x9989*x9990))+((x9989*x9991))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9993=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9993.valid){
continue;
}
IkReal x9992=x9993.value;
cj4array[0]=(((cj1*cj2*x9992))+(((-1.0)*sj1*sj2*x9992)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9994=IKsin(j4);
IkReal x9995=IKcos(j4);
IkReal x9996=((1.0)*sj0);
IkReal x9997=(gconst1*x9994);
IkReal x9998=((1.0)*x9995);
IkReal x9999=((1.0)*gconst2*x9994);
evalcond[0]=(r02*x9994);
evalcond[1]=((((-1.0)*r02*x9998))+(((-1.0)*x9996)));
evalcond[2]=(((r21*x9997))+(((-1.0)*r20*x9999)));
evalcond[3]=((((-1.0)*r10*x9999))+((r11*x9997)));
evalcond[4]=((((-1.0)*gconst2*r10*x9998))+((gconst1*r11*x9995))+(((-1.0)*cj2*sj1*x9996))+(((-1.0)*cj1*sj2*x9996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10000=IKPowWithIntegerCheck(r02,-1);
if(!x10000.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10000.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10001=IKsin(j4);
IkReal x10002=IKcos(j4);
IkReal x10003=(gconst1*r21);
IkReal x10004=((1.0)*sj0);
IkReal x10005=(gconst1*r11);
IkReal x10006=((1.0)*gconst2*r10);
IkReal x10007=((1.0)*gconst2*r20);
evalcond[0]=(r02*x10001);
evalcond[1]=(((x10001*x10003))+(((-1.0)*x10001*x10007)));
evalcond[2]=(((x10001*x10005))+(((-1.0)*x10001*x10006)));
evalcond[3]=((((-1.0)*x10002*x10007))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10002*x10003)));
evalcond[4]=((((-1.0)*x10002*x10006))+(((-1.0)*cj2*sj1*x10004))+(((-1.0)*cj1*sj2*x10004))+((x10002*x10005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10009=IKPowWithIntegerCheck(r02,-1);
if(!x10009.valid){
continue;
}
IkReal x10008=x10009.value;
CheckValue<IkReal> x10010=IKPowWithIntegerCheck(cj3,-1);
if(!x10010.valid){
continue;
}
if( IKabs((x10008*(x10010.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x10008)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10008*(x10010.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x10008))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10008*(x10010.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x10008));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10011=IKsin(j4);
IkReal x10012=IKcos(j4);
IkReal x10013=(gconst2*r10);
IkReal x10014=(gconst1*r11);
IkReal x10015=(sj1*sj2);
IkReal x10016=(gconst2*r20);
IkReal x10017=(cj2*sj1);
IkReal x10018=((1.0)*sj0);
IkReal x10019=(gconst1*r20);
IkReal x10020=(gconst2*r11);
IkReal x10021=(gconst1*r21);
IkReal x10022=((1.0)*cj0);
IkReal x10023=(gconst1*r10);
IkReal x10024=(cj1*sj2);
IkReal x10025=(gconst2*r21);
IkReal x10026=(sj3*x10012);
IkReal x10027=((1.0)*cj1*cj2);
IkReal x10028=(cj3*x10012);
IkReal x10029=(r02*x10011);
IkReal x10030=((1.0)*x10011);
evalcond[0]=((((-1.0)*r02*x10012))+(((-1.0)*x10018)));
evalcond[1]=((((-1.0)*x10016*x10030))+((x10011*x10021)));
evalcond[2]=(cj0+(((-1.0)*x10013*x10030))+((x10011*x10014)));
evalcond[3]=(((cj0*x10015))+(((-1.0)*cj1*cj2*x10022))+((cj3*x10029)));
evalcond[4]=((((-1.0)*sj3*x10029))+(((-1.0)*x10017*x10022))+(((-1.0)*x10022*x10024)));
evalcond[5]=(((x10021*x10028))+((sj3*x10025))+x10024+x10017+((sj3*x10019))+(((-1.0)*x10016*x10028)));
evalcond[6]=(((x10016*x10026))+(((-1.0)*x10021*x10026))+((cj3*x10019))+x10015+(((-1.0)*x10027))+((cj3*x10025)));
evalcond[7]=((((-1.0)*x10013*x10028))+((sj3*x10020))+((sj3*x10023))+(((-1.0)*cj1*cj2*x10018))+((x10014*x10028))+((sj0*x10015)));
evalcond[8]=(((x10013*x10026))+(((-1.0)*x10018*x10024))+((cj3*x10023))+((cj3*x10020))+(((-1.0)*x10017*x10018))+(((-1.0)*x10014*x10026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10031=((1.0)*sj3);
IkReal x10032=((1.0)*gconst2);
CheckValue<IkReal> x10033=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x10032))),-1);
if(!x10033.valid){
continue;
}
CheckValue<IkReal> x10034=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x10032))),-1);
if(!x10034.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10033.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10034.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10031))+(((-1.0)*gconst2*r21*x10031)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10033.value)))+IKsqr(((x10034.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10031))+(((-1.0)*gconst2*r21*x10031))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10033.value)), ((x10034.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10031))+(((-1.0)*gconst2*r21*x10031))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10035=IKsin(j4);
IkReal x10036=IKcos(j4);
IkReal x10037=(gconst2*r10);
IkReal x10038=(gconst1*r11);
IkReal x10039=(sj1*sj2);
IkReal x10040=(gconst2*r20);
IkReal x10041=(cj2*sj1);
IkReal x10042=((1.0)*sj0);
IkReal x10043=(gconst1*r20);
IkReal x10044=(gconst2*r11);
IkReal x10045=(gconst1*r21);
IkReal x10046=((1.0)*cj0);
IkReal x10047=(gconst1*r10);
IkReal x10048=(cj1*sj2);
IkReal x10049=(gconst2*r21);
IkReal x10050=(sj3*x10036);
IkReal x10051=((1.0)*cj1*cj2);
IkReal x10052=(cj3*x10036);
IkReal x10053=(r02*x10035);
IkReal x10054=((1.0)*x10035);
evalcond[0]=((((-1.0)*r02*x10036))+(((-1.0)*x10042)));
evalcond[1]=((((-1.0)*x10040*x10054))+((x10035*x10045)));
evalcond[2]=(((x10035*x10038))+cj0+(((-1.0)*x10037*x10054)));
evalcond[3]=(((cj0*x10039))+(((-1.0)*cj1*cj2*x10046))+((cj3*x10053)));
evalcond[4]=((((-1.0)*x10041*x10046))+(((-1.0)*sj3*x10053))+(((-1.0)*x10046*x10048)));
evalcond[5]=(((sj3*x10049))+((sj3*x10043))+x10048+x10041+((x10045*x10052))+(((-1.0)*x10040*x10052)));
evalcond[6]=((((-1.0)*x10051))+((x10040*x10050))+(((-1.0)*x10045*x10050))+x10039+((cj3*x10049))+((cj3*x10043)));
evalcond[7]=(((sj0*x10039))+((sj3*x10044))+((sj3*x10047))+(((-1.0)*cj1*cj2*x10042))+((x10038*x10052))+(((-1.0)*x10037*x10052)));
evalcond[8]=((((-1.0)*x10041*x10042))+(((-1.0)*x10042*x10048))+((x10037*x10050))+(((-1.0)*x10038*x10050))+((cj3*x10044))+((cj3*x10047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10055=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10055.valid){
continue;
}
CheckValue<IkReal> x10056=IKPowWithIntegerCheck(r02,-1);
if(!x10056.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10055.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10056.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10055.value)))+IKsqr(((-1.0)*sj0*(x10056.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10055.value)), ((-1.0)*sj0*(x10056.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10057=IKsin(j4);
IkReal x10058=IKcos(j4);
IkReal x10059=(gconst2*r10);
IkReal x10060=(gconst1*r11);
IkReal x10061=(sj1*sj2);
IkReal x10062=(gconst2*r20);
IkReal x10063=(cj2*sj1);
IkReal x10064=((1.0)*sj0);
IkReal x10065=(gconst1*r20);
IkReal x10066=(gconst2*r11);
IkReal x10067=(gconst1*r21);
IkReal x10068=((1.0)*cj0);
IkReal x10069=(gconst1*r10);
IkReal x10070=(cj1*sj2);
IkReal x10071=(gconst2*r21);
IkReal x10072=(sj3*x10058);
IkReal x10073=((1.0)*cj1*cj2);
IkReal x10074=(cj3*x10058);
IkReal x10075=(r02*x10057);
IkReal x10076=((1.0)*x10057);
evalcond[0]=((((-1.0)*x10064))+(((-1.0)*r02*x10058)));
evalcond[1]=((((-1.0)*x10062*x10076))+((x10057*x10067)));
evalcond[2]=(cj0+(((-1.0)*x10059*x10076))+((x10057*x10060)));
evalcond[3]=((((-1.0)*cj1*cj2*x10068))+((cj0*x10061))+((cj3*x10075)));
evalcond[4]=((((-1.0)*x10068*x10070))+(((-1.0)*sj3*x10075))+(((-1.0)*x10063*x10068)));
evalcond[5]=(((sj3*x10065))+((sj3*x10071))+((x10067*x10074))+x10070+x10063+(((-1.0)*x10062*x10074)));
evalcond[6]=((((-1.0)*x10073))+((x10062*x10072))+x10061+(((-1.0)*x10067*x10072))+((cj3*x10065))+((cj3*x10071)));
evalcond[7]=(((sj3*x10066))+((sj3*x10069))+((x10060*x10074))+(((-1.0)*cj1*cj2*x10064))+((sj0*x10061))+(((-1.0)*x10059*x10074)));
evalcond[8]=((((-1.0)*x10064*x10070))+(((-1.0)*x10060*x10072))+((x10059*x10072))+((cj3*x10066))+((cj3*x10069))+(((-1.0)*x10063*x10064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10077=gconst1*gconst1;
IkReal x10078=r21*r21;
IkReal x10079=gconst2*gconst2;
IkReal x10080=r20*r20;
IkReal x10081=(gconst2*r20);
IkReal x10082=(cj1*cj2);
IkReal x10083=(sj1*sj2);
IkReal x10084=(gconst1*r21);
IkReal x10085=(cj3*gconst2);
IkReal x10086=(cj3*r20);
CheckValue<IkReal> x10087=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x10081*x10084))+((sj3*x10077*x10078))+((sj3*x10079*x10080)))),-1);
if(!x10087.valid){
continue;
}
CheckValue<IkReal> x10088 = IKatan2WithCheck(IkReal((((gconst1*r22*x10086))+((r21*r22*x10085))+(((-1.0)*r22*x10082))+((r22*x10083)))),IkReal(((((-1.0)*x10082*x10084))+(((-1.0)*gconst1*x10080*x10085))+((r21*x10077*x10086))+((gconst1*x10078*x10085))+((x10083*x10084))+((x10081*x10082))+(((-1.0)*r21*x10079*x10086))+(((-1.0)*x10081*x10083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10087.value)))+(x10088.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10089=IKsin(j4);
IkReal x10090=IKcos(j4);
IkReal x10091=(cj3*gconst1);
IkReal x10092=(gconst1*r01);
IkReal x10093=(gconst1*r11);
IkReal x10094=(sj1*sj2);
IkReal x10095=(cj3*gconst2);
IkReal x10096=(gconst1*sj3);
IkReal x10097=(gconst2*sj3);
IkReal x10098=((1.0)*sj0);
IkReal x10099=(cj1*sj2);
IkReal x10100=((1.0)*x10090);
IkReal x10101=((1.0)*x10089);
IkReal x10102=((1.0)*cj1*cj2);
IkReal x10103=(cj3*x10089);
IkReal x10104=((1.0)*cj2*sj1);
IkReal x10105=(x10090*x10097);
evalcond[0]=((((-1.0)*gconst2*r20*x10101))+(((-1.0)*r22*x10100))+((gconst1*r21*x10089)));
evalcond[1]=((((-1.0)*r12*x10100))+cj0+(((-1.0)*gconst2*r10*x10101))+((x10089*x10093)));
evalcond[2]=((((-1.0)*r02*x10100))+(((-1.0)*gconst2*r00*x10101))+((x10089*x10092))+(((-1.0)*x10098)));
evalcond[3]=(((cj2*sj1))+x10099+((r21*x10097))+((r21*x10090*x10091))+((r20*x10096))+((r22*x10103))+(((-1.0)*r20*x10095*x10100)));
evalcond[4]=(((r20*x10105))+x10094+((r21*x10095))+(((-1.0)*r22*sj3*x10101))+((r20*x10091))+(((-1.0)*x10102))+(((-1.0)*r21*x10096*x10100)));
evalcond[5]=((((-1.0)*cj0*x10102))+((r01*x10090*x10091))+((cj0*x10094))+(((-1.0)*r00*x10095*x10100))+((r02*x10103))+((r01*x10097))+((r00*x10096)));
evalcond[6]=(((r11*x10097))+((r11*x10090*x10091))+(((-1.0)*r10*x10095*x10100))+((sj0*x10094))+((r10*x10096))+((r12*x10103))+(((-1.0)*cj1*cj2*x10098)));
evalcond[7]=(((r00*x10105))+(((-1.0)*cj0*x10104))+(((-1.0)*sj3*x10092*x10100))+(((-1.0)*r02*sj3*x10101))+(((-1.0)*cj0*x10099))+((r01*x10095))+((r00*x10091)));
evalcond[8]=((((-1.0)*r12*sj3*x10101))+((r11*x10095))+(((-1.0)*x10098*x10099))+(((-1.0)*cj2*sj1*x10098))+((r10*x10105))+((r10*x10091))+(((-1.0)*sj3*x10093*x10100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10106=((1.0)*gconst2);
CheckValue<IkReal> x10107 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10106))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10107.valid){
continue;
}
CheckValue<IkReal> x10108=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10106))+(((-1.0)*gconst1*r10)))),-1);
if(!x10108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10107.value)+(((1.5707963267949)*(x10108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10109=IKsin(j4);
IkReal x10110=IKcos(j4);
IkReal x10111=(cj3*gconst1);
IkReal x10112=(gconst1*r01);
IkReal x10113=(gconst1*r11);
IkReal x10114=(sj1*sj2);
IkReal x10115=(cj3*gconst2);
IkReal x10116=(gconst1*sj3);
IkReal x10117=(gconst2*sj3);
IkReal x10118=((1.0)*sj0);
IkReal x10119=(cj1*sj2);
IkReal x10120=((1.0)*x10110);
IkReal x10121=((1.0)*x10109);
IkReal x10122=((1.0)*cj1*cj2);
IkReal x10123=(cj3*x10109);
IkReal x10124=((1.0)*cj2*sj1);
IkReal x10125=(x10110*x10117);
evalcond[0]=(((gconst1*r21*x10109))+(((-1.0)*gconst2*r20*x10121))+(((-1.0)*r22*x10120)));
evalcond[1]=(cj0+((x10109*x10113))+(((-1.0)*gconst2*r10*x10121))+(((-1.0)*r12*x10120)));
evalcond[2]=((((-1.0)*gconst2*r00*x10121))+(((-1.0)*r02*x10120))+((x10109*x10112))+(((-1.0)*x10118)));
evalcond[3]=(((r21*x10117))+((cj2*sj1))+((r20*x10116))+(((-1.0)*r20*x10115*x10120))+x10119+((r21*x10110*x10111))+((r22*x10123)));
evalcond[4]=(((r21*x10115))+((r20*x10125))+((r20*x10111))+(((-1.0)*r22*sj3*x10121))+(((-1.0)*r21*x10116*x10120))+x10114+(((-1.0)*x10122)));
evalcond[5]=(((r01*x10117))+((cj0*x10114))+((r00*x10116))+(((-1.0)*r00*x10115*x10120))+((r01*x10110*x10111))+((r02*x10123))+(((-1.0)*cj0*x10122)));
evalcond[6]=((((-1.0)*cj1*cj2*x10118))+(((-1.0)*r10*x10115*x10120))+((r11*x10117))+((sj0*x10114))+((r10*x10116))+((r12*x10123))+((r11*x10110*x10111)));
evalcond[7]=(((r01*x10115))+((r00*x10111))+(((-1.0)*sj3*x10112*x10120))+((r00*x10125))+(((-1.0)*cj0*x10124))+(((-1.0)*cj0*x10119))+(((-1.0)*r02*sj3*x10121)));
evalcond[8]=(((r10*x10125))+(((-1.0)*sj3*x10113*x10120))+(((-1.0)*x10118*x10119))+(((-1.0)*cj2*sj1*x10118))+((r11*x10115))+(((-1.0)*r12*sj3*x10121))+((r10*x10111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10126=((1.0)*gconst2);
CheckValue<IkReal> x10127=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x10126)))),-1);
if(!x10127.valid){
continue;
}
CheckValue<IkReal> x10128 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x10126))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10127.value)))+(x10128.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10129=IKsin(j4);
IkReal x10130=IKcos(j4);
IkReal x10131=(cj3*gconst1);
IkReal x10132=(gconst1*r01);
IkReal x10133=(gconst1*r11);
IkReal x10134=(sj1*sj2);
IkReal x10135=(cj3*gconst2);
IkReal x10136=(gconst1*sj3);
IkReal x10137=(gconst2*sj3);
IkReal x10138=((1.0)*sj0);
IkReal x10139=(cj1*sj2);
IkReal x10140=((1.0)*x10130);
IkReal x10141=((1.0)*x10129);
IkReal x10142=((1.0)*cj1*cj2);
IkReal x10143=(cj3*x10129);
IkReal x10144=((1.0)*cj2*sj1);
IkReal x10145=(x10130*x10137);
evalcond[0]=(((gconst1*r21*x10129))+(((-1.0)*gconst2*r20*x10141))+(((-1.0)*r22*x10140)));
evalcond[1]=(cj0+((x10129*x10133))+(((-1.0)*r12*x10140))+(((-1.0)*gconst2*r10*x10141)));
evalcond[2]=(((x10129*x10132))+(((-1.0)*r02*x10140))+(((-1.0)*x10138))+(((-1.0)*gconst2*r00*x10141)));
evalcond[3]=(((r21*x10130*x10131))+((cj2*sj1))+((r20*x10136))+(((-1.0)*r20*x10135*x10140))+((r21*x10137))+x10139+((r22*x10143)));
evalcond[4]=(((r20*x10131))+((r21*x10135))+x10134+(((-1.0)*r22*sj3*x10141))+(((-1.0)*x10142))+(((-1.0)*r21*x10136*x10140))+((r20*x10145)));
evalcond[5]=(((r01*x10130*x10131))+((r02*x10143))+((cj0*x10134))+((r01*x10137))+((r00*x10136))+(((-1.0)*r00*x10135*x10140))+(((-1.0)*cj0*x10142)));
evalcond[6]=(((r11*x10137))+((r12*x10143))+(((-1.0)*r10*x10135*x10140))+((r10*x10136))+((r11*x10130*x10131))+((sj0*x10134))+(((-1.0)*cj1*cj2*x10138)));
evalcond[7]=((((-1.0)*r02*sj3*x10141))+(((-1.0)*sj3*x10132*x10140))+(((-1.0)*cj0*x10139))+((r01*x10135))+((r00*x10131))+((r00*x10145))+(((-1.0)*cj0*x10144)));
evalcond[8]=(((r11*x10135))+(((-1.0)*x10138*x10139))+((r10*x10131))+((r10*x10145))+(((-1.0)*cj2*sj1*x10138))+(((-1.0)*sj3*x10133*x10140))+(((-1.0)*r12*sj3*x10141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10146=((-1.0)*r21);
IkReal x10148 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10148)==0){
continue;
}
IkReal x10147=pow(x10148,-0.5);
CheckValue<IkReal> x10149 = IKatan2WithCheck(IkReal(x10146),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10149.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10149.value))));
IkReal gconst4=(x10146*x10147);
IkReal gconst5=((1.0)*r20*x10147);
CheckValue<IkReal> x10150 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10150.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10150.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10151=((-1.0)*r21);
CheckValue<IkReal> x10154 = IKatan2WithCheck(IkReal(x10151),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10154.valid){
continue;
}
IkReal x10152=((1.0)*(x10154.value));
IkReal x10153=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10152)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10152)));
IkReal gconst4=(x10151*x10153);
IkReal gconst5=((1.0)*r20*x10153);
IkReal x10155=r22*r22;
IkReal x10156=((1.0)*x10155);
CheckValue<IkReal> x10160=IKPowWithIntegerCheck(((-1.0)+x10155),-1);
if(!x10160.valid){
continue;
}
IkReal x10157=x10160.value;
if((((1.0)+(((-1.0)*x10156)))) < -0.00001)
continue;
IkReal x10158=IKsqrt(((1.0)+(((-1.0)*x10156))));
IkReal x10159=(cj0*x10157*x10158);
j4eval[0]=((IKabs((x10159+(((-1.0)*x10156*x10159)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10161=((-1.0)*r21);
CheckValue<IkReal> x10164 = IKatan2WithCheck(IkReal(x10161),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10164.valid){
continue;
}
IkReal x10162=((1.0)*(x10164.value));
IkReal x10163=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10162)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10162)));
IkReal gconst4=(x10161*x10163);
IkReal gconst5=((1.0)*r20*x10163);
IkReal x10165=r22*r22;
IkReal x10166=((1.0)*x10165);
CheckValue<IkReal> x10170=IKPowWithIntegerCheck(((-1.0)+x10165),-1);
if(!x10170.valid){
continue;
}
IkReal x10167=x10170.value;
if((((1.0)+(((-1.0)*x10166)))) < -0.00001)
continue;
IkReal x10168=IKsqrt(((1.0)+(((-1.0)*x10166))));
IkReal x10169=(sj0*x10167*x10168);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x10166*x10169))+x10169))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10171=((-1.0)*r21);
CheckValue<IkReal> x10174 = IKatan2WithCheck(IkReal(x10171),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10174.valid){
continue;
}
IkReal x10172=((1.0)*(x10174.value));
IkReal x10173=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10172)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10172)));
IkReal gconst4=(x10171*x10173);
IkReal gconst5=((1.0)*r20*x10173);
IkReal x10175=r22*r22;
IkReal x10176=(r12*sj0);
IkReal x10177=(cj0*r02);
CheckValue<IkReal> x10181=IKPowWithIntegerCheck(((-1.0)+x10175),-1);
if(!x10181.valid){
continue;
}
IkReal x10178=x10181.value;
if((((1.0)+(((-1.0)*x10175)))) < -0.00001)
continue;
IkReal x10179=IKsqrt(((1.0)+(((-1.0)*x10175))));
IkReal x10180=(r22*x10178*x10179);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x10176))+(((-1.0)*x10177)))))+(IKabs((((x10177*x10180))+((x10176*x10180))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10182=((-1.0)*r21);
CheckValue<IkReal> x10185 = IKatan2WithCheck(IkReal(x10182),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10185.valid){
continue;
}
IkReal x10183=((1.0)*(x10185.value));
IkReal x10184=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10183)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10183)));
IkReal gconst4=(x10182*x10184);
IkReal gconst5=((1.0)*r20*x10184);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10186=((-1.0)*r21);
CheckValue<IkReal> x10189 = IKatan2WithCheck(IkReal(x10186),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10189.valid){
continue;
}
IkReal x10187=((1.0)*(x10189.value));
IkReal x10188=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10187)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10187)));
IkReal gconst4=(x10186*x10188);
IkReal gconst5=((1.0)*r20*x10188);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10190=((-1.0)*r21);
CheckValue<IkReal> x10193 = IKatan2WithCheck(IkReal(x10190),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10193.valid){
continue;
}
IkReal x10191=((1.0)*(x10193.value));
IkReal x10192=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10191)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10191)));
IkReal gconst4=(x10190*x10192);
IkReal gconst5=((1.0)*r20*x10192);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10194=((-1.0)*r21);
CheckValue<IkReal> x10197 = IKatan2WithCheck(IkReal(x10194),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10197.valid){
continue;
}
IkReal x10195=((1.0)*(x10197.value));
IkReal x10196=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10195)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10195)));
IkReal gconst4=(x10194*x10196);
IkReal gconst5=((1.0)*r20*x10196);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10198=((-1.0)*r21);
CheckValue<IkReal> x10201 = IKatan2WithCheck(IkReal(x10198),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10201.valid){
continue;
}
IkReal x10199=((1.0)*(x10201.value));
IkReal x10200=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10199)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10199)));
IkReal gconst4=(x10198*x10200);
IkReal gconst5=((1.0)*r20*x10200);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10202=((-1.0)*r21);
CheckValue<IkReal> x10205 = IKatan2WithCheck(IkReal(x10202),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10205.valid){
continue;
}
IkReal x10203=((1.0)*(x10205.value));
IkReal x10204=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10203)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10203)));
IkReal gconst4=(x10202*x10204);
IkReal gconst5=((1.0)*r20*x10204);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10206=(gconst5*r10);
IkReal x10207=(gconst4*r11);
CheckValue<IkReal> x10208=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10206*x10207))+(r12*r12)+(x10207*x10207)+(x10206*x10206))),-1);
if(!x10208.valid){
continue;
}
CheckValue<IkReal> x10209 = IKatan2WithCheck(IkReal(((((-1.0)*x10207))+x10206)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10208.value)))+(x10209.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10210=IKsin(j4);
IkReal x10211=IKcos(j4);
IkReal x10212=(gconst4*r11);
IkReal x10213=((1.0)*cj1);
IkReal x10214=(gconst5*r10);
IkReal x10215=(gconst4*r01);
IkReal x10216=(gconst5*r00);
IkReal x10217=(gconst4*r21);
IkReal x10218=(gconst5*r20);
IkReal x10219=((1.0)*x10211);
IkReal x10220=((1.0)*x10210);
evalcond[0]=((((-1.0)*r22*x10219))+((x10210*x10217))+(((-1.0)*x10218*x10220)));
evalcond[1]=((((-1.0)*x10216*x10220))+((x10210*x10215))+(((-1.0)*r02*x10219)));
evalcond[2]=((((-1.0)*x10212*x10219))+(((-1.0)*r12*x10220))+((x10211*x10214)));
evalcond[3]=((1.0)+(((-1.0)*x10214*x10220))+(((-1.0)*r12*x10219))+((x10210*x10212)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj2*x10213))+(((-1.0)*x10217*x10219))+(((-1.0)*r22*x10220))+((x10211*x10218)));
evalcond[5]=((((-1.0)*r02*x10220))+(((-1.0)*sj2*x10213))+(((-1.0)*cj2*sj1))+(((-1.0)*x10215*x10219))+((x10211*x10216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10221=((1.0)*gconst5);
CheckValue<IkReal> x10222=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10221)))),-1);
if(!x10222.valid){
continue;
}
CheckValue<IkReal> x10223 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10221))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10222.value)))+(x10223.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10224=IKsin(j4);
IkReal x10225=IKcos(j4);
IkReal x10226=(gconst4*r11);
IkReal x10227=((1.0)*cj1);
IkReal x10228=(gconst5*r10);
IkReal x10229=(gconst4*r01);
IkReal x10230=(gconst5*r00);
IkReal x10231=(gconst4*r21);
IkReal x10232=(gconst5*r20);
IkReal x10233=((1.0)*x10225);
IkReal x10234=((1.0)*x10224);
evalcond[0]=((((-1.0)*x10232*x10234))+(((-1.0)*r22*x10233))+((x10224*x10231)));
evalcond[1]=((((-1.0)*x10230*x10234))+((x10224*x10229))+(((-1.0)*r02*x10233)));
evalcond[2]=((((-1.0)*x10226*x10233))+((x10225*x10228))+(((-1.0)*r12*x10234)));
evalcond[3]=((1.0)+((x10224*x10226))+(((-1.0)*r12*x10233))+(((-1.0)*x10228*x10234)));
evalcond[4]=(((x10225*x10232))+(((-1.0)*cj2*x10227))+((sj1*sj2))+(((-1.0)*r22*x10234))+(((-1.0)*x10231*x10233)));
evalcond[5]=(((x10225*x10230))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10227))+(((-1.0)*x10229*x10233))+(((-1.0)*r02*x10234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10235 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10235.valid){
continue;
}
CheckValue<IkReal> x10236=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10235.value)+(((1.5707963267949)*(x10236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10237=IKsin(j4);
IkReal x10238=IKcos(j4);
IkReal x10239=(gconst4*r11);
IkReal x10240=((1.0)*cj1);
IkReal x10241=(gconst5*r10);
IkReal x10242=(gconst4*r01);
IkReal x10243=(gconst5*r00);
IkReal x10244=(gconst4*r21);
IkReal x10245=(gconst5*r20);
IkReal x10246=((1.0)*x10238);
IkReal x10247=((1.0)*x10237);
evalcond[0]=(((x10237*x10244))+(((-1.0)*x10245*x10247))+(((-1.0)*r22*x10246)));
evalcond[1]=(((x10237*x10242))+(((-1.0)*x10243*x10247))+(((-1.0)*r02*x10246)));
evalcond[2]=(((x10238*x10241))+(((-1.0)*r12*x10247))+(((-1.0)*x10239*x10246)));
evalcond[3]=((1.0)+(((-1.0)*x10241*x10247))+((x10237*x10239))+(((-1.0)*r12*x10246)));
evalcond[4]=((((-1.0)*cj2*x10240))+((sj1*sj2))+((x10238*x10245))+(((-1.0)*r22*x10247))+(((-1.0)*x10244*x10246)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x10238*x10243))+(((-1.0)*sj2*x10240))+(((-1.0)*x10242*x10246))+(((-1.0)*r02*x10247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10248=((-1.0)*r21);
CheckValue<IkReal> x10251 = IKatan2WithCheck(IkReal(x10248),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10251.valid){
continue;
}
IkReal x10249=((1.0)*(x10251.value));
IkReal x10250=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10249)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10249)));
IkReal gconst4=(x10248*x10250);
IkReal gconst5=((1.0)*r20*x10250);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10252=((-1.0)*r21);
CheckValue<IkReal> x10255 = IKatan2WithCheck(IkReal(x10252),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10255.valid){
continue;
}
IkReal x10253=((1.0)*(x10255.value));
IkReal x10254=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10253)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10253)));
IkReal gconst4=(x10252*x10254);
IkReal gconst5=((1.0)*r20*x10254);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10256=((-1.0)*r21);
CheckValue<IkReal> x10259 = IKatan2WithCheck(IkReal(x10256),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10259.valid){
continue;
}
IkReal x10257=((1.0)*(x10259.value));
IkReal x10258=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10257)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10257)));
IkReal gconst4=(x10256*x10258);
IkReal gconst5=((1.0)*r20*x10258);
IkReal x10260=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10264=IKPowWithIntegerCheck(x10260,-1);
if(!x10264.valid){
continue;
}
IkReal x10261=x10264.value;
IkReal x10262=((1.0)*x10261);
IkReal x10263=((((-1.0)*(r12*r12)))+(((-1.0)*x10262*(r11*r11)*(r21*r21)))+(((-1.0)*x10262*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10261)));
j4eval[0]=x10263;
j4eval[1]=r12;
j4eval[2]=x10260;
j4eval[3]=IKsign(x10263);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10265=(gconst5*r10);
IkReal x10266=(gconst4*r11);
CheckValue<IkReal> x10267=IKPowWithIntegerCheck(IKsign(((((2.0)*x10265*x10266))+(((-1.0)*(x10265*x10265)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10266*x10266))))),-1);
if(!x10267.valid){
continue;
}
CheckValue<IkReal> x10268 = IKatan2WithCheck(IkReal(((((-1.0)*x10265))+x10266)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10267.value)))+(x10268.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10269=IKcos(j4);
IkReal x10270=IKsin(j4);
IkReal x10271=(gconst4*r11);
IkReal x10272=(gconst5*r10);
IkReal x10273=((1.0)*cj1);
IkReal x10274=(gconst5*r00);
IkReal x10275=(gconst5*r20);
IkReal x10276=((1.0)*x10269);
IkReal x10277=(gconst4*x10269);
IkReal x10278=((1.0)*x10270);
IkReal x10279=(gconst4*x10270);
evalcond[0]=(((r12*x10270))+(((-1.0)*x10272*x10276))+((x10269*x10271)));
evalcond[1]=((((-1.0)*r22*x10276))+((r21*x10279))+(((-1.0)*x10275*x10278)));
evalcond[2]=((((-1.0)*x10274*x10278))+((r01*x10279))+(((-1.0)*r02*x10276)));
evalcond[3]=((1.0)+((x10270*x10271))+(((-1.0)*x10272*x10278))+(((-1.0)*r12*x10276)));
evalcond[4]=(((sj1*sj2))+((r21*x10277))+(((-1.0)*cj2*x10273))+(((-1.0)*x10275*x10276))+((r22*x10270)));
evalcond[5]=((((-1.0)*x10274*x10276))+((r01*x10277))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10273))+((r02*x10270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10280=((1.0)*gconst5);
CheckValue<IkReal> x10281=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10280)))),-1);
if(!x10281.valid){
continue;
}
CheckValue<IkReal> x10282 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10281.value)))+(x10282.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10283=IKcos(j4);
IkReal x10284=IKsin(j4);
IkReal x10285=(gconst4*r11);
IkReal x10286=(gconst5*r10);
IkReal x10287=((1.0)*cj1);
IkReal x10288=(gconst5*r00);
IkReal x10289=(gconst5*r20);
IkReal x10290=((1.0)*x10283);
IkReal x10291=(gconst4*x10283);
IkReal x10292=((1.0)*x10284);
IkReal x10293=(gconst4*x10284);
evalcond[0]=(((x10283*x10285))+((r12*x10284))+(((-1.0)*x10286*x10290)));
evalcond[1]=(((r21*x10293))+(((-1.0)*x10289*x10292))+(((-1.0)*r22*x10290)));
evalcond[2]=((((-1.0)*r02*x10290))+(((-1.0)*x10288*x10292))+((r01*x10293)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10290))+(((-1.0)*x10286*x10292))+((x10284*x10285)));
evalcond[4]=(((sj1*sj2))+((r22*x10284))+((r21*x10291))+(((-1.0)*x10289*x10290))+(((-1.0)*cj2*x10287)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r02*x10284))+(((-1.0)*x10288*x10290))+((r01*x10291))+(((-1.0)*sj2*x10287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10294 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10294.valid){
continue;
}
CheckValue<IkReal> x10295=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10294.value)+(((1.5707963267949)*(x10295.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10296=IKcos(j4);
IkReal x10297=IKsin(j4);
IkReal x10298=(gconst4*r11);
IkReal x10299=(gconst5*r10);
IkReal x10300=((1.0)*cj1);
IkReal x10301=(gconst5*r00);
IkReal x10302=(gconst5*r20);
IkReal x10303=((1.0)*x10296);
IkReal x10304=(gconst4*x10296);
IkReal x10305=((1.0)*x10297);
IkReal x10306=(gconst4*x10297);
evalcond[0]=(((r12*x10297))+((x10296*x10298))+(((-1.0)*x10299*x10303)));
evalcond[1]=((((-1.0)*r22*x10303))+(((-1.0)*x10302*x10305))+((r21*x10306)));
evalcond[2]=((((-1.0)*r02*x10303))+(((-1.0)*x10301*x10305))+((r01*x10306)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10303))+((x10297*x10298))+(((-1.0)*x10299*x10305)));
evalcond[4]=((((-1.0)*cj2*x10300))+(((-1.0)*x10302*x10303))+((sj1*sj2))+((r21*x10304))+((r22*x10297)));
evalcond[5]=((((-1.0)*sj2*x10300))+(((-1.0)*x10301*x10303))+(((-1.0)*cj2*sj1))+((r01*x10304))+((r02*x10297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10307=((-1.0)*r21);
CheckValue<IkReal> x10310 = IKatan2WithCheck(IkReal(x10307),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10310.valid){
continue;
}
IkReal x10308=((1.0)*(x10310.value));
IkReal x10309=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10308)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10308)));
IkReal gconst4=(x10307*x10309);
IkReal gconst5=((1.0)*r20*x10309);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10311=((-1.0)*r21);
CheckValue<IkReal> x10314 = IKatan2WithCheck(IkReal(x10311),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10314.valid){
continue;
}
IkReal x10312=((1.0)*(x10314.value));
IkReal x10313=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10312)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10312)));
IkReal gconst4=(x10311*x10313);
IkReal gconst5=((1.0)*r20*x10313);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10315=((-1.0)*r21);
CheckValue<IkReal> x10318 = IKatan2WithCheck(IkReal(x10315),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10318.valid){
continue;
}
IkReal x10316=((1.0)*(x10318.value));
IkReal x10317=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10316)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10316)));
IkReal gconst4=(x10315*x10317);
IkReal gconst5=((1.0)*r20*x10317);
IkReal x10319=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10323=IKPowWithIntegerCheck(x10319,-1);
if(!x10323.valid){
continue;
}
IkReal x10320=x10323.value;
IkReal x10321=((1.0)*x10320);
IkReal x10322=((((-1.0)*x10321*(r10*r10)*(r20*r20)))+(((-1.0)*x10321*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10320)));
j4eval[0]=x10322;
j4eval[1]=r12;
j4eval[2]=x10319;
j4eval[3]=IKsign(x10322);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10324=(gconst5*r10);
IkReal x10325=(gconst4*r11);
CheckValue<IkReal> x10326 = IKatan2WithCheck(IkReal(((((-1.0)*x10324))+x10325)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10326.valid){
continue;
}
CheckValue<IkReal> x10327=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10324*x10324)))+(((2.0)*x10324*x10325))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10325*x10325))))),-1);
if(!x10327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10326.value)+(((1.5707963267949)*(x10327.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10328=IKcos(j4);
IkReal x10329=IKsin(j4);
IkReal x10330=(gconst4*r11);
IkReal x10331=(gconst5*r10);
IkReal x10332=(gconst5*r00);
IkReal x10333=(gconst5*r20);
IkReal x10334=((1.0)*x10328);
IkReal x10335=(gconst4*x10328);
IkReal x10336=((1.0)*x10329);
IkReal x10337=(gconst4*x10329);
evalcond[0]=(((x10328*x10330))+((r12*x10329))+(((-1.0)*x10331*x10334)));
evalcond[1]=((((-1.0)*x10333*x10336))+(((-1.0)*r22*x10334))+((r21*x10337)));
evalcond[2]=(((r01*x10337))+(((-1.0)*x10332*x10336))+(((-1.0)*r02*x10334)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10334))+((x10329*x10330))+(((-1.0)*x10331*x10336)));
evalcond[4]=(((cj2*sj1))+((r22*x10329))+(((-1.0)*x10333*x10334))+((cj1*sj2))+((r21*x10335)));
evalcond[5]=(((r02*x10329))+((r01*x10335))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10332*x10334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10338=((1.0)*gconst5);
CheckValue<IkReal> x10339 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10339.valid){
continue;
}
CheckValue<IkReal> x10340=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10338)))),-1);
if(!x10340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10339.value)+(((1.5707963267949)*(x10340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10341=IKcos(j4);
IkReal x10342=IKsin(j4);
IkReal x10343=(gconst4*r11);
IkReal x10344=(gconst5*r10);
IkReal x10345=(gconst5*r00);
IkReal x10346=(gconst5*r20);
IkReal x10347=((1.0)*x10341);
IkReal x10348=(gconst4*x10341);
IkReal x10349=((1.0)*x10342);
IkReal x10350=(gconst4*x10342);
evalcond[0]=(((x10341*x10343))+(((-1.0)*x10344*x10347))+((r12*x10342)));
evalcond[1]=(((r21*x10350))+(((-1.0)*x10346*x10349))+(((-1.0)*r22*x10347)));
evalcond[2]=(((r01*x10350))+(((-1.0)*r02*x10347))+(((-1.0)*x10345*x10349)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10347))+((x10342*x10343))+(((-1.0)*x10344*x10349)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10342))+(((-1.0)*x10346*x10347))+((r21*x10348)));
evalcond[5]=(((r01*x10348))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10345*x10347))+((r02*x10342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10351 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10351.valid){
continue;
}
CheckValue<IkReal> x10352=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10351.value)+(((1.5707963267949)*(x10352.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10353=IKcos(j4);
IkReal x10354=IKsin(j4);
IkReal x10355=(gconst4*r11);
IkReal x10356=(gconst5*r10);
IkReal x10357=(gconst5*r00);
IkReal x10358=(gconst5*r20);
IkReal x10359=((1.0)*x10353);
IkReal x10360=(gconst4*x10353);
IkReal x10361=((1.0)*x10354);
IkReal x10362=(gconst4*x10354);
evalcond[0]=((((-1.0)*x10356*x10359))+((x10353*x10355))+((r12*x10354)));
evalcond[1]=(((r21*x10362))+(((-1.0)*x10358*x10361))+(((-1.0)*r22*x10359)));
evalcond[2]=(((r01*x10362))+(((-1.0)*x10357*x10361))+(((-1.0)*r02*x10359)));
evalcond[3]=((1.0)+(((-1.0)*x10356*x10361))+((x10354*x10355))+(((-1.0)*r12*x10359)));
evalcond[4]=(((cj2*sj1))+((r21*x10360))+((cj1*sj2))+((r22*x10354))+(((-1.0)*x10358*x10359)));
evalcond[5]=((((-1.0)*x10357*x10359))+((r01*x10360))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10363=((-1.0)*r21);
CheckValue<IkReal> x10366 = IKatan2WithCheck(IkReal(x10363),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10366.valid){
continue;
}
IkReal x10364=((1.0)*(x10366.value));
IkReal x10365=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10364)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10364)));
IkReal gconst4=(x10363*x10365);
IkReal gconst5=((1.0)*r20*x10365);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10367=((-1.0)*r21);
CheckValue<IkReal> x10370 = IKatan2WithCheck(IkReal(x10367),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10370.valid){
continue;
}
IkReal x10368=((1.0)*(x10370.value));
IkReal x10369=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10368)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10368)));
IkReal gconst4=(x10367*x10369);
IkReal gconst5=((1.0)*r20*x10369);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10371=((-1.0)*r21);
CheckValue<IkReal> x10374 = IKatan2WithCheck(IkReal(x10371),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10374.valid){
continue;
}
IkReal x10372=((1.0)*(x10374.value));
IkReal x10373=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10372)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10372)));
IkReal gconst4=(x10371*x10373);
IkReal gconst5=((1.0)*r20*x10373);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10375=(gconst5*r10);
IkReal x10376=(gconst4*r11);
CheckValue<IkReal> x10377=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10375*x10376))+(x10375*x10375)+(x10376*x10376))),-1);
if(!x10377.valid){
continue;
}
CheckValue<IkReal> x10378 = IKatan2WithCheck(IkReal((x10375+(((-1.0)*x10376)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10377.value)))+(x10378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10379=IKsin(j4);
IkReal x10380=IKcos(j4);
IkReal x10381=(gconst4*r11);
IkReal x10382=(gconst5*r10);
IkReal x10383=(gconst4*r01);
IkReal x10384=(gconst5*r00);
IkReal x10385=(gconst4*r21);
IkReal x10386=(gconst5*r20);
IkReal x10387=((1.0)*x10380);
IkReal x10388=((1.0)*x10379);
evalcond[0]=(((x10379*x10385))+(((-1.0)*x10386*x10388))+(((-1.0)*r22*x10387)));
evalcond[1]=((((-1.0)*x10384*x10388))+((x10379*x10383))+(((-1.0)*r02*x10387)));
evalcond[2]=((((-1.0)*x10381*x10387))+((x10380*x10382))+(((-1.0)*r12*x10388)));
evalcond[3]=((1.0)+((x10379*x10381))+(((-1.0)*r12*x10387))+(((-1.0)*x10382*x10388)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10385*x10387))+((cj1*sj2))+((x10380*x10386))+(((-1.0)*r22*x10388)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10388))+((x10380*x10384))+(((-1.0)*x10383*x10387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10389=((1.0)*gconst5);
CheckValue<IkReal> x10390 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10389))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10390.valid){
continue;
}
CheckValue<IkReal> x10391=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10389)))),-1);
if(!x10391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10390.value)+(((1.5707963267949)*(x10391.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10392=IKsin(j4);
IkReal x10393=IKcos(j4);
IkReal x10394=(gconst4*r11);
IkReal x10395=(gconst5*r10);
IkReal x10396=(gconst4*r01);
IkReal x10397=(gconst5*r00);
IkReal x10398=(gconst4*r21);
IkReal x10399=(gconst5*r20);
IkReal x10400=((1.0)*x10393);
IkReal x10401=((1.0)*x10392);
evalcond[0]=(((x10392*x10398))+(((-1.0)*r22*x10400))+(((-1.0)*x10399*x10401)));
evalcond[1]=(((x10392*x10396))+(((-1.0)*x10397*x10401))+(((-1.0)*r02*x10400)));
evalcond[2]=((((-1.0)*x10394*x10400))+((x10393*x10395))+(((-1.0)*r12*x10401)));
evalcond[3]=((1.0)+((x10392*x10394))+(((-1.0)*r12*x10400))+(((-1.0)*x10395*x10401)));
evalcond[4]=(((cj2*sj1))+((x10393*x10399))+((cj1*sj2))+(((-1.0)*x10398*x10400))+(((-1.0)*r22*x10401)));
evalcond[5]=(((x10393*x10397))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10396*x10400))+(((-1.0)*r02*x10401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10402 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10402.valid){
continue;
}
CheckValue<IkReal> x10403=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10402.value)+(((1.5707963267949)*(x10403.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10404=IKsin(j4);
IkReal x10405=IKcos(j4);
IkReal x10406=(gconst4*r11);
IkReal x10407=(gconst5*r10);
IkReal x10408=(gconst4*r01);
IkReal x10409=(gconst5*r00);
IkReal x10410=(gconst4*r21);
IkReal x10411=(gconst5*r20);
IkReal x10412=((1.0)*x10405);
IkReal x10413=((1.0)*x10404);
evalcond[0]=(((x10404*x10410))+(((-1.0)*r22*x10412))+(((-1.0)*x10411*x10413)));
evalcond[1]=((((-1.0)*r02*x10412))+(((-1.0)*x10409*x10413))+((x10404*x10408)));
evalcond[2]=((((-1.0)*r12*x10413))+(((-1.0)*x10406*x10412))+((x10405*x10407)));
evalcond[3]=((1.0)+(((-1.0)*x10407*x10413))+(((-1.0)*r12*x10412))+((x10404*x10406)));
evalcond[4]=(((cj2*sj1))+((x10405*x10411))+((cj1*sj2))+(((-1.0)*r22*x10413))+(((-1.0)*x10410*x10412)));
evalcond[5]=((((-1.0)*r02*x10413))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10408*x10412))+((x10405*x10409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10414=gconst4*gconst4;
IkReal x10415=gconst5*gconst5;
IkReal x10416=(r10*r21);
IkReal x10417=((1.0)*cj3);
IkReal x10418=(r11*r21);
IkReal x10419=(r11*r20);
IkReal x10420=(r22*sj3);
IkReal x10421=(gconst4*r10);
IkReal x10422=((1.0)*sj3);
IkReal x10423=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10424=IKPowWithIntegerCheck(IKsign((((x10416*x10423))+(((-1.0)*x10414*x10417*x10418))+(((-1.0)*r10*r20*x10415*x10417))+(((-1.0)*r12*r22*x10417))+((x10419*x10423)))),-1);
if(!x10424.valid){
continue;
}
CheckValue<IkReal> x10425 = IKatan2WithCheck(IkReal((((x10420*x10421))+((gconst5*r11*x10420)))),IkReal(((((-1.0)*gconst5*r20*x10421*x10422))+((sj3*x10414*x10416))+((gconst4*gconst5*sj3*x10418))+(((-1.0)*x10415*x10419*x10422)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10424.value)))+(x10425.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10426=IKsin(j4);
IkReal x10427=IKcos(j4);
IkReal x10428=(sj1*sj2);
IkReal x10429=(gconst5*sj3);
IkReal x10430=(cj3*gconst5);
IkReal x10431=(gconst4*r11);
IkReal x10432=((1.0)*cj1);
IkReal x10433=(gconst4*r01);
IkReal x10434=(cj2*sj1);
IkReal x10435=(gconst4*r21);
IkReal x10436=(gconst4*sj3);
IkReal x10437=(cj3*gconst4);
IkReal x10438=(cj2*x10432);
IkReal x10439=((1.0)*x10427);
IkReal x10440=((1.0)*x10426);
IkReal x10441=(cj3*x10426);
IkReal x10442=(cj3*x10427);
evalcond[0]=(((x10426*x10435))+(((-1.0)*gconst5*r20*x10440))+(((-1.0)*r22*x10439)));
evalcond[1]=(((x10426*x10433))+(((-1.0)*gconst5*r00*x10440))+(((-1.0)*r02*x10439)));
evalcond[2]=((1.0)+((x10426*x10431))+(((-1.0)*r12*x10439))+(((-1.0)*gconst5*r10*x10440)));
evalcond[3]=(((r12*x10441))+((x10431*x10442))+((r10*x10436))+((r11*x10429))+(((-1.0)*r10*x10430*x10439)));
evalcond[4]=((((-1.0)*r12*sj3*x10440))+((r10*x10427*x10429))+((r10*x10437))+((r11*x10430))+(((-1.0)*sj3*x10431*x10439)));
evalcond[5]=(((r22*x10441))+((cj1*sj2))+(((-1.0)*r20*x10430*x10439))+x10434+((r20*x10436))+((r21*x10429))+((x10435*x10442)));
evalcond[6]=(((r01*x10429))+(((-1.0)*r00*x10430*x10439))+((r02*x10441))+((x10433*x10442))+x10428+(((-1.0)*x10438))+((r00*x10436)));
evalcond[7]=((((-1.0)*r22*sj3*x10440))+((r20*x10427*x10429))+(((-1.0)*sj3*x10435*x10439))+x10428+(((-1.0)*x10438))+((r20*x10437))+((r21*x10430)));
evalcond[8]=(((r01*x10430))+(((-1.0)*r02*sj3*x10440))+((r00*x10427*x10429))+(((-1.0)*sj3*x10433*x10439))+(((-1.0)*sj2*x10432))+(((-1.0)*x10434))+((r00*x10437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10443=((1.0)*gconst5);
CheckValue<IkReal> x10444 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10443))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10444.valid){
continue;
}
CheckValue<IkReal> x10445=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10443)))),-1);
if(!x10445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10444.value)+(((1.5707963267949)*(x10445.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10446=IKsin(j4);
IkReal x10447=IKcos(j4);
IkReal x10448=(sj1*sj2);
IkReal x10449=(gconst5*sj3);
IkReal x10450=(cj3*gconst5);
IkReal x10451=(gconst4*r11);
IkReal x10452=((1.0)*cj1);
IkReal x10453=(gconst4*r01);
IkReal x10454=(cj2*sj1);
IkReal x10455=(gconst4*r21);
IkReal x10456=(gconst4*sj3);
IkReal x10457=(cj3*gconst4);
IkReal x10458=(cj2*x10452);
IkReal x10459=((1.0)*x10447);
IkReal x10460=((1.0)*x10446);
IkReal x10461=(cj3*x10446);
IkReal x10462=(cj3*x10447);
evalcond[0]=(((x10446*x10455))+(((-1.0)*r22*x10459))+(((-1.0)*gconst5*r20*x10460)));
evalcond[1]=(((x10446*x10453))+(((-1.0)*r02*x10459))+(((-1.0)*gconst5*r00*x10460)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10460))+((x10446*x10451))+(((-1.0)*r12*x10459)));
evalcond[3]=(((r10*x10456))+(((-1.0)*r10*x10450*x10459))+((r12*x10461))+((r11*x10449))+((x10451*x10462)));
evalcond[4]=(((r10*x10457))+((r10*x10447*x10449))+((r11*x10450))+(((-1.0)*r12*sj3*x10460))+(((-1.0)*sj3*x10451*x10459)));
evalcond[5]=(((cj1*sj2))+((x10455*x10462))+((r22*x10461))+((r21*x10449))+x10454+(((-1.0)*r20*x10450*x10459))+((r20*x10456)));
evalcond[6]=(((x10453*x10462))+((r00*x10456))+x10448+((r01*x10449))+((r02*x10461))+(((-1.0)*r00*x10450*x10459))+(((-1.0)*x10458)));
evalcond[7]=((((-1.0)*sj3*x10455*x10459))+(((-1.0)*r22*sj3*x10460))+x10448+((r21*x10450))+((r20*x10447*x10449))+(((-1.0)*x10458))+((r20*x10457)));
evalcond[8]=((((-1.0)*x10454))+((r00*x10457))+((r01*x10450))+(((-1.0)*r02*sj3*x10460))+(((-1.0)*sj2*x10452))+((r00*x10447*x10449))+(((-1.0)*sj3*x10453*x10459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10463 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10463.valid){
continue;
}
CheckValue<IkReal> x10464=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10463.value)+(((1.5707963267949)*(x10464.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10465=IKsin(j4);
IkReal x10466=IKcos(j4);
IkReal x10467=(sj1*sj2);
IkReal x10468=(gconst5*sj3);
IkReal x10469=(cj3*gconst5);
IkReal x10470=(gconst4*r11);
IkReal x10471=((1.0)*cj1);
IkReal x10472=(gconst4*r01);
IkReal x10473=(cj2*sj1);
IkReal x10474=(gconst4*r21);
IkReal x10475=(gconst4*sj3);
IkReal x10476=(cj3*gconst4);
IkReal x10477=(cj2*x10471);
IkReal x10478=((1.0)*x10466);
IkReal x10479=((1.0)*x10465);
IkReal x10480=(cj3*x10465);
IkReal x10481=(cj3*x10466);
evalcond[0]=((((-1.0)*gconst5*r20*x10479))+((x10465*x10474))+(((-1.0)*r22*x10478)));
evalcond[1]=((((-1.0)*r02*x10478))+(((-1.0)*gconst5*r00*x10479))+((x10465*x10472)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10479))+((x10465*x10470))+(((-1.0)*r12*x10478)));
evalcond[3]=(((r12*x10480))+((x10470*x10481))+((r11*x10468))+((r10*x10475))+(((-1.0)*r10*x10469*x10478)));
evalcond[4]=(((r10*x10466*x10468))+(((-1.0)*sj3*x10470*x10478))+((r11*x10469))+(((-1.0)*r12*sj3*x10479))+((r10*x10476)));
evalcond[5]=(((r20*x10475))+((x10474*x10481))+(((-1.0)*r20*x10469*x10478))+((cj1*sj2))+((r22*x10480))+((r21*x10468))+x10473);
evalcond[6]=(((r01*x10468))+((x10472*x10481))+((r00*x10475))+((r02*x10480))+x10467+(((-1.0)*r00*x10469*x10478))+(((-1.0)*x10477)));
evalcond[7]=(((r20*x10476))+((r20*x10466*x10468))+(((-1.0)*r22*sj3*x10479))+(((-1.0)*sj3*x10474*x10478))+((r21*x10469))+x10467+(((-1.0)*x10477)));
evalcond[8]=((((-1.0)*x10473))+((r01*x10469))+((r00*x10476))+(((-1.0)*sj3*x10472*x10478))+(((-1.0)*r02*sj3*x10479))+((r00*x10466*x10468))+(((-1.0)*sj2*x10471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10482=((-1.0)*r21);
CheckValue<IkReal> x10485 = IKatan2WithCheck(IkReal(x10482),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10485.valid){
continue;
}
IkReal x10483=((1.0)*(x10485.value));
IkReal x10484=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10483)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10483)));
IkReal gconst4=(x10482*x10484);
IkReal gconst5=((1.0)*r20*x10484);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10486=((-1.0)*r21);
CheckValue<IkReal> x10489 = IKatan2WithCheck(IkReal(x10486),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10489.valid){
continue;
}
IkReal x10487=((1.0)*(x10489.value));
IkReal x10488=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10487)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10487)));
IkReal gconst4=(x10486*x10488);
IkReal gconst5=((1.0)*r20*x10488);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10490=((-1.0)*r21);
CheckValue<IkReal> x10493 = IKatan2WithCheck(IkReal(x10490),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10493.valid){
continue;
}
IkReal x10491=((1.0)*(x10493.value));
IkReal x10492=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10491)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10491)));
IkReal gconst4=(x10490*x10492);
IkReal gconst5=((1.0)*r20*x10492);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10494=((-1.0)*r21);
CheckValue<IkReal> x10497 = IKatan2WithCheck(IkReal(x10494),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10497.valid){
continue;
}
IkReal x10495=((1.0)*(x10497.value));
IkReal x10496=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10495)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10495)));
IkReal gconst4=(x10494*x10496);
IkReal gconst5=((1.0)*r20*x10496);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10498=((-1.0)*r21);
CheckValue<IkReal> x10501 = IKatan2WithCheck(IkReal(x10498),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10501.valid){
continue;
}
IkReal x10499=((1.0)*(x10501.value));
IkReal x10500=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10499)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10499)));
IkReal gconst4=(x10498*x10500);
IkReal gconst5=((1.0)*r20*x10500);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10502=((-1.0)*r21);
CheckValue<IkReal> x10505 = IKatan2WithCheck(IkReal(x10502),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10505.valid){
continue;
}
IkReal x10503=((1.0)*(x10505.value));
IkReal x10504=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10503)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10503)));
IkReal gconst4=(x10502*x10504);
IkReal gconst5=((1.0)*r20*x10504);
IkReal x10506=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10510=IKPowWithIntegerCheck(x10506,-1);
if(!x10510.valid){
continue;
}
IkReal x10507=x10510.value;
IkReal x10508=((1.0)*x10507);
IkReal x10509=((((-1.0)*x10508*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10507))+(((-1.0)*x10508*(r10*r10)*(r20*r20))));
j4eval[0]=x10509;
j4eval[1]=r12;
j4eval[2]=x10506;
j4eval[3]=IKsign(x10509);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10511=(gconst5*r10);
IkReal x10512=(gconst4*r11);
CheckValue<IkReal> x10513=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10511*x10511)))+(((2.0)*x10511*x10512))+(((-1.0)*(x10512*x10512)))+(((-1.0)*(r12*r12))))),-1);
if(!x10513.valid){
continue;
}
CheckValue<IkReal> x10514 = IKatan2WithCheck(IkReal(((((-1.0)*x10512))+x10511)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10513.value)))+(x10514.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10515=IKsin(j4);
IkReal x10516=IKcos(j4);
IkReal x10517=(gconst4*r11);
IkReal x10518=(gconst5*r10);
IkReal x10519=(gconst4*r01);
IkReal x10520=(gconst5*r00);
IkReal x10521=(gconst4*r21);
IkReal x10522=(gconst5*r20);
IkReal x10523=((1.0)*x10516);
IkReal x10524=((1.0)*x10515);
evalcond[0]=((((-1.0)*r22*x10523))+(((-1.0)*x10522*x10524))+((x10515*x10521)));
evalcond[1]=((((-1.0)*x10520*x10524))+(((-1.0)*r02*x10523))+((x10515*x10519)));
evalcond[2]=((((-1.0)*r12*x10524))+((x10516*x10518))+(((-1.0)*x10517*x10523)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10523))+(((-1.0)*x10518*x10524))+((x10515*x10517)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10524))+((x10516*x10520))+(((-1.0)*x10519*x10523)));
evalcond[5]=((((-1.0)*x10521*x10523))+(((-1.0)*r22*x10524))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10516*x10522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10525=((1.0)*gconst5);
CheckValue<IkReal> x10526 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10526.valid){
continue;
}
CheckValue<IkReal> x10527=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10525))+(((-1.0)*gconst4*r20)))),-1);
if(!x10527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10526.value)+(((1.5707963267949)*(x10527.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10528=IKsin(j4);
IkReal x10529=IKcos(j4);
IkReal x10530=(gconst4*r11);
IkReal x10531=(gconst5*r10);
IkReal x10532=(gconst4*r01);
IkReal x10533=(gconst5*r00);
IkReal x10534=(gconst4*r21);
IkReal x10535=(gconst5*r20);
IkReal x10536=((1.0)*x10529);
IkReal x10537=((1.0)*x10528);
evalcond[0]=((((-1.0)*r22*x10536))+((x10528*x10534))+(((-1.0)*x10535*x10537)));
evalcond[1]=(((x10528*x10532))+(((-1.0)*r02*x10536))+(((-1.0)*x10533*x10537)));
evalcond[2]=(((x10529*x10531))+(((-1.0)*r12*x10537))+(((-1.0)*x10530*x10536)));
evalcond[3]=((-1.0)+((x10528*x10530))+(((-1.0)*r12*x10536))+(((-1.0)*x10531*x10537)));
evalcond[4]=(((cj2*sj1))+((x10529*x10533))+((cj1*sj2))+(((-1.0)*r02*x10537))+(((-1.0)*x10532*x10536)));
evalcond[5]=((((-1.0)*r22*x10537))+((x10529*x10535))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10534*x10536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10538=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10538.valid){
continue;
}
CheckValue<IkReal> x10539 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10538.value)))+(x10539.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10540=IKsin(j4);
IkReal x10541=IKcos(j4);
IkReal x10542=(gconst4*r11);
IkReal x10543=(gconst5*r10);
IkReal x10544=(gconst4*r01);
IkReal x10545=(gconst5*r00);
IkReal x10546=(gconst4*r21);
IkReal x10547=(gconst5*r20);
IkReal x10548=((1.0)*x10541);
IkReal x10549=((1.0)*x10540);
evalcond[0]=(((x10540*x10546))+(((-1.0)*x10547*x10549))+(((-1.0)*r22*x10548)));
evalcond[1]=(((x10540*x10544))+(((-1.0)*r02*x10548))+(((-1.0)*x10545*x10549)));
evalcond[2]=((((-1.0)*x10542*x10548))+(((-1.0)*r12*x10549))+((x10541*x10543)));
evalcond[3]=((-1.0)+(((-1.0)*x10543*x10549))+((x10540*x10542))+(((-1.0)*r12*x10548)));
evalcond[4]=((((-1.0)*x10544*x10548))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10549))+((x10541*x10545)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10546*x10548))+(((-1.0)*r22*x10549))+((x10541*x10547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10550=((-1.0)*r21);
CheckValue<IkReal> x10553 = IKatan2WithCheck(IkReal(x10550),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10553.valid){
continue;
}
IkReal x10551=((1.0)*(x10553.value));
IkReal x10552=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10551)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10551)));
IkReal gconst4=(x10550*x10552);
IkReal gconst5=((1.0)*r20*x10552);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10554=((-1.0)*r21);
CheckValue<IkReal> x10557 = IKatan2WithCheck(IkReal(x10554),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10557.valid){
continue;
}
IkReal x10555=((1.0)*(x10557.value));
IkReal x10556=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10555)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10555)));
IkReal gconst4=(x10554*x10556);
IkReal gconst5=((1.0)*r20*x10556);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10558=((-1.0)*r21);
CheckValue<IkReal> x10561 = IKatan2WithCheck(IkReal(x10558),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10561.valid){
continue;
}
IkReal x10559=((1.0)*(x10561.value));
IkReal x10560=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10559)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10559)));
IkReal gconst4=(x10558*x10560);
IkReal gconst5=((1.0)*r20*x10560);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10562=(gconst5*r10);
IkReal x10563=(gconst4*r11);
CheckValue<IkReal> x10564 = IKatan2WithCheck(IkReal(((((-1.0)*x10562))+x10563)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10564.valid){
continue;
}
CheckValue<IkReal> x10565=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10562*x10562)+(x10563*x10563)+(((-2.0)*x10562*x10563)))),-1);
if(!x10565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10564.value)+(((1.5707963267949)*(x10565.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10566=IKcos(j4);
IkReal x10567=IKsin(j4);
IkReal x10568=(gconst4*r11);
IkReal x10569=(gconst5*r10);
IkReal x10570=(gconst5*r00);
IkReal x10571=(gconst5*r20);
IkReal x10572=((1.0)*x10566);
IkReal x10573=(gconst4*x10566);
IkReal x10574=((1.0)*x10567);
IkReal x10575=(gconst4*x10567);
evalcond[0]=((((-1.0)*x10569*x10572))+((x10566*x10568))+((r12*x10567)));
evalcond[1]=((((-1.0)*x10571*x10574))+(((-1.0)*r22*x10572))+((r21*x10575)));
evalcond[2]=(((r01*x10575))+(((-1.0)*r02*x10572))+(((-1.0)*x10570*x10574)));
evalcond[3]=((-1.0)+(((-1.0)*x10569*x10574))+(((-1.0)*r12*x10572))+((x10567*x10568)));
evalcond[4]=(((cj2*sj1))+((r01*x10573))+((cj1*sj2))+((r02*x10567))+(((-1.0)*x10570*x10572)));
evalcond[5]=((((-1.0)*x10571*x10572))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10573))+((r22*x10567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10576=((1.0)*gconst5);
CheckValue<IkReal> x10577 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10576))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10577.valid){
continue;
}
CheckValue<IkReal> x10578=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r20))+(((-1.0)*r21*x10576)))),-1);
if(!x10578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10577.value)+(((1.5707963267949)*(x10578.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10579=IKcos(j4);
IkReal x10580=IKsin(j4);
IkReal x10581=(gconst4*r11);
IkReal x10582=(gconst5*r10);
IkReal x10583=(gconst5*r00);
IkReal x10584=(gconst5*r20);
IkReal x10585=((1.0)*x10579);
IkReal x10586=(gconst4*x10579);
IkReal x10587=((1.0)*x10580);
IkReal x10588=(gconst4*x10580);
evalcond[0]=(((r12*x10580))+(((-1.0)*x10582*x10585))+((x10579*x10581)));
evalcond[1]=((((-1.0)*r22*x10585))+((r21*x10588))+(((-1.0)*x10584*x10587)));
evalcond[2]=((((-1.0)*r02*x10585))+(((-1.0)*x10583*x10587))+((r01*x10588)));
evalcond[3]=((-1.0)+(((-1.0)*x10582*x10587))+((x10580*x10581))+(((-1.0)*r12*x10585)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x10580))+(((-1.0)*x10583*x10585))+((r01*x10586)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10586))+((r22*x10580))+(((-1.0)*x10584*x10585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10589=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10589.valid){
continue;
}
CheckValue<IkReal> x10590 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10589.value)))+(x10590.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10591=IKcos(j4);
IkReal x10592=IKsin(j4);
IkReal x10593=(gconst4*r11);
IkReal x10594=(gconst5*r10);
IkReal x10595=(gconst5*r00);
IkReal x10596=(gconst5*r20);
IkReal x10597=((1.0)*x10591);
IkReal x10598=(gconst4*x10591);
IkReal x10599=((1.0)*x10592);
IkReal x10600=(gconst4*x10592);
evalcond[0]=(((r12*x10592))+(((-1.0)*x10594*x10597))+((x10591*x10593)));
evalcond[1]=((((-1.0)*x10596*x10599))+((r21*x10600))+(((-1.0)*r22*x10597)));
evalcond[2]=(((r01*x10600))+(((-1.0)*r02*x10597))+(((-1.0)*x10595*x10599)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10597))+((x10592*x10593))+(((-1.0)*x10594*x10599)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x10598))+(((-1.0)*x10595*x10597))+((r02*x10592)));
evalcond[5]=(((r21*x10598))+(((-1.0)*x10596*x10597))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10601=((-1.0)*r21);
CheckValue<IkReal> x10604 = IKatan2WithCheck(IkReal(x10601),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10604.valid){
continue;
}
IkReal x10602=((1.0)*(x10604.value));
IkReal x10603=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10602)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10602)));
IkReal gconst4=(x10601*x10603);
IkReal gconst5=((1.0)*r20*x10603);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10605=((-1.0)*r21);
CheckValue<IkReal> x10608 = IKatan2WithCheck(IkReal(x10605),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10608.valid){
continue;
}
IkReal x10606=((1.0)*(x10608.value));
IkReal x10607=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10606)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10606)));
IkReal gconst4=(x10605*x10607);
IkReal gconst5=((1.0)*r20*x10607);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10609=((-1.0)*r21);
CheckValue<IkReal> x10612 = IKatan2WithCheck(IkReal(x10609),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10612.valid){
continue;
}
IkReal x10610=((1.0)*(x10612.value));
IkReal x10611=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10610)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10610)));
IkReal gconst4=(x10609*x10611);
IkReal gconst5=((1.0)*r20*x10611);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10613=(gconst5*r10);
IkReal x10614=(gconst4*r11);
CheckValue<IkReal> x10615 = IKatan2WithCheck(IkReal(((((-1.0)*x10613))+x10614)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10615.valid){
continue;
}
CheckValue<IkReal> x10616=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10613*x10613)+(((-2.0)*x10613*x10614))+(x10614*x10614))),-1);
if(!x10616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10615.value)+(((1.5707963267949)*(x10616.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10617=IKcos(j4);
IkReal x10618=IKsin(j4);
IkReal x10619=(gconst5*r10);
IkReal x10620=(gconst5*r00);
IkReal x10621=(gconst5*r20);
IkReal x10622=((1.0)*x10617);
IkReal x10623=(gconst4*x10618);
IkReal x10624=(gconst4*x10617);
IkReal x10625=((1.0)*x10618);
evalcond[0]=(((r12*x10618))+(((-1.0)*x10619*x10622))+((r11*x10624)));
evalcond[1]=(((r21*x10623))+(((-1.0)*r22*x10622))+(((-1.0)*x10621*x10625)));
evalcond[2]=((((-1.0)*r02*x10622))+((r01*x10623))+(((-1.0)*x10620*x10625)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10622))+(((-1.0)*x10619*x10625))+((r11*x10623)));
evalcond[4]=(((r21*x10624))+((cj2*sj1))+((r22*x10618))+((cj1*sj2))+(((-1.0)*x10621*x10622)));
evalcond[5]=(((r02*x10618))+(((-1.0)*sj1*sj2))+((r01*x10624))+((cj1*cj2))+(((-1.0)*x10620*x10622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10626=((1.0)*gconst5);
CheckValue<IkReal> x10627=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10626))+(((-1.0)*gconst4*r20)))),-1);
if(!x10627.valid){
continue;
}
CheckValue<IkReal> x10628 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10626))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10627.value)))+(x10628.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10629=IKcos(j4);
IkReal x10630=IKsin(j4);
IkReal x10631=(gconst5*r10);
IkReal x10632=(gconst5*r00);
IkReal x10633=(gconst5*r20);
IkReal x10634=((1.0)*x10629);
IkReal x10635=(gconst4*x10630);
IkReal x10636=(gconst4*x10629);
IkReal x10637=((1.0)*x10630);
evalcond[0]=((((-1.0)*x10631*x10634))+((r12*x10630))+((r11*x10636)));
evalcond[1]=((((-1.0)*x10633*x10637))+(((-1.0)*r22*x10634))+((r21*x10635)));
evalcond[2]=((((-1.0)*r02*x10634))+((r01*x10635))+(((-1.0)*x10632*x10637)));
evalcond[3]=((-1.0)+(((-1.0)*x10631*x10637))+(((-1.0)*r12*x10634))+((r11*x10635)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10633*x10634))+((r22*x10630))+((r21*x10636)));
evalcond[5]=(((r01*x10636))+(((-1.0)*sj1*sj2))+(((-1.0)*x10632*x10634))+((r02*x10630))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10638=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10638.valid){
continue;
}
CheckValue<IkReal> x10639 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10638.value)))+(x10639.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10640=IKcos(j4);
IkReal x10641=IKsin(j4);
IkReal x10642=(gconst5*r10);
IkReal x10643=(gconst5*r00);
IkReal x10644=(gconst5*r20);
IkReal x10645=((1.0)*x10640);
IkReal x10646=(gconst4*x10641);
IkReal x10647=(gconst4*x10640);
IkReal x10648=((1.0)*x10641);
evalcond[0]=(((r11*x10647))+((r12*x10641))+(((-1.0)*x10642*x10645)));
evalcond[1]=(((r21*x10646))+(((-1.0)*r22*x10645))+(((-1.0)*x10644*x10648)));
evalcond[2]=((((-1.0)*r02*x10645))+((r01*x10646))+(((-1.0)*x10643*x10648)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10645))+((r11*x10646))+(((-1.0)*x10642*x10648)));
evalcond[4]=(((r21*x10647))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10644*x10645))+((r22*x10641)));
evalcond[5]=(((r01*x10647))+(((-1.0)*sj1*sj2))+((r02*x10641))+((cj1*cj2))+(((-1.0)*x10643*x10645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10649=((-1.0)*r21);
CheckValue<IkReal> x10652 = IKatan2WithCheck(IkReal(x10649),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10652.valid){
continue;
}
IkReal x10650=((1.0)*(x10652.value));
IkReal x10651=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10650)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10650)));
IkReal gconst4=(x10649*x10651);
IkReal gconst5=((1.0)*r20*x10651);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10653=((-1.0)*r21);
CheckValue<IkReal> x10656 = IKatan2WithCheck(IkReal(x10653),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10656.valid){
continue;
}
IkReal x10654=((1.0)*(x10656.value));
IkReal x10655=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10654)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10654)));
IkReal gconst4=(x10653*x10655);
IkReal gconst5=((1.0)*r20*x10655);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10657=((-1.0)*r21);
CheckValue<IkReal> x10660 = IKatan2WithCheck(IkReal(x10657),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10660.valid){
continue;
}
IkReal x10658=((1.0)*(x10660.value));
IkReal x10659=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10658)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10658)));
IkReal gconst4=(x10657*x10659);
IkReal gconst5=((1.0)*r20*x10659);
IkReal x10661=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10665=IKPowWithIntegerCheck(x10661,-1);
if(!x10665.valid){
continue;
}
IkReal x10662=x10665.value;
IkReal x10663=((1.0)*x10662);
IkReal x10664=((((-1.0)*x10663*(r10*r10)*(r20*r20)))+(((-1.0)*x10663*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10662)));
j4eval[0]=x10664;
j4eval[1]=r12;
j4eval[2]=x10661;
j4eval[3]=IKsign(x10664);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10666=(gconst5*r10);
IkReal x10667=(gconst4*r11);
CheckValue<IkReal> x10668 = IKatan2WithCheck(IkReal(((((-1.0)*x10667))+x10666)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10668.valid){
continue;
}
CheckValue<IkReal> x10669=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10667*x10667)))+(((-1.0)*(x10666*x10666)))+(((-1.0)*(r12*r12)))+(((2.0)*x10666*x10667)))),-1);
if(!x10669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10668.value)+(((1.5707963267949)*(x10669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10670=IKsin(j4);
IkReal x10671=IKcos(j4);
IkReal x10672=(gconst4*r11);
IkReal x10673=(gconst5*r10);
IkReal x10674=(gconst5*r00);
IkReal x10675=(gconst5*r20);
IkReal x10676=((1.0)*x10671);
IkReal x10677=(gconst4*x10670);
IkReal x10678=((1.0)*x10670);
evalcond[0]=((((-1.0)*x10675*x10678))+(((-1.0)*r22*x10676))+((r21*x10677)));
evalcond[1]=((((-1.0)*r02*x10676))+((r01*x10677))+(((-1.0)*x10674*x10678)));
evalcond[2]=((((-1.0)*x10672*x10676))+((x10671*x10673))+(((-1.0)*r12*x10678)));
evalcond[3]=((-1.0)+((x10670*x10672))+(((-1.0)*x10673*x10678))+(((-1.0)*r12*x10676)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10676))+(((-1.0)*r22*x10678))+((x10671*x10675)));
evalcond[5]=((((-1.0)*r02*x10678))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x10671*x10674))+(((-1.0)*gconst4*r01*x10676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10679=((1.0)*gconst5);
CheckValue<IkReal> x10680 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10679)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10680.valid){
continue;
}
CheckValue<IkReal> x10681=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10679))+(((-1.0)*gconst4*r20)))),-1);
if(!x10681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10680.value)+(((1.5707963267949)*(x10681.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10682=IKsin(j4);
IkReal x10683=IKcos(j4);
IkReal x10684=(gconst4*r11);
IkReal x10685=(gconst5*r10);
IkReal x10686=(gconst5*r00);
IkReal x10687=(gconst5*r20);
IkReal x10688=((1.0)*x10683);
IkReal x10689=(gconst4*x10682);
IkReal x10690=((1.0)*x10682);
evalcond[0]=((((-1.0)*r22*x10688))+(((-1.0)*x10687*x10690))+((r21*x10689)));
evalcond[1]=((((-1.0)*r02*x10688))+(((-1.0)*x10686*x10690))+((r01*x10689)));
evalcond[2]=((((-1.0)*x10684*x10688))+(((-1.0)*r12*x10690))+((x10683*x10685)));
evalcond[3]=((-1.0)+(((-1.0)*x10685*x10690))+(((-1.0)*r12*x10688))+((x10682*x10684)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10683*x10687))+(((-1.0)*r22*x10690))+(((-1.0)*gconst4*r21*x10688)));
evalcond[5]=((((-1.0)*gconst4*r01*x10688))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x10690))+((x10683*x10686))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10691=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10691.valid){
continue;
}
CheckValue<IkReal> x10692 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10691.value)))+(x10692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10693=IKsin(j4);
IkReal x10694=IKcos(j4);
IkReal x10695=(gconst4*r11);
IkReal x10696=(gconst5*r10);
IkReal x10697=(gconst5*r00);
IkReal x10698=(gconst5*r20);
IkReal x10699=((1.0)*x10694);
IkReal x10700=(gconst4*x10693);
IkReal x10701=((1.0)*x10693);
evalcond[0]=((((-1.0)*x10698*x10701))+((r21*x10700))+(((-1.0)*r22*x10699)));
evalcond[1]=(((r01*x10700))+(((-1.0)*x10697*x10701))+(((-1.0)*r02*x10699)));
evalcond[2]=((((-1.0)*r12*x10701))+(((-1.0)*x10695*x10699))+((x10694*x10696)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10699))+(((-1.0)*x10696*x10701))+((x10693*x10695)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x10699))+((cj1*sj2))+(((-1.0)*r22*x10701))+((x10694*x10698)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x10694*x10697))+(((-1.0)*r02*x10701))+(((-1.0)*gconst4*r01*x10699))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10702=((-1.0)*r21);
IkReal x10703=((-1.0)*px);
CheckValue<IkReal> x10705 = IKatan2WithCheck(IkReal(x10702),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10705.valid){
continue;
}
IkReal x10704=((1.0)*(x10705.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10704)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10703);
rxp1_1=(px*r21);
rxp1_2=(r11*x10703);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10704)));
IkReal gconst4=x10702;
IkReal gconst5=((1.0)*r20);
IkReal x10706=((1.0)*cj3);
IkReal x10707=(r10*r20);
IkReal x10708=(r11*r21);
j4eval[0]=((((-1.0)*x10708))+(((-1.0)*x10707)));
j4eval[1]=((((-1.0)*x10706*x10708))+(((-1.0)*x10706*x10707)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10709=((-1.0)*r21);
IkReal x10710=((-1.0)*px);
CheckValue<IkReal> x10712 = IKatan2WithCheck(IkReal(x10709),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10712.valid){
continue;
}
IkReal x10711=((1.0)*(x10712.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10711)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10710);
rxp1_1=(px*r21);
rxp1_2=(r11*x10710);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10711)));
IkReal gconst4=x10709;
IkReal gconst5=((1.0)*r20);
IkReal x10713=((1.0)*r11*r21);
IkReal x10714=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10713))+(((-1.0)*x10714)));
j4eval[1]=(((sj3*x10714))+((sj3*x10713)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10715=((-1.0)*r21);
IkReal x10716=((-1.0)*px);
CheckValue<IkReal> x10718 = IKatan2WithCheck(IkReal(x10715),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10718.valid){
continue;
}
IkReal x10717=((1.0)*(x10718.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10717)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10716);
rxp1_1=(px*r21);
rxp1_2=(r11*x10716);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10717)));
IkReal gconst4=x10715;
IkReal gconst5=((1.0)*r20);
IkReal x10719=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x10719))+(((-1.0)*r11*r21*x10719)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10720=((1.0)*r10);
CheckValue<IkReal> x10721=IKPowWithIntegerCheck(cj3,-1);
if(!x10721.valid){
continue;
}
CheckValue<IkReal> x10722=IKPowWithIntegerCheck(r02,-1);
if(!x10722.valid){
continue;
}
CheckValue<IkReal> x10723=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x10720))),-1);
if(!x10723.valid){
continue;
}
if( IKabs(((x10721.value)*(x10722.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10723.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10720)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10721.value)*(x10722.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10723.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10720))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10721.value)*(x10722.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10723.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10720))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10724=IKsin(j4);
IkReal x10725=IKcos(j4);
IkReal x10726=(cj2*sj1);
IkReal x10727=(cj1*sj2);
IkReal x10728=(gconst5*sj3);
IkReal x10729=(gconst4*r11);
IkReal x10730=(sj1*sj2);
IkReal x10731=((1.0)*gconst5);
IkReal x10732=(cj1*cj2);
IkReal x10733=(gconst4*r21);
IkReal x10734=(cj3*gconst4);
IkReal x10735=(gconst4*sj3);
IkReal x10736=(cj3*gconst5);
IkReal x10737=(r20*x10725);
IkReal x10738=(r10*x10725);
IkReal x10739=(cj3*x10725);
IkReal x10740=(r02*x10724);
IkReal x10741=(x10727+x10726);
IkReal x10742=((1.0)*sj3*x10725);
evalcond[0]=((-1.0)*r02*x10725);
evalcond[1]=((((-1.0)*r20*x10724*x10731))+((x10724*x10733)));
evalcond[2]=(((cj3*x10740))+(((-1.0)*x10730))+x10732);
evalcond[3]=((((-1.0)*sj3*x10740))+x10741);
evalcond[4]=((-1.0)+((x10724*x10729))+(((-1.0)*r10*x10724*x10731)));
evalcond[5]=(((r10*x10735))+((x10729*x10739))+(((-1.0)*cj3*x10731*x10738))+((r11*x10728)));
evalcond[6]=(((r10*x10734))+(((-1.0)*x10729*x10742))+((r11*x10736))+((x10728*x10738)));
evalcond[7]=(((r21*x10728))+((x10733*x10739))+((r20*x10735))+(((-1.0)*cj3*x10731*x10737))+x10741);
evalcond[8]=((((-1.0)*x10733*x10742))+((r21*x10736))+((r20*x10734))+(((-1.0)*x10732))+x10730+((x10728*x10737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10743=((1.0)*gconst5);
IkReal x10744=(gconst4*r11);
CheckValue<IkReal> x10745=IKPowWithIntegerCheck(((((-1.0)*r10*x10743))+x10744),-1);
if(!x10745.valid){
continue;
}
CheckValue<IkReal> x10746=IKPowWithIntegerCheck(((((-1.0)*sj3*x10744))+((gconst5*r10*sj3))),-1);
if(!x10746.valid){
continue;
}
if( IKabs(x10745.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10746.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10743)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10745.value)+IKsqr(((x10746.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10743))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10745.value, ((x10746.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10743))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10747=IKsin(j4);
IkReal x10748=IKcos(j4);
IkReal x10749=(cj2*sj1);
IkReal x10750=(cj1*sj2);
IkReal x10751=(gconst5*sj3);
IkReal x10752=(gconst4*r11);
IkReal x10753=(sj1*sj2);
IkReal x10754=((1.0)*gconst5);
IkReal x10755=(cj1*cj2);
IkReal x10756=(gconst4*r21);
IkReal x10757=(cj3*gconst4);
IkReal x10758=(gconst4*sj3);
IkReal x10759=(cj3*gconst5);
IkReal x10760=(r20*x10748);
IkReal x10761=(r10*x10748);
IkReal x10762=(cj3*x10748);
IkReal x10763=(r02*x10747);
IkReal x10764=(x10749+x10750);
IkReal x10765=((1.0)*sj3*x10748);
evalcond[0]=((-1.0)*r02*x10748);
evalcond[1]=(((x10747*x10756))+(((-1.0)*r20*x10747*x10754)));
evalcond[2]=(((cj3*x10763))+x10755+(((-1.0)*x10753)));
evalcond[3]=((((-1.0)*sj3*x10763))+x10764);
evalcond[4]=((-1.0)+((x10747*x10752))+(((-1.0)*r10*x10747*x10754)));
evalcond[5]=(((r10*x10758))+(((-1.0)*cj3*x10754*x10761))+((r11*x10751))+((x10752*x10762)));
evalcond[6]=(((r10*x10757))+(((-1.0)*x10752*x10765))+((r11*x10759))+((x10751*x10761)));
evalcond[7]=((((-1.0)*cj3*x10754*x10760))+((r20*x10758))+((x10756*x10762))+x10764+((r21*x10751)));
evalcond[8]=(((r20*x10757))+((x10751*x10760))+x10753+(((-1.0)*x10756*x10765))+((r21*x10759))+(((-1.0)*x10755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10766=((1.0)*sj3);
IkReal x10767=(gconst4*r11);
IkReal x10768=((1.0)*gconst5*r10);
CheckValue<IkReal> x10769=IKPowWithIntegerCheck(((((-1.0)*x10768))+x10767),-1);
if(!x10769.valid){
continue;
}
CheckValue<IkReal> x10770=IKPowWithIntegerCheck(((((-1.0)*cj3*x10768))+((cj3*x10767))),-1);
if(!x10770.valid){
continue;
}
if( IKabs(x10769.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10770.value)*(((((-1.0)*gconst5*r11*x10766))+(((-1.0)*gconst4*r10*x10766)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10769.value)+IKsqr(((x10770.value)*(((((-1.0)*gconst5*r11*x10766))+(((-1.0)*gconst4*r10*x10766))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10769.value, ((x10770.value)*(((((-1.0)*gconst5*r11*x10766))+(((-1.0)*gconst4*r10*x10766))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10771=IKsin(j4);
IkReal x10772=IKcos(j4);
IkReal x10773=(cj2*sj1);
IkReal x10774=(cj1*sj2);
IkReal x10775=(gconst5*sj3);
IkReal x10776=(gconst4*r11);
IkReal x10777=(sj1*sj2);
IkReal x10778=((1.0)*gconst5);
IkReal x10779=(cj1*cj2);
IkReal x10780=(gconst4*r21);
IkReal x10781=(cj3*gconst4);
IkReal x10782=(gconst4*sj3);
IkReal x10783=(cj3*gconst5);
IkReal x10784=(r20*x10772);
IkReal x10785=(r10*x10772);
IkReal x10786=(cj3*x10772);
IkReal x10787=(r02*x10771);
IkReal x10788=(x10773+x10774);
IkReal x10789=((1.0)*sj3*x10772);
evalcond[0]=((-1.0)*r02*x10772);
evalcond[1]=((((-1.0)*r20*x10771*x10778))+((x10771*x10780)));
evalcond[2]=((((-1.0)*x10777))+x10779+((cj3*x10787)));
evalcond[3]=((((-1.0)*sj3*x10787))+x10788);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10771*x10778))+((x10771*x10776)));
evalcond[5]=((((-1.0)*cj3*x10778*x10785))+((r11*x10775))+((x10776*x10786))+((r10*x10782)));
evalcond[6]=((((-1.0)*x10776*x10789))+((r11*x10783))+((x10775*x10785))+((r10*x10781)));
evalcond[7]=((((-1.0)*cj3*x10778*x10784))+((r20*x10782))+((x10780*x10786))+((r21*x10775))+x10788);
evalcond[8]=((((-1.0)*x10780*x10789))+((r21*x10783))+(((-1.0)*x10779))+((x10775*x10784))+((r20*x10781))+x10777);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10790=gconst4*gconst4;
IkReal x10791=gconst5*gconst5;
IkReal x10792=(r10*r21);
IkReal x10793=((1.0)*cj3);
IkReal x10794=(r11*r21);
IkReal x10795=(r11*r20);
IkReal x10796=(r22*sj3);
IkReal x10797=(gconst4*r10);
IkReal x10798=((1.0)*sj3);
IkReal x10799=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10800 = IKatan2WithCheck(IkReal((((x10796*x10797))+((gconst5*r11*x10796)))),IkReal((((sj3*x10790*x10792))+(((-1.0)*gconst5*r20*x10797*x10798))+(((-1.0)*x10791*x10795*x10798))+((gconst4*gconst5*sj3*x10794)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10800.valid){
continue;
}
CheckValue<IkReal> x10801=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x10793))+((x10795*x10799))+((x10792*x10799))+(((-1.0)*x10790*x10793*x10794))+(((-1.0)*r10*r20*x10791*x10793)))),-1);
if(!x10801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10800.value)+(((1.5707963267949)*(x10801.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10802=IKsin(j4);
IkReal x10803=IKcos(j4);
IkReal x10804=(cj2*sj1);
IkReal x10805=(cj1*sj2);
IkReal x10806=(gconst5*sj3);
IkReal x10807=(gconst4*r11);
IkReal x10808=(sj1*sj2);
IkReal x10809=(gconst5*r10);
IkReal x10810=(cj1*cj2);
IkReal x10811=(gconst4*r01);
IkReal x10812=(gconst4*r21);
IkReal x10813=(gconst5*r00);
IkReal x10814=(gconst4*sj3);
IkReal x10815=(cj3*gconst5);
IkReal x10816=(cj3*gconst4);
IkReal x10817=((1.0)*x10803);
IkReal x10818=((1.0)*x10802);
IkReal x10819=(cj3*x10802);
IkReal x10820=(cj3*x10803);
IkReal x10821=(x10804+x10805);
evalcond[0]=((((-1.0)*gconst5*r20*x10818))+((x10802*x10812))+(((-1.0)*r22*x10817)));
evalcond[1]=((((-1.0)*r02*x10817))+(((-1.0)*x10813*x10818))+((x10802*x10811)));
evalcond[2]=((-1.0)+((x10802*x10807))+(((-1.0)*x10809*x10818))+(((-1.0)*r12*x10817)));
evalcond[3]=(((x10807*x10820))+(((-1.0)*cj3*x10809*x10817))+((r11*x10806))+((r10*x10814))+((r12*x10819)));
evalcond[4]=(((r10*x10803*x10806))+((r10*x10816))+(((-1.0)*r12*sj3*x10818))+((r11*x10815))+(((-1.0)*sj3*x10807*x10817)));
evalcond[5]=(((r22*x10819))+((x10812*x10820))+((r20*x10814))+((r21*x10806))+(((-1.0)*r20*x10815*x10817))+x10821);
evalcond[6]=(((r02*x10819))+((r01*x10806))+(((-1.0)*cj3*x10813*x10817))+((x10811*x10820))+(((-1.0)*x10808))+((r00*x10814))+x10810);
evalcond[7]=((((-1.0)*r02*sj3*x10818))+((r00*x10803*x10806))+(((-1.0)*sj3*x10811*x10817))+((r01*x10815))+((r00*x10816))+x10821);
evalcond[8]=((((-1.0)*x10810))+(((-1.0)*r22*sj3*x10818))+((r20*x10816))+(((-1.0)*sj3*x10812*x10817))+((r20*x10803*x10806))+((r21*x10815))+x10808);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10822=((1.0)*gconst5);
CheckValue<IkReal> x10823 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10822)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10823.valid){
continue;
}
CheckValue<IkReal> x10824=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10822))+(((-1.0)*gconst4*r20)))),-1);
if(!x10824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10823.value)+(((1.5707963267949)*(x10824.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10825=IKsin(j4);
IkReal x10826=IKcos(j4);
IkReal x10827=(cj2*sj1);
IkReal x10828=(cj1*sj2);
IkReal x10829=(gconst5*sj3);
IkReal x10830=(gconst4*r11);
IkReal x10831=(sj1*sj2);
IkReal x10832=(gconst5*r10);
IkReal x10833=(cj1*cj2);
IkReal x10834=(gconst4*r01);
IkReal x10835=(gconst4*r21);
IkReal x10836=(gconst5*r00);
IkReal x10837=(gconst4*sj3);
IkReal x10838=(cj3*gconst5);
IkReal x10839=(cj3*gconst4);
IkReal x10840=((1.0)*x10826);
IkReal x10841=((1.0)*x10825);
IkReal x10842=(cj3*x10825);
IkReal x10843=(cj3*x10826);
IkReal x10844=(x10827+x10828);
evalcond[0]=(((x10825*x10835))+(((-1.0)*r22*x10840))+(((-1.0)*gconst5*r20*x10841)));
evalcond[1]=(((x10825*x10834))+(((-1.0)*r02*x10840))+(((-1.0)*x10836*x10841)));
evalcond[2]=((-1.0)+(((-1.0)*x10832*x10841))+((x10825*x10830))+(((-1.0)*r12*x10840)));
evalcond[3]=((((-1.0)*cj3*x10832*x10840))+((x10830*x10843))+((r10*x10837))+((r12*x10842))+((r11*x10829)));
evalcond[4]=(((r10*x10839))+((r10*x10826*x10829))+(((-1.0)*r12*sj3*x10841))+(((-1.0)*sj3*x10830*x10840))+((r11*x10838)));
evalcond[5]=(((r21*x10829))+((r22*x10842))+(((-1.0)*r20*x10838*x10840))+((r20*x10837))+((x10835*x10843))+x10844);
evalcond[6]=((((-1.0)*x10831))+(((-1.0)*cj3*x10836*x10840))+((r02*x10842))+((r00*x10837))+((x10834*x10843))+((r01*x10829))+x10833);
evalcond[7]=((((-1.0)*r02*sj3*x10841))+(((-1.0)*sj3*x10834*x10840))+((r01*x10838))+((r00*x10839))+((r00*x10826*x10829))+x10844);
evalcond[8]=((((-1.0)*x10833))+(((-1.0)*r22*sj3*x10841))+(((-1.0)*sj3*x10835*x10840))+((r20*x10839))+((r21*x10838))+((r20*x10826*x10829))+x10831);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10845=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10845.valid){
continue;
}
CheckValue<IkReal> x10846 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10845.value)))+(x10846.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10847=IKsin(j4);
IkReal x10848=IKcos(j4);
IkReal x10849=(cj2*sj1);
IkReal x10850=(cj1*sj2);
IkReal x10851=(gconst5*sj3);
IkReal x10852=(gconst4*r11);
IkReal x10853=(sj1*sj2);
IkReal x10854=(gconst5*r10);
IkReal x10855=(cj1*cj2);
IkReal x10856=(gconst4*r01);
IkReal x10857=(gconst4*r21);
IkReal x10858=(gconst5*r00);
IkReal x10859=(gconst4*sj3);
IkReal x10860=(cj3*gconst5);
IkReal x10861=(cj3*gconst4);
IkReal x10862=((1.0)*x10848);
IkReal x10863=((1.0)*x10847);
IkReal x10864=(cj3*x10847);
IkReal x10865=(cj3*x10848);
IkReal x10866=(x10849+x10850);
evalcond[0]=((((-1.0)*r22*x10862))+((x10847*x10857))+(((-1.0)*gconst5*r20*x10863)));
evalcond[1]=((((-1.0)*x10858*x10863))+((x10847*x10856))+(((-1.0)*r02*x10862)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10862))+((x10847*x10852))+(((-1.0)*x10854*x10863)));
evalcond[3]=(((r11*x10851))+((r12*x10864))+((r10*x10859))+(((-1.0)*cj3*x10854*x10862))+((x10852*x10865)));
evalcond[4]=(((r11*x10860))+((r10*x10848*x10851))+((r10*x10861))+(((-1.0)*r12*sj3*x10863))+(((-1.0)*sj3*x10852*x10862)));
evalcond[5]=(((x10857*x10865))+((r21*x10851))+(((-1.0)*r20*x10860*x10862))+((r20*x10859))+((r22*x10864))+x10866);
evalcond[6]=((((-1.0)*cj3*x10858*x10862))+((x10856*x10865))+((r01*x10851))+((r00*x10859))+(((-1.0)*x10853))+((r02*x10864))+x10855);
evalcond[7]=(((r00*x10848*x10851))+((r00*x10861))+((r01*x10860))+(((-1.0)*sj3*x10856*x10862))+(((-1.0)*r02*sj3*x10863))+x10866);
evalcond[8]=((((-1.0)*r22*sj3*x10863))+((r21*x10860))+((r20*x10848*x10851))+(((-1.0)*sj3*x10857*x10862))+((r20*x10861))+(((-1.0)*x10855))+x10853);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10867=((-1.0)*r21);
CheckValue<IkReal> x10870 = IKatan2WithCheck(IkReal(x10867),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10870.valid){
continue;
}
IkReal x10868=((1.0)*(x10870.value));
IkReal x10869=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10868)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10868)));
IkReal gconst4=(x10867*x10869);
IkReal gconst5=((1.0)*r20*x10869);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10871=((-1.0)*r21);
CheckValue<IkReal> x10874 = IKatan2WithCheck(IkReal(x10871),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10874.valid){
continue;
}
IkReal x10872=((1.0)*(x10874.value));
IkReal x10873=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10872)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10872)));
IkReal gconst4=(x10871*x10873);
IkReal gconst5=((1.0)*r20*x10873);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10875=((-1.0)*r21);
CheckValue<IkReal> x10878 = IKatan2WithCheck(IkReal(x10875),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10878.valid){
continue;
}
IkReal x10876=((1.0)*(x10878.value));
IkReal x10877=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10876)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10876)));
IkReal gconst4=(x10875*x10877);
IkReal gconst5=((1.0)*r20*x10877);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10879=((-1.0)*r21);
CheckValue<IkReal> x10882 = IKatan2WithCheck(IkReal(x10879),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10882.valid){
continue;
}
IkReal x10880=((1.0)*(x10882.value));
IkReal x10881=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10880)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10880)));
IkReal gconst4=(x10879*x10881);
IkReal gconst5=((1.0)*r20*x10881);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10883=((-1.0)*r21);
CheckValue<IkReal> x10886 = IKatan2WithCheck(IkReal(x10883),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10886.valid){
continue;
}
IkReal x10884=((1.0)*(x10886.value));
IkReal x10885=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10884)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10884)));
IkReal gconst4=(x10883*x10885);
IkReal gconst5=((1.0)*r20*x10885);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10887=((-1.0)*r21);
CheckValue<IkReal> x10890 = IKatan2WithCheck(IkReal(x10887),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10890.valid){
continue;
}
IkReal x10888=((1.0)*(x10890.value));
IkReal x10889=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10888)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10888)));
IkReal gconst4=(x10887*x10889);
IkReal gconst5=((1.0)*r20*x10889);
IkReal x10891=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10895=IKPowWithIntegerCheck(x10891,-1);
if(!x10895.valid){
continue;
}
IkReal x10892=x10895.value;
IkReal x10893=((1.0)*x10892);
IkReal x10894=((((-1.0)*(r02*r02)))+(((-1.0)*x10893*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x10892))+(((-1.0)*x10893*(r00*r00)*(r20*r20))));
j4eval[0]=x10894;
j4eval[1]=r02;
j4eval[2]=x10891;
j4eval[3]=IKsign(x10894);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10896=(gconst5*r00);
IkReal x10897=(gconst4*r01);
CheckValue<IkReal> x10898 = IKatan2WithCheck(IkReal(((((-1.0)*x10897))+x10896)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10898.valid){
continue;
}
CheckValue<IkReal> x10899=IKPowWithIntegerCheck(IKsign(((((2.0)*x10896*x10897))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10896*x10896)))+(((-1.0)*(x10897*x10897))))),-1);
if(!x10899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10898.value)+(((1.5707963267949)*(x10899.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10900=IKsin(j4);
IkReal x10901=IKcos(j4);
IkReal x10902=(gconst4*r11);
IkReal x10903=((1.0)*cj1);
IkReal x10904=(gconst5*r10);
IkReal x10905=(gconst4*r01);
IkReal x10906=(gconst5*r00);
IkReal x10907=(gconst4*r21);
IkReal x10908=(gconst5*r20);
IkReal x10909=((1.0)*x10901);
IkReal x10910=((1.0)*x10900);
evalcond[0]=((((-1.0)*x10908*x10910))+((x10900*x10907))+(((-1.0)*r22*x10909)));
evalcond[1]=(((x10900*x10902))+(((-1.0)*r12*x10909))+(((-1.0)*x10904*x10910)));
evalcond[2]=((((-1.0)*r02*x10910))+((x10901*x10906))+(((-1.0)*x10905*x10909)));
evalcond[3]=((-1.0)+((x10900*x10905))+(((-1.0)*x10906*x10910))+(((-1.0)*r02*x10909)));
evalcond[4]=(((x10901*x10908))+(((-1.0)*r22*x10910))+((sj1*sj2))+(((-1.0)*x10907*x10909))+(((-1.0)*cj2*x10903)));
evalcond[5]=((((-1.0)*r12*x10910))+((x10901*x10904))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10903))+(((-1.0)*x10902*x10909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10911=((1.0)*gconst5);
CheckValue<IkReal> x10912=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10911))+(((-1.0)*gconst4*r10)))),-1);
if(!x10912.valid){
continue;
}
CheckValue<IkReal> x10913 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10911))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10912.value)))+(x10913.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10914=IKsin(j4);
IkReal x10915=IKcos(j4);
IkReal x10916=(gconst4*r11);
IkReal x10917=((1.0)*cj1);
IkReal x10918=(gconst5*r10);
IkReal x10919=(gconst4*r01);
IkReal x10920=(gconst5*r00);
IkReal x10921=(gconst4*r21);
IkReal x10922=(gconst5*r20);
IkReal x10923=((1.0)*x10915);
IkReal x10924=((1.0)*x10914);
evalcond[0]=((((-1.0)*r22*x10923))+((x10914*x10921))+(((-1.0)*x10922*x10924)));
evalcond[1]=((((-1.0)*r12*x10923))+(((-1.0)*x10918*x10924))+((x10914*x10916)));
evalcond[2]=((((-1.0)*r02*x10924))+((x10915*x10920))+(((-1.0)*x10919*x10923)));
evalcond[3]=((-1.0)+(((-1.0)*x10920*x10924))+(((-1.0)*r02*x10923))+((x10914*x10919)));
evalcond[4]=((((-1.0)*r22*x10924))+((x10915*x10922))+((sj1*sj2))+(((-1.0)*x10921*x10923))+(((-1.0)*cj2*x10917)));
evalcond[5]=((((-1.0)*sj2*x10917))+(((-1.0)*r12*x10924))+(((-1.0)*cj2*sj1))+((x10915*x10918))+(((-1.0)*x10916*x10923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10925 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10925.valid){
continue;
}
CheckValue<IkReal> x10926=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10925.value)+(((1.5707963267949)*(x10926.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10927=IKsin(j4);
IkReal x10928=IKcos(j4);
IkReal x10929=(gconst4*r11);
IkReal x10930=((1.0)*cj1);
IkReal x10931=(gconst5*r10);
IkReal x10932=(gconst4*r01);
IkReal x10933=(gconst5*r00);
IkReal x10934=(gconst4*r21);
IkReal x10935=(gconst5*r20);
IkReal x10936=((1.0)*x10928);
IkReal x10937=((1.0)*x10927);
evalcond[0]=((((-1.0)*r22*x10936))+((x10927*x10934))+(((-1.0)*x10935*x10937)));
evalcond[1]=((((-1.0)*r12*x10936))+((x10927*x10929))+(((-1.0)*x10931*x10937)));
evalcond[2]=((((-1.0)*r02*x10937))+((x10928*x10933))+(((-1.0)*x10932*x10936)));
evalcond[3]=((-1.0)+((x10927*x10932))+(((-1.0)*r02*x10936))+(((-1.0)*x10933*x10937)));
evalcond[4]=((((-1.0)*r22*x10937))+((sj1*sj2))+((x10928*x10935))+(((-1.0)*cj2*x10930))+(((-1.0)*x10934*x10936)));
evalcond[5]=((((-1.0)*x10929*x10936))+(((-1.0)*r12*x10937))+(((-1.0)*cj2*sj1))+((x10928*x10931))+(((-1.0)*sj2*x10930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10938=((-1.0)*r21);
CheckValue<IkReal> x10941 = IKatan2WithCheck(IkReal(x10938),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10941.valid){
continue;
}
IkReal x10939=((1.0)*(x10941.value));
IkReal x10940=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10939)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10939)));
IkReal gconst4=(x10938*x10940);
IkReal gconst5=((1.0)*r20*x10940);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10942=((-1.0)*r21);
CheckValue<IkReal> x10945 = IKatan2WithCheck(IkReal(x10942),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10945.valid){
continue;
}
IkReal x10943=((1.0)*(x10945.value));
IkReal x10944=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10943)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10943)));
IkReal gconst4=(x10942*x10944);
IkReal gconst5=((1.0)*r20*x10944);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10946=((-1.0)*r21);
CheckValue<IkReal> x10949 = IKatan2WithCheck(IkReal(x10946),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10949.valid){
continue;
}
IkReal x10947=((1.0)*(x10949.value));
IkReal x10948=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10947)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10947)));
IkReal gconst4=(x10946*x10948);
IkReal gconst5=((1.0)*r20*x10948);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10950=(gconst4*r01);
IkReal x10951=(gconst5*r00);
CheckValue<IkReal> x10952=IKPowWithIntegerCheck(IKsign(((x10951*x10951)+(x10950*x10950)+(r02*r02)+(((-2.0)*x10950*x10951)))),-1);
if(!x10952.valid){
continue;
}
CheckValue<IkReal> x10953 = IKatan2WithCheck(IkReal(((((-1.0)*x10951))+x10950)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10952.value)))+(x10953.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10954=IKcos(j4);
IkReal x10955=IKsin(j4);
IkReal x10956=(gconst4*r11);
IkReal x10957=(gconst5*r10);
IkReal x10958=((1.0)*cj1);
IkReal x10959=(gconst5*r00);
IkReal x10960=(gconst5*r20);
IkReal x10961=((1.0)*x10954);
IkReal x10962=(gconst4*x10954);
IkReal x10963=((1.0)*x10955);
IkReal x10964=(gconst4*x10955);
evalcond[0]=(((r02*x10955))+((r01*x10962))+(((-1.0)*x10959*x10961)));
evalcond[1]=((((-1.0)*x10960*x10963))+(((-1.0)*r22*x10961))+((r21*x10964)));
evalcond[2]=((((-1.0)*x10957*x10963))+((x10955*x10956))+(((-1.0)*r12*x10961)));
evalcond[3]=((-1.0)+((r01*x10964))+(((-1.0)*x10959*x10963))+(((-1.0)*r02*x10961)));
evalcond[4]=((((-1.0)*cj2*x10958))+(((-1.0)*x10960*x10961))+((r22*x10955))+((sj1*sj2))+((r21*x10962)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x10954*x10956))+(((-1.0)*x10957*x10961))+(((-1.0)*sj2*x10958))+((r12*x10955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10965=((1.0)*gconst5);
CheckValue<IkReal> x10966=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10965))+(((-1.0)*gconst4*r10)))),-1);
if(!x10966.valid){
continue;
}
CheckValue<IkReal> x10967 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10965))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10966.value)))+(x10967.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10968=IKcos(j4);
IkReal x10969=IKsin(j4);
IkReal x10970=(gconst4*r11);
IkReal x10971=(gconst5*r10);
IkReal x10972=((1.0)*cj1);
IkReal x10973=(gconst5*r00);
IkReal x10974=(gconst5*r20);
IkReal x10975=((1.0)*x10968);
IkReal x10976=(gconst4*x10968);
IkReal x10977=((1.0)*x10969);
IkReal x10978=(gconst4*x10969);
evalcond[0]=((((-1.0)*x10973*x10975))+((r02*x10969))+((r01*x10976)));
evalcond[1]=((((-1.0)*r22*x10975))+((r21*x10978))+(((-1.0)*x10974*x10977)));
evalcond[2]=((((-1.0)*x10971*x10977))+((x10969*x10970))+(((-1.0)*r12*x10975)));
evalcond[3]=((-1.0)+(((-1.0)*x10973*x10977))+((r01*x10978))+(((-1.0)*r02*x10975)));
evalcond[4]=((((-1.0)*cj2*x10972))+((r22*x10969))+((sj1*sj2))+((r21*x10976))+(((-1.0)*x10974*x10975)));
evalcond[5]=((((-1.0)*x10971*x10975))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10972))+((r12*x10969))+((x10968*x10970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10979 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10979.valid){
continue;
}
CheckValue<IkReal> x10980=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10979.value)+(((1.5707963267949)*(x10980.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10981=IKcos(j4);
IkReal x10982=IKsin(j4);
IkReal x10983=(gconst4*r11);
IkReal x10984=(gconst5*r10);
IkReal x10985=((1.0)*cj1);
IkReal x10986=(gconst5*r00);
IkReal x10987=(gconst5*r20);
IkReal x10988=((1.0)*x10981);
IkReal x10989=(gconst4*x10981);
IkReal x10990=((1.0)*x10982);
IkReal x10991=(gconst4*x10982);
evalcond[0]=(((r01*x10989))+(((-1.0)*x10986*x10988))+((r02*x10982)));
evalcond[1]=(((r21*x10991))+(((-1.0)*r22*x10988))+(((-1.0)*x10987*x10990)));
evalcond[2]=((((-1.0)*r12*x10988))+((x10982*x10983))+(((-1.0)*x10984*x10990)));
evalcond[3]=((-1.0)+((r01*x10991))+(((-1.0)*x10986*x10990))+(((-1.0)*r02*x10988)));
evalcond[4]=(((r22*x10982))+((r21*x10989))+(((-1.0)*cj2*x10985))+((sj1*sj2))+(((-1.0)*x10987*x10988)));
evalcond[5]=(((r12*x10982))+(((-1.0)*sj2*x10985))+(((-1.0)*cj2*sj1))+(((-1.0)*x10984*x10988))+((x10981*x10983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10992=((-1.0)*r21);
CheckValue<IkReal> x10995 = IKatan2WithCheck(IkReal(x10992),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10995.valid){
continue;
}
IkReal x10993=((1.0)*(x10995.value));
IkReal x10994=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10993)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10993)));
IkReal gconst4=(x10992*x10994);
IkReal gconst5=((1.0)*r20*x10994);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10996=((-1.0)*r21);
CheckValue<IkReal> x10999 = IKatan2WithCheck(IkReal(x10996),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10999.valid){
continue;
}
IkReal x10997=((1.0)*(x10999.value));
IkReal x10998=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10997)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10997)));
IkReal gconst4=(x10996*x10998);
IkReal gconst5=((1.0)*r20*x10998);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11000=((-1.0)*r21);
CheckValue<IkReal> x11003 = IKatan2WithCheck(IkReal(x11000),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11003.valid){
continue;
}
IkReal x11001=((1.0)*(x11003.value));
IkReal x11002=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11001)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11001)));
IkReal gconst4=(x11000*x11002);
IkReal gconst5=((1.0)*r20*x11002);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11004=(gconst4*r01);
IkReal x11005=(gconst5*r00);
CheckValue<IkReal> x11006 = IKatan2WithCheck(IkReal((x11004+(((-1.0)*x11005)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11006.valid){
continue;
}
CheckValue<IkReal> x11007=IKPowWithIntegerCheck(IKsign(((x11005*x11005)+(((-2.0)*x11004*x11005))+(r02*r02)+(x11004*x11004))),-1);
if(!x11007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11006.value)+(((1.5707963267949)*(x11007.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11008=IKcos(j4);
IkReal x11009=IKsin(j4);
IkReal x11010=(gconst4*r11);
IkReal x11011=(gconst5*r10);
IkReal x11012=(gconst5*r00);
IkReal x11013=(gconst5*r20);
IkReal x11014=((1.0)*x11008);
IkReal x11015=(gconst4*x11008);
IkReal x11016=((1.0)*x11009);
IkReal x11017=(gconst4*x11009);
evalcond[0]=(((r02*x11009))+(((-1.0)*x11012*x11014))+((r01*x11015)));
evalcond[1]=((((-1.0)*r22*x11014))+(((-1.0)*x11013*x11016))+((r21*x11017)));
evalcond[2]=((((-1.0)*x11011*x11016))+(((-1.0)*r12*x11014))+((x11009*x11010)));
evalcond[3]=((-1.0)+(((-1.0)*x11012*x11016))+(((-1.0)*r02*x11014))+((r01*x11017)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11013*x11014))+((cj1*sj2))+((r21*x11015))+((r22*x11009)));
evalcond[5]=((((-1.0)*x11011*x11014))+((x11008*x11010))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11018=((1.0)*gconst5);
CheckValue<IkReal> x11019=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11018))+(((-1.0)*gconst4*r10)))),-1);
if(!x11019.valid){
continue;
}
CheckValue<IkReal> x11020 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11018)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11019.value)))+(x11020.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11021=IKcos(j4);
IkReal x11022=IKsin(j4);
IkReal x11023=(gconst4*r11);
IkReal x11024=(gconst5*r10);
IkReal x11025=(gconst5*r00);
IkReal x11026=(gconst5*r20);
IkReal x11027=((1.0)*x11021);
IkReal x11028=(gconst4*x11021);
IkReal x11029=((1.0)*x11022);
IkReal x11030=(gconst4*x11022);
evalcond[0]=(((r01*x11028))+((r02*x11022))+(((-1.0)*x11025*x11027)));
evalcond[1]=(((r21*x11030))+(((-1.0)*r22*x11027))+(((-1.0)*x11026*x11029)));
evalcond[2]=(((x11022*x11023))+(((-1.0)*r12*x11027))+(((-1.0)*x11024*x11029)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11027))+((r01*x11030))+(((-1.0)*x11025*x11029)));
evalcond[4]=(((cj2*sj1))+((r21*x11028))+((cj1*sj2))+((r22*x11022))+(((-1.0)*x11026*x11027)));
evalcond[5]=(((x11021*x11023))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11022))+(((-1.0)*x11024*x11027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11031 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11031.valid){
continue;
}
CheckValue<IkReal> x11032=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11031.value)+(((1.5707963267949)*(x11032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11033=IKcos(j4);
IkReal x11034=IKsin(j4);
IkReal x11035=(gconst4*r11);
IkReal x11036=(gconst5*r10);
IkReal x11037=(gconst5*r00);
IkReal x11038=(gconst5*r20);
IkReal x11039=((1.0)*x11033);
IkReal x11040=(gconst4*x11033);
IkReal x11041=((1.0)*x11034);
IkReal x11042=(gconst4*x11034);
evalcond[0]=(((r01*x11040))+(((-1.0)*x11037*x11039))+((r02*x11034)));
evalcond[1]=((((-1.0)*r22*x11039))+((r21*x11042))+(((-1.0)*x11038*x11041)));
evalcond[2]=((((-1.0)*x11036*x11041))+((x11034*x11035))+(((-1.0)*r12*x11039)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11039))+(((-1.0)*x11037*x11041))+((r01*x11042)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x11034))+((r21*x11040))+(((-1.0)*x11038*x11039)));
evalcond[5]=(((x11033*x11035))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11036*x11039))+((r12*x11034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11043=((-1.0)*r21);
CheckValue<IkReal> x11046 = IKatan2WithCheck(IkReal(x11043),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11046.valid){
continue;
}
IkReal x11044=((1.0)*(x11046.value));
IkReal x11045=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11044)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11044)));
IkReal gconst4=(x11043*x11045);
IkReal gconst5=((1.0)*r20*x11045);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11047=((-1.0)*r21);
CheckValue<IkReal> x11050 = IKatan2WithCheck(IkReal(x11047),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11050.valid){
continue;
}
IkReal x11048=((1.0)*(x11050.value));
IkReal x11049=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11048)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11048)));
IkReal gconst4=(x11047*x11049);
IkReal gconst5=((1.0)*r20*x11049);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11051=((-1.0)*r21);
CheckValue<IkReal> x11054 = IKatan2WithCheck(IkReal(x11051),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11054.valid){
continue;
}
IkReal x11052=((1.0)*(x11054.value));
IkReal x11053=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11052)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11052)));
IkReal gconst4=(x11051*x11053);
IkReal gconst5=((1.0)*r20*x11053);
IkReal x11055=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11059=IKPowWithIntegerCheck(x11055,-1);
if(!x11059.valid){
continue;
}
IkReal x11056=x11059.value;
IkReal x11057=((1.0)*x11056);
IkReal x11058=((((-1.0)*x11057*(r01*r01)*(r21*r21)))+(((-1.0)*x11057*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11056)));
j4eval[0]=x11058;
j4eval[1]=r02;
j4eval[2]=x11055;
j4eval[3]=IKsign(x11058);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11060=(gconst5*r00);
IkReal x11061=(gconst4*r01);
CheckValue<IkReal> x11062=IKPowWithIntegerCheck(IKsign(((((2.0)*x11060*x11061))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11061*x11061)))+(((-1.0)*(x11060*x11060))))),-1);
if(!x11062.valid){
continue;
}
CheckValue<IkReal> x11063 = IKatan2WithCheck(IkReal((x11060+(((-1.0)*x11061)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11062.value)))+(x11063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11064=IKsin(j4);
IkReal x11065=IKcos(j4);
IkReal x11066=(gconst4*r11);
IkReal x11067=(gconst5*r10);
IkReal x11068=(gconst4*r01);
IkReal x11069=(gconst5*r00);
IkReal x11070=(gconst4*r21);
IkReal x11071=(gconst5*r20);
IkReal x11072=((1.0)*x11065);
IkReal x11073=((1.0)*x11064);
evalcond[0]=((((-1.0)*x11071*x11073))+((x11064*x11070))+(((-1.0)*r22*x11072)));
evalcond[1]=(((x11064*x11066))+(((-1.0)*x11067*x11073))+(((-1.0)*r12*x11072)));
evalcond[2]=(((x11065*x11069))+(((-1.0)*r02*x11073))+(((-1.0)*x11068*x11072)));
evalcond[3]=((-1.0)+((x11064*x11068))+(((-1.0)*r02*x11072))+(((-1.0)*x11069*x11073)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11070*x11072))+((x11065*x11071))+(((-1.0)*r22*x11073)));
evalcond[5]=(((x11065*x11067))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11066*x11072))+(((-1.0)*r12*x11073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11074=((1.0)*gconst5);
CheckValue<IkReal> x11075=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11074))+(((-1.0)*gconst4*r10)))),-1);
if(!x11075.valid){
continue;
}
CheckValue<IkReal> x11076 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11074))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11075.value)))+(x11076.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11077=IKsin(j4);
IkReal x11078=IKcos(j4);
IkReal x11079=(gconst4*r11);
IkReal x11080=(gconst5*r10);
IkReal x11081=(gconst4*r01);
IkReal x11082=(gconst5*r00);
IkReal x11083=(gconst4*r21);
IkReal x11084=(gconst5*r20);
IkReal x11085=((1.0)*x11078);
IkReal x11086=((1.0)*x11077);
evalcond[0]=((((-1.0)*r22*x11085))+((x11077*x11083))+(((-1.0)*x11084*x11086)));
evalcond[1]=((((-1.0)*x11080*x11086))+((x11077*x11079))+(((-1.0)*r12*x11085)));
evalcond[2]=((((-1.0)*x11081*x11085))+(((-1.0)*r02*x11086))+((x11078*x11082)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11085))+(((-1.0)*x11082*x11086))+((x11077*x11081)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x11086))+((x11078*x11084))+(((-1.0)*x11083*x11085)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11086))+(((-1.0)*x11079*x11085))+((x11078*x11080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11087 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11087.valid){
continue;
}
CheckValue<IkReal> x11088=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11087.value)+(((1.5707963267949)*(x11088.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11089=IKsin(j4);
IkReal x11090=IKcos(j4);
IkReal x11091=(gconst4*r11);
IkReal x11092=(gconst5*r10);
IkReal x11093=(gconst4*r01);
IkReal x11094=(gconst5*r00);
IkReal x11095=(gconst4*r21);
IkReal x11096=(gconst5*r20);
IkReal x11097=((1.0)*x11090);
IkReal x11098=((1.0)*x11089);
evalcond[0]=((((-1.0)*x11096*x11098))+(((-1.0)*r22*x11097))+((x11089*x11095)));
evalcond[1]=((((-1.0)*r12*x11097))+(((-1.0)*x11092*x11098))+((x11089*x11091)));
evalcond[2]=((((-1.0)*x11093*x11097))+(((-1.0)*r02*x11098))+((x11090*x11094)));
evalcond[3]=((-1.0)+(((-1.0)*x11094*x11098))+(((-1.0)*r02*x11097))+((x11089*x11093)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11098))+((cj1*sj2))+(((-1.0)*x11095*x11097))+((x11090*x11096)));
evalcond[5]=((((-1.0)*r12*x11098))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11091*x11097))+((x11090*x11092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11099=gconst4*gconst4;
IkReal x11100=gconst5*gconst5;
IkReal x11101=(r01*r20);
IkReal x11102=(gconst4*sj3);
IkReal x11103=(r01*r21);
IkReal x11104=((1.0)*cj3);
IkReal x11105=(r00*r21);
IkReal x11106=(r00*r20);
IkReal x11107=(cj3*gconst4*gconst5);
IkReal x11108=((1.0)*x11100);
CheckValue<IkReal> x11109 = IKatan2WithCheck(IkReal((((r00*r22*x11102))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*sj3*x11101*x11108))+(((-1.0)*gconst5*x11102*x11106))+((gconst5*x11102*x11103))+((sj3*x11099*x11105)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11109.valid){
continue;
}
CheckValue<IkReal> x11110=IKPowWithIntegerCheck(IKsign((((x11105*x11107))+(((-1.0)*x11099*x11103*x11104))+((x11101*x11107))+(((-1.0)*x11100*x11104*x11106))+(((-1.0)*r02*r22*x11104)))),-1);
if(!x11110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11109.value)+(((1.5707963267949)*(x11110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11111=IKsin(j4);
IkReal x11112=IKcos(j4);
IkReal x11113=(sj1*sj2);
IkReal x11114=(gconst5*sj3);
IkReal x11115=(gconst4*r11);
IkReal x11116=(gconst5*r10);
IkReal x11117=((1.0)*cj1);
IkReal x11118=(gconst4*r01);
IkReal x11119=(cj2*sj1);
IkReal x11120=(gconst5*r00);
IkReal x11121=(gconst4*sj3);
IkReal x11122=(cj3*gconst5);
IkReal x11123=(cj3*gconst4);
IkReal x11124=(gconst4*r21);
IkReal x11125=(cj2*x11117);
IkReal x11126=((1.0)*x11112);
IkReal x11127=((1.0)*x11111);
IkReal x11128=(cj3*x11111);
IkReal x11129=(cj3*x11112);
evalcond[0]=((((-1.0)*gconst5*r20*x11127))+(((-1.0)*r22*x11126))+((x11111*x11124)));
evalcond[1]=((((-1.0)*r12*x11126))+((x11111*x11115))+(((-1.0)*x11116*x11127)));
evalcond[2]=((-1.0)+((x11111*x11118))+(((-1.0)*x11120*x11127))+(((-1.0)*r02*x11126)));
evalcond[3]=((((-1.0)*cj3*x11120*x11126))+((r02*x11128))+((x11118*x11129))+((r00*x11121))+((r01*x11114)));
evalcond[4]=((((-1.0)*sj3*x11118*x11126))+((r00*x11112*x11114))+(((-1.0)*r02*sj3*x11127))+((r00*x11123))+((r01*x11122)));
evalcond[5]=(((cj1*sj2))+((r22*x11128))+x11119+((r21*x11114))+((r21*x11112*x11123))+(((-1.0)*r20*x11122*x11126))+((r20*x11121)));
evalcond[6]=(((x11115*x11129))+(((-1.0)*x11125))+(((-1.0)*cj3*x11116*x11126))+((r12*x11128))+((r10*x11121))+x11113+((r11*x11114)));
evalcond[7]=((((-1.0)*x11125))+((r21*x11122))+x11113+(((-1.0)*r22*sj3*x11127))+((r20*x11112*x11114))+(((-1.0)*r21*x11121*x11126))+((r20*x11123)));
evalcond[8]=((((-1.0)*x11119))+(((-1.0)*r12*sj3*x11127))+(((-1.0)*sj3*x11115*x11126))+((r10*x11123))+((r11*x11122))+(((-1.0)*sj2*x11117))+((r10*x11112*x11114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11130=((1.0)*gconst5);
CheckValue<IkReal> x11131 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11130))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11131.valid){
continue;
}
CheckValue<IkReal> x11132=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11130))+(((-1.0)*gconst4*r10)))),-1);
if(!x11132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11131.value)+(((1.5707963267949)*(x11132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11133=IKsin(j4);
IkReal x11134=IKcos(j4);
IkReal x11135=(sj1*sj2);
IkReal x11136=(gconst5*sj3);
IkReal x11137=(gconst4*r11);
IkReal x11138=(gconst5*r10);
IkReal x11139=((1.0)*cj1);
IkReal x11140=(gconst4*r01);
IkReal x11141=(cj2*sj1);
IkReal x11142=(gconst5*r00);
IkReal x11143=(gconst4*sj3);
IkReal x11144=(cj3*gconst5);
IkReal x11145=(cj3*gconst4);
IkReal x11146=(gconst4*r21);
IkReal x11147=(cj2*x11139);
IkReal x11148=((1.0)*x11134);
IkReal x11149=((1.0)*x11133);
IkReal x11150=(cj3*x11133);
IkReal x11151=(cj3*x11134);
evalcond[0]=(((x11133*x11146))+(((-1.0)*r22*x11148))+(((-1.0)*gconst5*r20*x11149)));
evalcond[1]=(((x11133*x11137))+(((-1.0)*r12*x11148))+(((-1.0)*x11138*x11149)));
evalcond[2]=((-1.0)+((x11133*x11140))+(((-1.0)*x11142*x11149))+(((-1.0)*r02*x11148)));
evalcond[3]=(((r00*x11143))+((r02*x11150))+((x11140*x11151))+((r01*x11136))+(((-1.0)*cj3*x11142*x11148)));
evalcond[4]=(((r01*x11144))+((r00*x11145))+(((-1.0)*sj3*x11140*x11148))+(((-1.0)*r02*sj3*x11149))+((r00*x11134*x11136)));
evalcond[5]=(((r22*x11150))+((cj1*sj2))+(((-1.0)*r20*x11144*x11148))+((r21*x11136))+x11141+((r21*x11134*x11145))+((r20*x11143)));
evalcond[6]=((((-1.0)*cj3*x11138*x11148))+((x11137*x11151))+x11135+((r12*x11150))+((r10*x11143))+((r11*x11136))+(((-1.0)*x11147)));
evalcond[7]=(((r21*x11144))+((r20*x11134*x11136))+x11135+((r20*x11145))+(((-1.0)*r21*x11143*x11148))+(((-1.0)*r22*sj3*x11149))+(((-1.0)*x11147)));
evalcond[8]=((((-1.0)*sj3*x11137*x11148))+((r10*x11134*x11136))+(((-1.0)*x11141))+((r11*x11144))+(((-1.0)*r12*sj3*x11149))+((r10*x11145))+(((-1.0)*sj2*x11139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11152 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11152.valid){
continue;
}
CheckValue<IkReal> x11153=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11152.value)+(((1.5707963267949)*(x11153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11154=IKsin(j4);
IkReal x11155=IKcos(j4);
IkReal x11156=(sj1*sj2);
IkReal x11157=(gconst5*sj3);
IkReal x11158=(gconst4*r11);
IkReal x11159=(gconst5*r10);
IkReal x11160=((1.0)*cj1);
IkReal x11161=(gconst4*r01);
IkReal x11162=(cj2*sj1);
IkReal x11163=(gconst5*r00);
IkReal x11164=(gconst4*sj3);
IkReal x11165=(cj3*gconst5);
IkReal x11166=(cj3*gconst4);
IkReal x11167=(gconst4*r21);
IkReal x11168=(cj2*x11160);
IkReal x11169=((1.0)*x11155);
IkReal x11170=((1.0)*x11154);
IkReal x11171=(cj3*x11154);
IkReal x11172=(cj3*x11155);
evalcond[0]=((((-1.0)*r22*x11169))+((x11154*x11167))+(((-1.0)*gconst5*r20*x11170)));
evalcond[1]=((((-1.0)*r12*x11169))+(((-1.0)*x11159*x11170))+((x11154*x11158)));
evalcond[2]=((-1.0)+(((-1.0)*x11163*x11170))+((x11154*x11161))+(((-1.0)*r02*x11169)));
evalcond[3]=(((r01*x11157))+((x11161*x11172))+((r00*x11164))+((r02*x11171))+(((-1.0)*cj3*x11163*x11169)));
evalcond[4]=(((r01*x11165))+((r00*x11166))+(((-1.0)*r02*sj3*x11170))+((r00*x11155*x11157))+(((-1.0)*sj3*x11161*x11169)));
evalcond[5]=((((-1.0)*r20*x11165*x11169))+((r21*x11155*x11166))+((r20*x11164))+((r21*x11157))+((cj1*sj2))+x11162+((r22*x11171)));
evalcond[6]=(((x11158*x11172))+((r12*x11171))+(((-1.0)*x11168))+((r11*x11157))+x11156+(((-1.0)*cj3*x11159*x11169))+((r10*x11164)));
evalcond[7]=((((-1.0)*r22*sj3*x11170))+(((-1.0)*r21*x11164*x11169))+((r20*x11155*x11157))+((r20*x11166))+(((-1.0)*x11168))+x11156+((r21*x11165)));
evalcond[8]=((((-1.0)*sj3*x11158*x11169))+(((-1.0)*sj2*x11160))+((r11*x11165))+(((-1.0)*x11162))+(((-1.0)*r12*sj3*x11170))+((r10*x11166))+((r10*x11155*x11157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11173=((-1.0)*r21);
CheckValue<IkReal> x11176 = IKatan2WithCheck(IkReal(x11173),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11176.valid){
continue;
}
IkReal x11174=((1.0)*(x11176.value));
IkReal x11175=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11174)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11174)));
IkReal gconst4=(x11173*x11175);
IkReal gconst5=((1.0)*r20*x11175);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11177=((-1.0)*r21);
CheckValue<IkReal> x11180 = IKatan2WithCheck(IkReal(x11177),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11180.valid){
continue;
}
IkReal x11178=((1.0)*(x11180.value));
IkReal x11179=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11178)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11178)));
IkReal gconst4=(x11177*x11179);
IkReal gconst5=((1.0)*r20*x11179);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11181=((-1.0)*r21);
CheckValue<IkReal> x11184 = IKatan2WithCheck(IkReal(x11181),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11184.valid){
continue;
}
IkReal x11182=((1.0)*(x11184.value));
IkReal x11183=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11182)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11182)));
IkReal gconst4=(x11181*x11183);
IkReal gconst5=((1.0)*r20*x11183);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11185=((-1.0)*r21);
CheckValue<IkReal> x11188 = IKatan2WithCheck(IkReal(x11185),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11188.valid){
continue;
}
IkReal x11186=((1.0)*(x11188.value));
IkReal x11187=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11186)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11186)));
IkReal gconst4=(x11185*x11187);
IkReal gconst5=((1.0)*r20*x11187);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11189=((-1.0)*r21);
CheckValue<IkReal> x11192 = IKatan2WithCheck(IkReal(x11189),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11192.valid){
continue;
}
IkReal x11190=((1.0)*(x11192.value));
IkReal x11191=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11190)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11190)));
IkReal gconst4=(x11189*x11191);
IkReal gconst5=((1.0)*r20*x11191);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11193=((-1.0)*r21);
CheckValue<IkReal> x11196 = IKatan2WithCheck(IkReal(x11193),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11196.valid){
continue;
}
IkReal x11194=((1.0)*(x11196.value));
IkReal x11195=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11194)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11194)));
IkReal gconst4=(x11193*x11195);
IkReal gconst5=((1.0)*r20*x11195);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11197=(gconst5*r00);
IkReal x11198=(gconst4*r01);
CheckValue<IkReal> x11199=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11197*x11198))+(x11198*x11198)+(r02*r02)+(x11197*x11197))),-1);
if(!x11199.valid){
continue;
}
CheckValue<IkReal> x11200 = IKatan2WithCheck(IkReal((x11197+(((-1.0)*x11198)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11199.value)))+(x11200.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11201=IKsin(j4);
IkReal x11202=IKcos(j4);
IkReal x11203=(gconst4*r11);
IkReal x11204=(gconst5*r10);
IkReal x11205=(gconst4*r01);
IkReal x11206=(gconst5*r00);
IkReal x11207=(gconst4*r21);
IkReal x11208=(gconst5*r20);
IkReal x11209=((1.0)*x11202);
IkReal x11210=((1.0)*x11201);
evalcond[0]=((((-1.0)*r22*x11209))+((x11201*x11207))+(((-1.0)*x11208*x11210)));
evalcond[1]=(((x11201*x11203))+(((-1.0)*r12*x11209))+(((-1.0)*x11204*x11210)));
evalcond[2]=(((x11202*x11206))+(((-1.0)*r02*x11210))+(((-1.0)*x11205*x11209)));
evalcond[3]=((1.0)+((x11201*x11205))+(((-1.0)*r02*x11209))+(((-1.0)*x11206*x11210)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11203*x11209))+((cj1*sj2))+((x11202*x11204))+(((-1.0)*r12*x11210)));
evalcond[5]=(((x11202*x11208))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11207*x11209))+(((-1.0)*r22*x11210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11211=((1.0)*gconst5);
CheckValue<IkReal> x11212 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11211)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11212.valid){
continue;
}
CheckValue<IkReal> x11213=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11211))+(((-1.0)*gconst4*r20)))),-1);
if(!x11213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11212.value)+(((1.5707963267949)*(x11213.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11214=IKsin(j4);
IkReal x11215=IKcos(j4);
IkReal x11216=(gconst4*r11);
IkReal x11217=(gconst5*r10);
IkReal x11218=(gconst4*r01);
IkReal x11219=(gconst5*r00);
IkReal x11220=(gconst4*r21);
IkReal x11221=(gconst5*r20);
IkReal x11222=((1.0)*x11215);
IkReal x11223=((1.0)*x11214);
evalcond[0]=(((x11214*x11220))+(((-1.0)*x11221*x11223))+(((-1.0)*r22*x11222)));
evalcond[1]=((((-1.0)*x11217*x11223))+((x11214*x11216))+(((-1.0)*r12*x11222)));
evalcond[2]=((((-1.0)*x11218*x11222))+((x11215*x11219))+(((-1.0)*r02*x11223)));
evalcond[3]=((1.0)+(((-1.0)*x11219*x11223))+((x11214*x11218))+(((-1.0)*r02*x11222)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11216*x11222))+((x11215*x11217))+(((-1.0)*r12*x11223)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11220*x11222))+((x11215*x11221))+(((-1.0)*r22*x11223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11224=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11224.valid){
continue;
}
CheckValue<IkReal> x11225 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11224.value)))+(x11225.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11226=IKsin(j4);
IkReal x11227=IKcos(j4);
IkReal x11228=(gconst4*r11);
IkReal x11229=(gconst5*r10);
IkReal x11230=(gconst4*r01);
IkReal x11231=(gconst5*r00);
IkReal x11232=(gconst4*r21);
IkReal x11233=(gconst5*r20);
IkReal x11234=((1.0)*x11227);
IkReal x11235=((1.0)*x11226);
evalcond[0]=((((-1.0)*x11233*x11235))+((x11226*x11232))+(((-1.0)*r22*x11234)));
evalcond[1]=(((x11226*x11228))+(((-1.0)*x11229*x11235))+(((-1.0)*r12*x11234)));
evalcond[2]=((((-1.0)*r02*x11235))+(((-1.0)*x11230*x11234))+((x11227*x11231)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11234))+(((-1.0)*x11231*x11235))+((x11226*x11230)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11227*x11229))+(((-1.0)*x11228*x11234))+(((-1.0)*r12*x11235)));
evalcond[5]=(((x11227*x11233))+(((-1.0)*x11232*x11234))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11236=((-1.0)*r21);
CheckValue<IkReal> x11239 = IKatan2WithCheck(IkReal(x11236),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11239.valid){
continue;
}
IkReal x11237=((1.0)*(x11239.value));
IkReal x11238=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11237)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11237)));
IkReal gconst4=(x11236*x11238);
IkReal gconst5=((1.0)*r20*x11238);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11240=((-1.0)*r21);
CheckValue<IkReal> x11243 = IKatan2WithCheck(IkReal(x11240),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11243.valid){
continue;
}
IkReal x11241=((1.0)*(x11243.value));
IkReal x11242=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11241)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11241)));
IkReal gconst4=(x11240*x11242);
IkReal gconst5=((1.0)*r20*x11242);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11244=((-1.0)*r21);
CheckValue<IkReal> x11247 = IKatan2WithCheck(IkReal(x11244),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11247.valid){
continue;
}
IkReal x11245=((1.0)*(x11247.value));
IkReal x11246=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11245)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11245)));
IkReal gconst4=(x11244*x11246);
IkReal gconst5=((1.0)*r20*x11246);
IkReal x11248=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11252=IKPowWithIntegerCheck(x11248,-1);
if(!x11252.valid){
continue;
}
IkReal x11249=x11252.value;
IkReal x11250=((1.0)*x11249);
IkReal x11251=((((-2.0)*r00*r01*r20*r21*x11249))+(((-1.0)*(r02*r02)))+(((-1.0)*x11250*(r00*r00)*(r20*r20)))+(((-1.0)*x11250*(r01*r01)*(r21*r21))));
j4eval[0]=x11251;
j4eval[1]=IKsign(x11251);
j4eval[2]=r02;
j4eval[3]=x11248;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11253=(gconst4*r01);
IkReal x11254=(gconst5*r00);
CheckValue<IkReal> x11255 = IKatan2WithCheck(IkReal(((((-1.0)*x11254))+x11253)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11255.valid){
continue;
}
CheckValue<IkReal> x11256=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11253*x11253)))+(((-1.0)*(x11254*x11254)))+(((2.0)*x11253*x11254)))),-1);
if(!x11256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11255.value)+(((1.5707963267949)*(x11256.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11257=IKcos(j4);
IkReal x11258=IKsin(j4);
IkReal x11259=(gconst4*r11);
IkReal x11260=(gconst5*r10);
IkReal x11261=(gconst5*r00);
IkReal x11262=(gconst5*r20);
IkReal x11263=((1.0)*x11257);
IkReal x11264=(gconst4*x11257);
IkReal x11265=((1.0)*x11258);
IkReal x11266=(gconst4*x11258);
evalcond[0]=(((r02*x11258))+(((-1.0)*x11261*x11263))+((r01*x11264)));
evalcond[1]=(((r21*x11266))+(((-1.0)*r22*x11263))+(((-1.0)*x11262*x11265)));
evalcond[2]=(((x11258*x11259))+(((-1.0)*x11260*x11265))+(((-1.0)*r12*x11263)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11263))+(((-1.0)*x11261*x11265))+((r01*x11266)));
evalcond[4]=(((cj2*sj1))+((x11257*x11259))+(((-1.0)*x11260*x11263))+((cj1*sj2))+((r12*x11258)));
evalcond[5]=(((r22*x11258))+((r21*x11264))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11262*x11263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11267=((1.0)*gconst5);
CheckValue<IkReal> x11268 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11267))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11268.valid){
continue;
}
CheckValue<IkReal> x11269=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11267))+(((-1.0)*gconst4*r20)))),-1);
if(!x11269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11268.value)+(((1.5707963267949)*(x11269.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11270=IKcos(j4);
IkReal x11271=IKsin(j4);
IkReal x11272=(gconst4*r11);
IkReal x11273=(gconst5*r10);
IkReal x11274=(gconst5*r00);
IkReal x11275=(gconst5*r20);
IkReal x11276=((1.0)*x11270);
IkReal x11277=(gconst4*x11270);
IkReal x11278=((1.0)*x11271);
IkReal x11279=(gconst4*x11271);
evalcond[0]=(((r01*x11277))+(((-1.0)*x11274*x11276))+((r02*x11271)));
evalcond[1]=(((r21*x11279))+(((-1.0)*x11275*x11278))+(((-1.0)*r22*x11276)));
evalcond[2]=((((-1.0)*r12*x11276))+(((-1.0)*x11273*x11278))+((x11271*x11272)));
evalcond[3]=((1.0)+((r01*x11279))+(((-1.0)*r02*x11276))+(((-1.0)*x11274*x11278)));
evalcond[4]=(((cj2*sj1))+((r12*x11271))+((cj1*sj2))+(((-1.0)*x11273*x11276))+((x11270*x11272)));
evalcond[5]=(((r22*x11271))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11277))+(((-1.0)*x11275*x11276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11280=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11280.valid){
continue;
}
CheckValue<IkReal> x11281 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11280.value)))+(x11281.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11282=IKcos(j4);
IkReal x11283=IKsin(j4);
IkReal x11284=(gconst4*r11);
IkReal x11285=(gconst5*r10);
IkReal x11286=(gconst5*r00);
IkReal x11287=(gconst5*r20);
IkReal x11288=((1.0)*x11282);
IkReal x11289=(gconst4*x11282);
IkReal x11290=((1.0)*x11283);
IkReal x11291=(gconst4*x11283);
evalcond[0]=(((r02*x11283))+(((-1.0)*x11286*x11288))+((r01*x11289)));
evalcond[1]=((((-1.0)*r22*x11288))+((r21*x11291))+(((-1.0)*x11287*x11290)));
evalcond[2]=((((-1.0)*r12*x11288))+(((-1.0)*x11285*x11290))+((x11283*x11284)));
evalcond[3]=((1.0)+((r01*x11291))+(((-1.0)*r02*x11288))+(((-1.0)*x11286*x11290)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x11283))+(((-1.0)*x11285*x11288))+((x11282*x11284)));
evalcond[5]=(((r22*x11283))+((r21*x11289))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11287*x11288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11292=((-1.0)*r21);
CheckValue<IkReal> x11295 = IKatan2WithCheck(IkReal(x11292),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11295.valid){
continue;
}
IkReal x11293=((1.0)*(x11295.value));
IkReal x11294=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11293)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11293)));
IkReal gconst4=(x11292*x11294);
IkReal gconst5=((1.0)*r20*x11294);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11296=((-1.0)*r21);
CheckValue<IkReal> x11299 = IKatan2WithCheck(IkReal(x11296),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11299.valid){
continue;
}
IkReal x11297=((1.0)*(x11299.value));
IkReal x11298=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11297)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11297)));
IkReal gconst4=(x11296*x11298);
IkReal gconst5=((1.0)*r20*x11298);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11300=((-1.0)*r21);
CheckValue<IkReal> x11303 = IKatan2WithCheck(IkReal(x11300),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11303.valid){
continue;
}
IkReal x11301=((1.0)*(x11303.value));
IkReal x11302=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11301)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11301)));
IkReal gconst4=(x11300*x11302);
IkReal gconst5=((1.0)*r20*x11302);
IkReal x11304=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11308=IKPowWithIntegerCheck(x11304,-1);
if(!x11308.valid){
continue;
}
IkReal x11305=x11308.value;
IkReal x11306=((1.0)*x11305);
IkReal x11307=((((-1.0)*x11306*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11306*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x11305)));
j4eval[0]=x11307;
j4eval[1]=IKsign(x11307);
j4eval[2]=r02;
j4eval[3]=x11304;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11309=(gconst4*r01);
IkReal x11310=(gconst5*r00);
CheckValue<IkReal> x11311=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11309*x11309)))+(((2.0)*x11309*x11310))+(((-1.0)*(x11310*x11310))))),-1);
if(!x11311.valid){
continue;
}
CheckValue<IkReal> x11312 = IKatan2WithCheck(IkReal((x11309+(((-1.0)*x11310)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11311.value)))+(x11312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11313=IKcos(j4);
IkReal x11314=IKsin(j4);
IkReal x11315=(gconst5*r10);
IkReal x11316=(gconst5*r00);
IkReal x11317=(gconst5*r20);
IkReal x11318=((1.0)*x11313);
IkReal x11319=(gconst4*x11314);
IkReal x11320=(gconst4*x11313);
IkReal x11321=((1.0)*x11314);
evalcond[0]=(((r02*x11314))+(((-1.0)*x11316*x11318))+((r01*x11320)));
evalcond[1]=((((-1.0)*r22*x11318))+(((-1.0)*x11317*x11321))+((r21*x11319)));
evalcond[2]=(((r11*x11319))+(((-1.0)*r12*x11318))+(((-1.0)*x11315*x11321)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11318))+((r01*x11319))+(((-1.0)*x11316*x11321)));
evalcond[4]=(((cj2*sj1))+((r22*x11314))+((cj1*sj2))+(((-1.0)*x11317*x11318))+((r21*x11320)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x11315*x11318))+((r12*x11314))+((r11*x11320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11322=((1.0)*gconst5);
CheckValue<IkReal> x11323 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11323.valid){
continue;
}
CheckValue<IkReal> x11324=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11322))+(((-1.0)*gconst4*r20)))),-1);
if(!x11324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11323.value)+(((1.5707963267949)*(x11324.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11325=IKcos(j4);
IkReal x11326=IKsin(j4);
IkReal x11327=(gconst5*r10);
IkReal x11328=(gconst5*r00);
IkReal x11329=(gconst5*r20);
IkReal x11330=((1.0)*x11325);
IkReal x11331=(gconst4*x11326);
IkReal x11332=(gconst4*x11325);
IkReal x11333=((1.0)*x11326);
evalcond[0]=(((r02*x11326))+((r01*x11332))+(((-1.0)*x11328*x11330)));
evalcond[1]=((((-1.0)*r22*x11330))+((r21*x11331))+(((-1.0)*x11329*x11333)));
evalcond[2]=((((-1.0)*r12*x11330))+((r11*x11331))+(((-1.0)*x11327*x11333)));
evalcond[3]=((1.0)+((r01*x11331))+(((-1.0)*x11328*x11333))+(((-1.0)*r02*x11330)));
evalcond[4]=(((cj2*sj1))+((r22*x11326))+((cj1*sj2))+((r21*x11332))+(((-1.0)*x11329*x11330)));
evalcond[5]=(((r11*x11332))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x11327*x11330))+((r12*x11326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11334=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11334.valid){
continue;
}
CheckValue<IkReal> x11335 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11334.value)))+(x11335.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11336=IKcos(j4);
IkReal x11337=IKsin(j4);
IkReal x11338=(gconst5*r10);
IkReal x11339=(gconst5*r00);
IkReal x11340=(gconst5*r20);
IkReal x11341=((1.0)*x11336);
IkReal x11342=(gconst4*x11337);
IkReal x11343=(gconst4*x11336);
IkReal x11344=((1.0)*x11337);
evalcond[0]=((((-1.0)*x11339*x11341))+((r01*x11343))+((r02*x11337)));
evalcond[1]=((((-1.0)*x11340*x11344))+(((-1.0)*r22*x11341))+((r21*x11342)));
evalcond[2]=(((r11*x11342))+(((-1.0)*x11338*x11344))+(((-1.0)*r12*x11341)));
evalcond[3]=((1.0)+(((-1.0)*x11339*x11344))+((r01*x11342))+(((-1.0)*r02*x11341)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11340*x11341))+((r22*x11337))+((r21*x11343)));
evalcond[5]=(((r11*x11343))+((r12*x11337))+(((-1.0)*sj1*sj2))+(((-1.0)*x11338*x11341))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11345=((-1.0)*r21);
CheckValue<IkReal> x11348 = IKatan2WithCheck(IkReal(x11345),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11348.valid){
continue;
}
IkReal x11346=((1.0)*(x11348.value));
IkReal x11347=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11346)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11346)));
IkReal gconst4=(x11345*x11347);
IkReal gconst5=((1.0)*r20*x11347);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11349=((-1.0)*r21);
CheckValue<IkReal> x11352 = IKatan2WithCheck(IkReal(x11349),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11352.valid){
continue;
}
IkReal x11350=((1.0)*(x11352.value));
IkReal x11351=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11350)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11350)));
IkReal gconst4=(x11349*x11351);
IkReal gconst5=((1.0)*r20*x11351);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11353=((-1.0)*r21);
CheckValue<IkReal> x11356 = IKatan2WithCheck(IkReal(x11353),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11356.valid){
continue;
}
IkReal x11354=((1.0)*(x11356.value));
IkReal x11355=x10147;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11354)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11354)));
IkReal gconst4=(x11353*x11355);
IkReal gconst5=((1.0)*r20*x11355);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11357=(gconst5*r00);
IkReal x11358=(gconst4*r01);
CheckValue<IkReal> x11359=IKPowWithIntegerCheck(IKsign(((x11357*x11357)+(((-2.0)*x11357*x11358))+(r02*r02)+(x11358*x11358))),-1);
if(!x11359.valid){
continue;
}
CheckValue<IkReal> x11360 = IKatan2WithCheck(IkReal((x11357+(((-1.0)*x11358)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11359.value)))+(x11360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11361=IKsin(j4);
IkReal x11362=IKcos(j4);
IkReal x11363=(gconst4*r11);
IkReal x11364=(gconst5*r10);
IkReal x11365=(gconst5*r00);
IkReal x11366=(gconst5*r20);
IkReal x11367=((1.0)*x11362);
IkReal x11368=(gconst4*x11361);
IkReal x11369=((1.0)*x11361);
evalcond[0]=(((r21*x11368))+(((-1.0)*r22*x11367))+(((-1.0)*x11366*x11369)));
evalcond[1]=(((x11361*x11363))+(((-1.0)*r12*x11367))+(((-1.0)*x11364*x11369)));
evalcond[2]=((((-1.0)*gconst4*r01*x11367))+(((-1.0)*r02*x11369))+((x11362*x11365)));
evalcond[3]=((1.0)+((r01*x11368))+(((-1.0)*r02*x11367))+(((-1.0)*x11365*x11369)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11369))+((cj1*sj2))+((x11362*x11366))+(((-1.0)*gconst4*r21*x11367)));
evalcond[5]=((((-1.0)*x11363*x11367))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x11369))+((x11362*x11364))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11370=((1.0)*gconst5);
CheckValue<IkReal> x11371 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11370))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11371.valid){
continue;
}
CheckValue<IkReal> x11372=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11370))+(((-1.0)*gconst4*r20)))),-1);
if(!x11372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11371.value)+(((1.5707963267949)*(x11372.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11373=IKsin(j4);
IkReal x11374=IKcos(j4);
IkReal x11375=(gconst4*r11);
IkReal x11376=(gconst5*r10);
IkReal x11377=(gconst5*r00);
IkReal x11378=(gconst5*r20);
IkReal x11379=((1.0)*x11374);
IkReal x11380=(gconst4*x11373);
IkReal x11381=((1.0)*x11373);
evalcond[0]=((((-1.0)*r22*x11379))+(((-1.0)*x11378*x11381))+((r21*x11380)));
evalcond[1]=((((-1.0)*r12*x11379))+((x11373*x11375))+(((-1.0)*x11376*x11381)));
evalcond[2]=((((-1.0)*gconst4*r01*x11379))+((x11374*x11377))+(((-1.0)*r02*x11381)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11379))+((r01*x11380))+(((-1.0)*x11377*x11381)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11374*x11378))+(((-1.0)*r22*x11381))+(((-1.0)*gconst4*r21*x11379)));
evalcond[5]=((((-1.0)*x11375*x11379))+(((-1.0)*sj1*sj2))+((x11374*x11376))+(((-1.0)*r12*x11381))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11382=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11382.valid){
continue;
}
CheckValue<IkReal> x11383 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11382.value)))+(x11383.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11384=IKsin(j4);
IkReal x11385=IKcos(j4);
IkReal x11386=(gconst4*r11);
IkReal x11387=(gconst5*r10);
IkReal x11388=(gconst5*r00);
IkReal x11389=(gconst5*r20);
IkReal x11390=((1.0)*x11385);
IkReal x11391=(gconst4*x11384);
IkReal x11392=((1.0)*x11384);
evalcond[0]=((((-1.0)*r22*x11390))+((r21*x11391))+(((-1.0)*x11389*x11392)));
evalcond[1]=(((x11384*x11386))+(((-1.0)*x11387*x11392))+(((-1.0)*r12*x11390)));
evalcond[2]=(((x11385*x11388))+(((-1.0)*gconst4*r01*x11390))+(((-1.0)*r02*x11392)));
evalcond[3]=((1.0)+((r01*x11391))+(((-1.0)*r02*x11390))+(((-1.0)*x11388*x11392)));
evalcond[4]=(((cj2*sj1))+((x11385*x11389))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11390))+(((-1.0)*r22*x11392)));
evalcond[5]=(((x11385*x11387))+(((-1.0)*sj1*sj2))+(((-1.0)*x11386*x11390))+((cj1*cj2))+(((-1.0)*r12*x11392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11393=((-1.0)*r21);
IkReal x11394=((-1.0)*r20);
CheckValue<IkReal> x11396 = IKatan2WithCheck(IkReal(x11393),IkReal(x11394),IKFAST_ATAN2_MAGTHRESH);
if(!x11396.valid){
continue;
}
IkReal x11395=((1.0)*(x11396.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11395)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11394);
rxp0_2=(py*r00);
rxp1_0=(py*x11393);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11395)));
IkReal gconst4=x11393;
IkReal gconst5=((1.0)*r20);
IkReal x11397=((1.0)*r01*r21);
IkReal x11398=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11398))+(((-1.0)*x11397)));
j4eval[1]=((((-1.0)*cj3*x11397))+(((-1.0)*cj3*x11398)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11399=((-1.0)*r21);
IkReal x11400=((-1.0)*r20);
CheckValue<IkReal> x11402 = IKatan2WithCheck(IkReal(x11399),IkReal(x11400),IKFAST_ATAN2_MAGTHRESH);
if(!x11402.valid){
continue;
}
IkReal x11401=((1.0)*(x11402.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11401)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11400);
rxp0_2=(py*r00);
rxp1_0=(py*x11399);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11401)));
IkReal gconst4=x11399;
IkReal gconst5=((1.0)*r20);
IkReal x11403=((1.0)*r01*r21);
IkReal x11404=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11404))+(((-1.0)*x11403)));
j4eval[1]=(((sj3*x11403))+((sj3*x11404)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11405=((-1.0)*r21);
IkReal x11406=((-1.0)*r20);
CheckValue<IkReal> x11408 = IKatan2WithCheck(IkReal(x11405),IkReal(x11406),IKFAST_ATAN2_MAGTHRESH);
if(!x11408.valid){
continue;
}
IkReal x11407=((1.0)*(x11408.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11407)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11406);
rxp0_2=(py*r00);
rxp1_0=(py*x11405);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11407)));
IkReal gconst4=x11405;
IkReal gconst5=((1.0)*r20);
IkReal x11409=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r00*r20*x11409))+(((-1.0)*r01*r21*x11409)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11410=((1.0)*gconst5);
CheckValue<IkReal> x11411=IKPowWithIntegerCheck(cj3,-1);
if(!x11411.valid){
continue;
}
CheckValue<IkReal> x11412=IKPowWithIntegerCheck(r12,-1);
if(!x11412.valid){
continue;
}
CheckValue<IkReal> x11413=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11410))+((cj3*gconst4*r01))),-1);
if(!x11413.valid){
continue;
}
if( IKabs(((x11411.value)*(x11412.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11413.value)*(((((-1.0)*r01*sj3*x11410))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11411.value)*(x11412.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11413.value)*(((((-1.0)*r01*sj3*x11410))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11411.value)*(x11412.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11413.value)*(((((-1.0)*r01*sj3*x11410))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11414=IKsin(j4);
IkReal x11415=IKcos(j4);
IkReal x11416=(cj2*sj1);
IkReal x11417=(cj1*sj2);
IkReal x11418=(sj1*sj2);
IkReal x11419=(gconst5*sj3);
IkReal x11420=(gconst5*r00);
IkReal x11421=(cj3*gconst5);
IkReal x11422=(gconst4*sj3);
IkReal x11423=(cj3*gconst4);
IkReal x11424=(cj1*cj2);
IkReal x11425=((1.0)*x11414);
IkReal x11426=(gconst4*x11414);
IkReal x11427=((1.0)*x11415);
IkReal x11428=(x11416+x11417);
IkReal x11429=(x11415*x11419);
IkReal x11430=(x11415*x11423);
evalcond[0]=((-1.0)*r12*x11415);
evalcond[1]=(((r21*x11426))+(((-1.0)*gconst5*r20*x11425)));
evalcond[2]=(((cj3*r12*x11414))+x11424+(((-1.0)*x11418)));
evalcond[3]=(x11428+(((-1.0)*r12*sj3*x11425)));
evalcond[4]=((1.0)+(((-1.0)*x11420*x11425))+((r01*x11426)));
evalcond[5]=(((r01*x11419))+((r01*x11430))+((r00*x11422))+(((-1.0)*cj3*x11420*x11427)));
evalcond[6]=((((-1.0)*r01*x11422*x11427))+((r01*x11421))+((r00*x11423))+((r00*x11429)));
evalcond[7]=(((r20*x11422))+x11428+((r21*x11419))+((r21*x11430))+(((-1.0)*r20*x11421*x11427)));
evalcond[8]=((((-1.0)*r21*x11422*x11427))+((r20*x11423))+((r20*x11429))+x11418+((r21*x11421))+(((-1.0)*x11424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11431=((1.0)*gconst4);
IkReal x11432=(gconst5*r00);
CheckValue<IkReal> x11433=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x11432))),-1);
if(!x11433.valid){
continue;
}
CheckValue<IkReal> x11434=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x11431))+((sj3*x11432))),-1);
if(!x11434.valid){
continue;
}
if( IKabs(((-1.0)*(x11433.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11434.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11431)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11433.value)))+IKsqr(((x11434.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11431))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11433.value)), ((x11434.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11431))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11435=IKsin(j4);
IkReal x11436=IKcos(j4);
IkReal x11437=(cj2*sj1);
IkReal x11438=(cj1*sj2);
IkReal x11439=(sj1*sj2);
IkReal x11440=(gconst5*sj3);
IkReal x11441=(gconst5*r00);
IkReal x11442=(cj3*gconst5);
IkReal x11443=(gconst4*sj3);
IkReal x11444=(cj3*gconst4);
IkReal x11445=(cj1*cj2);
IkReal x11446=((1.0)*x11435);
IkReal x11447=(gconst4*x11435);
IkReal x11448=((1.0)*x11436);
IkReal x11449=(x11438+x11437);
IkReal x11450=(x11436*x11440);
IkReal x11451=(x11436*x11444);
evalcond[0]=((-1.0)*r12*x11436);
evalcond[1]=((((-1.0)*gconst5*r20*x11446))+((r21*x11447)));
evalcond[2]=(x11445+((cj3*r12*x11435))+(((-1.0)*x11439)));
evalcond[3]=(x11449+(((-1.0)*r12*sj3*x11446)));
evalcond[4]=((1.0)+(((-1.0)*x11441*x11446))+((r01*x11447)));
evalcond[5]=(((r00*x11443))+((r01*x11451))+(((-1.0)*cj3*x11441*x11448))+((r01*x11440)));
evalcond[6]=(((r00*x11444))+((r00*x11450))+(((-1.0)*r01*x11443*x11448))+((r01*x11442)));
evalcond[7]=((((-1.0)*r20*x11442*x11448))+x11449+((r21*x11451))+((r20*x11443))+((r21*x11440)));
evalcond[8]=((((-1.0)*x11445))+x11439+((r20*x11450))+(((-1.0)*r21*x11443*x11448))+((r20*x11444))+((r21*x11442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11452=((1.0)*gconst5);
IkReal x11453=(gconst4*r01);
CheckValue<IkReal> x11454=IKPowWithIntegerCheck(((((-1.0)*r00*x11452))+x11453),-1);
if(!x11454.valid){
continue;
}
CheckValue<IkReal> x11455=IKPowWithIntegerCheck((((cj3*x11453))+(((-1.0)*cj3*r00*x11452))),-1);
if(!x11455.valid){
continue;
}
if( IKabs(((-1.0)*(x11454.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11455.value)*(((((-1.0)*r01*sj3*x11452))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11454.value)))+IKsqr(((x11455.value)*(((((-1.0)*r01*sj3*x11452))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11454.value)), ((x11455.value)*(((((-1.0)*r01*sj3*x11452))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11456=IKsin(j4);
IkReal x11457=IKcos(j4);
IkReal x11458=(cj2*sj1);
IkReal x11459=(cj1*sj2);
IkReal x11460=(sj1*sj2);
IkReal x11461=(gconst5*sj3);
IkReal x11462=(gconst5*r00);
IkReal x11463=(cj3*gconst5);
IkReal x11464=(gconst4*sj3);
IkReal x11465=(cj3*gconst4);
IkReal x11466=(cj1*cj2);
IkReal x11467=((1.0)*x11456);
IkReal x11468=(gconst4*x11456);
IkReal x11469=((1.0)*x11457);
IkReal x11470=(x11458+x11459);
IkReal x11471=(x11457*x11461);
IkReal x11472=(x11457*x11465);
evalcond[0]=((-1.0)*r12*x11457);
evalcond[1]=((((-1.0)*gconst5*r20*x11467))+((r21*x11468)));
evalcond[2]=(x11466+((cj3*r12*x11456))+(((-1.0)*x11460)));
evalcond[3]=(x11470+(((-1.0)*r12*sj3*x11467)));
evalcond[4]=((1.0)+((r01*x11468))+(((-1.0)*x11462*x11467)));
evalcond[5]=((((-1.0)*cj3*x11462*x11469))+((r01*x11461))+((r00*x11464))+((r01*x11472)));
evalcond[6]=(((r00*x11471))+((r01*x11463))+(((-1.0)*r01*x11464*x11469))+((r00*x11465)));
evalcond[7]=(x11470+((r20*x11464))+((r21*x11472))+((r21*x11461))+(((-1.0)*r20*x11463*x11469)));
evalcond[8]=(x11460+(((-1.0)*r21*x11464*x11469))+((r20*x11471))+((r20*x11465))+((r21*x11463))+(((-1.0)*x11466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11473=gconst4*gconst4;
IkReal x11474=gconst5*gconst5;
IkReal x11475=(r01*r20);
IkReal x11476=(gconst4*sj3);
IkReal x11477=(r01*r21);
IkReal x11478=((1.0)*cj3);
IkReal x11479=(r00*r21);
IkReal x11480=(r00*r20);
IkReal x11481=(cj3*gconst4*gconst5);
IkReal x11482=((1.0)*x11474);
CheckValue<IkReal> x11483 = IKatan2WithCheck(IkReal((((r00*r22*x11476))+((gconst5*r01*r22*sj3)))),IkReal((((sj3*x11473*x11479))+(((-1.0)*gconst5*x11476*x11480))+(((-1.0)*sj3*x11475*x11482))+((gconst5*x11476*x11477)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11483.valid){
continue;
}
CheckValue<IkReal> x11484=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11473*x11477*x11478))+(((-1.0)*r02*r22*x11478))+((x11479*x11481))+(((-1.0)*x11474*x11478*x11480))+((x11475*x11481)))),-1);
if(!x11484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11483.value)+(((1.5707963267949)*(x11484.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11485=IKsin(j4);
IkReal x11486=IKcos(j4);
IkReal x11487=(cj2*sj1);
IkReal x11488=(cj1*sj2);
IkReal x11489=(gconst5*sj3);
IkReal x11490=(gconst4*r11);
IkReal x11491=(sj1*sj2);
IkReal x11492=(gconst5*r10);
IkReal x11493=(cj1*cj2);
IkReal x11494=(gconst4*r01);
IkReal x11495=(gconst5*r00);
IkReal x11496=(gconst4*sj3);
IkReal x11497=(cj3*gconst5);
IkReal x11498=(cj3*gconst4);
IkReal x11499=(gconst4*r21);
IkReal x11500=((1.0)*x11486);
IkReal x11501=((1.0)*x11485);
IkReal x11502=(cj3*x11485);
IkReal x11503=(cj3*x11486);
IkReal x11504=(x11488+x11487);
evalcond[0]=((((-1.0)*gconst5*r20*x11501))+((x11485*x11499))+(((-1.0)*r22*x11500)));
evalcond[1]=((((-1.0)*r12*x11500))+((x11485*x11490))+(((-1.0)*x11492*x11501)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11500))+((x11485*x11494))+(((-1.0)*x11495*x11501)));
evalcond[3]=(((r00*x11496))+((x11494*x11503))+((r01*x11489))+(((-1.0)*cj3*x11495*x11500))+((r02*x11502)));
evalcond[4]=(((r00*x11498))+(((-1.0)*r02*sj3*x11501))+((r00*x11486*x11489))+(((-1.0)*sj3*x11494*x11500))+((r01*x11497)));
evalcond[5]=((((-1.0)*r20*x11497*x11500))+x11504+((r20*x11496))+((r21*x11486*x11498))+((r21*x11489))+((r22*x11502)));
evalcond[6]=(((x11490*x11503))+x11493+((r12*x11502))+((r10*x11496))+((r11*x11489))+(((-1.0)*cj3*x11492*x11500))+(((-1.0)*x11491)));
evalcond[7]=((((-1.0)*r12*sj3*x11501))+x11504+((r10*x11486*x11489))+(((-1.0)*sj3*x11490*x11500))+((r11*x11497))+((r10*x11498)));
evalcond[8]=(x11491+((r21*x11497))+((r20*x11498))+(((-1.0)*r21*x11496*x11500))+((r20*x11486*x11489))+(((-1.0)*r22*sj3*x11501))+(((-1.0)*x11493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11505=((1.0)*gconst5);
CheckValue<IkReal> x11506 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11505))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11506.valid){
continue;
}
CheckValue<IkReal> x11507=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11505))+(((-1.0)*gconst4*r20)))),-1);
if(!x11507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11506.value)+(((1.5707963267949)*(x11507.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11508=IKsin(j4);
IkReal x11509=IKcos(j4);
IkReal x11510=(cj2*sj1);
IkReal x11511=(cj1*sj2);
IkReal x11512=(gconst5*sj3);
IkReal x11513=(gconst4*r11);
IkReal x11514=(sj1*sj2);
IkReal x11515=(gconst5*r10);
IkReal x11516=(cj1*cj2);
IkReal x11517=(gconst4*r01);
IkReal x11518=(gconst5*r00);
IkReal x11519=(gconst4*sj3);
IkReal x11520=(cj3*gconst5);
IkReal x11521=(cj3*gconst4);
IkReal x11522=(gconst4*r21);
IkReal x11523=((1.0)*x11509);
IkReal x11524=((1.0)*x11508);
IkReal x11525=(cj3*x11508);
IkReal x11526=(cj3*x11509);
IkReal x11527=(x11511+x11510);
evalcond[0]=((((-1.0)*gconst5*r20*x11524))+((x11508*x11522))+(((-1.0)*r22*x11523)));
evalcond[1]=(((x11508*x11513))+(((-1.0)*x11515*x11524))+(((-1.0)*r12*x11523)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11523))+((x11508*x11517))+(((-1.0)*x11518*x11524)));
evalcond[3]=(((r01*x11512))+(((-1.0)*cj3*x11518*x11523))+((x11517*x11526))+((r02*x11525))+((r00*x11519)));
evalcond[4]=((((-1.0)*sj3*x11517*x11523))+(((-1.0)*r02*sj3*x11524))+((r01*x11520))+((r00*x11521))+((r00*x11509*x11512)));
evalcond[5]=((((-1.0)*r20*x11520*x11523))+x11527+((r20*x11519))+((r21*x11509*x11521))+((r21*x11512))+((r22*x11525)));
evalcond[6]=(((x11513*x11526))+(((-1.0)*x11514))+x11516+((r12*x11525))+((r10*x11519))+((r11*x11512))+(((-1.0)*cj3*x11515*x11523)));
evalcond[7]=(x11527+(((-1.0)*r12*sj3*x11524))+((r11*x11520))+(((-1.0)*sj3*x11513*x11523))+((r10*x11521))+((r10*x11509*x11512)));
evalcond[8]=((((-1.0)*x11516))+x11514+((r20*x11509*x11512))+((r21*x11520))+((r20*x11521))+(((-1.0)*r22*sj3*x11524))+(((-1.0)*r21*x11519*x11523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11528=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11528.valid){
continue;
}
CheckValue<IkReal> x11529 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11528.value)))+(x11529.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11530=IKsin(j4);
IkReal x11531=IKcos(j4);
IkReal x11532=(cj2*sj1);
IkReal x11533=(cj1*sj2);
IkReal x11534=(gconst5*sj3);
IkReal x11535=(gconst4*r11);
IkReal x11536=(sj1*sj2);
IkReal x11537=(gconst5*r10);
IkReal x11538=(cj1*cj2);
IkReal x11539=(gconst4*r01);
IkReal x11540=(gconst5*r00);
IkReal x11541=(gconst4*sj3);
IkReal x11542=(cj3*gconst5);
IkReal x11543=(cj3*gconst4);
IkReal x11544=(gconst4*r21);
IkReal x11545=((1.0)*x11531);
IkReal x11546=((1.0)*x11530);
IkReal x11547=(cj3*x11530);
IkReal x11548=(cj3*x11531);
IkReal x11549=(x11533+x11532);
evalcond[0]=(((x11530*x11544))+(((-1.0)*gconst5*r20*x11546))+(((-1.0)*r22*x11545)));
evalcond[1]=((((-1.0)*x11537*x11546))+((x11530*x11535))+(((-1.0)*r12*x11545)));
evalcond[2]=((1.0)+(((-1.0)*x11540*x11546))+((x11530*x11539))+(((-1.0)*r02*x11545)));
evalcond[3]=(((x11539*x11548))+(((-1.0)*cj3*x11540*x11545))+((r00*x11541))+((r01*x11534))+((r02*x11547)));
evalcond[4]=(((r00*x11543))+((r01*x11542))+((r00*x11531*x11534))+(((-1.0)*r02*sj3*x11546))+(((-1.0)*sj3*x11539*x11545)));
evalcond[5]=((((-1.0)*r20*x11542*x11545))+x11549+((r21*x11534))+((r20*x11541))+((r21*x11531*x11543))+((r22*x11547)));
evalcond[6]=(((r10*x11541))+x11538+((x11535*x11548))+(((-1.0)*cj3*x11537*x11545))+((r11*x11534))+((r12*x11547))+(((-1.0)*x11536)));
evalcond[7]=(((r10*x11531*x11534))+((r10*x11543))+x11549+(((-1.0)*sj3*x11535*x11545))+((r11*x11542))+(((-1.0)*r12*sj3*x11546)));
evalcond[8]=(x11536+((r20*x11543))+(((-1.0)*r22*sj3*x11546))+(((-1.0)*r21*x11541*x11545))+((r21*x11542))+(((-1.0)*x11538))+((r20*x11531*x11534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11550=((-1.0)*r21);
IkReal x11551=((-1.0)*px);
CheckValue<IkReal> x11553 = IKatan2WithCheck(IkReal(x11550),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11553.valid){
continue;
}
IkReal x11552=((1.0)*(x11553.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11552)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11551);
rxp1_1=(px*r21);
rxp1_2=(r11*x11551);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11552)));
IkReal gconst4=x11550;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11554=((-1.0)*r21);
IkReal x11555=((-1.0)*px);
CheckValue<IkReal> x11557 = IKatan2WithCheck(IkReal(x11554),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11557.valid){
continue;
}
IkReal x11556=((1.0)*(x11557.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11556)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11555);
rxp1_1=(px*r21);
rxp1_2=(r11*x11555);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11556)));
IkReal gconst4=x11554;
IkReal gconst5=((1.0)*r20);
IkReal x11558=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=((((-1.0)*x11558))+((x11558*(r10*r10)))+(((-1.0)*x11558*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11559=((-1.0)*r21);
IkReal x11560=((-1.0)*px);
CheckValue<IkReal> x11562 = IKatan2WithCheck(IkReal(x11559),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11562.valid){
continue;
}
IkReal x11561=((1.0)*(x11562.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11561)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11560);
rxp1_1=(px*r21);
rxp1_2=(r11*x11560);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11561)));
IkReal gconst4=x11559;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11563=((-1.0)*r21);
IkReal x11564=((-1.0)*px);
CheckValue<IkReal> x11566 = IKatan2WithCheck(IkReal(x11563),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11566.valid){
continue;
}
IkReal x11565=((1.0)*(x11566.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11565)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11564);
rxp1_1=(px*r21);
rxp1_2=(r11*x11564);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11565)));
IkReal gconst4=x11563;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11567=((-1.0)*r21);
IkReal x11568=((-1.0)*px);
CheckValue<IkReal> x11570 = IKatan2WithCheck(IkReal(x11567),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11570.valid){
continue;
}
IkReal x11569=((1.0)*(x11570.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11569)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11568);
rxp1_1=(px*r21);
rxp1_2=(r11*x11568);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11569)));
IkReal gconst4=x11567;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11571=((-1.0)*r21);
IkReal x11572=((-1.0)*px);
CheckValue<IkReal> x11574 = IKatan2WithCheck(IkReal(x11571),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11574.valid){
continue;
}
IkReal x11573=((1.0)*(x11574.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11573)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11572);
rxp1_1=(px*r21);
rxp1_2=(r11*x11572);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11573)));
IkReal gconst4=x11571;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11577=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11577.valid){
continue;
}
IkReal x11575=x11577.value;
IkReal x11576=(sj0*x11575);
cj4array[0]=(((cj1*sj2*x11576))+((cj2*sj1*x11576)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11578=IKsin(j4);
IkReal x11579=IKcos(j4);
IkReal x11580=(gconst5*r20);
IkReal x11581=(gconst4*x11578);
IkReal x11582=((1.0)*x11579);
IkReal x11583=((1.0)*x11578);
evalcond[0]=((-1.0)*r02*x11578);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11582)));
evalcond[2]=((((-1.0)*x11580*x11583))+((r21*x11581)));
evalcond[3]=((((-1.0)*gconst5*r10*x11583))+((r11*x11581)));
evalcond[4]=(((x11579*x11580))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x11582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11585=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11585.valid){
continue;
}
IkReal x11584=x11585.value;
cj4array[0]=(((cj1*cj2*x11584))+(((-1.0)*sj1*sj2*x11584)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11586=IKsin(j4);
IkReal x11587=IKcos(j4);
IkReal x11588=(gconst5*r10);
IkReal x11589=((1.0)*sj0);
IkReal x11590=(gconst4*x11586);
IkReal x11591=((1.0)*x11587);
IkReal x11592=((1.0)*x11586);
evalcond[0]=((-1.0)*r02*x11586);
evalcond[1]=((((-1.0)*x11589))+(((-1.0)*r02*x11591)));
evalcond[2]=((((-1.0)*gconst5*r20*x11592))+((r21*x11590)));
evalcond[3]=((((-1.0)*x11588*x11592))+((r11*x11590)));
evalcond[4]=((((-1.0)*cj2*sj1*x11589))+(((-1.0)*cj1*sj2*x11589))+(((-1.0)*gconst4*r11*x11591))+((x11587*x11588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11593=IKPowWithIntegerCheck(r02,-1);
if(!x11593.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11593.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11594=IKsin(j4);
IkReal x11595=IKcos(j4);
IkReal x11596=((1.0)*sj0);
IkReal x11597=(gconst5*x11595);
IkReal x11598=(gconst4*x11594);
IkReal x11599=((1.0)*gconst4*x11595);
IkReal x11600=((1.0)*gconst5*x11594);
evalcond[0]=((-1.0)*r02*x11594);
evalcond[1]=((((-1.0)*r20*x11600))+((r21*x11598)));
evalcond[2]=((((-1.0)*r10*x11600))+((r11*x11598)));
evalcond[3]=(((r20*x11597))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11599)));
evalcond[4]=(((r10*x11597))+(((-1.0)*cj2*sj1*x11596))+(((-1.0)*cj1*sj2*x11596))+(((-1.0)*r11*x11599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11601=((-1.0)*r21);
IkReal x11602=((-1.0)*px);
CheckValue<IkReal> x11604 = IKatan2WithCheck(IkReal(x11601),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11604.valid){
continue;
}
IkReal x11603=((1.0)*(x11604.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11603)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11602);
rxp1_1=(px*r21);
rxp1_2=(r11*x11602);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11603)));
IkReal gconst4=x11601;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11605=((-1.0)*r21);
IkReal x11606=((-1.0)*px);
CheckValue<IkReal> x11608 = IKatan2WithCheck(IkReal(x11605),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11608.valid){
continue;
}
IkReal x11607=((1.0)*(x11608.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11607)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11606);
rxp1_1=(px*r21);
rxp1_2=(r11*x11606);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11607)));
IkReal gconst4=x11605;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11609=((-1.0)*r21);
IkReal x11610=((-1.0)*px);
CheckValue<IkReal> x11612 = IKatan2WithCheck(IkReal(x11609),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11612.valid){
continue;
}
IkReal x11611=((1.0)*(x11612.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11611)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11610);
rxp1_1=(px*r21);
rxp1_2=(r11*x11610);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11611)));
IkReal gconst4=x11609;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11615=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11615.valid){
continue;
}
IkReal x11613=x11615.value;
IkReal x11614=(sj0*x11613);
cj4array[0]=(((cj1*sj2*x11614))+((cj2*sj1*x11614)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11616=IKsin(j4);
IkReal x11617=IKcos(j4);
IkReal x11618=(gconst5*r20);
IkReal x11619=(gconst4*x11616);
IkReal x11620=((1.0)*x11617);
IkReal x11621=((1.0)*x11616);
evalcond[0]=(r02*x11616);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11620)));
evalcond[2]=(((r21*x11619))+(((-1.0)*x11618*x11621)));
evalcond[3]=(((r11*x11619))+(((-1.0)*gconst5*r10*x11621)));
evalcond[4]=(((gconst4*r21*x11617))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11618*x11620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11623=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11623.valid){
continue;
}
IkReal x11622=x11623.value;
cj4array[0]=(((cj1*cj2*x11622))+(((-1.0)*sj1*sj2*x11622)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11624=IKsin(j4);
IkReal x11625=IKcos(j4);
IkReal x11626=(gconst4*r11);
IkReal x11627=((1.0)*sj0);
IkReal x11628=(gconst5*r10);
IkReal x11629=((1.0)*x11625);
IkReal x11630=((1.0)*x11624);
evalcond[0]=(r02*x11624);
evalcond[1]=((((-1.0)*x11627))+(((-1.0)*r02*x11629)));
evalcond[2]=(((gconst4*r21*x11624))+(((-1.0)*gconst5*r20*x11630)));
evalcond[3]=(((x11624*x11626))+(((-1.0)*x11628*x11630)));
evalcond[4]=((((-1.0)*x11628*x11629))+((x11625*x11626))+(((-1.0)*cj1*sj2*x11627))+(((-1.0)*cj2*sj1*x11627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11631=IKPowWithIntegerCheck(r02,-1);
if(!x11631.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11631.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11632=IKsin(j4);
IkReal x11633=IKcos(j4);
IkReal x11634=(gconst4*r11);
IkReal x11635=((1.0)*cj1);
IkReal x11636=(gconst4*r21);
IkReal x11637=((1.0)*gconst5*x11633);
IkReal x11638=((1.0)*gconst5*x11632);
evalcond[0]=(r02*x11632);
evalcond[1]=((((-1.0)*r20*x11638))+((x11632*x11636)));
evalcond[2]=((((-1.0)*r10*x11638))+((x11632*x11634)));
evalcond[3]=(((sj1*sj2))+((x11633*x11636))+(((-1.0)*r20*x11637))+(((-1.0)*cj2*x11635)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x11637))+((x11633*x11634))+(((-1.0)*sj0*sj2*x11635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11640=IKPowWithIntegerCheck(r02,-1);
if(!x11640.valid){
continue;
}
IkReal x11639=x11640.value;
CheckValue<IkReal> x11641=IKPowWithIntegerCheck(cj3,-1);
if(!x11641.valid){
continue;
}
if( IKabs((x11639*(x11641.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11639)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11639*(x11641.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11639))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11639*(x11641.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11639));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11642=IKsin(j4);
IkReal x11643=IKcos(j4);
IkReal x11644=(gconst5*sj3);
IkReal x11645=(gconst4*r11);
IkReal x11646=(sj1*sj2);
IkReal x11647=((1.0)*gconst5);
IkReal x11648=(cj2*sj1);
IkReal x11649=((1.0)*sj0);
IkReal x11650=((1.0)*cj0);
IkReal x11651=(gconst4*r21);
IkReal x11652=(cj1*sj2);
IkReal x11653=(cj3*gconst4);
IkReal x11654=(gconst4*sj3);
IkReal x11655=(cj3*gconst5);
IkReal x11656=(r20*x11643);
IkReal x11657=((1.0)*cj1*cj2);
IkReal x11658=(r10*x11643);
IkReal x11659=(cj3*x11643);
IkReal x11660=(r02*x11642);
IkReal x11661=((1.0)*sj3*x11643);
evalcond[0]=((((-1.0)*r02*x11643))+(((-1.0)*x11649)));
evalcond[1]=((((-1.0)*r20*x11642*x11647))+((x11642*x11651)));
evalcond[2]=(cj0+((x11642*x11645))+(((-1.0)*r10*x11642*x11647)));
evalcond[3]=((((-1.0)*cj1*cj2*x11650))+((cj0*x11646))+((cj3*x11660)));
evalcond[4]=((((-1.0)*x11650*x11652))+(((-1.0)*sj3*x11660))+(((-1.0)*x11648*x11650)));
evalcond[5]=(x11648+x11652+(((-1.0)*cj3*x11647*x11656))+((x11651*x11659))+((r21*x11644))+((r20*x11654)));
evalcond[6]=((((-1.0)*x11657))+x11646+((x11644*x11656))+((r21*x11655))+((r20*x11653))+(((-1.0)*x11651*x11661)));
evalcond[7]=(((r11*x11644))+(((-1.0)*cj1*cj2*x11649))+((r10*x11654))+((x11645*x11659))+(((-1.0)*cj3*x11647*x11658))+((sj0*x11646)));
evalcond[8]=(((r11*x11655))+((r10*x11653))+((x11644*x11658))+(((-1.0)*x11645*x11661))+(((-1.0)*x11648*x11649))+(((-1.0)*x11649*x11652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11662=((1.0)*gconst5);
CheckValue<IkReal> x11663=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*r10*x11662))),-1);
if(!x11663.valid){
continue;
}
CheckValue<IkReal> x11664=IKPowWithIntegerCheck((((cj3*gconst4*r21))+(((-1.0)*cj3*r20*x11662))),-1);
if(!x11664.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11663.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11664.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11662)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11663.value)))+IKsqr(((x11664.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11662))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11663.value)), ((x11664.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11662))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11665=IKsin(j4);
IkReal x11666=IKcos(j4);
IkReal x11667=(gconst5*sj3);
IkReal x11668=(gconst4*r11);
IkReal x11669=(sj1*sj2);
IkReal x11670=((1.0)*gconst5);
IkReal x11671=(cj2*sj1);
IkReal x11672=((1.0)*sj0);
IkReal x11673=((1.0)*cj0);
IkReal x11674=(gconst4*r21);
IkReal x11675=(cj1*sj2);
IkReal x11676=(cj3*gconst4);
IkReal x11677=(gconst4*sj3);
IkReal x11678=(cj3*gconst5);
IkReal x11679=(r20*x11666);
IkReal x11680=((1.0)*cj1*cj2);
IkReal x11681=(r10*x11666);
IkReal x11682=(cj3*x11666);
IkReal x11683=(r02*x11665);
IkReal x11684=((1.0)*sj3*x11666);
evalcond[0]=((((-1.0)*r02*x11666))+(((-1.0)*x11672)));
evalcond[1]=((((-1.0)*r20*x11665*x11670))+((x11665*x11674)));
evalcond[2]=(cj0+(((-1.0)*r10*x11665*x11670))+((x11665*x11668)));
evalcond[3]=(((cj0*x11669))+((cj3*x11683))+(((-1.0)*cj1*cj2*x11673)));
evalcond[4]=((((-1.0)*x11671*x11673))+(((-1.0)*x11673*x11675))+(((-1.0)*sj3*x11683)));
evalcond[5]=(((r21*x11667))+x11671+x11675+((r20*x11677))+(((-1.0)*cj3*x11670*x11679))+((x11674*x11682)));
evalcond[6]=(x11669+(((-1.0)*x11680))+((r20*x11676))+(((-1.0)*x11674*x11684))+((r21*x11678))+((x11667*x11679)));
evalcond[7]=(((x11668*x11682))+((r11*x11667))+(((-1.0)*cj1*cj2*x11672))+((r10*x11677))+((sj0*x11669))+(((-1.0)*cj3*x11670*x11681)));
evalcond[8]=((((-1.0)*x11671*x11672))+((r11*x11678))+(((-1.0)*x11672*x11675))+((x11667*x11681))+(((-1.0)*x11668*x11684))+((r10*x11676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11685=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11685.valid){
continue;
}
CheckValue<IkReal> x11686=IKPowWithIntegerCheck(r02,-1);
if(!x11686.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11685.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11686.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11685.value)))+IKsqr(((-1.0)*sj0*(x11686.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11685.value)), ((-1.0)*sj0*(x11686.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11687=IKsin(j4);
IkReal x11688=IKcos(j4);
IkReal x11689=(gconst5*sj3);
IkReal x11690=(gconst4*r11);
IkReal x11691=(sj1*sj2);
IkReal x11692=((1.0)*gconst5);
IkReal x11693=(cj2*sj1);
IkReal x11694=((1.0)*sj0);
IkReal x11695=((1.0)*cj0);
IkReal x11696=(gconst4*r21);
IkReal x11697=(cj1*sj2);
IkReal x11698=(cj3*gconst4);
IkReal x11699=(gconst4*sj3);
IkReal x11700=(cj3*gconst5);
IkReal x11701=(r20*x11688);
IkReal x11702=((1.0)*cj1*cj2);
IkReal x11703=(r10*x11688);
IkReal x11704=(cj3*x11688);
IkReal x11705=(r02*x11687);
IkReal x11706=((1.0)*sj3*x11688);
evalcond[0]=((((-1.0)*r02*x11688))+(((-1.0)*x11694)));
evalcond[1]=((((-1.0)*r20*x11687*x11692))+((x11687*x11696)));
evalcond[2]=(cj0+((x11687*x11690))+(((-1.0)*r10*x11687*x11692)));
evalcond[3]=(((cj0*x11691))+((cj3*x11705))+(((-1.0)*cj1*cj2*x11695)));
evalcond[4]=((((-1.0)*x11695*x11697))+(((-1.0)*sj3*x11705))+(((-1.0)*x11693*x11695)));
evalcond[5]=(x11697+x11693+((x11696*x11704))+(((-1.0)*cj3*x11692*x11701))+((r20*x11699))+((r21*x11689)));
evalcond[6]=(x11691+((r21*x11700))+((r20*x11698))+(((-1.0)*x11702))+((x11689*x11701))+(((-1.0)*x11696*x11706)));
evalcond[7]=((((-1.0)*cj3*x11692*x11703))+((r11*x11689))+((r10*x11699))+((x11690*x11704))+((sj0*x11691))+(((-1.0)*cj1*cj2*x11694)));
evalcond[8]=((((-1.0)*x11690*x11706))+(((-1.0)*x11693*x11694))+((r10*x11698))+((x11689*x11703))+(((-1.0)*x11694*x11697))+((r11*x11700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11707=((1.0)*sj0);
IkReal x11708=((1.0)*gconst4);
CheckValue<IkReal> x11709=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11708))+(((-1.0)*gconst5*r21)))),-1);
if(!x11709.valid){
continue;
}
CheckValue<IkReal> x11710 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11707)))),IkReal(((((-1.0)*cj0*r01*x11708))+((cj0*gconst5*r00))+((gconst5*r10*sj0))+(((-1.0)*gconst4*r11*x11707)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11709.value)))+(x11710.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11711=IKsin(j4);
IkReal x11712=IKcos(j4);
IkReal x11713=(gconst5*sj3);
IkReal x11714=(cj3*gconst5);
IkReal x11715=(gconst4*r11);
IkReal x11716=(sj1*sj2);
IkReal x11717=(cj2*sj1);
IkReal x11718=((1.0)*sj0);
IkReal x11719=(gconst4*r01);
IkReal x11720=(gconst4*r21);
IkReal x11721=((1.0)*cj0);
IkReal x11722=(cj1*sj2);
IkReal x11723=(gconst4*sj3);
IkReal x11724=(cj3*gconst4);
IkReal x11725=((1.0)*x11712);
IkReal x11726=((1.0)*cj1*cj2);
IkReal x11727=(cj3*x11711);
IkReal x11728=(cj3*x11712);
IkReal x11729=((1.0)*gconst5*x11711);
IkReal x11730=((1.0)*sj3*x11711);
evalcond[0]=((((-1.0)*r20*x11729))+(((-1.0)*r22*x11725))+((x11711*x11720)));
evalcond[1]=(cj0+(((-1.0)*r12*x11725))+(((-1.0)*r10*x11729))+((x11711*x11715)));
evalcond[2]=((((-1.0)*x11718))+(((-1.0)*r00*x11729))+((x11711*x11719))+(((-1.0)*r02*x11725)));
evalcond[3]=(x11722+x11717+((r20*x11723))+(((-1.0)*r20*x11714*x11725))+((r22*x11727))+((x11720*x11728))+((r21*x11713)));
evalcond[4]=(x11716+(((-1.0)*x11726))+((r20*x11724))+(((-1.0)*r22*x11730))+(((-1.0)*sj3*x11720*x11725))+((r21*x11714))+((r20*x11712*x11713)));
evalcond[5]=(((r01*x11713))+((r00*x11723))+((cj0*x11716))+((x11719*x11728))+((r02*x11727))+(((-1.0)*r00*x11714*x11725))+(((-1.0)*cj1*cj2*x11721)));
evalcond[6]=(((r12*x11727))+(((-1.0)*r10*x11714*x11725))+((sj0*x11716))+(((-1.0)*cj1*cj2*x11718))+((r10*x11723))+((x11715*x11728))+((r11*x11713)));
evalcond[7]=((((-1.0)*x11717*x11721))+((r01*x11714))+((r00*x11724))+((r00*x11712*x11713))+(((-1.0)*x11721*x11722))+(((-1.0)*r02*x11730))+(((-1.0)*sj3*x11719*x11725)));
evalcond[8]=((((-1.0)*r12*x11730))+((r10*x11724))+(((-1.0)*x11718*x11722))+((r10*x11712*x11713))+((r11*x11714))+(((-1.0)*x11717*x11718))+(((-1.0)*sj3*x11715*x11725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11731=((1.0)*gconst5);
CheckValue<IkReal> x11732 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11731))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11732.valid){
continue;
}
CheckValue<IkReal> x11733=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11731))+(((-1.0)*gconst4*r10)))),-1);
if(!x11733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11732.value)+(((1.5707963267949)*(x11733.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11734=IKsin(j4);
IkReal x11735=IKcos(j4);
IkReal x11736=(gconst5*sj3);
IkReal x11737=(cj3*gconst5);
IkReal x11738=(gconst4*r11);
IkReal x11739=(sj1*sj2);
IkReal x11740=(cj2*sj1);
IkReal x11741=((1.0)*sj0);
IkReal x11742=(gconst4*r01);
IkReal x11743=(gconst4*r21);
IkReal x11744=((1.0)*cj0);
IkReal x11745=(cj1*sj2);
IkReal x11746=(gconst4*sj3);
IkReal x11747=(cj3*gconst4);
IkReal x11748=((1.0)*x11735);
IkReal x11749=((1.0)*cj1*cj2);
IkReal x11750=(cj3*x11734);
IkReal x11751=(cj3*x11735);
IkReal x11752=((1.0)*gconst5*x11734);
IkReal x11753=((1.0)*sj3*x11734);
evalcond[0]=(((x11734*x11743))+(((-1.0)*r22*x11748))+(((-1.0)*r20*x11752)));
evalcond[1]=(cj0+(((-1.0)*r10*x11752))+((x11734*x11738))+(((-1.0)*r12*x11748)));
evalcond[2]=(((x11734*x11742))+(((-1.0)*x11741))+(((-1.0)*r02*x11748))+(((-1.0)*r00*x11752)));
evalcond[3]=(x11740+x11745+((x11743*x11751))+((r20*x11746))+(((-1.0)*r20*x11737*x11748))+((r21*x11736))+((r22*x11750)));
evalcond[4]=(x11739+(((-1.0)*x11749))+(((-1.0)*r22*x11753))+(((-1.0)*sj3*x11743*x11748))+((r20*x11747))+((r21*x11737))+((r20*x11735*x11736)));
evalcond[5]=(((r01*x11736))+((r00*x11746))+((x11742*x11751))+((cj0*x11739))+((r02*x11750))+(((-1.0)*cj1*cj2*x11744))+(((-1.0)*r00*x11737*x11748)));
evalcond[6]=(((r11*x11736))+((sj0*x11739))+(((-1.0)*r10*x11737*x11748))+((r12*x11750))+((r10*x11746))+(((-1.0)*cj1*cj2*x11741))+((x11738*x11751)));
evalcond[7]=(((r01*x11737))+((r00*x11747))+(((-1.0)*sj3*x11742*x11748))+(((-1.0)*r02*x11753))+(((-1.0)*x11744*x11745))+(((-1.0)*x11740*x11744))+((r00*x11735*x11736)));
evalcond[8]=(((r11*x11737))+(((-1.0)*r12*x11753))+((r10*x11735*x11736))+(((-1.0)*sj3*x11738*x11748))+(((-1.0)*x11741*x11745))+((r10*x11747))+(((-1.0)*x11740*x11741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11754=((1.0)*gconst5);
CheckValue<IkReal> x11755=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11754)))),-1);
if(!x11755.valid){
continue;
}
CheckValue<IkReal> x11756 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11754))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11755.value)))+(x11756.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11757=IKsin(j4);
IkReal x11758=IKcos(j4);
IkReal x11759=(gconst5*sj3);
IkReal x11760=(cj3*gconst5);
IkReal x11761=(gconst4*r11);
IkReal x11762=(sj1*sj2);
IkReal x11763=(cj2*sj1);
IkReal x11764=((1.0)*sj0);
IkReal x11765=(gconst4*r01);
IkReal x11766=(gconst4*r21);
IkReal x11767=((1.0)*cj0);
IkReal x11768=(cj1*sj2);
IkReal x11769=(gconst4*sj3);
IkReal x11770=(cj3*gconst4);
IkReal x11771=((1.0)*x11758);
IkReal x11772=((1.0)*cj1*cj2);
IkReal x11773=(cj3*x11757);
IkReal x11774=(cj3*x11758);
IkReal x11775=((1.0)*gconst5*x11757);
IkReal x11776=((1.0)*sj3*x11757);
evalcond[0]=(((x11757*x11766))+(((-1.0)*r22*x11771))+(((-1.0)*r20*x11775)));
evalcond[1]=(((x11757*x11761))+cj0+(((-1.0)*r10*x11775))+(((-1.0)*r12*x11771)));
evalcond[2]=(((x11757*x11765))+(((-1.0)*r02*x11771))+(((-1.0)*r00*x11775))+(((-1.0)*x11764)));
evalcond[3]=(x11768+x11763+((r20*x11769))+(((-1.0)*r20*x11760*x11771))+((x11766*x11774))+((r21*x11759))+((r22*x11773)));
evalcond[4]=(x11762+((r20*x11770))+((r20*x11758*x11759))+(((-1.0)*sj3*x11766*x11771))+(((-1.0)*r22*x11776))+(((-1.0)*x11772))+((r21*x11760)));
evalcond[5]=(((cj0*x11762))+(((-1.0)*cj1*cj2*x11767))+((x11765*x11774))+((r02*x11773))+(((-1.0)*r00*x11760*x11771))+((r00*x11769))+((r01*x11759)));
evalcond[6]=((((-1.0)*cj1*cj2*x11764))+((r12*x11773))+((x11761*x11774))+((r11*x11759))+((r10*x11769))+((sj0*x11762))+(((-1.0)*r10*x11760*x11771)));
evalcond[7]=((((-1.0)*sj3*x11765*x11771))+(((-1.0)*r02*x11776))+((r00*x11770))+((r00*x11758*x11759))+(((-1.0)*x11763*x11767))+((r01*x11760))+(((-1.0)*x11767*x11768)));
evalcond[8]=(((r11*x11760))+((r10*x11770))+(((-1.0)*r12*x11776))+(((-1.0)*x11764*x11768))+(((-1.0)*x11763*x11764))+(((-1.0)*sj3*x11761*x11771))+((r10*x11758*x11759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11777=((-1.0)*r10);
IkReal x11779 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11779)==0){
continue;
}
IkReal x11778=pow(x11779,-0.5);
CheckValue<IkReal> x11780 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11777),IKFAST_ATAN2_MAGTHRESH);
if(!x11780.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11780.value));
IkReal gconst7=(r11*x11778);
IkReal gconst8=(x11777*x11778);
CheckValue<IkReal> x11781 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11781.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11781.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11782=((-1.0)*r10);
IkReal x11783=x11778;
CheckValue<IkReal> x11785 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11782),IKFAST_ATAN2_MAGTHRESH);
if(!x11785.valid){
continue;
}
IkReal x11784=((-1.0)*(x11785.value));
sj5=gconst7;
cj5=gconst8;
j5=x11784;
IkReal gconst6=x11784;
IkReal gconst7=(r11*x11783);
IkReal gconst8=(x11782*x11783);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11786=((1.0)*sj0);
IkReal x11787=((1.0)*gconst7);
CheckValue<IkReal> x11788=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11787))+(((-1.0)*gconst8*r21)))),-1);
if(!x11788.valid){
continue;
}
CheckValue<IkReal> x11789 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11786))+(((-1.0)*cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*cj0*r01*x11787))+(((-1.0)*gconst7*r11*x11786))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11788.value)))+(x11789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11790=IKsin(j4);
IkReal x11791=IKcos(j4);
IkReal x11792=(gconst7*sj3);
IkReal x11793=(cj3*gconst8);
IkReal x11794=(cj3*gconst7);
IkReal x11795=(sj1*sj2);
IkReal x11796=(cj2*sj1);
IkReal x11797=((1.0)*sj0);
IkReal x11798=((1.0)*cj0);
IkReal x11799=(gconst8*sj3);
IkReal x11800=(cj1*sj2);
IkReal x11801=((1.0)*x11791);
IkReal x11802=((1.0)*x11790);
IkReal x11803=((1.0)*cj1*cj2);
IkReal x11804=(cj3*x11790);
IkReal x11805=(gconst7*x11790);
IkReal x11806=(x11791*x11799);
evalcond[0]=(((r21*x11805))+(((-1.0)*gconst8*r20*x11802))+(((-1.0)*r22*x11801)));
evalcond[1]=((((-1.0)*gconst8*r10*x11802))+cj0+(((-1.0)*r12*x11801))+((r11*x11805)));
evalcond[2]=((((-1.0)*gconst8*r00*x11802))+(((-1.0)*r02*x11801))+((r01*x11805))+(((-1.0)*x11797)));
evalcond[3]=(x11796+((r20*x11792))+((r22*x11804))+(((-1.0)*r20*x11793*x11801))+((r21*x11799))+x11800+((r21*x11791*x11794)));
evalcond[4]=(x11795+((r20*x11794))+(((-1.0)*r22*sj3*x11802))+(((-1.0)*x11803))+(((-1.0)*r21*x11792*x11801))+((r20*x11806))+((r21*x11793)));
evalcond[5]=((((-1.0)*cj1*cj2*x11798))+((r02*x11804))+(((-1.0)*r00*x11793*x11801))+((r01*x11791*x11794))+((r01*x11799))+((r00*x11792))+((cj0*x11795)));
evalcond[6]=((((-1.0)*cj1*cj2*x11797))+((r11*x11799))+((r10*x11792))+((sj0*x11795))+(((-1.0)*r10*x11793*x11801))+((r12*x11804))+((r11*x11791*x11794)));
evalcond[7]=(((r00*x11806))+(((-1.0)*r02*sj3*x11802))+(((-1.0)*x11798*x11800))+(((-1.0)*r01*x11792*x11801))+((r01*x11793))+(((-1.0)*x11796*x11798))+((r00*x11794)));
evalcond[8]=((((-1.0)*x11797*x11800))+((r11*x11793))+((r10*x11794))+((r10*x11806))+(((-1.0)*r12*sj3*x11802))+(((-1.0)*x11796*x11797))+(((-1.0)*r11*x11792*x11801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11807=((1.0)*gconst8);
CheckValue<IkReal> x11808=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x11807)))),-1);
if(!x11808.valid){
continue;
}
CheckValue<IkReal> x11809 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11807))+((cj0*gconst7*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11808.value)))+(x11809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11810=IKsin(j4);
IkReal x11811=IKcos(j4);
IkReal x11812=(gconst7*sj3);
IkReal x11813=(cj3*gconst8);
IkReal x11814=(cj3*gconst7);
IkReal x11815=(sj1*sj2);
IkReal x11816=(cj2*sj1);
IkReal x11817=((1.0)*sj0);
IkReal x11818=((1.0)*cj0);
IkReal x11819=(gconst8*sj3);
IkReal x11820=(cj1*sj2);
IkReal x11821=((1.0)*x11811);
IkReal x11822=((1.0)*x11810);
IkReal x11823=((1.0)*cj1*cj2);
IkReal x11824=(cj3*x11810);
IkReal x11825=(gconst7*x11810);
IkReal x11826=(x11811*x11819);
evalcond[0]=((((-1.0)*gconst8*r20*x11822))+(((-1.0)*r22*x11821))+((r21*x11825)));
evalcond[1]=(cj0+(((-1.0)*r12*x11821))+((r11*x11825))+(((-1.0)*gconst8*r10*x11822)));
evalcond[2]=((((-1.0)*gconst8*r00*x11822))+(((-1.0)*r02*x11821))+(((-1.0)*x11817))+((r01*x11825)));
evalcond[3]=(((r21*x11811*x11814))+((r21*x11819))+((r22*x11824))+(((-1.0)*r20*x11813*x11821))+((r20*x11812))+x11816+x11820);
evalcond[4]=((((-1.0)*r21*x11812*x11821))+(((-1.0)*r22*sj3*x11822))+((r21*x11813))+(((-1.0)*x11823))+((r20*x11826))+((r20*x11814))+x11815);
evalcond[5]=(((r01*x11819))+(((-1.0)*r00*x11813*x11821))+((r00*x11812))+((r02*x11824))+((r01*x11811*x11814))+((cj0*x11815))+(((-1.0)*cj1*cj2*x11818)));
evalcond[6]=(((sj0*x11815))+((r11*x11811*x11814))+((r12*x11824))+((r10*x11812))+(((-1.0)*r10*x11813*x11821))+((r11*x11819))+(((-1.0)*cj1*cj2*x11817)));
evalcond[7]=((((-1.0)*x11818*x11820))+((r01*x11813))+((r00*x11814))+(((-1.0)*x11816*x11818))+(((-1.0)*r01*x11812*x11821))+((r00*x11826))+(((-1.0)*r02*sj3*x11822)));
evalcond[8]=((((-1.0)*r11*x11812*x11821))+(((-1.0)*x11816*x11817))+((r10*x11826))+((r10*x11814))+(((-1.0)*r12*sj3*x11822))+((r11*x11813))+(((-1.0)*x11817*x11820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11827=((-1.0)*r11);
IkReal x11829 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11829)==0){
continue;
}
IkReal x11828=pow(x11829,-0.5);
CheckValue<IkReal> x11830 = IKatan2WithCheck(IkReal(x11827),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11830.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11830.value))));
IkReal gconst10=(x11827*x11828);
IkReal gconst11=((1.0)*r10*x11828);
CheckValue<IkReal> x11831 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11831.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11831.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11832=((-1.0)*r11);
CheckValue<IkReal> x11835 = IKatan2WithCheck(IkReal(x11832),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11835.valid){
continue;
}
IkReal x11833=((1.0)*(x11835.value));
IkReal x11834=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11833)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11833)));
IkReal gconst10=(x11832*x11834);
IkReal gconst11=((1.0)*r10*x11834);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11836=((-1.0)*r11);
CheckValue<IkReal> x11839 = IKatan2WithCheck(IkReal(x11836),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11839.valid){
continue;
}
IkReal x11837=((1.0)*(x11839.value));
IkReal x11838=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11837)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11837)));
IkReal gconst10=(x11836*x11838);
IkReal gconst11=((1.0)*r10*x11838);
IkReal x11840=r12*r12;
IkReal x11841=((1.0)*sj0);
IkReal x11842=(cj0*r02);
IkReal x11843=x11828;
j4eval[0]=((IKabs(((((-1.0)*x11841*x11843))+((r12*x11842*x11843))+((sj0*x11840*x11843)))))+(IKabs(((((-1.0)*x11842))+(((-1.0)*r12*x11841))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11844=((-1.0)*r11);
CheckValue<IkReal> x11847 = IKatan2WithCheck(IkReal(x11844),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11847.valid){
continue;
}
IkReal x11845=((1.0)*(x11847.value));
IkReal x11846=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11845)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11845)));
IkReal gconst10=(x11844*x11846);
IkReal gconst11=((1.0)*r10*x11846);
IkReal x11848=((1.0)*cj3);
CheckValue<IkReal> x11853=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11853.valid){
continue;
}
IkReal x11849=x11853.value;
IkReal x11850=(cj3*x11849);
IkReal x11851=(x11848*x11849);
IkReal x11852=((((-1.0)*x11851*(r11*r11)*(r21*r21)))+(((-1.0)*x11848*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x11850))+(((-1.0)*x11851*(r10*r10)*(r20*r20))));
j4eval[0]=x11852;
j4eval[1]=IKsign(x11852);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11854=((-1.0)*r11);
CheckValue<IkReal> x11857 = IKatan2WithCheck(IkReal(x11854),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11857.valid){
continue;
}
IkReal x11855=((1.0)*(x11857.value));
IkReal x11856=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11855)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11855)));
IkReal gconst10=(x11854*x11856);
IkReal gconst11=((1.0)*r10*x11856);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11858=((-1.0)*r11);
CheckValue<IkReal> x11861 = IKatan2WithCheck(IkReal(x11858),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11861.valid){
continue;
}
IkReal x11859=((1.0)*(x11861.value));
IkReal x11860=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11859)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11859)));
IkReal gconst10=(x11858*x11860);
IkReal gconst11=((1.0)*r10*x11860);
IkReal x11862=r12*r12;
IkReal x11863=((1.0)*sj0);
IkReal x11864=(cj0*r02);
IkReal x11865=x11828;
j4eval[0]=((IKabs(((((-1.0)*x11864))+(((-1.0)*r12*x11863)))))+(IKabs(((((-1.0)*x11863*x11865))+((r12*x11864*x11865))+((sj0*x11862*x11865))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11866=((-1.0)*r11);
CheckValue<IkReal> x11869 = IKatan2WithCheck(IkReal(x11866),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11869.valid){
continue;
}
IkReal x11867=((1.0)*(x11869.value));
IkReal x11868=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11867)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11867)));
IkReal gconst10=(x11866*x11868);
IkReal gconst11=((1.0)*r10*x11868);
IkReal x11870=r12*r12;
IkReal x11871=(cj1*cj2*r22);
IkReal x11872=(r22*sj1*sj2);
CheckValue<IkReal> x11876=IKPowWithIntegerCheck(((-1.0)+x11870),-1);
if(!x11876.valid){
continue;
}
IkReal x11873=x11876.value;
if((((1.0)+(((-1.0)*x11870)))) < -0.00001)
continue;
IkReal x11874=IKsqrt(((1.0)+(((-1.0)*x11870))));
IkReal x11875=(r12*x11873*x11874);
j4eval[0]=((IKabs((((x11871*x11875))+(((-1.0)*x11872*x11875)))))+(IKabs(((((-1.0)*x11871))+x11872))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11877=((-1.0)*r11);
CheckValue<IkReal> x11880 = IKatan2WithCheck(IkReal(x11877),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11880.valid){
continue;
}
IkReal x11878=((1.0)*(x11880.value));
IkReal x11879=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11878)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11878)));
IkReal gconst10=(x11877*x11879);
IkReal gconst11=((1.0)*r10*x11879);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11881=((-1.0)*r11);
CheckValue<IkReal> x11884 = IKatan2WithCheck(IkReal(x11881),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11884.valid){
continue;
}
IkReal x11882=((1.0)*(x11884.value));
IkReal x11883=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11882)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11882)));
IkReal gconst10=(x11881*x11883);
IkReal gconst11=((1.0)*r10*x11883);
IkReal x11885=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11889=IKPowWithIntegerCheck(x11885,-1);
if(!x11889.valid){
continue;
}
IkReal x11886=x11889.value;
IkReal x11887=((1.0)*x11886);
IkReal x11888=((((-1.0)*x11887*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x11886))+(((-1.0)*(r02*r02)))+(((-1.0)*x11887*(r00*r00)*(r10*r10))));
j4eval[0]=x11888;
j4eval[1]=IKsign(x11888);
j4eval[2]=r02;
j4eval[3]=x11885;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11890=((-1.0)*r11);
CheckValue<IkReal> x11893 = IKatan2WithCheck(IkReal(x11890),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11893.valid){
continue;
}
IkReal x11891=((1.0)*(x11893.value));
IkReal x11892=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11891)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11891)));
IkReal gconst10=(x11890*x11892);
IkReal gconst11=((1.0)*r10*x11892);
IkReal x11894=r12*r12;
IkReal x11895=(cj1*cj2*r22);
IkReal x11896=(r22*sj1*sj2);
CheckValue<IkReal> x11900=IKPowWithIntegerCheck(((-1.0)+x11894),-1);
if(!x11900.valid){
continue;
}
IkReal x11897=x11900.value;
if((((1.0)+(((-1.0)*x11894)))) < -0.00001)
continue;
IkReal x11898=IKsqrt(((1.0)+(((-1.0)*x11894))));
IkReal x11899=(r12*x11897*x11898);
j4eval[0]=((IKabs((((x11895*x11899))+(((-1.0)*x11896*x11899)))))+(IKabs(((((-1.0)*x11895))+x11896))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11901=(gconst10*r21);
IkReal x11902=(gconst11*r20);
IkReal x11903=(sj1*sj2);
IkReal x11904=(cj1*cj2);
CheckValue<IkReal> x11905=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x11901*x11902))+(x11901*x11901)+(x11902*x11902))),-1);
if(!x11905.valid){
continue;
}
CheckValue<IkReal> x11906 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11904))+((r22*x11903)))),IkReal((((x11902*x11904))+(((-1.0)*x11901*x11904))+((x11901*x11903))+(((-1.0)*x11902*x11903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11905.value)))+(x11906.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11907=IKsin(j4);
IkReal x11908=IKcos(j4);
IkReal x11909=((1.0)*cj2);
IkReal x11910=((1.0)*x11908);
IkReal x11911=(gconst10*x11907);
IkReal x11912=((1.0)*x11907);
IkReal x11913=(gconst11*x11908);
IkReal x11914=(gconst11*x11912);
evalcond[0]=((((-1.0)*r22*x11910))+(((-1.0)*r20*x11914))+((r21*x11911)));
evalcond[1]=(((r11*x11911))+(((-1.0)*r12*x11910))+(((-1.0)*r10*x11914)));
evalcond[2]=(((r00*x11913))+(((-1.0)*gconst10*r01*x11910))+(((-1.0)*r02*x11912)));
evalcond[3]=((-1.0)+((r01*x11911))+(((-1.0)*r02*x11910))+(((-1.0)*r00*x11914)));
evalcond[4]=((((-1.0)*gconst10*r21*x11910))+(((-1.0)*r22*x11912))+(((-1.0)*cj1*x11909))+((sj1*sj2))+((r20*x11913)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11910))+(((-1.0)*sj1*x11909))+((r10*x11913))+(((-1.0)*r12*x11912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11915=(gconst11*r00);
IkReal x11916=(gconst10*r01);
CheckValue<IkReal> x11917=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11916*x11916)))+(((-1.0)*(x11915*x11915)))+(((2.0)*x11915*x11916))+(((-1.0)*(r02*r02))))),-1);
if(!x11917.valid){
continue;
}
CheckValue<IkReal> x11918 = IKatan2WithCheck(IkReal((x11915+(((-1.0)*x11916)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11917.value)))+(x11918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11919=IKsin(j4);
IkReal x11920=IKcos(j4);
IkReal x11921=((1.0)*cj2);
IkReal x11922=((1.0)*x11920);
IkReal x11923=(gconst10*x11919);
IkReal x11924=((1.0)*x11919);
IkReal x11925=(gconst11*x11920);
IkReal x11926=(gconst11*x11924);
evalcond[0]=((((-1.0)*r20*x11926))+((r21*x11923))+(((-1.0)*r22*x11922)));
evalcond[1]=((((-1.0)*r10*x11926))+((r11*x11923))+(((-1.0)*r12*x11922)));
evalcond[2]=((((-1.0)*r02*x11924))+((r00*x11925))+(((-1.0)*gconst10*r01*x11922)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11922))+(((-1.0)*r00*x11926))+((r01*x11923)));
evalcond[4]=((((-1.0)*cj1*x11921))+((r20*x11925))+((sj1*sj2))+(((-1.0)*r22*x11924))+(((-1.0)*gconst10*r21*x11922)));
evalcond[5]=(((r10*x11925))+(((-1.0)*gconst10*r11*x11922))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x11924))+(((-1.0)*sj1*x11921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11927 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11927.valid){
continue;
}
CheckValue<IkReal> x11928=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11927.value)+(((1.5707963267949)*(x11928.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11929=IKsin(j4);
IkReal x11930=IKcos(j4);
IkReal x11931=((1.0)*cj2);
IkReal x11932=((1.0)*x11930);
IkReal x11933=(gconst10*x11929);
IkReal x11934=((1.0)*x11929);
IkReal x11935=(gconst11*x11930);
IkReal x11936=(gconst11*x11934);
evalcond[0]=(((r21*x11933))+(((-1.0)*r22*x11932))+(((-1.0)*r20*x11936)));
evalcond[1]=((((-1.0)*r10*x11936))+((r11*x11933))+(((-1.0)*r12*x11932)));
evalcond[2]=((((-1.0)*gconst10*r01*x11932))+(((-1.0)*r02*x11934))+((r00*x11935)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11932))+(((-1.0)*r00*x11936))+((r01*x11933)));
evalcond[4]=(((r20*x11935))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11932))+(((-1.0)*r22*x11934))+(((-1.0)*cj1*x11931)));
evalcond[5]=((((-1.0)*sj1*x11931))+((r10*x11935))+(((-1.0)*gconst10*r11*x11932))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x11934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11937=((-1.0)*r11);
CheckValue<IkReal> x11940 = IKatan2WithCheck(IkReal(x11937),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11940.valid){
continue;
}
IkReal x11938=((1.0)*(x11940.value));
IkReal x11939=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11938)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11938)));
IkReal gconst10=(x11937*x11939);
IkReal gconst11=((1.0)*r10*x11939);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11941=((-1.0)*r11);
CheckValue<IkReal> x11944 = IKatan2WithCheck(IkReal(x11941),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11944.valid){
continue;
}
IkReal x11942=((1.0)*(x11944.value));
IkReal x11943=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11942)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11942)));
IkReal gconst10=(x11941*x11943);
IkReal gconst11=((1.0)*r10*x11943);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11945=((-1.0)*r11);
CheckValue<IkReal> x11948 = IKatan2WithCheck(IkReal(x11945),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11948.valid){
continue;
}
IkReal x11946=((1.0)*(x11948.value));
IkReal x11947=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11946)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11946)));
IkReal gconst10=(x11945*x11947);
IkReal gconst11=((1.0)*r10*x11947);
IkReal x11949=r12*r12;
CheckValue<IkReal> x11952=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11949))),-1);
if(!x11952.valid){
continue;
}
IkReal x11950=x11952.value;
IkReal x11951=((1.0)*x11950);
j4eval[0]=IKsign((x11949+((x11951*(r10*r10*r10*r10)))+(((2.0)*x11950*(r10*r10)*(r11*r11)))+((x11951*(r11*r11*r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11953=(cj2*sj1);
IkReal x11954=(gconst10*r11);
IkReal x11955=(gconst11*r10);
IkReal x11956=(cj1*sj2);
CheckValue<IkReal> x11957=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11955*x11955)+(((-2.0)*x11954*x11955))+(x11954*x11954))),-1);
if(!x11957.valid){
continue;
}
CheckValue<IkReal> x11958 = IKatan2WithCheck(IkReal((((r12*x11956))+((r12*x11953)))),IkReal(((((-1.0)*x11955*x11956))+((x11953*x11954))+((x11954*x11956))+(((-1.0)*x11953*x11955)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11957.value)))+(x11958.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11959=IKsin(j4);
IkReal x11960=IKcos(j4);
IkReal x11961=((1.0)*x11960);
IkReal x11962=(gconst10*x11959);
IkReal x11963=((1.0)*x11959);
IkReal x11964=(gconst11*x11960);
IkReal x11965=(gconst11*x11963);
evalcond[0]=((((-1.0)*r20*x11965))+(((-1.0)*r22*x11961))+((r21*x11962)));
evalcond[1]=((((-1.0)*r10*x11965))+(((-1.0)*r12*x11961))+((r11*x11962)));
evalcond[2]=(((r00*x11964))+(((-1.0)*gconst10*r01*x11961))+(((-1.0)*r02*x11963)));
evalcond[3]=((1.0)+((r01*x11962))+(((-1.0)*r00*x11965))+(((-1.0)*r02*x11961)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11963))+((cj1*sj2))+(((-1.0)*gconst10*r11*x11961))+((r10*x11964)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11964))+(((-1.0)*r22*x11963))+(((-1.0)*gconst10*r21*x11961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11966=(gconst11*r00);
IkReal x11967=(gconst10*r01);
CheckValue<IkReal> x11968 = IKatan2WithCheck(IkReal((x11966+(((-1.0)*x11967)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11968.valid){
continue;
}
CheckValue<IkReal> x11969=IKPowWithIntegerCheck(IKsign(((x11967*x11967)+(x11966*x11966)+(((-2.0)*x11966*x11967))+(r02*r02))),-1);
if(!x11969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11968.value)+(((1.5707963267949)*(x11969.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11970=IKsin(j4);
IkReal x11971=IKcos(j4);
IkReal x11972=((1.0)*x11971);
IkReal x11973=(gconst10*x11970);
IkReal x11974=((1.0)*x11970);
IkReal x11975=(gconst11*x11971);
IkReal x11976=(gconst11*x11974);
evalcond[0]=((((-1.0)*r20*x11976))+(((-1.0)*r22*x11972))+((r21*x11973)));
evalcond[1]=((((-1.0)*r10*x11976))+(((-1.0)*r12*x11972))+((r11*x11973)));
evalcond[2]=(((r00*x11975))+(((-1.0)*gconst10*r01*x11972))+(((-1.0)*r02*x11974)));
evalcond[3]=((1.0)+((r01*x11973))+(((-1.0)*r00*x11976))+(((-1.0)*r02*x11972)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11974))+(((-1.0)*gconst10*r11*x11972))+((cj1*sj2))+((r10*x11975)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11975))+(((-1.0)*r22*x11974))+(((-1.0)*gconst10*r21*x11972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11977=((1.0)*gconst11);
CheckValue<IkReal> x11978=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11977))+(((-1.0)*gconst10*r20)))),-1);
if(!x11978.valid){
continue;
}
CheckValue<IkReal> x11979 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11977)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11978.value)))+(x11979.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11980=IKsin(j4);
IkReal x11981=IKcos(j4);
IkReal x11982=((1.0)*x11981);
IkReal x11983=(gconst10*x11980);
IkReal x11984=((1.0)*x11980);
IkReal x11985=(gconst11*x11981);
IkReal x11986=(gconst11*x11984);
evalcond[0]=(((r21*x11983))+(((-1.0)*r22*x11982))+(((-1.0)*r20*x11986)));
evalcond[1]=((((-1.0)*r12*x11982))+(((-1.0)*r10*x11986))+((r11*x11983)));
evalcond[2]=((((-1.0)*gconst10*r01*x11982))+(((-1.0)*r02*x11984))+((r00*x11985)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11982))+(((-1.0)*r00*x11986))+((r01*x11983)));
evalcond[4]=((((-1.0)*r12*x11984))+((cj2*sj1))+((r10*x11985))+(((-1.0)*gconst10*r11*x11982))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11982))+((r20*x11985))+(((-1.0)*r22*x11984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11987=((-1.0)*r11);
IkReal x11988=((-1.0)*r10);
CheckValue<IkReal> x11990 = IKatan2WithCheck(IkReal(x11987),IkReal(x11988),IKFAST_ATAN2_MAGTHRESH);
if(!x11990.valid){
continue;
}
IkReal x11989=((1.0)*(x11990.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11989)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11988);
rxp1_1=(px*r21);
rxp1_2=(px*x11987);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11989)));
IkReal gconst10=x11987;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11991=((-1.0)*r11);
IkReal x11992=((-1.0)*r10);
CheckValue<IkReal> x11994 = IKatan2WithCheck(IkReal(x11991),IkReal(x11992),IKFAST_ATAN2_MAGTHRESH);
if(!x11994.valid){
continue;
}
IkReal x11993=((1.0)*(x11994.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11993)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11992);
rxp1_1=(px*r21);
rxp1_2=(px*x11991);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11993)));
IkReal gconst10=x11991;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11995=((-1.0)*r11);
IkReal x11996=((-1.0)*r10);
CheckValue<IkReal> x11998 = IKatan2WithCheck(IkReal(x11995),IkReal(x11996),IKFAST_ATAN2_MAGTHRESH);
if(!x11998.valid){
continue;
}
IkReal x11997=((1.0)*(x11998.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11997)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11996);
rxp1_1=(px*r21);
rxp1_2=(px*x11995);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11997)));
IkReal gconst10=x11995;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12001=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x12001.valid){
continue;
}
IkReal x11999=x12001.value;
IkReal x12000=(sj0*x11999);
cj4array[0]=(((cj1*sj2*x12000))+((cj2*sj1*x12000)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12002=IKsin(j4);
IkReal x12003=IKcos(j4);
IkReal x12004=(gconst10*r21);
IkReal x12005=(gconst11*r20);
IkReal x12006=((1.0)*x12002);
IkReal x12007=((1.0)*x12003);
evalcond[0]=((-1.0)*r02*x12002);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12007)));
evalcond[2]=((((-1.0)*x12005*x12006))+((x12002*x12004)));
evalcond[3]=(((gconst10*r11*x12002))+(((-1.0)*gconst11*r10*x12006)));
evalcond[4]=((((-1.0)*x12004*x12007))+((x12003*x12005))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12009=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x12009.valid){
continue;
}
IkReal x12008=x12009.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12008))+((cj1*cj2*x12008)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12010=IKsin(j4);
IkReal x12011=IKcos(j4);
IkReal x12012=((1.0)*sj0);
IkReal x12013=(gconst10*x12010);
IkReal x12014=((1.0)*x12011);
IkReal x12015=((1.0)*gconst11*x12010);
evalcond[0]=((-1.0)*r02*x12010);
evalcond[1]=((((-1.0)*r02*x12014))+(((-1.0)*x12012)));
evalcond[2]=(((r21*x12013))+(((-1.0)*r20*x12015)));
evalcond[3]=(((r11*x12013))+(((-1.0)*r10*x12015)));
evalcond[4]=(((gconst11*r10*x12011))+(((-1.0)*cj2*sj1*x12012))+(((-1.0)*cj1*sj2*x12012))+(((-1.0)*gconst10*r11*x12014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12016=IKPowWithIntegerCheck(r02,-1);
if(!x12016.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12016.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12017=IKsin(j4);
IkReal x12018=IKcos(j4);
IkReal x12019=(gconst10*r21);
IkReal x12020=((1.0)*sj0);
IkReal x12021=(gconst10*r11);
IkReal x12022=(gconst11*x12018);
IkReal x12023=((1.0)*x12018);
IkReal x12024=((1.0)*gconst11*x12017);
evalcond[0]=((-1.0)*r02*x12017);
evalcond[1]=((((-1.0)*r20*x12024))+((x12017*x12019)));
evalcond[2]=(((x12017*x12021))+(((-1.0)*r10*x12024)));
evalcond[3]=(((r20*x12022))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12019*x12023)));
evalcond[4]=((((-1.0)*cj1*sj2*x12020))+(((-1.0)*cj2*sj1*x12020))+(((-1.0)*x12021*x12023))+((r10*x12022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12025=((1.0)*gconst11);
CheckValue<IkReal> x12026 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x12025))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x12025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12026.valid){
continue;
}
CheckValue<IkReal> x12027=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12026.value)+(((1.5707963267949)*(x12027.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12028=IKsin(j4);
IkReal x12029=IKcos(j4);
IkReal x12030=((1.0)*cj2);
IkReal x12031=((1.0)*sj0);
IkReal x12032=(cj1*sj2);
IkReal x12033=(gconst10*x12028);
IkReal x12034=((1.0)*x12029);
IkReal x12035=(gconst11*x12029);
IkReal x12036=((1.0)*x12028);
IkReal x12037=(gconst11*x12036);
evalcond[0]=((((-1.0)*r20*x12037))+((r21*x12033)));
evalcond[1]=(cj0+(((-1.0)*r12*x12034))+((r11*x12033))+(((-1.0)*r10*x12037)));
evalcond[2]=((((-1.0)*cj1*x12030))+((r20*x12035))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12034)));
evalcond[3]=((((-1.0)*x12031))+((r01*x12033))+(((-1.0)*r02*x12034))+(((-1.0)*r00*x12037)));
evalcond[4]=((((-1.0)*gconst10*r01*x12034))+((r00*x12035))+(((-1.0)*r02*x12036))+(((-1.0)*cj0*sj1*x12030))+(((-1.0)*cj0*x12032)));
evalcond[5]=((((-1.0)*x12031*x12032))+(((-1.0)*gconst10*r11*x12034))+(((-1.0)*r12*x12036))+((r10*x12035))+(((-1.0)*sj0*sj1*x12030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12038=(gconst10*r21);
IkReal x12039=(gconst11*r20);
IkReal x12040=(sj1*sj2);
IkReal x12041=(cj1*cj2);
CheckValue<IkReal> x12042=IKPowWithIntegerCheck(IKsign(((x12039*x12039)+(r22*r22)+(x12038*x12038)+(((-2.0)*x12038*x12039)))),-1);
if(!x12042.valid){
continue;
}
CheckValue<IkReal> x12043 = IKatan2WithCheck(IkReal((((r22*x12040))+(((-1.0)*r22*x12041)))),IkReal((((x12038*x12040))+(((-1.0)*x12039*x12040))+(((-1.0)*x12038*x12041))+((x12039*x12041)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12042.value)))+(x12043.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12044=IKsin(j4);
IkReal x12045=IKcos(j4);
IkReal x12046=((1.0)*cj2);
IkReal x12047=((1.0)*sj0);
IkReal x12048=(cj1*sj2);
IkReal x12049=((1.0)*x12045);
IkReal x12050=(gconst10*x12044);
IkReal x12051=((1.0)*x12044);
IkReal x12052=(gconst11*x12045);
IkReal x12053=(gconst11*x12051);
evalcond[0]=((((-1.0)*r20*x12053))+(((-1.0)*r22*x12049))+((r21*x12050)));
evalcond[1]=((((-1.0)*r12*x12049))+(((-1.0)*r10*x12053))+cj0+((r11*x12050)));
evalcond[2]=(((r01*x12050))+(((-1.0)*x12047))+(((-1.0)*r00*x12053))+(((-1.0)*r02*x12049)));
evalcond[3]=(((r20*x12052))+(((-1.0)*cj1*x12046))+((sj1*sj2))+(((-1.0)*r22*x12051))+(((-1.0)*gconst10*r21*x12049)));
evalcond[4]=((((-1.0)*cj0*x12048))+(((-1.0)*gconst10*r01*x12049))+((r00*x12052))+(((-1.0)*r02*x12051))+(((-1.0)*cj0*sj1*x12046)));
evalcond[5]=(((r10*x12052))+(((-1.0)*sj0*sj1*x12046))+(((-1.0)*x12047*x12048))+(((-1.0)*gconst10*r11*x12049))+(((-1.0)*r12*x12051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12054=((1.0)*sj0);
IkReal x12055=((1.0)*gconst10);
CheckValue<IkReal> x12056=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12055))+(((-1.0)*gconst11*r21)))),-1);
if(!x12056.valid){
continue;
}
CheckValue<IkReal> x12057 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12054)))),IkReal(((((-1.0)*gconst10*r11*x12054))+((cj0*gconst11*r00))+(((-1.0)*cj0*r01*x12055))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12056.value)))+(x12057.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12058=IKsin(j4);
IkReal x12059=IKcos(j4);
IkReal x12060=((1.0)*cj2);
IkReal x12061=((1.0)*sj0);
IkReal x12062=(cj1*sj2);
IkReal x12063=((1.0)*x12059);
IkReal x12064=(gconst10*x12058);
IkReal x12065=((1.0)*x12058);
IkReal x12066=(gconst11*x12059);
IkReal x12067=(gconst11*x12065);
evalcond[0]=(((r21*x12064))+(((-1.0)*r20*x12067))+(((-1.0)*r22*x12063)));
evalcond[1]=(cj0+(((-1.0)*r10*x12067))+(((-1.0)*r12*x12063))+((r11*x12064)));
evalcond[2]=(((r01*x12064))+(((-1.0)*r02*x12063))+(((-1.0)*x12061))+(((-1.0)*r00*x12067)));
evalcond[3]=((((-1.0)*gconst10*r21*x12063))+((sj1*sj2))+((r20*x12066))+(((-1.0)*r22*x12065))+(((-1.0)*cj1*x12060)));
evalcond[4]=(((r00*x12066))+(((-1.0)*cj0*x12062))+(((-1.0)*cj0*sj1*x12060))+(((-1.0)*r02*x12065))+(((-1.0)*gconst10*r01*x12063)));
evalcond[5]=((((-1.0)*sj0*sj1*x12060))+(((-1.0)*x12061*x12062))+((r10*x12066))+(((-1.0)*gconst10*r11*x12063))+(((-1.0)*r12*x12065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12068=((1.0)*gconst11);
CheckValue<IkReal> x12069 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12068))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12069.valid){
continue;
}
CheckValue<IkReal> x12070=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12068)))),-1);
if(!x12070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12069.value)+(((1.5707963267949)*(x12070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12071=IKsin(j4);
IkReal x12072=IKcos(j4);
IkReal x12073=((1.0)*cj2);
IkReal x12074=((1.0)*sj0);
IkReal x12075=(cj1*sj2);
IkReal x12076=((1.0)*x12072);
IkReal x12077=(gconst10*x12071);
IkReal x12078=((1.0)*x12071);
IkReal x12079=(gconst11*x12072);
IkReal x12080=(gconst11*x12078);
evalcond[0]=((((-1.0)*r20*x12080))+(((-1.0)*r22*x12076))+((r21*x12077)));
evalcond[1]=(cj0+((r11*x12077))+(((-1.0)*r12*x12076))+(((-1.0)*r10*x12080)));
evalcond[2]=((((-1.0)*r02*x12076))+(((-1.0)*r00*x12080))+(((-1.0)*x12074))+((r01*x12077)));
evalcond[3]=((((-1.0)*gconst10*r21*x12076))+((sj1*sj2))+((r20*x12079))+(((-1.0)*cj1*x12073))+(((-1.0)*r22*x12078)));
evalcond[4]=((((-1.0)*gconst10*r01*x12076))+(((-1.0)*r02*x12078))+(((-1.0)*cj0*sj1*x12073))+(((-1.0)*cj0*x12075))+((r00*x12079)));
evalcond[5]=((((-1.0)*sj0*sj1*x12073))+(((-1.0)*gconst10*r11*x12076))+((r10*x12079))+(((-1.0)*r12*x12078))+(((-1.0)*x12074*x12075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12081=((-1.0)*r11);
CheckValue<IkReal> x12084 = IKatan2WithCheck(IkReal(x12081),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12084.valid){
continue;
}
IkReal x12082=((1.0)*(x12084.value));
IkReal x12083=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12082)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12082)));
IkReal gconst10=(x12081*x12083);
IkReal gconst11=((1.0)*r10*x12083);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12085=((-1.0)*r11);
CheckValue<IkReal> x12088 = IKatan2WithCheck(IkReal(x12085),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12088.valid){
continue;
}
IkReal x12086=((1.0)*(x12088.value));
IkReal x12087=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12086)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12086)));
IkReal gconst10=(x12085*x12087);
IkReal gconst11=((1.0)*r10*x12087);
IkReal x12089=r12*r12;
IkReal x12090=((1.0)*sj0);
IkReal x12091=(cj0*r02);
IkReal x12092=x11828;
j4eval[0]=((IKabs(((((-1.0)*x12090*x12092))+((r12*x12091*x12092))+((sj0*x12089*x12092)))))+(IKabs(((((-1.0)*x12091))+(((-1.0)*r12*x12090))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12093=((-1.0)*r11);
CheckValue<IkReal> x12096 = IKatan2WithCheck(IkReal(x12093),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12096.valid){
continue;
}
IkReal x12094=((1.0)*(x12096.value));
IkReal x12095=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12094)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12094)));
IkReal gconst10=(x12093*x12095);
IkReal gconst11=((1.0)*r10*x12095);
IkReal x12097=r12*r12;
IkReal x12098=((1.0)+(((-1.0)*x12097)));
IkReal x12099=(r22*sj1*sj2);
IkReal x12100=(cj1*cj2*r22);
CheckValue<IkReal> x12107=IKPowWithIntegerCheck(x12098,-1);
if(!x12107.valid){
continue;
}
IkReal x12101=x12107.value;
CheckValue<IkReal> x12108=IKPowWithIntegerCheck(((-1.0)+x12097),-1);
if(!x12108.valid){
continue;
}
IkReal x12102=x12108.value;
IkReal x12103=((1.0)*x12101);
if((x12098) < -0.00001)
continue;
IkReal x12104=IKsqrt(x12098);
IkReal x12105=(r12*x12102*x12104);
IkReal x12106=((((-1.0)*x12103*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x12103*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x12101)));
j4eval[0]=x12106;
j4eval[1]=((IKabs(((((-1.0)*x12099*x12105))+((x12100*x12105)))))+(IKabs((x12099+(((-1.0)*x12100))))));
j4eval[2]=IKsign(x12106);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12109=((-1.0)*r11);
CheckValue<IkReal> x12112 = IKatan2WithCheck(IkReal(x12109),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12112.valid){
continue;
}
IkReal x12110=((1.0)*(x12112.value));
IkReal x12111=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12110)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12110)));
IkReal gconst10=(x12109*x12111);
IkReal gconst11=((1.0)*r10*x12111);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12113=((-1.0)*r11);
CheckValue<IkReal> x12116 = IKatan2WithCheck(IkReal(x12113),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12116.valid){
continue;
}
IkReal x12114=((1.0)*(x12116.value));
IkReal x12115=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12114)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12114)));
IkReal gconst10=(x12113*x12115);
IkReal gconst11=((1.0)*r10*x12115);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12117=((-1.0)*r11);
CheckValue<IkReal> x12120 = IKatan2WithCheck(IkReal(x12117),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12120.valid){
continue;
}
IkReal x12118=((1.0)*(x12120.value));
IkReal x12119=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12118)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12118)));
IkReal gconst10=(x12117*x12119);
IkReal gconst11=((1.0)*r10*x12119);
IkReal x12121=(cj1*r02*sj2);
IkReal x12122=(cj2*r02*sj1);
IkReal x12123=x11828;
IkReal x12124=(r12*x12123);
j4eval[0]=((IKabs((((x12122*x12124))+((x12121*x12124)))))+(IKabs((x12122+x12121))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12125=(cj1*sj2);
IkReal x12126=(cj2*sj1);
IkReal x12127=(gconst11*r00);
IkReal x12128=((1.0)*gconst10*r01);
CheckValue<IkReal> x12129=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12129.valid){
continue;
}
CheckValue<IkReal> x12130 = IKatan2WithCheck(IkReal((((x12125*x12127))+(((-1.0)*x12125*x12128))+((x12126*x12127))+(((-1.0)*x12126*x12128)))),IkReal((((r02*x12125))+((r02*x12126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12129.value)))+(x12130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12131=IKcos(j4);
IkReal x12132=IKsin(j4);
IkReal x12133=((1.0)*cj2);
IkReal x12134=((1.0)*x12131);
IkReal x12135=(gconst10*x12131);
IkReal x12136=(gconst10*x12132);
IkReal x12137=((1.0)*gconst11*x12132);
evalcond[0]=((((-1.0)*gconst11*r00*x12134))+((r01*x12135))+((r02*x12132)));
evalcond[1]=((((-1.0)*r20*x12137))+((r21*x12136))+(((-1.0)*r22*x12134)));
evalcond[2]=((((-1.0)*r12*x12134))+(((-1.0)*r10*x12137))+((r11*x12136)));
evalcond[3]=((-1.0)+((r01*x12136))+(((-1.0)*r00*x12137))+(((-1.0)*r02*x12134)));
evalcond[4]=((((-1.0)*cj1*x12133))+((sj1*sj2))+((r21*x12135))+((r22*x12132))+(((-1.0)*gconst11*r20*x12134)));
evalcond[5]=(((r12*x12132))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12134))+((r11*x12135))+(((-1.0)*sj1*x12133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12138=(gconst10*r01);
IkReal x12139=(gconst11*r00);
CheckValue<IkReal> x12140=IKPowWithIntegerCheck(IKsign(((x12139*x12139)+(x12138*x12138)+(((-2.0)*x12138*x12139))+(r02*r02))),-1);
if(!x12140.valid){
continue;
}
CheckValue<IkReal> x12141 = IKatan2WithCheck(IkReal((x12138+(((-1.0)*x12139)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12140.value)))+(x12141.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12142=IKcos(j4);
IkReal x12143=IKsin(j4);
IkReal x12144=((1.0)*cj2);
IkReal x12145=((1.0)*x12142);
IkReal x12146=(gconst10*x12142);
IkReal x12147=(gconst10*x12143);
IkReal x12148=((1.0)*gconst11*x12143);
evalcond[0]=(((r02*x12143))+((r01*x12146))+(((-1.0)*gconst11*r00*x12145)));
evalcond[1]=((((-1.0)*r22*x12145))+(((-1.0)*r20*x12148))+((r21*x12147)));
evalcond[2]=((((-1.0)*r12*x12145))+((r11*x12147))+(((-1.0)*r10*x12148)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12148))+(((-1.0)*r02*x12145))+((r01*x12147)));
evalcond[4]=(((r22*x12143))+(((-1.0)*gconst11*r20*x12145))+((sj1*sj2))+(((-1.0)*cj1*x12144))+((r21*x12146)));
evalcond[5]=((((-1.0)*gconst11*r10*x12145))+(((-1.0)*cj1*sj2))+((r12*x12143))+((r11*x12146))+(((-1.0)*sj1*x12144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12149 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12149.valid){
continue;
}
CheckValue<IkReal> x12150=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12149.value)+(((1.5707963267949)*(x12150.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12151=IKcos(j4);
IkReal x12152=IKsin(j4);
IkReal x12153=((1.0)*cj2);
IkReal x12154=((1.0)*x12151);
IkReal x12155=(gconst10*x12151);
IkReal x12156=(gconst10*x12152);
IkReal x12157=((1.0)*gconst11*x12152);
evalcond[0]=(((r02*x12152))+((r01*x12155))+(((-1.0)*gconst11*r00*x12154)));
evalcond[1]=((((-1.0)*r22*x12154))+((r21*x12156))+(((-1.0)*r20*x12157)));
evalcond[2]=((((-1.0)*r12*x12154))+((r11*x12156))+(((-1.0)*r10*x12157)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12154))+(((-1.0)*r00*x12157))+((r01*x12156)));
evalcond[4]=((((-1.0)*gconst11*r20*x12154))+((r22*x12152))+((sj1*sj2))+((r21*x12155))+(((-1.0)*cj1*x12153)));
evalcond[5]=((((-1.0)*gconst11*r10*x12154))+((r12*x12152))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12153))+((r11*x12155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12158=((-1.0)*r11);
CheckValue<IkReal> x12161 = IKatan2WithCheck(IkReal(x12158),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12161.valid){
continue;
}
IkReal x12159=((1.0)*(x12161.value));
IkReal x12160=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12159)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12159)));
IkReal gconst10=(x12158*x12160);
IkReal gconst11=((1.0)*r10*x12160);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12162=((-1.0)*r11);
CheckValue<IkReal> x12165 = IKatan2WithCheck(IkReal(x12162),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12165.valid){
continue;
}
IkReal x12163=((1.0)*(x12165.value));
IkReal x12164=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12163)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12163)));
IkReal gconst10=(x12162*x12164);
IkReal gconst11=((1.0)*r10*x12164);
IkReal x12166=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12170=IKPowWithIntegerCheck(x12166,-1);
if(!x12170.valid){
continue;
}
IkReal x12167=x12170.value;
IkReal x12168=((1.0)*x12167);
IkReal x12169=((((-2.0)*r00*r01*r10*r11*x12167))+(((-1.0)*x12168*(r01*r01)*(r11*r11)))+(((-1.0)*(r02*r02)))+(((-1.0)*x12168*(r00*r00)*(r10*r10))));
j4eval[0]=x12169;
j4eval[1]=r02;
j4eval[2]=x12166;
j4eval[3]=IKsign(x12169);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12171=((-1.0)*r11);
CheckValue<IkReal> x12174 = IKatan2WithCheck(IkReal(x12171),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12174.valid){
continue;
}
IkReal x12172=((1.0)*(x12174.value));
IkReal x12173=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12172)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12172)));
IkReal gconst10=(x12171*x12173);
IkReal gconst11=((1.0)*r10*x12173);
IkReal x12175=r12*r12;
IkReal x12176=((1.0)*r02);
IkReal x12177=(cj1*sj2);
IkReal x12178=(cj2*sj1);
CheckValue<IkReal> x12182=IKPowWithIntegerCheck(((-1.0)+x12175),-1);
if(!x12182.valid){
continue;
}
IkReal x12179=x12182.value;
if((((1.0)+(((-1.0)*x12175)))) < -0.00001)
continue;
IkReal x12180=IKsqrt(((1.0)+(((-1.0)*x12175))));
IkReal x12181=(r12*x12179*x12180);
j4eval[0]=((IKabs(((((-1.0)*x12176*x12178*x12181))+(((-1.0)*x12176*x12177*x12181)))))+(IKabs(((((-1.0)*x12176*x12178))+(((-1.0)*x12176*x12177))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12183=(cj1*sj2);
IkReal x12184=(gconst10*r01);
IkReal x12185=(cj2*sj1);
IkReal x12186=((1.0)*r02);
IkReal x12187=((1.0)*gconst11*r00);
CheckValue<IkReal> x12188=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12188.valid){
continue;
}
CheckValue<IkReal> x12189 = IKatan2WithCheck(IkReal(((((-1.0)*x12183*x12187))+(((-1.0)*x12185*x12187))+((x12183*x12184))+((x12184*x12185)))),IkReal(((((-1.0)*x12183*x12186))+(((-1.0)*x12185*x12186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12188.value)))+(x12189.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12190=IKcos(j4);
IkReal x12191=IKsin(j4);
IkReal x12192=((1.0)*x12190);
IkReal x12193=(gconst10*x12190);
IkReal x12194=(gconst10*x12191);
IkReal x12195=((1.0)*gconst11*x12191);
evalcond[0]=((((-1.0)*gconst11*r00*x12192))+((r02*x12191))+((r01*x12193)));
evalcond[1]=((((-1.0)*r20*x12195))+((r21*x12194))+(((-1.0)*r22*x12192)));
evalcond[2]=(((r11*x12194))+(((-1.0)*r10*x12195))+(((-1.0)*r12*x12192)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12192))+((r01*x12194))+(((-1.0)*r00*x12195)));
evalcond[4]=(((cj2*sj1))+((r12*x12191))+((cj1*sj2))+((r11*x12193))+(((-1.0)*gconst11*r10*x12192)));
evalcond[5]=(((r21*x12193))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12191))+(((-1.0)*gconst11*r20*x12192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12196=(gconst10*r01);
IkReal x12197=(gconst11*r00);
CheckValue<IkReal> x12198=IKPowWithIntegerCheck(IKsign(((((2.0)*x12196*x12197))+(((-1.0)*(r02*r02)))+(((-1.0)*(x12196*x12196)))+(((-1.0)*(x12197*x12197))))),-1);
if(!x12198.valid){
continue;
}
CheckValue<IkReal> x12199 = IKatan2WithCheck(IkReal((x12196+(((-1.0)*x12197)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12198.value)))+(x12199.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12200=IKcos(j4);
IkReal x12201=IKsin(j4);
IkReal x12202=((1.0)*x12200);
IkReal x12203=(gconst10*x12200);
IkReal x12204=(gconst10*x12201);
IkReal x12205=((1.0)*gconst11*x12201);
evalcond[0]=(((r02*x12201))+(((-1.0)*gconst11*r00*x12202))+((r01*x12203)));
evalcond[1]=((((-1.0)*r22*x12202))+((r21*x12204))+(((-1.0)*r20*x12205)));
evalcond[2]=((((-1.0)*r12*x12202))+(((-1.0)*r10*x12205))+((r11*x12204)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12202))+(((-1.0)*r00*x12205))+((r01*x12204)));
evalcond[4]=(((cj2*sj1))+((r12*x12201))+(((-1.0)*gconst11*r10*x12202))+((cj1*sj2))+((r11*x12203)));
evalcond[5]=(((r22*x12201))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12202))+((r21*x12203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12206=((1.0)*gconst11);
CheckValue<IkReal> x12207=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12206)))),-1);
if(!x12207.valid){
continue;
}
CheckValue<IkReal> x12208 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12207.value)))+(x12208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12209=IKcos(j4);
IkReal x12210=IKsin(j4);
IkReal x12211=((1.0)*x12209);
IkReal x12212=(gconst10*x12209);
IkReal x12213=(gconst10*x12210);
IkReal x12214=((1.0)*gconst11*x12210);
evalcond[0]=((((-1.0)*gconst11*r00*x12211))+((r02*x12210))+((r01*x12212)));
evalcond[1]=((((-1.0)*r22*x12211))+((r21*x12213))+(((-1.0)*r20*x12214)));
evalcond[2]=((((-1.0)*r12*x12211))+(((-1.0)*r10*x12214))+((r11*x12213)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12211))+(((-1.0)*r00*x12214))+((r01*x12213)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12211))+((r12*x12210))+((cj1*sj2))+((r11*x12212)));
evalcond[5]=(((r22*x12210))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12211))+((r21*x12212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12215=((-1.0)*r11);
IkReal x12216=((-1.0)*r10);
CheckValue<IkReal> x12218 = IKatan2WithCheck(IkReal(x12215),IkReal(x12216),IKFAST_ATAN2_MAGTHRESH);
if(!x12218.valid){
continue;
}
IkReal x12217=((1.0)*(x12218.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12217)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12216);
rxp1_1=(px*r21);
rxp1_2=(px*x12215);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12217)));
IkReal gconst10=x12215;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12219=((-1.0)*r11);
IkReal x12220=((-1.0)*r10);
CheckValue<IkReal> x12222 = IKatan2WithCheck(IkReal(x12219),IkReal(x12220),IKFAST_ATAN2_MAGTHRESH);
if(!x12222.valid){
continue;
}
IkReal x12221=((1.0)*(x12222.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12221)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12220);
rxp1_1=(px*r21);
rxp1_2=(px*x12219);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12221)));
IkReal gconst10=x12219;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12223=((-1.0)*r11);
IkReal x12224=((-1.0)*r10);
CheckValue<IkReal> x12226 = IKatan2WithCheck(IkReal(x12223),IkReal(x12224),IKFAST_ATAN2_MAGTHRESH);
if(!x12226.valid){
continue;
}
IkReal x12225=((1.0)*(x12226.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12225)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12224);
rxp1_1=(px*r21);
rxp1_2=(px*x12223);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12225)));
IkReal gconst10=x12223;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12229=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12229.valid){
continue;
}
IkReal x12227=x12229.value;
IkReal x12228=(sj0*x12227);
cj4array[0]=(((cj1*sj2*x12228))+((cj2*sj1*x12228)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12230=IKsin(j4);
IkReal x12231=IKcos(j4);
IkReal x12232=(gconst10*r21);
IkReal x12233=((1.0)*x12231);
IkReal x12234=((1.0)*gconst11*x12230);
evalcond[0]=(r02*x12230);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12233)));
evalcond[2]=(((x12230*x12232))+(((-1.0)*r20*x12234)));
evalcond[3]=(((gconst10*r11*x12230))+(((-1.0)*r10*x12234)));
evalcond[4]=((((-1.0)*gconst11*r20*x12233))+((x12231*x12232))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12236=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12236.valid){
continue;
}
IkReal x12235=x12236.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12235))+((cj1*cj2*x12235)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12237=IKsin(j4);
IkReal x12238=IKcos(j4);
IkReal x12239=((1.0)*sj0);
IkReal x12240=(gconst10*x12237);
IkReal x12241=((1.0)*x12238);
IkReal x12242=((1.0)*gconst11*x12237);
evalcond[0]=(r02*x12237);
evalcond[1]=((((-1.0)*x12239))+(((-1.0)*r02*x12241)));
evalcond[2]=((((-1.0)*r20*x12242))+((r21*x12240)));
evalcond[3]=((((-1.0)*r10*x12242))+((r11*x12240)));
evalcond[4]=((((-1.0)*cj1*sj2*x12239))+((gconst10*r11*x12238))+(((-1.0)*gconst11*r10*x12241))+(((-1.0)*cj2*sj1*x12239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12243=IKPowWithIntegerCheck(r02,-1);
if(!x12243.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12243.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12244=IKsin(j4);
IkReal x12245=IKcos(j4);
IkReal x12246=(gconst10*r21);
IkReal x12247=((1.0)*cj1);
IkReal x12248=(gconst10*r11);
IkReal x12249=((1.0)*gconst11*x12244);
IkReal x12250=((1.0)*gconst11*x12245);
evalcond[0]=(r02*x12244);
evalcond[1]=(((x12244*x12246))+(((-1.0)*r20*x12249)));
evalcond[2]=((((-1.0)*r10*x12249))+((x12244*x12248)));
evalcond[3]=(((x12245*x12246))+((sj1*sj2))+(((-1.0)*r20*x12250))+(((-1.0)*cj2*x12247)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x12245*x12248))+(((-1.0)*r10*x12250))+(((-1.0)*sj0*sj2*x12247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12251=((1.0)*gconst11);
CheckValue<IkReal> x12252 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x12251))+(((-1.0)*cj0*r00*x12251)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12252.valid){
continue;
}
CheckValue<IkReal> x12253=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12252.value)+(((1.5707963267949)*(x12253.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12254=IKsin(j4);
IkReal x12255=IKcos(j4);
IkReal x12256=((1.0)*gconst11);
IkReal x12257=((1.0)*cj2);
IkReal x12258=((1.0)*sj0);
IkReal x12259=(cj1*sj2);
IkReal x12260=(gconst10*x12255);
IkReal x12261=(gconst10*x12254);
IkReal x12262=((1.0)*x12255);
evalcond[0]=((((-1.0)*r20*x12254*x12256))+((r21*x12261)));
evalcond[1]=((((-1.0)*r12*x12262))+cj0+((r11*x12261))+(((-1.0)*r10*x12254*x12256)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r20*x12255*x12256))+((r21*x12260))+(((-1.0)*cj1*x12257)));
evalcond[3]=(((r01*x12261))+(((-1.0)*r02*x12262))+(((-1.0)*x12258))+(((-1.0)*r00*x12254*x12256)));
evalcond[4]=((((-1.0)*cj0*sj1*x12257))+((r01*x12260))+(((-1.0)*cj0*x12259))+(((-1.0)*r00*x12255*x12256))+((r02*x12254)));
evalcond[5]=(((r12*x12254))+(((-1.0)*x12258*x12259))+((r11*x12260))+(((-1.0)*r10*x12255*x12256))+(((-1.0)*sj0*sj1*x12257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12263=(gconst10*r21);
IkReal x12264=(gconst11*r20);
IkReal x12265=(sj1*sj2);
IkReal x12266=(cj1*cj2);
CheckValue<IkReal> x12267 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12266))+((r22*x12265)))),IkReal((((x12263*x12265))+((x12264*x12266))+(((-1.0)*x12263*x12266))+(((-1.0)*x12264*x12265)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12267.valid){
continue;
}
CheckValue<IkReal> x12268=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12263*x12263)))+(((-1.0)*(r22*r22)))+(((2.0)*x12263*x12264))+(((-1.0)*(x12264*x12264))))),-1);
if(!x12268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12267.value)+(((1.5707963267949)*(x12268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12269=IKsin(j4);
IkReal x12270=IKcos(j4);
IkReal x12271=((1.0)*cj2);
IkReal x12272=((1.0)*sj0);
IkReal x12273=(cj1*sj2);
IkReal x12274=((1.0)*x12270);
IkReal x12275=(gconst10*x12270);
IkReal x12276=(gconst10*x12269);
IkReal x12277=((1.0)*gconst11*x12269);
evalcond[0]=(((r21*x12276))+(((-1.0)*r22*x12274))+(((-1.0)*r20*x12277)));
evalcond[1]=(cj0+(((-1.0)*r10*x12277))+(((-1.0)*r12*x12274))+((r11*x12276)));
evalcond[2]=((((-1.0)*r02*x12274))+(((-1.0)*x12272))+(((-1.0)*r00*x12277))+((r01*x12276)));
evalcond[3]=(((r21*x12275))+(((-1.0)*cj1*x12271))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12274))+((r22*x12269)));
evalcond[4]=((((-1.0)*cj0*x12273))+(((-1.0)*gconst11*r00*x12274))+(((-1.0)*cj0*sj1*x12271))+((r01*x12275))+((r02*x12269)));
evalcond[5]=((((-1.0)*x12272*x12273))+((r12*x12269))+(((-1.0)*sj0*sj1*x12271))+((r11*x12275))+(((-1.0)*gconst11*r10*x12274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12278=((1.0)*sj0);
IkReal x12279=((1.0)*gconst10);
CheckValue<IkReal> x12280=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12279)))),-1);
if(!x12280.valid){
continue;
}
CheckValue<IkReal> x12281 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12278)))),IkReal(((((-1.0)*cj0*r01*x12279))+((cj0*gconst11*r00))+(((-1.0)*gconst10*r11*x12278))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12280.value)))+(x12281.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12282=IKsin(j4);
IkReal x12283=IKcos(j4);
IkReal x12284=((1.0)*cj2);
IkReal x12285=((1.0)*sj0);
IkReal x12286=(cj1*sj2);
IkReal x12287=((1.0)*x12283);
IkReal x12288=(gconst10*x12283);
IkReal x12289=(gconst10*x12282);
IkReal x12290=((1.0)*gconst11*x12282);
evalcond[0]=((((-1.0)*r22*x12287))+(((-1.0)*r20*x12290))+((r21*x12289)));
evalcond[1]=((((-1.0)*r10*x12290))+cj0+(((-1.0)*r12*x12287))+((r11*x12289)));
evalcond[2]=((((-1.0)*r00*x12290))+((r01*x12289))+(((-1.0)*r02*x12287))+(((-1.0)*x12285)));
evalcond[3]=(((r22*x12282))+(((-1.0)*gconst11*r20*x12287))+(((-1.0)*cj1*x12284))+((sj1*sj2))+((r21*x12288)));
evalcond[4]=(((r02*x12282))+(((-1.0)*gconst11*r00*x12287))+(((-1.0)*cj0*sj1*x12284))+((r01*x12288))+(((-1.0)*cj0*x12286)));
evalcond[5]=((((-1.0)*sj0*sj1*x12284))+(((-1.0)*gconst11*r10*x12287))+((r12*x12282))+(((-1.0)*x12285*x12286))+((r11*x12288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12291=((1.0)*gconst11);
CheckValue<IkReal> x12292=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12291)))),-1);
if(!x12292.valid){
continue;
}
CheckValue<IkReal> x12293 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12291))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12292.value)))+(x12293.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12294=IKsin(j4);
IkReal x12295=IKcos(j4);
IkReal x12296=((1.0)*cj2);
IkReal x12297=((1.0)*sj0);
IkReal x12298=(cj1*sj2);
IkReal x12299=((1.0)*x12295);
IkReal x12300=(gconst10*x12295);
IkReal x12301=(gconst10*x12294);
IkReal x12302=((1.0)*gconst11*x12294);
evalcond[0]=((((-1.0)*r20*x12302))+((r21*x12301))+(((-1.0)*r22*x12299)));
evalcond[1]=(cj0+((r11*x12301))+(((-1.0)*r10*x12302))+(((-1.0)*r12*x12299)));
evalcond[2]=((((-1.0)*x12297))+(((-1.0)*r00*x12302))+(((-1.0)*r02*x12299))+((r01*x12301)));
evalcond[3]=(((r21*x12300))+((sj1*sj2))+((r22*x12294))+(((-1.0)*cj1*x12296))+(((-1.0)*gconst11*r20*x12299)));
evalcond[4]=((((-1.0)*cj0*sj1*x12296))+(((-1.0)*cj0*x12298))+((r02*x12294))+(((-1.0)*gconst11*r00*x12299))+((r01*x12300)));
evalcond[5]=(((r11*x12300))+((r12*x12294))+(((-1.0)*x12297*x12298))+(((-1.0)*gconst11*r10*x12299))+(((-1.0)*sj0*sj1*x12296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12303=((-1.0)*r11);
CheckValue<IkReal> x12306 = IKatan2WithCheck(IkReal(x12303),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12306.valid){
continue;
}
IkReal x12304=((1.0)*(x12306.value));
IkReal x12305=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12304)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12304)));
IkReal gconst10=(x12303*x12305);
IkReal gconst11=((1.0)*r10*x12305);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12307=gconst10*gconst10;
IkReal x12308=gconst11*gconst11;
IkReal x12309=(gconst10*r21);
IkReal x12310=(cj3*r00);
IkReal x12311=(r00*sj3);
IkReal x12312=((1.0)*gconst11);
IkReal x12313=(gconst10*r20);
IkReal x12314=(r01*sj3);
IkReal x12315=(cj3*gconst11*r01);
IkReal x12316=(r21*x12307);
IkReal x12317=(r20*x12308);
CheckValue<IkReal> x12318 = IKatan2WithCheck(IkReal((((gconst10*r22*x12310))+((r22*x12315)))),IkReal((((x12310*x12316))+(((-1.0)*x12310*x12312*x12313))+((x12309*x12315))+(((-1.0)*cj3*r01*x12317)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12318.valid){
continue;
}
CheckValue<IkReal> x12319=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12309*x12311*x12312))+(((-1.0)*x12312*x12313*x12314))+((x12314*x12316))+((x12311*x12317))+((r02*r22*sj3)))),-1);
if(!x12319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12318.value)+(((1.5707963267949)*(x12319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12320=IKsin(j4);
IkReal x12321=IKcos(j4);
IkReal x12322=(sj1*sj2);
IkReal x12323=(gconst10*sj3);
IkReal x12324=(cj3*gconst10);
IkReal x12325=(gconst11*r20);
IkReal x12326=(gconst11*r21);
IkReal x12327=(gconst11*r00);
IkReal x12328=(cj3*gconst11);
IkReal x12329=(gconst11*r10);
IkReal x12330=((1.0)*cj1);
IkReal x12331=(cj2*sj1);
IkReal x12332=(gconst11*sj3);
IkReal x12333=(cj2*x12330);
IkReal x12334=((1.0)*x12321);
IkReal x12335=((1.0)*x12320);
IkReal x12336=(gconst10*x12320);
IkReal x12337=(cj3*x12320);
IkReal x12338=(sj3*x12321);
evalcond[0]=((((-1.0)*r22*x12334))+((r21*x12336))+(((-1.0)*x12325*x12335)));
evalcond[1]=((((-1.0)*x12329*x12335))+((r11*x12336))+(((-1.0)*r12*x12334)));
evalcond[2]=((-1.0)+((r01*x12336))+(((-1.0)*x12327*x12335))+(((-1.0)*r02*x12334)));
evalcond[3]=((((-1.0)*cj3*x12327*x12334))+((r00*x12323))+((r01*x12332))+((r01*x12321*x12324))+((r02*x12337)));
evalcond[4]=(((r00*x12324))+((r01*x12328))+((x12327*x12338))+(((-1.0)*r01*x12323*x12334))+(((-1.0)*r02*sj3*x12335)));
evalcond[5]=(((cj1*sj2))+x12331+((r20*x12323))+(((-1.0)*cj3*x12325*x12334))+((sj3*x12326))+((r21*x12321*x12324))+((r22*x12337)));
evalcond[6]=(((r11*x12321*x12324))+x12322+(((-1.0)*x12333))+((r12*x12337))+((r10*x12323))+(((-1.0)*r10*x12328*x12334))+((r11*x12332)));
evalcond[7]=((((-1.0)*r21*x12323*x12334))+x12322+((r20*x12324))+(((-1.0)*x12333))+((cj3*x12326))+((x12325*x12338))+(((-1.0)*r22*sj3*x12335)));
evalcond[8]=(((x12329*x12338))+(((-1.0)*r12*sj3*x12335))+((r10*x12324))+(((-1.0)*sj2*x12330))+((r11*x12328))+(((-1.0)*x12331))+(((-1.0)*r11*x12323*x12334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12339 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12339.valid){
continue;
}
CheckValue<IkReal> x12340=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12339.value)+(((1.5707963267949)*(x12340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12341=IKsin(j4);
IkReal x12342=IKcos(j4);
IkReal x12343=(sj1*sj2);
IkReal x12344=(gconst10*sj3);
IkReal x12345=(cj3*gconst10);
IkReal x12346=(gconst11*r20);
IkReal x12347=(gconst11*r21);
IkReal x12348=(gconst11*r00);
IkReal x12349=(cj3*gconst11);
IkReal x12350=(gconst11*r10);
IkReal x12351=((1.0)*cj1);
IkReal x12352=(cj2*sj1);
IkReal x12353=(gconst11*sj3);
IkReal x12354=(cj2*x12351);
IkReal x12355=((1.0)*x12342);
IkReal x12356=((1.0)*x12341);
IkReal x12357=(gconst10*x12341);
IkReal x12358=(cj3*x12341);
IkReal x12359=(sj3*x12342);
evalcond[0]=((((-1.0)*x12346*x12356))+((r21*x12357))+(((-1.0)*r22*x12355)));
evalcond[1]=((((-1.0)*x12350*x12356))+((r11*x12357))+(((-1.0)*r12*x12355)));
evalcond[2]=((-1.0)+(((-1.0)*x12348*x12356))+(((-1.0)*r02*x12355))+((r01*x12357)));
evalcond[3]=(((r00*x12344))+((r01*x12353))+((r01*x12342*x12345))+(((-1.0)*cj3*x12348*x12355))+((r02*x12358)));
evalcond[4]=(((r00*x12345))+((r01*x12349))+(((-1.0)*r01*x12344*x12355))+((x12348*x12359))+(((-1.0)*r02*sj3*x12356)));
evalcond[5]=(((r20*x12344))+((cj1*sj2))+x12352+((sj3*x12347))+((r22*x12358))+((r21*x12342*x12345))+(((-1.0)*cj3*x12346*x12355)));
evalcond[6]=((((-1.0)*r10*x12349*x12355))+(((-1.0)*x12354))+x12343+((r11*x12342*x12345))+((r11*x12353))+((r12*x12358))+((r10*x12344)));
evalcond[7]=(((r20*x12345))+(((-1.0)*r21*x12344*x12355))+(((-1.0)*x12354))+x12343+((cj3*x12347))+((x12346*x12359))+(((-1.0)*r22*sj3*x12356)));
evalcond[8]=((((-1.0)*x12352))+((x12350*x12359))+(((-1.0)*sj2*x12351))+((r11*x12349))+((r10*x12345))+(((-1.0)*r11*x12344*x12355))+(((-1.0)*r12*sj3*x12356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12360=((-1.0)*r11);
CheckValue<IkReal> x12363 = IKatan2WithCheck(IkReal(x12360),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12363.valid){
continue;
}
IkReal x12361=((1.0)*(x12363.value));
IkReal x12362=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12361)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12361)));
IkReal gconst10=(x12360*x12362);
IkReal gconst11=((1.0)*r10*x12362);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12364=gconst10*gconst10;
IkReal x12365=gconst11*gconst11;
IkReal x12366=(gconst10*r21);
IkReal x12367=(cj3*r00);
IkReal x12368=(r00*sj3);
IkReal x12369=((1.0)*gconst11);
IkReal x12370=(gconst10*r20);
IkReal x12371=(r01*sj3);
IkReal x12372=(cj3*gconst11*r01);
IkReal x12373=(r21*x12364);
IkReal x12374=(r20*x12365);
CheckValue<IkReal> x12375 = IKatan2WithCheck(IkReal((((gconst10*r22*x12367))+((r22*x12372)))),IkReal(((((-1.0)*cj3*r01*x12374))+((x12366*x12372))+((x12367*x12373))+(((-1.0)*x12367*x12369*x12370)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12375.valid){
continue;
}
CheckValue<IkReal> x12376=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12369*x12370*x12371))+(((-1.0)*x12366*x12368*x12369))+((x12368*x12374))+((x12371*x12373))+((r02*r22*sj3)))),-1);
if(!x12376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12375.value)+(((1.5707963267949)*(x12376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12377=IKsin(j4);
IkReal x12378=IKcos(j4);
IkReal x12379=(cj2*sj1);
IkReal x12380=(cj1*sj2);
IkReal x12381=(gconst10*sj3);
IkReal x12382=(cj3*gconst10);
IkReal x12383=(gconst11*r20);
IkReal x12384=(gconst11*r21);
IkReal x12385=(gconst11*r00);
IkReal x12386=(sj1*sj2);
IkReal x12387=(cj3*gconst11);
IkReal x12388=(gconst11*r10);
IkReal x12389=(cj1*cj2);
IkReal x12390=(gconst11*sj3);
IkReal x12391=((1.0)*x12378);
IkReal x12392=((1.0)*x12377);
IkReal x12393=(gconst10*x12377);
IkReal x12394=(cj3*x12377);
IkReal x12395=(sj3*x12378);
IkReal x12396=(x12379+x12380);
evalcond[0]=((((-1.0)*x12383*x12392))+(((-1.0)*r22*x12391))+((r21*x12393)));
evalcond[1]=((((-1.0)*r12*x12391))+((r11*x12393))+(((-1.0)*x12388*x12392)));
evalcond[2]=((1.0)+(((-1.0)*x12385*x12392))+(((-1.0)*r02*x12391))+((r01*x12393)));
evalcond[3]=(((r02*x12394))+((r01*x12378*x12382))+(((-1.0)*cj3*x12385*x12391))+((r00*x12381))+((r01*x12390)));
evalcond[4]=(((r00*x12382))+((x12385*x12395))+((r01*x12387))+(((-1.0)*r02*sj3*x12392))+(((-1.0)*r01*x12381*x12391)));
evalcond[5]=(((r22*x12394))+(((-1.0)*cj3*x12383*x12391))+x12396+((r21*x12378*x12382))+((r20*x12381))+((sj3*x12384)));
evalcond[6]=(((r11*x12390))+((r10*x12381))+x12389+(((-1.0)*x12386))+(((-1.0)*r10*x12387*x12391))+((r11*x12378*x12382))+((r12*x12394)));
evalcond[7]=(((r11*x12387))+((r10*x12382))+x12396+((x12388*x12395))+(((-1.0)*r11*x12381*x12391))+(((-1.0)*r12*sj3*x12392)));
evalcond[8]=(((cj3*x12384))+(((-1.0)*r22*sj3*x12392))+x12386+((r20*x12382))+((x12383*x12395))+(((-1.0)*x12389))+(((-1.0)*r21*x12381*x12391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12397=((1.0)*gconst11);
CheckValue<IkReal> x12398=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12397))+(((-1.0)*gconst10*r20)))),-1);
if(!x12398.valid){
continue;
}
CheckValue<IkReal> x12399 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12397)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12398.value)))+(x12399.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12400=IKsin(j4);
IkReal x12401=IKcos(j4);
IkReal x12402=(cj2*sj1);
IkReal x12403=(cj1*sj2);
IkReal x12404=(gconst10*sj3);
IkReal x12405=(cj3*gconst10);
IkReal x12406=(gconst11*r20);
IkReal x12407=(gconst11*r21);
IkReal x12408=(gconst11*r00);
IkReal x12409=(sj1*sj2);
IkReal x12410=(cj3*gconst11);
IkReal x12411=(gconst11*r10);
IkReal x12412=(cj1*cj2);
IkReal x12413=(gconst11*sj3);
IkReal x12414=((1.0)*x12401);
IkReal x12415=((1.0)*x12400);
IkReal x12416=(gconst10*x12400);
IkReal x12417=(cj3*x12400);
IkReal x12418=(sj3*x12401);
IkReal x12419=(x12402+x12403);
evalcond[0]=((((-1.0)*r22*x12414))+(((-1.0)*x12406*x12415))+((r21*x12416)));
evalcond[1]=(((r11*x12416))+(((-1.0)*x12411*x12415))+(((-1.0)*r12*x12414)));
evalcond[2]=((1.0)+((r01*x12416))+(((-1.0)*r02*x12414))+(((-1.0)*x12408*x12415)));
evalcond[3]=(((r01*x12413))+((r01*x12401*x12405))+((r02*x12417))+(((-1.0)*cj3*x12408*x12414))+((r00*x12404)));
evalcond[4]=((((-1.0)*r02*sj3*x12415))+(((-1.0)*r01*x12404*x12414))+((r01*x12410))+((x12408*x12418))+((r00*x12405)));
evalcond[5]=((((-1.0)*cj3*x12406*x12414))+((sj3*x12407))+((r22*x12417))+((r20*x12404))+((r21*x12401*x12405))+x12419);
evalcond[6]=((((-1.0)*r10*x12410*x12414))+((r11*x12413))+((r12*x12417))+((r10*x12404))+((r11*x12401*x12405))+x12412+(((-1.0)*x12409)));
evalcond[7]=(((x12411*x12418))+((r11*x12410))+((r10*x12405))+(((-1.0)*r12*sj3*x12415))+(((-1.0)*r11*x12404*x12414))+x12419);
evalcond[8]=(((x12406*x12418))+(((-1.0)*x12412))+((cj3*x12407))+(((-1.0)*r22*sj3*x12415))+((r20*x12405))+(((-1.0)*r21*x12404*x12414))+x12409);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12420=((-1.0)*r11);
IkReal x12421=((-1.0)*r10);
CheckValue<IkReal> x12423 = IKatan2WithCheck(IkReal(x12420),IkReal(x12421),IKFAST_ATAN2_MAGTHRESH);
if(!x12423.valid){
continue;
}
IkReal x12422=((1.0)*(x12423.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12422)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12421);
rxp1_1=(px*r21);
rxp1_2=(px*x12420);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12422)));
IkReal gconst10=x12420;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12424=((-1.0)*r11);
IkReal x12425=((-1.0)*r10);
CheckValue<IkReal> x12427 = IKatan2WithCheck(IkReal(x12424),IkReal(x12425),IKFAST_ATAN2_MAGTHRESH);
if(!x12427.valid){
continue;
}
IkReal x12426=((1.0)*(x12427.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12426)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12425);
rxp1_1=(px*r21);
rxp1_2=(px*x12424);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12426)));
IkReal gconst10=x12424;
IkReal gconst11=((1.0)*r10);
IkReal x12428=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r11*r21*x12428))+(((-1.0)*r10*r20*x12428)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12429=((-1.0)*r11);
IkReal x12430=((-1.0)*r10);
CheckValue<IkReal> x12432 = IKatan2WithCheck(IkReal(x12429),IkReal(x12430),IKFAST_ATAN2_MAGTHRESH);
if(!x12432.valid){
continue;
}
IkReal x12431=((1.0)*(x12432.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12431)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12430);
rxp1_1=(px*r21);
rxp1_2=(px*x12429);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12431)));
IkReal gconst10=x12429;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12434=IKPowWithIntegerCheck(r02,-1);
if(!x12434.valid){
continue;
}
IkReal x12433=x12434.value;
CheckValue<IkReal> x12435=IKPowWithIntegerCheck(cj3,-1);
if(!x12435.valid){
continue;
}
if( IKabs((x12433*(x12435.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12433)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12433*(x12435.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12433))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12433*(x12435.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12433));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12436=IKsin(j4);
IkReal x12437=IKcos(j4);
IkReal x12438=(cj3*r10);
IkReal x12439=((1.0)*gconst11);
IkReal x12440=(sj1*sj2);
IkReal x12441=(gconst11*sj3);
IkReal x12442=(cj3*r11);
IkReal x12443=(cj2*sj1);
IkReal x12444=(gconst10*r20);
IkReal x12445=(gconst10*sj3);
IkReal x12446=((1.0)*cj0);
IkReal x12447=((1.0)*sj0);
IkReal x12448=(cj1*sj2);
IkReal x12449=(cj3*r21);
IkReal x12450=((1.0)*cj1*cj2);
IkReal x12451=(r20*x12437);
IkReal x12452=(gconst10*x12436);
IkReal x12453=(gconst10*x12437);
IkReal x12454=(r02*x12436);
IkReal x12455=((1.0)*x12437);
evalcond[0]=((((-1.0)*x12447))+(((-1.0)*r02*x12455)));
evalcond[1]=((((-1.0)*r20*x12436*x12439))+((r21*x12452)));
evalcond[2]=(cj0+(((-1.0)*r10*x12436*x12439))+((r11*x12452)));
evalcond[3]=(((cj0*x12440))+((cj3*x12454))+(((-1.0)*cj1*cj2*x12446)));
evalcond[4]=((((-1.0)*sj3*x12454))+(((-1.0)*x12446*x12448))+(((-1.0)*x12443*x12446)));
evalcond[5]=((((-1.0)*cj3*x12439*x12451))+((r21*x12441))+((sj3*x12444))+x12443+x12448+((x12449*x12453)));
evalcond[6]=((((-1.0)*r21*x12445*x12455))+((cj3*x12444))+((x12441*x12451))+(((-1.0)*x12450))+x12440+((gconst11*x12449)));
evalcond[7]=(((sj0*x12440))+((x12442*x12453))+((r11*x12441))+(((-1.0)*x12437*x12438*x12439))+(((-1.0)*cj1*cj2*x12447))+((r10*x12445)));
evalcond[8]=(((r10*x12437*x12441))+((gconst10*x12438))+(((-1.0)*x12443*x12447))+(((-1.0)*x12447*x12448))+(((-1.0)*r11*x12445*x12455))+((gconst11*x12442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12456=((1.0)*r20);
IkReal x12457=((1.0)*gconst11);
CheckValue<IkReal> x12458=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12457))),-1);
if(!x12458.valid){
continue;
}
CheckValue<IkReal> x12459=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12456))+((cj3*gconst10*r21))),-1);
if(!x12459.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12458.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12459.value)*(((((-1.0)*gconst10*sj3*x12456))+(((-1.0)*r21*sj3*x12457))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12458.value)))+IKsqr(((x12459.value)*(((((-1.0)*gconst10*sj3*x12456))+(((-1.0)*r21*sj3*x12457))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12458.value)), ((x12459.value)*(((((-1.0)*gconst10*sj3*x12456))+(((-1.0)*r21*sj3*x12457))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12460=IKsin(j4);
IkReal x12461=IKcos(j4);
IkReal x12462=(cj3*r10);
IkReal x12463=((1.0)*gconst11);
IkReal x12464=(sj1*sj2);
IkReal x12465=(gconst11*sj3);
IkReal x12466=(cj3*r11);
IkReal x12467=(cj2*sj1);
IkReal x12468=(gconst10*r20);
IkReal x12469=(gconst10*sj3);
IkReal x12470=((1.0)*cj0);
IkReal x12471=((1.0)*sj0);
IkReal x12472=(cj1*sj2);
IkReal x12473=(cj3*r21);
IkReal x12474=((1.0)*cj1*cj2);
IkReal x12475=(r20*x12461);
IkReal x12476=(gconst10*x12460);
IkReal x12477=(gconst10*x12461);
IkReal x12478=(r02*x12460);
IkReal x12479=((1.0)*x12461);
evalcond[0]=((((-1.0)*r02*x12479))+(((-1.0)*x12471)));
evalcond[1]=((((-1.0)*r20*x12460*x12463))+((r21*x12476)));
evalcond[2]=(cj0+((r11*x12476))+(((-1.0)*r10*x12460*x12463)));
evalcond[3]=(((cj3*x12478))+((cj0*x12464))+(((-1.0)*cj1*cj2*x12470)));
evalcond[4]=((((-1.0)*sj3*x12478))+(((-1.0)*x12467*x12470))+(((-1.0)*x12470*x12472)));
evalcond[5]=((((-1.0)*cj3*x12463*x12475))+((sj3*x12468))+((x12473*x12477))+x12472+x12467+((r21*x12465)));
evalcond[6]=(((x12465*x12475))+((cj3*x12468))+(((-1.0)*r21*x12469*x12479))+(((-1.0)*x12474))+x12464+((gconst11*x12473)));
evalcond[7]=((((-1.0)*x12461*x12462*x12463))+((r11*x12465))+((sj0*x12464))+((x12466*x12477))+((r10*x12469))+(((-1.0)*cj1*cj2*x12471)));
evalcond[8]=(((gconst11*x12466))+(((-1.0)*r11*x12469*x12479))+((r10*x12461*x12465))+(((-1.0)*x12467*x12471))+(((-1.0)*x12471*x12472))+((gconst10*x12462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12480=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12480.valid){
continue;
}
CheckValue<IkReal> x12481=IKPowWithIntegerCheck(r02,-1);
if(!x12481.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12480.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12481.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12480.value)))+IKsqr(((-1.0)*sj0*(x12481.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12480.value)), ((-1.0)*sj0*(x12481.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12482=IKsin(j4);
IkReal x12483=IKcos(j4);
IkReal x12484=(cj3*r10);
IkReal x12485=((1.0)*gconst11);
IkReal x12486=(sj1*sj2);
IkReal x12487=(gconst11*sj3);
IkReal x12488=(cj3*r11);
IkReal x12489=(cj2*sj1);
IkReal x12490=(gconst10*r20);
IkReal x12491=(gconst10*sj3);
IkReal x12492=((1.0)*cj0);
IkReal x12493=((1.0)*sj0);
IkReal x12494=(cj1*sj2);
IkReal x12495=(cj3*r21);
IkReal x12496=((1.0)*cj1*cj2);
IkReal x12497=(r20*x12483);
IkReal x12498=(gconst10*x12482);
IkReal x12499=(gconst10*x12483);
IkReal x12500=(r02*x12482);
IkReal x12501=((1.0)*x12483);
evalcond[0]=((((-1.0)*r02*x12501))+(((-1.0)*x12493)));
evalcond[1]=(((r21*x12498))+(((-1.0)*r20*x12482*x12485)));
evalcond[2]=(cj0+(((-1.0)*r10*x12482*x12485))+((r11*x12498)));
evalcond[3]=(((cj3*x12500))+((cj0*x12486))+(((-1.0)*cj1*cj2*x12492)));
evalcond[4]=((((-1.0)*sj3*x12500))+(((-1.0)*x12489*x12492))+(((-1.0)*x12492*x12494)));
evalcond[5]=((((-1.0)*cj3*x12485*x12497))+((x12495*x12499))+x12489+x12494+((r21*x12487))+((sj3*x12490)));
evalcond[6]=(((cj3*x12490))+((x12487*x12497))+((gconst11*x12495))+(((-1.0)*r21*x12491*x12501))+(((-1.0)*x12496))+x12486);
evalcond[7]=(((r10*x12491))+((x12488*x12499))+((r11*x12487))+((sj0*x12486))+(((-1.0)*x12483*x12484*x12485))+(((-1.0)*cj1*cj2*x12493)));
evalcond[8]=(((gconst10*x12484))+(((-1.0)*r11*x12491*x12501))+((r10*x12483*x12487))+(((-1.0)*x12489*x12493))+(((-1.0)*x12493*x12494))+((gconst11*x12488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12502=((-1.0)*r11);
CheckValue<IkReal> x12505 = IKatan2WithCheck(IkReal(x12502),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12505.valid){
continue;
}
IkReal x12503=((1.0)*(x12505.value));
IkReal x12504=x11828;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12503)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12503)));
IkReal gconst10=(x12502*x12504);
IkReal gconst11=((1.0)*r10*x12504);
IkReal x12506=r12*r12;
IkReal x12507=((1.0)*sj0);
IkReal x12508=(cj0*r02);
IkReal x12509=x11828;
j4eval[0]=((IKabs(((((-1.0)*r12*x12507))+(((-1.0)*x12508)))))+(IKabs(((((-1.0)*x12507*x12509))+((sj0*x12506*x12509))+((r12*x12508*x12509))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12510=((1.0)*r12);
IkReal x12511=(sj1*sj2);
IkReal x12512=((1.0)*r21);
IkReal x12513=(cj3*gconst11);
IkReal x12514=(r11*sj3);
IkReal x12515=(gconst11*r20);
IkReal x12516=((1.0)*sj3);
IkReal x12517=(cj1*cj2);
IkReal x12518=(gconst10*r21*sj3);
IkReal x12519=(cj3*gconst10*r20);
CheckValue<IkReal> x12520=IKPowWithIntegerCheck((((gconst10*x12514*x12515))+((gconst11*r10*x12518))+(((-1.0)*gconst11*r10*x12515*x12516))+(((-1.0)*x12512*x12514*(gconst10*gconst10)))),-1);
if(!x12520.valid){
continue;
}
CheckValue<IkReal> x12521=IKPowWithIntegerCheck(((((-1.0)*gconst10*sj3*x12512))+((sj3*x12515))),-1);
if(!x12521.valid){
continue;
}
if( IKabs(((x12520.value)*((((r12*x12517))+(((-1.0)*r21*x12510*x12513))+(((-1.0)*cj0*x12515*x12516))+(((-1.0)*x12510*x12511))+(((-1.0)*x12510*x12519))+((cj0*x12518)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12521.value)*(((((-1.0)*x12511))+(((-1.0)*x12519))+(((-1.0)*x12512*x12513))+x12517)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12520.value)*((((r12*x12517))+(((-1.0)*r21*x12510*x12513))+(((-1.0)*cj0*x12515*x12516))+(((-1.0)*x12510*x12511))+(((-1.0)*x12510*x12519))+((cj0*x12518))))))+IKsqr(((x12521.value)*(((((-1.0)*x12511))+(((-1.0)*x12519))+(((-1.0)*x12512*x12513))+x12517))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12520.value)*((((r12*x12517))+(((-1.0)*r21*x12510*x12513))+(((-1.0)*cj0*x12515*x12516))+(((-1.0)*x12510*x12511))+(((-1.0)*x12510*x12519))+((cj0*x12518))))), ((x12521.value)*(((((-1.0)*x12511))+(((-1.0)*x12519))+(((-1.0)*x12512*x12513))+x12517))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12522=IKsin(j4);
IkReal x12523=IKcos(j4);
IkReal x12524=(cj3*r10);
IkReal x12525=(gconst11*r20);
IkReal x12526=(gconst11*sj3);
IkReal x12527=(sj1*sj2);
IkReal x12528=(cj3*r11);
IkReal x12529=(r10*sj3);
IkReal x12530=(gconst10*r01);
IkReal x12531=(gconst10*sj3);
IkReal x12532=(cj2*sj1);
IkReal x12533=((1.0)*sj0);
IkReal x12534=(cj1*sj2);
IkReal x12535=(gconst10*r21);
IkReal x12536=(cj3*gconst10);
IkReal x12537=(cj3*gconst11);
IkReal x12538=((1.0)*cj0);
IkReal x12539=((1.0)*x12522);
IkReal x12540=((1.0)*cj1*cj2);
IkReal x12541=(gconst11*x12523);
IkReal x12542=(sj3*x12523);
IkReal x12543=(gconst10*x12522);
IkReal x12544=((1.0)*x12523);
IkReal x12545=(cj3*x12523);
IkReal x12546=(cj3*x12522);
evalcond[0]=((((-1.0)*x12525*x12539))+((x12522*x12535)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x12539))+((r11*x12543))+(((-1.0)*r12*x12544)));
evalcond[2]=((((-1.0)*gconst11*r00*x12539))+((x12522*x12530))+(((-1.0)*x12533))+(((-1.0)*r02*x12544)));
evalcond[3]=((((-1.0)*cj3*x12525*x12544))+((r20*x12531))+((r21*x12526))+((x12535*x12545))+x12534+x12532);
evalcond[4]=((((-1.0)*r21*x12531*x12544))+((r20*x12536))+((r21*x12537))+((x12525*x12542))+x12527+(((-1.0)*x12540)));
evalcond[5]=(((r00*x12531))+((x12530*x12545))+((cj0*x12527))+(((-1.0)*cj1*cj2*x12538))+(((-1.0)*r00*x12537*x12544))+((r02*x12546))+((r01*x12526)));
evalcond[6]=(((sj0*x12527))+((gconst10*x12523*x12528))+((r12*x12546))+(((-1.0)*x12524*x12541))+(((-1.0)*cj1*cj2*x12533))+((gconst10*x12529))+((r11*x12526)));
evalcond[7]=(((r00*x12536))+(((-1.0)*x12530*x12542))+(((-1.0)*x12534*x12538))+((r00*x12523*x12526))+(((-1.0)*x12532*x12538))+(((-1.0)*r02*sj3*x12539))+((r01*x12537)));
evalcond[8]=((((-1.0)*x12533*x12534))+((gconst11*x12528))+((gconst10*x12524))+(((-1.0)*r12*sj3*x12539))+(((-1.0)*x12532*x12533))+(((-1.0)*r11*x12531*x12544))+((r10*x12523*x12526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12547=((1.0)*sj0);
IkReal x12548=((1.0)*gconst10);
CheckValue<IkReal> x12549 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12547)))),IkReal(((((-1.0)*gconst10*r11*x12547))+(((-1.0)*cj0*r01*x12548))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12549.valid){
continue;
}
CheckValue<IkReal> x12550=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12548))+(((-1.0)*gconst11*r21)))),-1);
if(!x12550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12549.value)+(((1.5707963267949)*(x12550.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12551=IKsin(j4);
IkReal x12552=IKcos(j4);
IkReal x12553=(cj3*r10);
IkReal x12554=(gconst11*r20);
IkReal x12555=(gconst11*sj3);
IkReal x12556=(sj1*sj2);
IkReal x12557=(cj3*r11);
IkReal x12558=(r10*sj3);
IkReal x12559=(gconst10*r01);
IkReal x12560=(gconst10*sj3);
IkReal x12561=(cj2*sj1);
IkReal x12562=((1.0)*sj0);
IkReal x12563=(cj1*sj2);
IkReal x12564=(gconst10*r21);
IkReal x12565=(cj3*gconst10);
IkReal x12566=(cj3*gconst11);
IkReal x12567=((1.0)*cj0);
IkReal x12568=((1.0)*x12551);
IkReal x12569=((1.0)*cj1*cj2);
IkReal x12570=(gconst11*x12552);
IkReal x12571=(sj3*x12552);
IkReal x12572=(gconst10*x12551);
IkReal x12573=((1.0)*x12552);
IkReal x12574=(cj3*x12552);
IkReal x12575=(cj3*x12551);
evalcond[0]=((((-1.0)*x12554*x12568))+((x12551*x12564)));
evalcond[1]=((((-1.0)*gconst11*r10*x12568))+cj0+(((-1.0)*r12*x12573))+((r11*x12572)));
evalcond[2]=((((-1.0)*gconst11*r00*x12568))+((x12551*x12559))+(((-1.0)*r02*x12573))+(((-1.0)*x12562)));
evalcond[3]=(((r20*x12560))+(((-1.0)*cj3*x12554*x12573))+((r21*x12555))+x12563+x12561+((x12564*x12574)));
evalcond[4]=(((x12554*x12571))+((r20*x12565))+((r21*x12566))+(((-1.0)*r21*x12560*x12573))+x12556+(((-1.0)*x12569)));
evalcond[5]=(((r01*x12555))+((r02*x12575))+(((-1.0)*r00*x12566*x12573))+((r00*x12560))+((cj0*x12556))+(((-1.0)*cj1*cj2*x12567))+((x12559*x12574)));
evalcond[6]=(((gconst10*x12558))+(((-1.0)*x12553*x12570))+((sj0*x12556))+((r11*x12555))+((gconst10*x12552*x12557))+((r12*x12575))+(((-1.0)*cj1*cj2*x12562)));
evalcond[7]=(((r00*x12552*x12555))+(((-1.0)*x12561*x12567))+(((-1.0)*x12563*x12567))+((r01*x12566))+(((-1.0)*r02*sj3*x12568))+((r00*x12565))+(((-1.0)*x12559*x12571)));
evalcond[8]=((((-1.0)*x12561*x12562))+((gconst10*x12553))+((r10*x12552*x12555))+(((-1.0)*x12562*x12563))+((gconst11*x12557))+(((-1.0)*r11*x12560*x12573))+(((-1.0)*r12*sj3*x12568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12576=gconst10*gconst10;
IkReal x12577=r21*r21;
IkReal x12578=gconst11*gconst11;
IkReal x12579=r20*r20;
IkReal x12580=((1.0)*cj3);
IkReal x12581=(r20*sj3);
IkReal x12582=(gconst10*gconst11);
IkReal x12583=(cj2*sj1);
IkReal x12584=(gconst10*r21);
IkReal x12585=(cj1*sj2);
IkReal x12586=((1.0)*gconst11*r20);
CheckValue<IkReal> x12587 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((r22*x12583))+((r22*x12585))+((gconst10*r22*x12581)))),IkReal(((((-1.0)*r21*x12578*x12581))+((x12584*x12585))+((r21*x12576*x12581))+(((-1.0)*x12585*x12586))+((sj3*x12577*x12582))+(((-1.0)*sj3*x12579*x12582))+((x12583*x12584))+(((-1.0)*x12583*x12586)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12587.valid){
continue;
}
CheckValue<IkReal> x12588=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12576*x12577*x12580))+(((-1.0)*x12580*(r22*r22)))+(((-1.0)*x12578*x12579*x12580))+(((2.0)*cj3*r20*r21*x12582)))),-1);
if(!x12588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12587.value)+(((1.5707963267949)*(x12588.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12589=IKsin(j4);
IkReal x12590=IKcos(j4);
IkReal x12591=(cj3*r10);
IkReal x12592=(gconst11*r20);
IkReal x12593=(gconst11*sj3);
IkReal x12594=(sj1*sj2);
IkReal x12595=(gconst11*r00);
IkReal x12596=(cj3*r11);
IkReal x12597=(gconst10*sj3);
IkReal x12598=(cj2*sj1);
IkReal x12599=(cj3*r01);
IkReal x12600=((1.0)*sj0);
IkReal x12601=(cj1*sj2);
IkReal x12602=(cj3*r21);
IkReal x12603=(cj3*gconst10);
IkReal x12604=((1.0)*cj0);
IkReal x12605=((1.0)*x12590);
IkReal x12606=((1.0)*x12589);
IkReal x12607=((1.0)*cj1*cj2);
IkReal x12608=(cj3*x12589);
IkReal x12609=(gconst10*x12589);
IkReal x12610=(gconst10*x12590);
evalcond[0]=((((-1.0)*r22*x12605))+(((-1.0)*x12592*x12606))+((r21*x12609)));
evalcond[1]=(cj0+((r11*x12609))+(((-1.0)*gconst11*r10*x12606))+(((-1.0)*r12*x12605)));
evalcond[2]=((((-1.0)*x12595*x12606))+((r01*x12609))+(((-1.0)*x12600))+(((-1.0)*r02*x12605)));
evalcond[3]=(((r21*x12593))+((r22*x12608))+((x12602*x12610))+x12601+x12598+(((-1.0)*cj3*x12592*x12605))+((r20*x12597)));
evalcond[4]=(((r20*x12603))+(((-1.0)*r22*sj3*x12606))+((sj3*x12590*x12592))+(((-1.0)*x12607))+(((-1.0)*r21*x12597*x12605))+((gconst11*x12602))+x12594);
evalcond[5]=(((r01*x12593))+((cj0*x12594))+((r00*x12597))+((x12599*x12610))+(((-1.0)*cj3*x12595*x12605))+((r02*x12608))+(((-1.0)*cj1*cj2*x12604)));
evalcond[6]=((((-1.0)*gconst11*x12591*x12605))+((x12596*x12610))+((r12*x12608))+(((-1.0)*cj1*cj2*x12600))+((sj0*x12594))+((r11*x12593))+((r10*x12597)));
evalcond[7]=(((r00*x12590*x12593))+((r00*x12603))+((gconst11*x12599))+(((-1.0)*r02*sj3*x12606))+(((-1.0)*r01*x12597*x12605))+(((-1.0)*x12601*x12604))+(((-1.0)*x12598*x12604)));
evalcond[8]=(((gconst11*x12596))+(((-1.0)*x12600*x12601))+(((-1.0)*x12598*x12600))+((gconst10*x12591))+((r10*x12590*x12593))+(((-1.0)*r12*sj3*x12606))+(((-1.0)*r11*x12597*x12605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12611=((1.0)*sj0);
IkReal x12612=((1.0)*gconst10);
CheckValue<IkReal> x12613 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12611))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12612))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*gconst10*r11*x12611)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12613.valid){
continue;
}
CheckValue<IkReal> x12614=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12612))+(((-1.0)*gconst11*r21)))),-1);
if(!x12614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12613.value)+(((1.5707963267949)*(x12614.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12615=IKsin(j4);
IkReal x12616=IKcos(j4);
IkReal x12617=(cj3*r10);
IkReal x12618=(gconst11*r20);
IkReal x12619=(gconst11*sj3);
IkReal x12620=(sj1*sj2);
IkReal x12621=(gconst11*r00);
IkReal x12622=(cj3*r11);
IkReal x12623=(gconst10*sj3);
IkReal x12624=(cj2*sj1);
IkReal x12625=(cj3*r01);
IkReal x12626=((1.0)*sj0);
IkReal x12627=(cj1*sj2);
IkReal x12628=(cj3*r21);
IkReal x12629=(cj3*gconst10);
IkReal x12630=((1.0)*cj0);
IkReal x12631=((1.0)*x12616);
IkReal x12632=((1.0)*x12615);
IkReal x12633=((1.0)*cj1*cj2);
IkReal x12634=(cj3*x12615);
IkReal x12635=(gconst10*x12615);
IkReal x12636=(gconst10*x12616);
evalcond[0]=((((-1.0)*x12618*x12632))+(((-1.0)*r22*x12631))+((r21*x12635)));
evalcond[1]=(((r11*x12635))+cj0+(((-1.0)*gconst11*r10*x12632))+(((-1.0)*r12*x12631)));
evalcond[2]=((((-1.0)*x12626))+((r01*x12635))+(((-1.0)*r02*x12631))+(((-1.0)*x12621*x12632)));
evalcond[3]=(((x12628*x12636))+((r21*x12619))+x12624+x12627+((r22*x12634))+((r20*x12623))+(((-1.0)*cj3*x12618*x12631)));
evalcond[4]=(((gconst11*x12628))+((sj3*x12616*x12618))+(((-1.0)*r21*x12623*x12631))+(((-1.0)*x12633))+x12620+((r20*x12629))+(((-1.0)*r22*sj3*x12632)));
evalcond[5]=((((-1.0)*cj3*x12621*x12631))+((x12625*x12636))+(((-1.0)*cj1*cj2*x12630))+((r02*x12634))+((r00*x12623))+((cj0*x12620))+((r01*x12619)));
evalcond[6]=(((r12*x12634))+((sj0*x12620))+((x12622*x12636))+(((-1.0)*cj1*cj2*x12626))+((r11*x12619))+(((-1.0)*gconst11*x12617*x12631))+((r10*x12623)));
evalcond[7]=((((-1.0)*r02*sj3*x12632))+((gconst11*x12625))+(((-1.0)*x12627*x12630))+((r00*x12616*x12619))+((r00*x12629))+(((-1.0)*r01*x12623*x12631))+(((-1.0)*x12624*x12630)));
evalcond[8]=((((-1.0)*r11*x12623*x12631))+((gconst11*x12622))+((gconst10*x12617))+(((-1.0)*r12*sj3*x12632))+((r10*x12616*x12619))+(((-1.0)*x12626*x12627))+(((-1.0)*x12624*x12626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12637=((1.0)*gconst11);
CheckValue<IkReal> x12638=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12637)))),-1);
if(!x12638.valid){
continue;
}
CheckValue<IkReal> x12639 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12637))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12638.value)))+(x12639.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12640=IKsin(j4);
IkReal x12641=IKcos(j4);
IkReal x12642=(cj3*r10);
IkReal x12643=(gconst11*r20);
IkReal x12644=(gconst11*sj3);
IkReal x12645=(sj1*sj2);
IkReal x12646=(gconst11*r00);
IkReal x12647=(cj3*r11);
IkReal x12648=(gconst10*sj3);
IkReal x12649=(cj2*sj1);
IkReal x12650=(cj3*r01);
IkReal x12651=((1.0)*sj0);
IkReal x12652=(cj1*sj2);
IkReal x12653=(cj3*r21);
IkReal x12654=(cj3*gconst10);
IkReal x12655=((1.0)*cj0);
IkReal x12656=((1.0)*x12641);
IkReal x12657=((1.0)*x12640);
IkReal x12658=((1.0)*cj1*cj2);
IkReal x12659=(cj3*x12640);
IkReal x12660=(gconst10*x12640);
IkReal x12661=(gconst10*x12641);
evalcond[0]=(((r21*x12660))+(((-1.0)*x12643*x12657))+(((-1.0)*r22*x12656)));
evalcond[1]=(cj0+(((-1.0)*r12*x12656))+((r11*x12660))+(((-1.0)*gconst11*r10*x12657)));
evalcond[2]=((((-1.0)*x12651))+(((-1.0)*x12646*x12657))+(((-1.0)*r02*x12656))+((r01*x12660)));
evalcond[3]=(((r22*x12659))+((r20*x12648))+(((-1.0)*cj3*x12643*x12656))+x12649+x12652+((r21*x12644))+((x12653*x12661)));
evalcond[4]=((((-1.0)*x12658))+((sj3*x12641*x12643))+(((-1.0)*r21*x12648*x12656))+((gconst11*x12653))+(((-1.0)*r22*sj3*x12657))+x12645+((r20*x12654)));
evalcond[5]=((((-1.0)*cj3*x12646*x12656))+((r02*x12659))+((r00*x12648))+((r01*x12644))+((cj0*x12645))+((x12650*x12661))+(((-1.0)*cj1*cj2*x12655)));
evalcond[6]=((((-1.0)*gconst11*x12642*x12656))+((x12647*x12661))+((r12*x12659))+((sj0*x12645))+((r10*x12648))+(((-1.0)*cj1*cj2*x12651))+((r11*x12644)));
evalcond[7]=((((-1.0)*x12652*x12655))+((r00*x12641*x12644))+(((-1.0)*r02*sj3*x12657))+(((-1.0)*x12649*x12655))+((gconst11*x12650))+(((-1.0)*r01*x12648*x12656))+((r00*x12654)));
evalcond[8]=((((-1.0)*x12649*x12651))+(((-1.0)*r11*x12648*x12656))+(((-1.0)*x12651*x12652))+((r10*x12641*x12644))+((gconst10*x12642))+(((-1.0)*r12*sj3*x12657))+((gconst11*x12647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12662=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12662;
j4eval[1]=IKsign(x12662);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12663=((1.0)*cj5);
IkReal x12664=((((-1.0)*r01*x12663))+(((-1.0)*r00*sj5)));
j4eval[0]=x12664;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12663))))));
j4eval[2]=IKsign(x12664);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12665=cj5*cj5;
IkReal x12666=(cj3*r21);
IkReal x12667=(cj5*sj5);
IkReal x12668=((1.0)*cj3);
IkReal x12669=((((-1.0)*r10*r20*x12665*x12668))+((cj3*r11*r20*x12667))+(((-1.0)*r12*r22*x12668))+((r10*x12666*x12667))+(((-1.0)*r11*x12666))+((r11*x12665*x12666)));
j4eval[0]=x12669;
j4eval[1]=IKsign(x12669);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12670=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12670;
j4eval[1]=IKsign(x12670);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12671=((1.0)*cj5);
IkReal x12672=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12671)));
j4eval[0]=x12672;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12671)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12672);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12673=cj5*cj5;
IkReal x12674=r11*r11;
IkReal x12675=(r11*sj5);
IkReal x12676=(cj5*r10);
IkReal x12677=((r12*r12)+(((-2.0)*x12675*x12676))+((x12673*(r10*r10)))+x12674+(((-1.0)*x12673*x12674)));
j4eval[0]=x12677;
j4eval[1]=IKsign(x12677);
j4eval[2]=((IKabs(((((-1.0)*x12675))+x12676)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12678=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12678);
rxp1_1=(px*r21);
rxp1_2=(r11*x12678);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12679=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12679);
rxp1_1=(px*r21);
rxp1_2=(r11*x12679);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12680=((1.0)*sj1);
CheckValue<IkReal> x12681=IKPowWithIntegerCheck(r02,-1);
if(!x12681.valid){
continue;
}
CheckValue<IkReal> x12682=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12682.valid){
continue;
}
if( IKabs(((x12681.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12680)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12682.value)*((((cj1*cj2))+(((-1.0)*sj2*x12680)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12681.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12680))))))+IKsqr(((x12682.value)*((((cj1*cj2))+(((-1.0)*sj2*x12680))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12681.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12680))))), ((x12682.value)*((((cj1*cj2))+(((-1.0)*sj2*x12680))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12683=IKsin(j4);
IkReal x12684=IKcos(j4);
IkReal x12685=(cj5*r20);
IkReal x12686=((1.0)*cj2);
IkReal x12687=(cj5*r10);
IkReal x12688=((1.0)*x12683);
IkReal x12689=(sj5*x12683);
IkReal x12690=((1.0)*sj5*x12684);
evalcond[0]=((-1.0)*r02*x12684);
evalcond[1]=(((r21*x12689))+(((-1.0)*x12685*x12688)));
evalcond[2]=((((-1.0)*r11*x12690))+((x12684*x12687)));
evalcond[3]=((1.0)+(((-1.0)*x12687*x12688))+((r11*x12689)));
evalcond[4]=((((-1.0)*sj1*x12686))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12688)));
evalcond[5]=((((-1.0)*cj1*x12686))+((x12684*x12685))+((sj1*sj2))+(((-1.0)*r21*x12690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12691=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12691.valid){
continue;
}
CheckValue<IkReal> x12692=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12692.valid){
continue;
}
if( IKabs(((-1.0)*(x12691.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12692.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12691.value)))+IKsqr(((x12692.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12691.value)), ((x12692.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12693=IKsin(j4);
IkReal x12694=IKcos(j4);
IkReal x12695=(cj5*r20);
IkReal x12696=((1.0)*cj2);
IkReal x12697=(cj5*r10);
IkReal x12698=((1.0)*x12693);
IkReal x12699=(sj5*x12693);
IkReal x12700=((1.0)*sj5*x12694);
evalcond[0]=((-1.0)*r02*x12694);
evalcond[1]=(((r21*x12699))+(((-1.0)*x12695*x12698)));
evalcond[2]=((((-1.0)*r11*x12700))+((x12694*x12697)));
evalcond[3]=((1.0)+((r11*x12699))+(((-1.0)*x12697*x12698)));
evalcond[4]=((((-1.0)*r02*x12698))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12696)));
evalcond[5]=((((-1.0)*cj1*x12696))+((x12694*x12695))+((sj1*sj2))+(((-1.0)*r21*x12700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12701=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12701);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12701);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12702=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12702);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12702);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12703=IKPowWithIntegerCheck(r22,-1);
if(!x12703.valid){
continue;
}
CheckValue<IkReal> x12704=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12704.valid){
continue;
}
if( IKabs(((x12703.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12704.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12703.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12704.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12703.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12704.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12705=IKsin(j4);
IkReal x12706=IKcos(j4);
IkReal x12707=((1.0)*cj2);
IkReal x12708=(cj5*x12706);
IkReal x12709=(sj5*x12705);
IkReal x12710=((1.0)*sj5*x12706);
IkReal x12711=((1.0)*cj5*x12705);
evalcond[0]=((-1.0)*r22*x12706);
evalcond[1]=((((-1.0)*r00*x12711))+((r01*x12709)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*cj1*x12707))+(((-1.0)*r22*x12705)));
evalcond[3]=(((r10*x12708))+(((-1.0)*r11*x12710)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12711))+((r11*x12709)));
evalcond[5]=((((-1.0)*sj1*x12707))+(((-1.0)*cj1*sj2))+((r00*x12708))+(((-1.0)*r01*x12710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12712=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12712.valid){
continue;
}
CheckValue<IkReal> x12713=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12713.valid){
continue;
}
if( IKabs(((-1.0)*(x12712.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12713.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12712.value)))+IKsqr(((x12713.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12712.value)), ((x12713.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12714=IKsin(j4);
IkReal x12715=IKcos(j4);
IkReal x12716=((1.0)*cj2);
IkReal x12717=(cj5*x12715);
IkReal x12718=(sj5*x12714);
IkReal x12719=((1.0)*sj5*x12715);
IkReal x12720=((1.0)*cj5*x12714);
evalcond[0]=((-1.0)*r22*x12715);
evalcond[1]=((((-1.0)*r00*x12720))+((r01*x12718)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12714))+(((-1.0)*cj1*x12716)));
evalcond[3]=(((r10*x12717))+(((-1.0)*r11*x12719)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12720))+((r11*x12718)));
evalcond[5]=((((-1.0)*sj1*x12716))+(((-1.0)*cj1*sj2))+((r00*x12717))+(((-1.0)*r01*x12719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12721=cj5*cj5;
IkReal x12722=r11*r11;
IkReal x12723=(cj5*r10);
IkReal x12724=(r11*sj5);
CheckValue<IkReal> x12725=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x12723*x12724))+(((-1.0)*x12721*x12722))+x12722+((x12721*(r10*r10))))),-1);
if(!x12725.valid){
continue;
}
CheckValue<IkReal> x12726 = IKatan2WithCheck(IkReal(((((-1.0)*x12724))+x12723)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12725.value)))+(x12726.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12727=IKsin(j4);
IkReal x12728=IKcos(j4);
IkReal x12729=(cj5*r10);
IkReal x12730=(r01*sj5);
IkReal x12731=((1.0)*cj2);
IkReal x12732=(cj5*r00);
IkReal x12733=(cj5*r20);
IkReal x12734=((1.0)*x12728);
IkReal x12735=((1.0)*x12727);
IkReal x12736=(sj5*x12727);
evalcond[0]=(((r21*x12736))+(((-1.0)*r22*x12734))+(((-1.0)*x12733*x12735)));
evalcond[1]=(((x12727*x12730))+(((-1.0)*r02*x12734))+(((-1.0)*x12732*x12735)));
evalcond[2]=(((x12728*x12729))+(((-1.0)*r11*sj5*x12734))+(((-1.0)*r12*x12735)));
evalcond[3]=((1.0)+((r11*x12736))+(((-1.0)*x12729*x12735))+(((-1.0)*r12*x12734)));
evalcond[4]=((((-1.0)*r22*x12735))+((x12728*x12733))+((sj1*sj2))+(((-1.0)*r21*sj5*x12734))+(((-1.0)*cj1*x12731)));
evalcond[5]=((((-1.0)*sj1*x12731))+(((-1.0)*r02*x12735))+((x12728*x12732))+(((-1.0)*cj1*sj2))+(((-1.0)*x12730*x12734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12737=((1.0)*cj5);
CheckValue<IkReal> x12738 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12737)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12738.valid){
continue;
}
CheckValue<IkReal> x12739=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12737))+(((-1.0)*r00*sj5)))),-1);
if(!x12739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12738.value)+(((1.5707963267949)*(x12739.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12740=IKsin(j4);
IkReal x12741=IKcos(j4);
IkReal x12742=(cj5*r10);
IkReal x12743=(r01*sj5);
IkReal x12744=((1.0)*cj2);
IkReal x12745=(cj5*r00);
IkReal x12746=(cj5*r20);
IkReal x12747=((1.0)*x12741);
IkReal x12748=((1.0)*x12740);
IkReal x12749=(sj5*x12740);
evalcond[0]=((((-1.0)*r22*x12747))+(((-1.0)*x12746*x12748))+((r21*x12749)));
evalcond[1]=((((-1.0)*r02*x12747))+(((-1.0)*x12745*x12748))+((x12740*x12743)));
evalcond[2]=((((-1.0)*r12*x12748))+(((-1.0)*r11*sj5*x12747))+((x12741*x12742)));
evalcond[3]=((1.0)+((r11*x12749))+(((-1.0)*r12*x12747))+(((-1.0)*x12742*x12748)));
evalcond[4]=((((-1.0)*r21*sj5*x12747))+((sj1*sj2))+(((-1.0)*r22*x12748))+((x12741*x12746))+(((-1.0)*cj1*x12744)));
evalcond[5]=((((-1.0)*r02*x12748))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12744))+(((-1.0)*x12743*x12747))+((x12741*x12745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12750=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12750.valid){
continue;
}
CheckValue<IkReal> x12751 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12750.value)))+(x12751.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12752=IKsin(j4);
IkReal x12753=IKcos(j4);
IkReal x12754=(cj5*r10);
IkReal x12755=(r01*sj5);
IkReal x12756=((1.0)*cj2);
IkReal x12757=(cj5*r00);
IkReal x12758=(cj5*r20);
IkReal x12759=((1.0)*x12753);
IkReal x12760=((1.0)*x12752);
IkReal x12761=(sj5*x12752);
evalcond[0]=(((r21*x12761))+(((-1.0)*r22*x12759))+(((-1.0)*x12758*x12760)));
evalcond[1]=((((-1.0)*r02*x12759))+(((-1.0)*x12757*x12760))+((x12752*x12755)));
evalcond[2]=((((-1.0)*r12*x12760))+((x12753*x12754))+(((-1.0)*r11*sj5*x12759)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12759))+(((-1.0)*x12754*x12760))+((r11*x12761)));
evalcond[4]=((((-1.0)*r22*x12760))+(((-1.0)*r21*sj5*x12759))+((sj1*sj2))+((x12753*x12758))+(((-1.0)*cj1*x12756)));
evalcond[5]=((((-1.0)*sj1*x12756))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12760))+((x12753*x12757))+(((-1.0)*x12755*x12759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12762=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12762;
j4eval[1]=IKsign(x12762);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12763=((1.0)*cj5);
IkReal x12764=((((-1.0)*r01*x12763))+(((-1.0)*r00*sj5)));
j4eval[0]=x12764;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12763))+((r21*sj5))))));
j4eval[2]=IKsign(x12764);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12765=(sj1*sj2);
IkReal x12766=(cj5*r10);
IkReal x12767=(r11*sj5);
IkReal x12768=(cj1*cj2);
IkReal x12769=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12769;
j4eval[1]=((IKabs(((((-1.0)*x12767*x12768))+(((-1.0)*x12765*x12766))+((x12765*x12767))+((x12766*x12768)))))+(IKabs((((r12*x12768))+(((-1.0)*r12*x12765))))));
j4eval[2]=IKsign(x12769);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12770=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12770);
rxp1_1=(px*r21);
rxp1_2=(r11*x12770);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12771=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12771);
rxp1_1=(px*r21);
rxp1_2=(r11*x12771);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12772=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x12772)));
j4eval[1]=((((-1.0)*r20*x12772))+((r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12773=((1.0)*cj5);
CheckValue<IkReal> x12774=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12773))),-1);
if(!x12774.valid){
continue;
}
CheckValue<IkReal> x12775=IKPowWithIntegerCheck(((((-1.0)*r20*x12773))+((r21*sj5))),-1);
if(!x12775.valid){
continue;
}
if( IKabs(((-1.0)*(x12774.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12775.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12774.value)))+IKsqr(((x12775.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12774.value)), ((x12775.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12776=IKsin(j4);
IkReal x12777=IKcos(j4);
IkReal x12778=((1.0)*cj2);
IkReal x12779=(r21*sj5);
IkReal x12780=(r11*sj5);
IkReal x12781=((1.0)*cj5*x12776);
IkReal x12782=((1.0)*cj5*x12777);
evalcond[0]=((-1.0)*r02*x12777);
evalcond[1]=((((-1.0)*r20*x12781))+((x12776*x12779)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12778))+((r02*x12776)));
evalcond[3]=(((x12777*x12780))+(((-1.0)*r10*x12782)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12781))+((x12776*x12780)));
evalcond[5]=((((-1.0)*cj1*x12778))+((sj1*sj2))+(((-1.0)*r20*x12782))+((x12777*x12779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12783=IKPowWithIntegerCheck(r02,-1);
if(!x12783.valid){
continue;
}
CheckValue<IkReal> x12784=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12784.valid){
continue;
}
if( IKabs(((x12783.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12784.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12783.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12784.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12783.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12784.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12785=IKsin(j4);
IkReal x12786=IKcos(j4);
IkReal x12787=((1.0)*cj2);
IkReal x12788=(r21*sj5);
IkReal x12789=(r11*sj5);
IkReal x12790=((1.0)*cj5*x12785);
IkReal x12791=((1.0)*cj5*x12786);
evalcond[0]=((-1.0)*r02*x12786);
evalcond[1]=((((-1.0)*r20*x12790))+((x12785*x12788)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12787))+((r02*x12785)));
evalcond[3]=(((x12786*x12789))+(((-1.0)*r10*x12791)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12790))+((x12785*x12789)));
evalcond[5]=(((x12786*x12788))+(((-1.0)*r20*x12791))+((sj1*sj2))+(((-1.0)*cj1*x12787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12792=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12792;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12792);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12793=((1.0)*cj5);
IkReal x12794=((((-1.0)*r21*x12793))+(((-1.0)*r20*sj5)));
j4eval[0]=x12794;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12793))+((r11*sj5))))));
j4eval[2]=IKsign(x12794);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12795=cj5*cj5;
IkReal x12796=(r11*r21);
IkReal x12797=((1.0)*r20);
IkReal x12798=(cj5*sj5);
IkReal x12799=(((x12795*x12796))+(((-1.0)*r12*r22))+((r10*r21*x12798))+(((-1.0)*r10*x12795*x12797))+(((-1.0)*x12796))+((r11*r20*x12798)));
j4eval[0]=x12799;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12797))))));
j4eval[2]=IKsign(x12799);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12800=cj5*cj5;
IkReal x12801=(r21*sj5);
IkReal x12802=(r11*r21);
IkReal x12803=((1.0)*r20);
CheckValue<IkReal> x12804=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12800*x12803))+((x12800*x12802))+(((-1.0)*r12*r22))+(((-1.0)*x12802))+((cj5*r10*x12801))+((cj5*r11*r20*sj5)))),-1);
if(!x12804.valid){
continue;
}
CheckValue<IkReal> x12805 = IKatan2WithCheck(IkReal((x12801+(((-1.0)*cj5*x12803)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12804.value)))+(x12805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12806=IKcos(j4);
IkReal x12807=IKsin(j4);
IkReal x12808=(cj5*r00);
IkReal x12809=(cj5*r20);
IkReal x12810=(cj5*r10);
IkReal x12811=((1.0)*x12806);
IkReal x12812=((1.0)*x12807);
IkReal x12813=(sj5*x12806);
IkReal x12814=(sj5*x12807);
evalcond[0]=((((-1.0)*x12809*x12811))+((r21*x12813))+((r22*x12807)));
evalcond[1]=((((-1.0)*x12810*x12811))+((r12*x12807))+((r11*x12813)));
evalcond[2]=((((-1.0)*x12809*x12812))+((r21*x12814))+(((-1.0)*r22*x12811)));
evalcond[3]=((((-1.0)*r02*x12811))+((r01*x12814))+(((-1.0)*x12808*x12812)));
evalcond[4]=((-1.0)+((r02*x12807))+((r01*x12813))+(((-1.0)*x12808*x12811)));
evalcond[5]=((1.0)+(((-1.0)*x12810*x12812))+(((-1.0)*r12*x12811))+((r11*x12814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12815=((1.0)*cj5);
CheckValue<IkReal> x12816=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12815))+(((-1.0)*r20*sj5)))),-1);
if(!x12816.valid){
continue;
}
CheckValue<IkReal> x12817 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12815))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12816.value)))+(x12817.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12818=IKcos(j4);
IkReal x12819=IKsin(j4);
IkReal x12820=(cj5*r00);
IkReal x12821=(cj5*r20);
IkReal x12822=(cj5*r10);
IkReal x12823=((1.0)*x12818);
IkReal x12824=((1.0)*x12819);
IkReal x12825=(sj5*x12818);
IkReal x12826=(sj5*x12819);
evalcond[0]=(((r21*x12825))+(((-1.0)*x12821*x12823))+((r22*x12819)));
evalcond[1]=((((-1.0)*x12822*x12823))+((r12*x12819))+((r11*x12825)));
evalcond[2]=((((-1.0)*r22*x12823))+((r21*x12826))+(((-1.0)*x12821*x12824)));
evalcond[3]=((((-1.0)*r02*x12823))+((r01*x12826))+(((-1.0)*x12820*x12824)));
evalcond[4]=((-1.0)+((r01*x12825))+((r02*x12819))+(((-1.0)*x12820*x12823)));
evalcond[5]=((1.0)+(((-1.0)*x12822*x12824))+(((-1.0)*r12*x12823))+((r11*x12826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12827 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12827.valid){
continue;
}
CheckValue<IkReal> x12828=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12827.value)+(((1.5707963267949)*(x12828.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12829=IKcos(j4);
IkReal x12830=IKsin(j4);
IkReal x12831=(cj5*r00);
IkReal x12832=(cj5*r20);
IkReal x12833=(cj5*r10);
IkReal x12834=((1.0)*x12829);
IkReal x12835=((1.0)*x12830);
IkReal x12836=(sj5*x12829);
IkReal x12837=(sj5*x12830);
evalcond[0]=(((r21*x12836))+(((-1.0)*x12832*x12834))+((r22*x12830)));
evalcond[1]=((((-1.0)*x12833*x12834))+((r12*x12830))+((r11*x12836)));
evalcond[2]=(((r21*x12837))+(((-1.0)*x12832*x12835))+(((-1.0)*r22*x12834)));
evalcond[3]=((((-1.0)*r02*x12834))+((r01*x12837))+(((-1.0)*x12831*x12835)));
evalcond[4]=((-1.0)+((r02*x12830))+((r01*x12836))+(((-1.0)*x12831*x12834)));
evalcond[5]=((1.0)+(((-1.0)*x12833*x12835))+((r11*x12837))+(((-1.0)*r12*x12834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12838=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12838;
j4eval[1]=IKsign(x12838);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12839=((1.0)*cj5);
IkReal x12840=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12839)));
j4eval[0]=x12840;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12839))))));
j4eval[2]=IKsign(x12840);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12841=cj5*cj5;
IkReal x12842=(r11*r21);
IkReal x12843=((1.0)*r20);
IkReal x12844=(cj5*sj5);
IkReal x12845=(((r11*r20*x12844))+((x12841*x12842))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12841*x12843))+(((-1.0)*x12842))+((r10*r21*x12844)));
j4eval[0]=x12845;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12843)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12845);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12846=cj5*cj5;
IkReal x12847=(r21*sj5);
IkReal x12848=(r11*r21);
IkReal x12849=((1.0)*r20);
CheckValue<IkReal> x12850 = IKatan2WithCheck(IkReal((x12847+(((-1.0)*cj5*x12849)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12850.valid){
continue;
}
CheckValue<IkReal> x12851=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x12846*x12848))+(((-1.0)*x12848))+(((-1.0)*r10*x12846*x12849))+((cj5*r10*x12847))+((cj5*r11*r20*sj5)))),-1);
if(!x12851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12850.value)+(((1.5707963267949)*(x12851.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12852=IKcos(j4);
IkReal x12853=IKsin(j4);
IkReal x12854=(cj5*r00);
IkReal x12855=(cj5*r20);
IkReal x12856=(cj5*r10);
IkReal x12857=((1.0)*x12852);
IkReal x12858=((1.0)*x12853);
IkReal x12859=(sj5*x12852);
IkReal x12860=(sj5*x12853);
evalcond[0]=(((r22*x12853))+(((-1.0)*x12855*x12857))+((r21*x12859)));
evalcond[1]=((((-1.0)*x12856*x12857))+((r11*x12859))+((r12*x12853)));
evalcond[2]=((((-1.0)*r22*x12857))+((r21*x12860))+(((-1.0)*x12855*x12858)));
evalcond[3]=((((-1.0)*x12854*x12858))+(((-1.0)*r02*x12857))+((r01*x12860)));
evalcond[4]=((1.0)+(((-1.0)*x12854*x12857))+((r01*x12859))+((r02*x12853)));
evalcond[5]=((1.0)+((r11*x12860))+(((-1.0)*x12856*x12858))+(((-1.0)*r12*x12857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12861=((1.0)*cj5);
CheckValue<IkReal> x12862 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12861)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12862.valid){
continue;
}
CheckValue<IkReal> x12863=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12861)))),-1);
if(!x12863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12862.value)+(((1.5707963267949)*(x12863.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12864=IKcos(j4);
IkReal x12865=IKsin(j4);
IkReal x12866=(cj5*r00);
IkReal x12867=(cj5*r20);
IkReal x12868=(cj5*r10);
IkReal x12869=((1.0)*x12864);
IkReal x12870=((1.0)*x12865);
IkReal x12871=(sj5*x12864);
IkReal x12872=(sj5*x12865);
evalcond[0]=((((-1.0)*x12867*x12869))+((r21*x12871))+((r22*x12865)));
evalcond[1]=(((r12*x12865))+((r11*x12871))+(((-1.0)*x12868*x12869)));
evalcond[2]=((((-1.0)*x12867*x12870))+(((-1.0)*r22*x12869))+((r21*x12872)));
evalcond[3]=((((-1.0)*x12866*x12870))+((r01*x12872))+(((-1.0)*r02*x12869)));
evalcond[4]=((1.0)+((r01*x12871))+(((-1.0)*x12866*x12869))+((r02*x12865)));
evalcond[5]=((1.0)+(((-1.0)*x12868*x12870))+((r11*x12872))+(((-1.0)*r12*x12869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12873=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12873.valid){
continue;
}
CheckValue<IkReal> x12874 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12873.value)))+(x12874.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12875=IKcos(j4);
IkReal x12876=IKsin(j4);
IkReal x12877=(cj5*r00);
IkReal x12878=(cj5*r20);
IkReal x12879=(cj5*r10);
IkReal x12880=((1.0)*x12875);
IkReal x12881=((1.0)*x12876);
IkReal x12882=(sj5*x12875);
IkReal x12883=(sj5*x12876);
evalcond[0]=(((r22*x12876))+(((-1.0)*x12878*x12880))+((r21*x12882)));
evalcond[1]=((((-1.0)*x12879*x12880))+((r12*x12876))+((r11*x12882)));
evalcond[2]=((((-1.0)*r22*x12880))+(((-1.0)*x12878*x12881))+((r21*x12883)));
evalcond[3]=((((-1.0)*r02*x12880))+(((-1.0)*x12877*x12881))+((r01*x12883)));
evalcond[4]=((1.0)+(((-1.0)*x12877*x12880))+((r01*x12882))+((r02*x12876)));
evalcond[5]=((1.0)+(((-1.0)*x12879*x12881))+(((-1.0)*r12*x12880))+((r11*x12883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12884=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12884;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12884);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12885=((1.0)*cj5);
IkReal x12886=((((-1.0)*r21*x12885))+(((-1.0)*r20*sj5)));
j4eval[0]=x12886;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12885))))));
j4eval[2]=IKsign(x12886);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12887=cj5*cj5;
IkReal x12888=(r11*r21);
IkReal x12889=((1.0)*r20);
IkReal x12890=(cj5*sj5);
IkReal x12891=(((x12887*x12888))+(((-1.0)*x12888))+(((-1.0)*r12*r22))+((r11*r20*x12890))+((r10*r21*x12890))+(((-1.0)*r10*x12887*x12889)));
j4eval[0]=x12891;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12889))))));
j4eval[2]=IKsign(x12891);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12892=cj5*cj5;
IkReal x12893=(r21*sj5);
IkReal x12894=(r11*r21);
IkReal x12895=((1.0)*r20);
CheckValue<IkReal> x12896=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12894))+((cj5*r10*x12893))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12892*x12895))+((cj5*r11*r20*sj5))+((x12892*x12894)))),-1);
if(!x12896.valid){
continue;
}
CheckValue<IkReal> x12897 = IKatan2WithCheck(IkReal((x12893+(((-1.0)*cj5*x12895)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12896.value)))+(x12897.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12898=IKcos(j4);
IkReal x12899=IKsin(j4);
IkReal x12900=(cj5*r00);
IkReal x12901=(cj5*r20);
IkReal x12902=(cj5*r10);
IkReal x12903=((1.0)*x12898);
IkReal x12904=((1.0)*x12899);
IkReal x12905=(sj5*x12898);
IkReal x12906=(sj5*x12899);
evalcond[0]=(((r22*x12899))+(((-1.0)*x12901*x12903))+((r21*x12905)));
evalcond[1]=(((r12*x12899))+(((-1.0)*x12902*x12903))+((r11*x12905)));
evalcond[2]=((((-1.0)*x12901*x12904))+((r21*x12906))+(((-1.0)*r22*x12903)));
evalcond[3]=(((r01*x12906))+(((-1.0)*r02*x12903))+(((-1.0)*x12900*x12904)));
evalcond[4]=((-1.0)+((r01*x12905))+((r02*x12899))+(((-1.0)*x12900*x12903)));
evalcond[5]=((1.0)+(((-1.0)*x12902*x12904))+(((-1.0)*r12*x12903))+((r11*x12906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12907=((1.0)*cj5);
CheckValue<IkReal> x12908=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12907))+(((-1.0)*r20*sj5)))),-1);
if(!x12908.valid){
continue;
}
CheckValue<IkReal> x12909 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12907))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12908.value)))+(x12909.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12910=IKcos(j4);
IkReal x12911=IKsin(j4);
IkReal x12912=(cj5*r00);
IkReal x12913=(cj5*r20);
IkReal x12914=(cj5*r10);
IkReal x12915=((1.0)*x12910);
IkReal x12916=((1.0)*x12911);
IkReal x12917=(sj5*x12910);
IkReal x12918=(sj5*x12911);
evalcond[0]=(((r21*x12917))+(((-1.0)*x12913*x12915))+((r22*x12911)));
evalcond[1]=((((-1.0)*x12914*x12915))+((r12*x12911))+((r11*x12917)));
evalcond[2]=(((r21*x12918))+(((-1.0)*r22*x12915))+(((-1.0)*x12913*x12916)));
evalcond[3]=((((-1.0)*r02*x12915))+(((-1.0)*x12912*x12916))+((r01*x12918)));
evalcond[4]=((-1.0)+((r02*x12911))+(((-1.0)*x12912*x12915))+((r01*x12917)));
evalcond[5]=((1.0)+(((-1.0)*x12914*x12916))+(((-1.0)*r12*x12915))+((r11*x12918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12919 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12919.valid){
continue;
}
CheckValue<IkReal> x12920=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12919.value)+(((1.5707963267949)*(x12920.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12921=IKcos(j4);
IkReal x12922=IKsin(j4);
IkReal x12923=(cj5*r00);
IkReal x12924=(cj5*r20);
IkReal x12925=(cj5*r10);
IkReal x12926=((1.0)*x12921);
IkReal x12927=((1.0)*x12922);
IkReal x12928=(sj5*x12921);
IkReal x12929=(sj5*x12922);
evalcond[0]=(((r21*x12928))+((r22*x12922))+(((-1.0)*x12924*x12926)));
evalcond[1]=(((r11*x12928))+(((-1.0)*x12925*x12926))+((r12*x12922)));
evalcond[2]=(((r21*x12929))+(((-1.0)*r22*x12926))+(((-1.0)*x12924*x12927)));
evalcond[3]=((((-1.0)*r02*x12926))+((r01*x12929))+(((-1.0)*x12923*x12927)));
evalcond[4]=((-1.0)+((r02*x12922))+((r01*x12928))+(((-1.0)*x12923*x12926)));
evalcond[5]=((1.0)+((r11*x12929))+(((-1.0)*x12925*x12927))+(((-1.0)*r12*x12926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12930=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12930;
j4eval[1]=IKsign(x12930);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12931=((1.0)*cj5);
IkReal x12932=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12931)));
j4eval[0]=x12932;
j4eval[1]=((IKabs(((((-1.0)*r20*x12931))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12932);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12933=cj5*cj5;
IkReal x12934=(r11*r21);
IkReal x12935=((1.0)*r20);
IkReal x12936=(cj5*sj5);
IkReal x12937=((((-1.0)*r10*x12933*x12935))+((r11*r20*x12936))+(((-1.0)*r12*r22))+(((-1.0)*x12934))+((x12933*x12934))+((r10*r21*x12936)));
j4eval[0]=x12937;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12935)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12937);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12938=cj5*cj5;
IkReal x12939=(r21*sj5);
IkReal x12940=(r11*r21);
IkReal x12941=((1.0)*r20);
CheckValue<IkReal> x12942=IKPowWithIntegerCheck(IKsign((((cj5*r10*x12939))+((x12938*x12940))+(((-1.0)*r10*x12938*x12941))+(((-1.0)*r12*r22))+(((-1.0)*x12940))+((cj5*r11*r20*sj5)))),-1);
if(!x12942.valid){
continue;
}
CheckValue<IkReal> x12943 = IKatan2WithCheck(IkReal((x12939+(((-1.0)*cj5*x12941)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12942.value)))+(x12943.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12944=IKcos(j4);
IkReal x12945=IKsin(j4);
IkReal x12946=(cj5*r00);
IkReal x12947=(cj5*r20);
IkReal x12948=(cj5*r10);
IkReal x12949=((1.0)*x12944);
IkReal x12950=((1.0)*x12945);
IkReal x12951=(sj5*x12944);
IkReal x12952=(sj5*x12945);
evalcond[0]=(((r22*x12945))+((r21*x12951))+(((-1.0)*x12947*x12949)));
evalcond[1]=((((-1.0)*x12948*x12949))+((r12*x12945))+((r11*x12951)));
evalcond[2]=(((r21*x12952))+(((-1.0)*r22*x12949))+(((-1.0)*x12947*x12950)));
evalcond[3]=(((r01*x12952))+(((-1.0)*x12946*x12950))+(((-1.0)*r02*x12949)));
evalcond[4]=((1.0)+((r01*x12951))+(((-1.0)*x12946*x12949))+((r02*x12945)));
evalcond[5]=((1.0)+(((-1.0)*x12948*x12950))+((r11*x12952))+(((-1.0)*r12*x12949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12953=((1.0)*cj5);
CheckValue<IkReal> x12954=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12953)))),-1);
if(!x12954.valid){
continue;
}
CheckValue<IkReal> x12955 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12953)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12954.value)))+(x12955.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12956=IKcos(j4);
IkReal x12957=IKsin(j4);
IkReal x12958=(cj5*r00);
IkReal x12959=(cj5*r20);
IkReal x12960=(cj5*r10);
IkReal x12961=((1.0)*x12956);
IkReal x12962=((1.0)*x12957);
IkReal x12963=(sj5*x12956);
IkReal x12964=(sj5*x12957);
evalcond[0]=(((r22*x12957))+(((-1.0)*x12959*x12961))+((r21*x12963)));
evalcond[1]=((((-1.0)*x12960*x12961))+((r12*x12957))+((r11*x12963)));
evalcond[2]=((((-1.0)*x12959*x12962))+(((-1.0)*r22*x12961))+((r21*x12964)));
evalcond[3]=((((-1.0)*x12958*x12962))+((r01*x12964))+(((-1.0)*r02*x12961)));
evalcond[4]=((1.0)+(((-1.0)*x12958*x12961))+((r01*x12963))+((r02*x12957)));
evalcond[5]=((1.0)+(((-1.0)*x12960*x12962))+(((-1.0)*r12*x12961))+((r11*x12964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12965=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12965.valid){
continue;
}
CheckValue<IkReal> x12966 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12965.value)))+(x12966.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12967=IKcos(j4);
IkReal x12968=IKsin(j4);
IkReal x12969=(cj5*r00);
IkReal x12970=(cj5*r20);
IkReal x12971=(cj5*r10);
IkReal x12972=((1.0)*x12967);
IkReal x12973=((1.0)*x12968);
IkReal x12974=(sj5*x12967);
IkReal x12975=(sj5*x12968);
evalcond[0]=((((-1.0)*x12970*x12972))+((r22*x12968))+((r21*x12974)));
evalcond[1]=((((-1.0)*x12971*x12972))+((r11*x12974))+((r12*x12968)));
evalcond[2]=((((-1.0)*r22*x12972))+(((-1.0)*x12970*x12973))+((r21*x12975)));
evalcond[3]=(((r01*x12975))+(((-1.0)*r02*x12972))+(((-1.0)*x12969*x12973)));
evalcond[4]=((1.0)+((r01*x12974))+((r02*x12968))+(((-1.0)*x12969*x12972)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12972))+(((-1.0)*x12971*x12973))+((r11*x12975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12976=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12976;
j4eval[1]=IKsign(x12976);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12977=((1.0)*cj5);
IkReal x12978=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12977)));
j4eval[0]=x12978;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12977))))));
j4eval[2]=IKsign(x12978);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12979=cj5*cj5;
IkReal x12980=(r11*r21);
IkReal x12981=((1.0)*r20);
IkReal x12982=(cj5*sj5);
IkReal x12983=(((r10*r21*x12982))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12979*x12981))+((x12979*x12980))+((r11*r20*x12982))+(((-1.0)*x12980)));
j4eval[0]=x12983;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12981)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12983);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12984=cj5*cj5;
IkReal x12985=(r21*sj5);
IkReal x12986=(r11*r21);
IkReal x12987=((1.0)*r20);
CheckValue<IkReal> x12988=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x12984*x12986))+(((-1.0)*r10*x12984*x12987))+((cj5*r10*x12985))+(((-1.0)*x12986))+((cj5*r11*r20*sj5)))),-1);
if(!x12988.valid){
continue;
}
CheckValue<IkReal> x12989 = IKatan2WithCheck(IkReal((x12985+(((-1.0)*cj5*x12987)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12988.value)))+(x12989.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12990=IKcos(j4);
IkReal x12991=IKsin(j4);
IkReal x12992=(cj5*r00);
IkReal x12993=(cj5*r20);
IkReal x12994=(cj5*r10);
IkReal x12995=((1.0)*x12990);
IkReal x12996=((1.0)*x12991);
IkReal x12997=(sj5*x12990);
IkReal x12998=(sj5*x12991);
evalcond[0]=(((r22*x12991))+((r21*x12997))+(((-1.0)*x12993*x12995)));
evalcond[1]=((((-1.0)*x12994*x12995))+((r11*x12997))+((r12*x12991)));
evalcond[2]=((((-1.0)*r22*x12995))+((r21*x12998))+(((-1.0)*x12993*x12996)));
evalcond[3]=(((r01*x12998))+(((-1.0)*x12992*x12996))+(((-1.0)*r02*x12995)));
evalcond[4]=((1.0)+((r01*x12997))+(((-1.0)*x12992*x12995))+((r02*x12991)));
evalcond[5]=((1.0)+(((-1.0)*x12994*x12996))+((r11*x12998))+(((-1.0)*r12*x12995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12999=((1.0)*cj5);
CheckValue<IkReal> x13000=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12999)))),-1);
if(!x13000.valid){
continue;
}
CheckValue<IkReal> x13001 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12999)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13000.value)))+(x13001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13002=IKcos(j4);
IkReal x13003=IKsin(j4);
IkReal x13004=(cj5*r00);
IkReal x13005=(cj5*r20);
IkReal x13006=(cj5*r10);
IkReal x13007=((1.0)*x13002);
IkReal x13008=((1.0)*x13003);
IkReal x13009=(sj5*x13002);
IkReal x13010=(sj5*x13003);
evalcond[0]=((((-1.0)*x13005*x13007))+((r22*x13003))+((r21*x13009)));
evalcond[1]=(((r12*x13003))+((r11*x13009))+(((-1.0)*x13006*x13007)));
evalcond[2]=((((-1.0)*x13005*x13008))+((r21*x13010))+(((-1.0)*r22*x13007)));
evalcond[3]=(((r01*x13010))+(((-1.0)*x13004*x13008))+(((-1.0)*r02*x13007)));
evalcond[4]=((1.0)+(((-1.0)*x13004*x13007))+((r02*x13003))+((r01*x13009)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13007))+((r11*x13010))+(((-1.0)*x13006*x13008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13011=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13011.valid){
continue;
}
CheckValue<IkReal> x13012 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13011.value)))+(x13012.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13013=IKcos(j4);
IkReal x13014=IKsin(j4);
IkReal x13015=(cj5*r00);
IkReal x13016=(cj5*r20);
IkReal x13017=(cj5*r10);
IkReal x13018=((1.0)*x13013);
IkReal x13019=((1.0)*x13014);
IkReal x13020=(sj5*x13013);
IkReal x13021=(sj5*x13014);
evalcond[0]=((((-1.0)*x13016*x13018))+((r21*x13020))+((r22*x13014)));
evalcond[1]=(((r11*x13020))+((r12*x13014))+(((-1.0)*x13017*x13018)));
evalcond[2]=((((-1.0)*x13016*x13019))+((r21*x13021))+(((-1.0)*r22*x13018)));
evalcond[3]=(((r01*x13021))+(((-1.0)*x13015*x13019))+(((-1.0)*r02*x13018)));
evalcond[4]=((1.0)+((r01*x13020))+((r02*x13014))+(((-1.0)*x13015*x13018)));
evalcond[5]=((1.0)+((r11*x13021))+(((-1.0)*x13017*x13019))+(((-1.0)*r12*x13018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13022=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13022;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13022);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13023=((1.0)*cj5);
IkReal x13024=((((-1.0)*r21*x13023))+(((-1.0)*r20*sj5)));
j4eval[0]=x13024;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13023))+((r11*sj5))))));
j4eval[2]=IKsign(x13024);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13025=cj5*cj5;
IkReal x13026=(r11*r21);
IkReal x13027=((1.0)*r20);
IkReal x13028=(cj5*sj5);
IkReal x13029=((((-1.0)*r12*r22))+(((-1.0)*r10*x13025*x13027))+((r11*r20*x13028))+(((-1.0)*x13026))+((x13025*x13026))+((r10*r21*x13028)));
j4eval[0]=x13029;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13027)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13029);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13030=cj5*cj5;
IkReal x13031=(r21*sj5);
IkReal x13032=(r11*r21);
IkReal x13033=((1.0)*r20);
CheckValue<IkReal> x13034 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13033))+x13031)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13034.valid){
continue;
}
CheckValue<IkReal> x13035=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13032))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13030*x13033))+((x13030*x13032))+((cj5*r10*x13031))+((cj5*r11*r20*sj5)))),-1);
if(!x13035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13034.value)+(((1.5707963267949)*(x13035.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13036=IKcos(j4);
IkReal x13037=IKsin(j4);
IkReal x13038=(cj5*r00);
IkReal x13039=(cj5*r20);
IkReal x13040=(cj5*r10);
IkReal x13041=((1.0)*x13036);
IkReal x13042=((1.0)*x13037);
IkReal x13043=(sj5*x13036);
IkReal x13044=(sj5*x13037);
evalcond[0]=(((r22*x13037))+((r21*x13043))+(((-1.0)*x13039*x13041)));
evalcond[1]=(((r11*x13043))+(((-1.0)*x13040*x13041))+((r12*x13037)));
evalcond[2]=(((r21*x13044))+(((-1.0)*x13039*x13042))+(((-1.0)*r22*x13041)));
evalcond[3]=((((-1.0)*x13038*x13042))+(((-1.0)*r02*x13041))+((r01*x13044)));
evalcond[4]=((-1.0)+(((-1.0)*x13038*x13041))+((r01*x13043))+((r02*x13037)));
evalcond[5]=((1.0)+((r11*x13044))+(((-1.0)*x13040*x13042))+(((-1.0)*r12*x13041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13045=((1.0)*cj5);
CheckValue<IkReal> x13046 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13045))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13046.valid){
continue;
}
CheckValue<IkReal> x13047=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13045))+(((-1.0)*r20*sj5)))),-1);
if(!x13047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13046.value)+(((1.5707963267949)*(x13047.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13048=IKcos(j4);
IkReal x13049=IKsin(j4);
IkReal x13050=(cj5*r00);
IkReal x13051=(cj5*r20);
IkReal x13052=(cj5*r10);
IkReal x13053=((1.0)*x13048);
IkReal x13054=((1.0)*x13049);
IkReal x13055=(sj5*x13048);
IkReal x13056=(sj5*x13049);
evalcond[0]=(((r21*x13055))+((r22*x13049))+(((-1.0)*x13051*x13053)));
evalcond[1]=(((r12*x13049))+((r11*x13055))+(((-1.0)*x13052*x13053)));
evalcond[2]=(((r21*x13056))+(((-1.0)*r22*x13053))+(((-1.0)*x13051*x13054)));
evalcond[3]=((((-1.0)*r02*x13053))+(((-1.0)*x13050*x13054))+((r01*x13056)));
evalcond[4]=((-1.0)+((r02*x13049))+(((-1.0)*x13050*x13053))+((r01*x13055)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13053))+((r11*x13056))+(((-1.0)*x13052*x13054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13057 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13057.valid){
continue;
}
CheckValue<IkReal> x13058=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13057.value)+(((1.5707963267949)*(x13058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13059=IKcos(j4);
IkReal x13060=IKsin(j4);
IkReal x13061=(cj5*r00);
IkReal x13062=(cj5*r20);
IkReal x13063=(cj5*r10);
IkReal x13064=((1.0)*x13059);
IkReal x13065=((1.0)*x13060);
IkReal x13066=(sj5*x13059);
IkReal x13067=(sj5*x13060);
evalcond[0]=((((-1.0)*x13062*x13064))+((r22*x13060))+((r21*x13066)));
evalcond[1]=(((r12*x13060))+(((-1.0)*x13063*x13064))+((r11*x13066)));
evalcond[2]=((((-1.0)*x13062*x13065))+((r21*x13067))+(((-1.0)*r22*x13064)));
evalcond[3]=((((-1.0)*x13061*x13065))+(((-1.0)*r02*x13064))+((r01*x13067)));
evalcond[4]=((-1.0)+((r02*x13060))+(((-1.0)*x13061*x13064))+((r01*x13066)));
evalcond[5]=((1.0)+(((-1.0)*x13063*x13065))+(((-1.0)*r12*x13064))+((r11*x13067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13068=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13068;
j4eval[1]=IKsign(x13068);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13069=((1.0)*cj5);
IkReal x13070=((((-1.0)*r10*sj5))+(((-1.0)*r11*x13069)));
j4eval[0]=x13070;
j4eval[1]=((IKabs(((((-1.0)*r20*x13069))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13070);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13071=cj5*cj5;
IkReal x13072=(r11*r21);
IkReal x13073=((1.0)*r20);
IkReal x13074=(cj5*sj5);
IkReal x13075=((((-1.0)*r12*r22))+((r11*r20*x13074))+(((-1.0)*x13072))+(((-1.0)*r10*x13071*x13073))+((r10*r21*x13074))+((x13071*x13072)));
j4eval[0]=x13075;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13073))))));
j4eval[2]=IKsign(x13075);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13076=cj5*cj5;
IkReal x13077=(r21*sj5);
IkReal x13078=(r11*r21);
IkReal x13079=((1.0)*r20);
CheckValue<IkReal> x13080 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13079))+x13077)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13080.valid){
continue;
}
CheckValue<IkReal> x13081=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x13076*x13078))+(((-1.0)*x13078))+((cj5*r11*r20*sj5))+(((-1.0)*r10*x13076*x13079))+((cj5*r10*x13077)))),-1);
if(!x13081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13080.value)+(((1.5707963267949)*(x13081.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13082=IKcos(j4);
IkReal x13083=IKsin(j4);
IkReal x13084=(cj5*r00);
IkReal x13085=(cj5*r20);
IkReal x13086=(cj5*r10);
IkReal x13087=((1.0)*x13082);
IkReal x13088=((1.0)*x13083);
IkReal x13089=(sj5*x13082);
IkReal x13090=(sj5*x13083);
evalcond[0]=((((-1.0)*x13085*x13087))+((r22*x13083))+((r21*x13089)));
evalcond[1]=((((-1.0)*x13086*x13087))+((r11*x13089))+((r12*x13083)));
evalcond[2]=((((-1.0)*x13085*x13088))+(((-1.0)*r22*x13087))+((r21*x13090)));
evalcond[3]=((((-1.0)*x13084*x13088))+(((-1.0)*r02*x13087))+((r01*x13090)));
evalcond[4]=((1.0)+(((-1.0)*x13084*x13087))+((r02*x13083))+((r01*x13089)));
evalcond[5]=((1.0)+(((-1.0)*x13086*x13088))+((r11*x13090))+(((-1.0)*r12*x13087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13091=((1.0)*cj5);
CheckValue<IkReal> x13092=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13091)))),-1);
if(!x13092.valid){
continue;
}
CheckValue<IkReal> x13093 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13091))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13092.value)))+(x13093.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13094=IKcos(j4);
IkReal x13095=IKsin(j4);
IkReal x13096=(cj5*r00);
IkReal x13097=(cj5*r20);
IkReal x13098=(cj5*r10);
IkReal x13099=((1.0)*x13094);
IkReal x13100=((1.0)*x13095);
IkReal x13101=(sj5*x13094);
IkReal x13102=(sj5*x13095);
evalcond[0]=((((-1.0)*x13097*x13099))+((r22*x13095))+((r21*x13101)));
evalcond[1]=(((r12*x13095))+((r11*x13101))+(((-1.0)*x13098*x13099)));
evalcond[2]=((((-1.0)*r22*x13099))+(((-1.0)*x13097*x13100))+((r21*x13102)));
evalcond[3]=(((r01*x13102))+(((-1.0)*x13096*x13100))+(((-1.0)*r02*x13099)));
evalcond[4]=((1.0)+((r02*x13095))+((r01*x13101))+(((-1.0)*x13096*x13099)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13099))+(((-1.0)*x13098*x13100))+((r11*x13102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13103=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13103.valid){
continue;
}
CheckValue<IkReal> x13104 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13103.value)))+(x13104.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13105=IKcos(j4);
IkReal x13106=IKsin(j4);
IkReal x13107=(cj5*r00);
IkReal x13108=(cj5*r20);
IkReal x13109=(cj5*r10);
IkReal x13110=((1.0)*x13105);
IkReal x13111=((1.0)*x13106);
IkReal x13112=(sj5*x13105);
IkReal x13113=(sj5*x13106);
evalcond[0]=((((-1.0)*x13108*x13110))+((r21*x13112))+((r22*x13106)));
evalcond[1]=((((-1.0)*x13109*x13110))+((r12*x13106))+((r11*x13112)));
evalcond[2]=((((-1.0)*x13108*x13111))+((r21*x13113))+(((-1.0)*r22*x13110)));
evalcond[3]=((((-1.0)*r02*x13110))+(((-1.0)*x13107*x13111))+((r01*x13113)));
evalcond[4]=((1.0)+((r02*x13106))+(((-1.0)*x13107*x13110))+((r01*x13112)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13110))+(((-1.0)*x13109*x13111))+((r11*x13113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13114=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13114;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13114);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13115=((1.0)*cj5);
IkReal x13116=((((-1.0)*r21*x13115))+(((-1.0)*r20*sj5)));
j4eval[0]=x13116;
j4eval[1]=((IKabs(((((-1.0)*r10*x13115))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x13116);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13117=cj5*cj5;
IkReal x13118=(r11*r21);
IkReal x13119=((1.0)*r20);
IkReal x13120=(cj5*sj5);
IkReal x13121=((((-1.0)*r12*r22))+((r10*r21*x13120))+(((-1.0)*r10*x13117*x13119))+(((-1.0)*x13118))+((r11*r20*x13120))+((x13117*x13118)));
j4eval[0]=x13121;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13119)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13121);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13122=cj5*cj5;
IkReal x13123=(r21*sj5);
IkReal x13124=(r11*r21);
IkReal x13125=((1.0)*r20);
CheckValue<IkReal> x13126 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13125))+x13123)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13126.valid){
continue;
}
CheckValue<IkReal> x13127=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x13122*x13125))+((cj5*r10*x13123))+(((-1.0)*r12*r22))+((x13122*x13124))+((cj5*r11*r20*sj5))+(((-1.0)*x13124)))),-1);
if(!x13127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13126.value)+(((1.5707963267949)*(x13127.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13128=IKcos(j4);
IkReal x13129=IKsin(j4);
IkReal x13130=(cj5*r00);
IkReal x13131=(cj5*r20);
IkReal x13132=(cj5*r10);
IkReal x13133=((1.0)*x13128);
IkReal x13134=((1.0)*x13129);
IkReal x13135=(sj5*x13128);
IkReal x13136=(sj5*x13129);
evalcond[0]=(((r21*x13135))+((r22*x13129))+(((-1.0)*x13131*x13133)));
evalcond[1]=((((-1.0)*x13132*x13133))+((r12*x13129))+((r11*x13135)));
evalcond[2]=(((r21*x13136))+(((-1.0)*r22*x13133))+(((-1.0)*x13131*x13134)));
evalcond[3]=(((r01*x13136))+(((-1.0)*r02*x13133))+(((-1.0)*x13130*x13134)));
evalcond[4]=((-1.0)+((r01*x13135))+((r02*x13129))+(((-1.0)*x13130*x13133)));
evalcond[5]=((1.0)+(((-1.0)*x13132*x13134))+((r11*x13136))+(((-1.0)*r12*x13133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13137=((1.0)*cj5);
CheckValue<IkReal> x13138 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13137))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13138.valid){
continue;
}
CheckValue<IkReal> x13139=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13137))+(((-1.0)*r20*sj5)))),-1);
if(!x13139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13138.value)+(((1.5707963267949)*(x13139.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13140=IKcos(j4);
IkReal x13141=IKsin(j4);
IkReal x13142=(cj5*r00);
IkReal x13143=(cj5*r20);
IkReal x13144=(cj5*r10);
IkReal x13145=((1.0)*x13140);
IkReal x13146=((1.0)*x13141);
IkReal x13147=(sj5*x13140);
IkReal x13148=(sj5*x13141);
evalcond[0]=((((-1.0)*x13143*x13145))+((r22*x13141))+((r21*x13147)));
evalcond[1]=((((-1.0)*x13144*x13145))+((r12*x13141))+((r11*x13147)));
evalcond[2]=((((-1.0)*x13143*x13146))+(((-1.0)*r22*x13145))+((r21*x13148)));
evalcond[3]=((((-1.0)*x13142*x13146))+(((-1.0)*r02*x13145))+((r01*x13148)));
evalcond[4]=((-1.0)+(((-1.0)*x13142*x13145))+((r02*x13141))+((r01*x13147)));
evalcond[5]=((1.0)+(((-1.0)*x13144*x13146))+((r11*x13148))+(((-1.0)*r12*x13145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13149 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13149.valid){
continue;
}
CheckValue<IkReal> x13150=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13149.value)+(((1.5707963267949)*(x13150.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13151=IKcos(j4);
IkReal x13152=IKsin(j4);
IkReal x13153=(cj5*r00);
IkReal x13154=(cj5*r20);
IkReal x13155=(cj5*r10);
IkReal x13156=((1.0)*x13151);
IkReal x13157=((1.0)*x13152);
IkReal x13158=(sj5*x13151);
IkReal x13159=(sj5*x13152);
evalcond[0]=(((r21*x13158))+(((-1.0)*x13154*x13156))+((r22*x13152)));
evalcond[1]=(((r11*x13158))+((r12*x13152))+(((-1.0)*x13155*x13156)));
evalcond[2]=(((r21*x13159))+(((-1.0)*r22*x13156))+(((-1.0)*x13154*x13157)));
evalcond[3]=((((-1.0)*r02*x13156))+((r01*x13159))+(((-1.0)*x13153*x13157)));
evalcond[4]=((-1.0)+((r02*x13152))+((r01*x13158))+(((-1.0)*x13153*x13156)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13156))+((r11*x13159))+(((-1.0)*x13155*x13157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13160=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13160);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13160);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13161=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13161);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13161);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13162=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13162)));
j4eval[1]=((((-1.0)*r00*x13162))+((r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13163=((1.0)*cj5);
CheckValue<IkReal> x13164=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13163))),-1);
if(!x13164.valid){
continue;
}
CheckValue<IkReal> x13165=IKPowWithIntegerCheck(((((-1.0)*r00*x13163))+((r01*sj5))),-1);
if(!x13165.valid){
continue;
}
if( IKabs(((-1.0)*(x13164.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13165.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13164.value)))+IKsqr(((x13165.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13164.value)), ((x13165.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13166=IKsin(j4);
IkReal x13167=IKcos(j4);
IkReal x13168=((1.0)*cj5);
IkReal x13169=((1.0)*cj2);
IkReal x13170=(sj5*x13167);
IkReal x13171=(sj5*x13166);
evalcond[0]=((-1.0)*r22*x13167);
evalcond[1]=((((-1.0)*cj1*x13169))+((r22*x13166))+((sj1*sj2)));
evalcond[2]=(((r01*x13171))+(((-1.0)*r00*x13166*x13168)));
evalcond[3]=((((-1.0)*r10*x13167*x13168))+((r11*x13170)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13166*x13168))+((r11*x13171)));
evalcond[5]=(((r01*x13170))+(((-1.0)*sj1*x13169))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x13167*x13168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13172=IKPowWithIntegerCheck(r22,-1);
if(!x13172.valid){
continue;
}
CheckValue<IkReal> x13173=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13173.valid){
continue;
}
if( IKabs(((x13172.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13173.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13172.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13173.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13172.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13173.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13174=IKsin(j4);
IkReal x13175=IKcos(j4);
IkReal x13176=((1.0)*cj5);
IkReal x13177=((1.0)*cj2);
IkReal x13178=(sj5*x13175);
IkReal x13179=(sj5*x13174);
evalcond[0]=((-1.0)*r22*x13175);
evalcond[1]=((((-1.0)*cj1*x13177))+((sj1*sj2))+((r22*x13174)));
evalcond[2]=(((r01*x13179))+(((-1.0)*r00*x13174*x13176)));
evalcond[3]=((((-1.0)*r10*x13175*x13176))+((r11*x13178)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13174*x13176))+((r11*x13179)));
evalcond[5]=(((r01*x13178))+(((-1.0)*sj1*x13177))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x13175*x13176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13180=(sj1*sj2);
IkReal x13181=(cj5*r10);
IkReal x13182=(r11*sj5);
IkReal x13183=(cj1*cj2);
CheckValue<IkReal> x13184 = IKatan2WithCheck(IkReal(((((-1.0)*x13182*x13183))+(((-1.0)*x13180*x13181))+((x13180*x13182))+((x13181*x13183)))),IkReal((((r12*x13183))+(((-1.0)*r12*x13180)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13184.valid){
continue;
}
CheckValue<IkReal> x13185=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13184.value)+(((1.5707963267949)*(x13185.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13186=IKcos(j4);
IkReal x13187=IKsin(j4);
IkReal x13188=(cj5*r00);
IkReal x13189=(cj5*r10);
IkReal x13190=(r21*sj5);
IkReal x13191=((1.0)*cj2);
IkReal x13192=(cj5*r20);
IkReal x13193=((1.0)*x13186);
IkReal x13194=((1.0)*x13187);
IkReal x13195=(sj5*x13187);
IkReal x13196=(sj5*x13186);
evalcond[0]=(((r12*x13187))+((r11*x13196))+(((-1.0)*x13189*x13193)));
evalcond[1]=((((-1.0)*r22*x13193))+((x13187*x13190))+(((-1.0)*x13192*x13194)));
evalcond[2]=((((-1.0)*x13188*x13194))+(((-1.0)*r02*x13193))+((r01*x13195)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13193))+((r11*x13195))+(((-1.0)*x13189*x13194)));
evalcond[4]=(((r22*x13187))+((x13186*x13190))+(((-1.0)*cj1*x13191))+((sj1*sj2))+(((-1.0)*x13192*x13193)));
evalcond[5]=(((r02*x13187))+(((-1.0)*x13188*x13193))+(((-1.0)*cj1*sj2))+((r01*x13196))+(((-1.0)*sj1*x13191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13197=((1.0)*cj5);
CheckValue<IkReal> x13198=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13197)))),-1);
if(!x13198.valid){
continue;
}
CheckValue<IkReal> x13199 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13197)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13198.value)))+(x13199.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13200=IKcos(j4);
IkReal x13201=IKsin(j4);
IkReal x13202=(cj5*r00);
IkReal x13203=(cj5*r10);
IkReal x13204=(r21*sj5);
IkReal x13205=((1.0)*cj2);
IkReal x13206=(cj5*r20);
IkReal x13207=((1.0)*x13200);
IkReal x13208=((1.0)*x13201);
IkReal x13209=(sj5*x13201);
IkReal x13210=(sj5*x13200);
evalcond[0]=(((r11*x13210))+(((-1.0)*x13203*x13207))+((r12*x13201)));
evalcond[1]=(((x13201*x13204))+(((-1.0)*x13206*x13208))+(((-1.0)*r22*x13207)));
evalcond[2]=(((r01*x13209))+(((-1.0)*x13202*x13208))+(((-1.0)*r02*x13207)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13207))+((r11*x13209))+(((-1.0)*x13203*x13208)));
evalcond[4]=((((-1.0)*cj1*x13205))+((x13200*x13204))+((sj1*sj2))+((r22*x13201))+(((-1.0)*x13206*x13207)));
evalcond[5]=(((r01*x13210))+(((-1.0)*x13202*x13207))+((r02*x13201))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13211=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13211.valid){
continue;
}
CheckValue<IkReal> x13212 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13211.value)))+(x13212.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13213=IKcos(j4);
IkReal x13214=IKsin(j4);
IkReal x13215=(cj5*r00);
IkReal x13216=(cj5*r10);
IkReal x13217=(r21*sj5);
IkReal x13218=((1.0)*cj2);
IkReal x13219=(cj5*r20);
IkReal x13220=((1.0)*x13213);
IkReal x13221=((1.0)*x13214);
IkReal x13222=(sj5*x13214);
IkReal x13223=(sj5*x13213);
evalcond[0]=(((r12*x13214))+((r11*x13223))+(((-1.0)*x13216*x13220)));
evalcond[1]=((((-1.0)*r22*x13220))+(((-1.0)*x13219*x13221))+((x13214*x13217)));
evalcond[2]=((((-1.0)*x13215*x13221))+(((-1.0)*r02*x13220))+((r01*x13222)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13220))+((r11*x13222))+(((-1.0)*x13216*x13221)));
evalcond[4]=((((-1.0)*cj1*x13218))+((sj1*sj2))+((x13213*x13217))+(((-1.0)*x13219*x13220))+((r22*x13214)));
evalcond[5]=((((-1.0)*x13215*x13220))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13218))+((r01*x13223))+((r02*x13214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13224=((-1.0)*r00);
IkReal x13226 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13226)==0){
continue;
}
IkReal x13225=pow(x13226,-0.5);
CheckValue<IkReal> x13227 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13224),IKFAST_ATAN2_MAGTHRESH);
if(!x13227.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13227.value));
IkReal gconst19=(r01*x13225);
IkReal gconst20=(x13224*x13225);
CheckValue<IkReal> x13228 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13228.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13228.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13229=((-1.0)*r00);
IkReal x13230=x13225;
CheckValue<IkReal> x13232 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13229),IKFAST_ATAN2_MAGTHRESH);
if(!x13232.valid){
continue;
}
IkReal x13231=((-1.0)*(x13232.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13231;
IkReal gconst18=x13231;
IkReal gconst19=(r01*x13230);
IkReal gconst20=(x13229*x13230);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13233=((-1.0)*r00);
IkReal x13234=x13225;
CheckValue<IkReal> x13236 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13233),IKFAST_ATAN2_MAGTHRESH);
if(!x13236.valid){
continue;
}
IkReal x13235=((-1.0)*(x13236.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13235;
IkReal gconst18=x13235;
IkReal gconst19=(r01*x13234);
IkReal gconst20=(x13233*x13234);
CheckValue<IkReal> x13244=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13244.valid){
continue;
}
IkReal x13237=x13244.value;
IkReal x13238=(sj3*x13237);
IkReal x13239=(r11*x13238);
IkReal x13240=(r21*x13238);
IkReal x13241=(r20*x13238);
IkReal x13242=(r10*x13238);
IkReal x13243=(r00*r01*x13238);
j4eval[0]=IKsign((((r21*x13239*(r01*r01)))+((r00*r01*r20*x13239))+((r10*x13241*(r00*r00)))+((r12*r22*sj3))+((r00*r01*r10*x13240))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13245=gconst19*gconst19;
IkReal x13246=gconst20*gconst20;
IkReal x13247=(gconst20*sj3);
IkReal x13248=((1.0)*cj3);
IkReal x13249=(r10*sj3);
IkReal x13250=(gconst19*r21);
IkReal x13251=(r11*r20);
IkReal x13252=(cj3*gconst20);
IkReal x13253=((1.0)*r10*r20);
IkReal x13254=(r21*x13245);
CheckValue<IkReal> x13255=IKPowWithIntegerCheck(IKsign((((r10*x13250*x13252))+(((-1.0)*r12*r22*x13248))+((gconst19*x13251*x13252))+(((-1.0)*r10*r20*x13246*x13248))+(((-1.0)*r11*x13248*x13254)))),-1);
if(!x13255.valid){
continue;
}
CheckValue<IkReal> x13256 = IKatan2WithCheck(IkReal((((gconst19*r22*x13249))+((r11*r22*x13247)))),IkReal(((((-1.0)*sj3*x13246*x13251))+((x13249*x13254))+((r11*x13247*x13250))+(((-1.0)*gconst19*x13247*x13253)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13255.value)))+(x13256.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13257=IKsin(j4);
IkReal x13258=IKcos(j4);
IkReal x13259=(sj1*sj2);
IkReal x13260=(gconst20*sj3);
IkReal x13261=(gconst19*r21);
IkReal x13262=(gconst20*r10);
IkReal x13263=(cj3*gconst19);
IkReal x13264=(gconst19*sj3);
IkReal x13265=((1.0)*cj1);
IkReal x13266=(cj3*gconst20);
IkReal x13267=(cj2*sj1);
IkReal x13268=(cj2*x13265);
IkReal x13269=((1.0)*x13258);
IkReal x13270=((1.0)*x13257);
IkReal x13271=(cj3*x13257);
IkReal x13272=(gconst19*x13257);
evalcond[0]=((((-1.0)*r22*x13269))+(((-1.0)*gconst20*r20*x13270))+((x13257*x13261)));
evalcond[1]=((((-1.0)*gconst20*r00*x13270))+((r01*x13272))+(((-1.0)*r02*x13269)));
evalcond[2]=((1.0)+((r11*x13272))+(((-1.0)*x13262*x13270))+(((-1.0)*r12*x13269)));
evalcond[3]=(((r11*x13260))+((r12*x13271))+(((-1.0)*cj3*x13262*x13269))+((r10*x13264))+((r11*x13258*x13263)));
evalcond[4]=(((r11*x13266))+((r10*x13258*x13260))+((r10*x13263))+(((-1.0)*r11*x13264*x13269))+(((-1.0)*r12*sj3*x13270)));
evalcond[5]=(((r21*x13260))+((cj3*x13258*x13261))+((cj1*sj2))+((r20*x13264))+(((-1.0)*r20*x13266*x13269))+((r22*x13271))+x13267);
evalcond[6]=((((-1.0)*x13268))+((r00*x13264))+((r01*x13260))+((r02*x13271))+((r01*x13258*x13263))+x13259+(((-1.0)*r00*x13266*x13269)));
evalcond[7]=((((-1.0)*x13268))+((r21*x13266))+((r20*x13263))+(((-1.0)*r22*sj3*x13270))+(((-1.0)*sj3*x13261*x13269))+((r20*x13258*x13260))+x13259);
evalcond[8]=((((-1.0)*x13267))+(((-1.0)*sj2*x13265))+((r00*x13263))+((r01*x13266))+(((-1.0)*r02*sj3*x13270))+(((-1.0)*r01*x13264*x13269))+((r00*x13258*x13260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13273=gconst19*gconst19;
IkReal x13274=gconst20*gconst20;
IkReal x13275=(r21*sj3);
IkReal x13276=(cj3*r11);
IkReal x13277=(gconst19*gconst20);
IkReal x13278=((1.0)*r10);
IkReal x13279=(cj3*r10);
IkReal x13280=(r20*x13274);
CheckValue<IkReal> x13281=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*r20*sj3*x13277))+((r11*x13273*x13275))+((r10*sj3*x13280))+(((-1.0)*x13275*x13277*x13278))+((r12*r22*sj3)))),-1);
if(!x13281.valid){
continue;
}
CheckValue<IkReal> x13282 = IKatan2WithCheck(IkReal((((gconst19*r22*x13279))+((gconst20*r22*x13276)))),IkReal((((r21*x13273*x13279))+(((-1.0)*x13276*x13280))+(((-1.0)*cj3*r20*x13277*x13278))+((r21*x13276*x13277)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13281.value)))+(x13282.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13283=IKsin(j4);
IkReal x13284=IKcos(j4);
IkReal x13285=(sj1*sj2);
IkReal x13286=(gconst20*sj3);
IkReal x13287=(gconst19*r21);
IkReal x13288=(gconst20*r10);
IkReal x13289=(cj3*gconst19);
IkReal x13290=(gconst19*sj3);
IkReal x13291=((1.0)*cj1);
IkReal x13292=(cj3*gconst20);
IkReal x13293=(cj2*sj1);
IkReal x13294=(cj2*x13291);
IkReal x13295=((1.0)*x13284);
IkReal x13296=((1.0)*x13283);
IkReal x13297=(cj3*x13283);
IkReal x13298=(gconst19*x13283);
evalcond[0]=((((-1.0)*gconst20*r20*x13296))+((x13283*x13287))+(((-1.0)*r22*x13295)));
evalcond[1]=((((-1.0)*gconst20*r00*x13296))+(((-1.0)*r02*x13295))+((r01*x13298)));
evalcond[2]=((1.0)+((r11*x13298))+(((-1.0)*r12*x13295))+(((-1.0)*x13288*x13296)));
evalcond[3]=(((r12*x13297))+((r11*x13286))+((r10*x13290))+(((-1.0)*cj3*x13288*x13295))+((r11*x13284*x13289)));
evalcond[4]=(((r11*x13292))+((r10*x13284*x13286))+((r10*x13289))+(((-1.0)*r11*x13290*x13295))+(((-1.0)*r12*sj3*x13296)));
evalcond[5]=(((r20*x13290))+((cj1*sj2))+(((-1.0)*r20*x13292*x13295))+((r22*x13297))+((r21*x13286))+x13293+((cj3*x13284*x13287)));
evalcond[6]=(((r01*x13284*x13289))+(((-1.0)*r00*x13292*x13295))+((r02*x13297))+x13285+((r01*x13286))+(((-1.0)*x13294))+((r00*x13290)));
evalcond[7]=(((r20*x13289))+((r20*x13284*x13286))+(((-1.0)*sj3*x13287*x13295))+(((-1.0)*r22*sj3*x13296))+x13285+(((-1.0)*x13294))+((r21*x13292)));
evalcond[8]=((((-1.0)*x13293))+(((-1.0)*r01*x13290*x13295))+((r00*x13284*x13286))+((r00*x13289))+(((-1.0)*sj2*x13291))+(((-1.0)*r02*sj3*x13296))+((r01*x13292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13299 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13299.valid){
continue;
}
CheckValue<IkReal> x13300=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13299.value)+(((1.5707963267949)*(x13300.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13301=IKsin(j4);
IkReal x13302=IKcos(j4);
IkReal x13303=(sj1*sj2);
IkReal x13304=(gconst20*sj3);
IkReal x13305=(gconst19*r21);
IkReal x13306=(gconst20*r10);
IkReal x13307=(cj3*gconst19);
IkReal x13308=(gconst19*sj3);
IkReal x13309=((1.0)*cj1);
IkReal x13310=(cj3*gconst20);
IkReal x13311=(cj2*sj1);
IkReal x13312=(cj2*x13309);
IkReal x13313=((1.0)*x13302);
IkReal x13314=((1.0)*x13301);
IkReal x13315=(cj3*x13301);
IkReal x13316=(gconst19*x13301);
evalcond[0]=((((-1.0)*gconst20*r20*x13314))+((x13301*x13305))+(((-1.0)*r22*x13313)));
evalcond[1]=((((-1.0)*gconst20*r00*x13314))+((r01*x13316))+(((-1.0)*r02*x13313)));
evalcond[2]=((1.0)+((r11*x13316))+(((-1.0)*x13306*x13314))+(((-1.0)*r12*x13313)));
evalcond[3]=(((r11*x13302*x13307))+((r10*x13308))+(((-1.0)*cj3*x13306*x13313))+((r11*x13304))+((r12*x13315)));
evalcond[4]=(((r11*x13310))+((r10*x13307))+((r10*x13302*x13304))+(((-1.0)*r11*x13308*x13313))+(((-1.0)*r12*sj3*x13314)));
evalcond[5]=((((-1.0)*r20*x13310*x13313))+((r21*x13304))+((r20*x13308))+((cj1*sj2))+((r22*x13315))+((cj3*x13302*x13305))+x13311);
evalcond[6]=(((r01*x13302*x13307))+((r00*x13308))+((r01*x13304))+(((-1.0)*r00*x13310*x13313))+(((-1.0)*x13312))+x13303+((r02*x13315)));
evalcond[7]=((((-1.0)*r22*sj3*x13314))+((r20*x13307))+(((-1.0)*sj3*x13305*x13313))+((r20*x13302*x13304))+(((-1.0)*x13312))+((r21*x13310))+x13303);
evalcond[8]=((((-1.0)*r02*sj3*x13314))+((r01*x13310))+((r00*x13302*x13304))+((r00*x13307))+(((-1.0)*x13311))+(((-1.0)*r01*x13308*x13313))+(((-1.0)*sj2*x13309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13317=((-1.0)*r01);
IkReal x13319 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13319)==0){
continue;
}
IkReal x13318=pow(x13319,-0.5);
CheckValue<IkReal> x13320 = IKatan2WithCheck(IkReal(x13317),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13320.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13320.value))));
IkReal gconst22=(x13317*x13318);
IkReal gconst23=((1.0)*r00*x13318);
CheckValue<IkReal> x13321 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13321.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13321.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13322=((-1.0)*r01);
CheckValue<IkReal> x13325 = IKatan2WithCheck(IkReal(x13322),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13325.valid){
continue;
}
IkReal x13323=((1.0)*(x13325.value));
IkReal x13324=x13318;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13323)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13323)));
IkReal gconst22=(x13322*x13324);
IkReal gconst23=((1.0)*r00*x13324);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13326=((-1.0)*r01);
CheckValue<IkReal> x13329 = IKatan2WithCheck(IkReal(x13326),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13329.valid){
continue;
}
IkReal x13327=((1.0)*(x13329.value));
IkReal x13328=x13318;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13327)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13327)));
IkReal gconst22=(x13326*x13328);
IkReal gconst23=((1.0)*r00*x13328);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13330=gconst22*gconst22;
IkReal x13331=gconst23*gconst23;
IkReal x13332=(r21*sj3);
IkReal x13333=((1.0)*cj3);
IkReal x13334=(gconst23*r11);
IkReal x13335=(r22*sj3);
IkReal x13336=(gconst22*r10);
IkReal x13337=((1.0)*r20*sj3);
CheckValue<IkReal> x13338 = IKatan2WithCheck(IkReal((((x13335*x13336))+((x13334*x13335)))),IkReal(((((-1.0)*r11*x13331*x13337))+((gconst22*x13332*x13334))+((r10*x13330*x13332))+(((-1.0)*gconst23*x13336*x13337)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13338.valid){
continue;
}
CheckValue<IkReal> x13339=IKPowWithIntegerCheck(IKsign((((cj3*gconst22*r20*x13334))+(((-1.0)*r12*r22*x13333))+((cj3*gconst23*r21*x13336))+(((-1.0)*r11*r21*x13330*x13333))+(((-1.0)*r10*r20*x13331*x13333)))),-1);
if(!x13339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13338.value)+(((1.5707963267949)*(x13339.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13340=IKsin(j4);
IkReal x13341=IKcos(j4);
IkReal x13342=(sj1*sj2);
IkReal x13343=(gconst23*sj3);
IkReal x13344=(gconst22*sj3);
IkReal x13345=(cj2*sj1);
IkReal x13346=((1.0)*cj1);
IkReal x13347=(cj3*gconst23);
IkReal x13348=(cj3*gconst22);
IkReal x13349=(cj2*x13346);
IkReal x13350=((1.0)*x13341);
IkReal x13351=(cj3*x13340);
IkReal x13352=(gconst22*x13340);
IkReal x13353=((1.0)*sj3*x13340);
IkReal x13354=(x13341*x13348);
IkReal x13355=((1.0)*gconst23*x13340);
evalcond[0]=((((-1.0)*r22*x13350))+((r21*x13352))+(((-1.0)*r20*x13355)));
evalcond[1]=((((-1.0)*r02*x13350))+(((-1.0)*r00*x13355))+((r01*x13352)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13350))+((r11*x13352))+(((-1.0)*r10*x13355)));
evalcond[3]=((((-1.0)*r10*x13347*x13350))+((r10*x13344))+((r11*x13343))+((r11*x13354))+((r12*x13351)));
evalcond[4]=((((-1.0)*r11*x13344*x13350))+(((-1.0)*r12*x13353))+((r10*x13348))+((r11*x13347))+((r10*x13341*x13343)));
evalcond[5]=(((r22*x13351))+((cj1*sj2))+((r21*x13343))+((r21*x13354))+((r20*x13344))+(((-1.0)*r20*x13347*x13350))+x13345);
evalcond[6]=(((r02*x13351))+(((-1.0)*r00*x13347*x13350))+(((-1.0)*x13349))+((r01*x13354))+((r00*x13344))+((r01*x13343))+x13342);
evalcond[7]=((((-1.0)*r22*x13353))+(((-1.0)*x13349))+((r21*x13347))+(((-1.0)*r21*x13344*x13350))+((r20*x13341*x13343))+((r20*x13348))+x13342);
evalcond[8]=((((-1.0)*r02*x13353))+(((-1.0)*sj2*x13346))+(((-1.0)*x13345))+(((-1.0)*r01*x13344*x13350))+((r00*x13341*x13343))+((r00*x13348))+((r01*x13347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13356=((1.0)*gconst23);
CheckValue<IkReal> x13357=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13356)))),-1);
if(!x13357.valid){
continue;
}
CheckValue<IkReal> x13358 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst22*r21))+(((-1.0)*r20*x13356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13357.value)))+(x13358.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13359=IKsin(j4);
IkReal x13360=IKcos(j4);
IkReal x13361=(sj1*sj2);
IkReal x13362=(gconst23*sj3);
IkReal x13363=(gconst22*sj3);
IkReal x13364=(cj2*sj1);
IkReal x13365=((1.0)*cj1);
IkReal x13366=(cj3*gconst23);
IkReal x13367=(cj3*gconst22);
IkReal x13368=(cj2*x13365);
IkReal x13369=((1.0)*x13360);
IkReal x13370=(cj3*x13359);
IkReal x13371=(gconst22*x13359);
IkReal x13372=((1.0)*sj3*x13359);
IkReal x13373=(x13360*x13367);
IkReal x13374=((1.0)*gconst23*x13359);
evalcond[0]=((((-1.0)*r22*x13369))+(((-1.0)*r20*x13374))+((r21*x13371)));
evalcond[1]=((((-1.0)*r00*x13374))+((r01*x13371))+(((-1.0)*r02*x13369)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13369))+((r11*x13371))+(((-1.0)*r10*x13374)));
evalcond[3]=(((r10*x13363))+((r12*x13370))+((r11*x13373))+((r11*x13362))+(((-1.0)*r10*x13366*x13369)));
evalcond[4]=(((r10*x13367))+((r10*x13360*x13362))+((r11*x13366))+(((-1.0)*r11*x13363*x13369))+(((-1.0)*r12*x13372)));
evalcond[5]=(((r20*x13363))+((cj1*sj2))+((r22*x13370))+((r21*x13362))+(((-1.0)*r20*x13366*x13369))+((r21*x13373))+x13364);
evalcond[6]=(((r02*x13370))+((r01*x13362))+((r01*x13373))+((r00*x13363))+(((-1.0)*r00*x13366*x13369))+(((-1.0)*x13368))+x13361);
evalcond[7]=(((r20*x13367))+(((-1.0)*r22*x13372))+((r20*x13360*x13362))+(((-1.0)*r21*x13363*x13369))+(((-1.0)*x13368))+((r21*x13366))+x13361);
evalcond[8]=((((-1.0)*x13364))+(((-1.0)*sj2*x13365))+((r01*x13366))+((r00*x13367))+((r00*x13360*x13362))+(((-1.0)*r02*x13372))+(((-1.0)*r01*x13363*x13369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13375=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13375.valid){
continue;
}
CheckValue<IkReal> x13376 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13375.value)))+(x13376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13377=IKsin(j4);
IkReal x13378=IKcos(j4);
IkReal x13379=(sj1*sj2);
IkReal x13380=(gconst23*sj3);
IkReal x13381=(gconst22*sj3);
IkReal x13382=(cj2*sj1);
IkReal x13383=((1.0)*cj1);
IkReal x13384=(cj3*gconst23);
IkReal x13385=(cj3*gconst22);
IkReal x13386=(cj2*x13383);
IkReal x13387=((1.0)*x13378);
IkReal x13388=(cj3*x13377);
IkReal x13389=(gconst22*x13377);
IkReal x13390=((1.0)*sj3*x13377);
IkReal x13391=(x13378*x13385);
IkReal x13392=((1.0)*gconst23*x13377);
evalcond[0]=((((-1.0)*r22*x13387))+(((-1.0)*r20*x13392))+((r21*x13389)));
evalcond[1]=(((r01*x13389))+(((-1.0)*r00*x13392))+(((-1.0)*r02*x13387)));
evalcond[2]=((1.0)+((r11*x13389))+(((-1.0)*r10*x13392))+(((-1.0)*r12*x13387)));
evalcond[3]=(((r11*x13391))+((r11*x13380))+((r10*x13381))+((r12*x13388))+(((-1.0)*r10*x13384*x13387)));
evalcond[4]=((((-1.0)*r11*x13381*x13387))+((r10*x13378*x13380))+((r11*x13384))+((r10*x13385))+(((-1.0)*r12*x13390)));
evalcond[5]=(((r21*x13391))+((r20*x13381))+((cj1*sj2))+(((-1.0)*r20*x13384*x13387))+((r22*x13388))+x13382+((r21*x13380)));
evalcond[6]=(((r01*x13380))+((r01*x13391))+((r00*x13381))+(((-1.0)*x13386))+(((-1.0)*r00*x13384*x13387))+((r02*x13388))+x13379);
evalcond[7]=(((r20*x13378*x13380))+(((-1.0)*r22*x13390))+((r20*x13385))+(((-1.0)*r21*x13381*x13387))+(((-1.0)*x13386))+x13379+((r21*x13384)));
evalcond[8]=((((-1.0)*x13382))+((r01*x13384))+((r00*x13385))+(((-1.0)*r01*x13381*x13387))+((r00*x13378*x13380))+(((-1.0)*r02*x13390))+(((-1.0)*sj2*x13383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13394 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13394)==0){
continue;
}
IkReal x13393=pow(x13394,-0.5);
CheckValue<IkReal> x13395 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13395.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13395.value));
IkReal gconst25=((-1.0)*r21*x13393);
IkReal gconst26=(r20*x13393);
CheckValue<IkReal> x13396 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13396.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13396.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13399 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13399.valid){
continue;
}
IkReal x13397=((-1.0)*(x13399.value));
IkReal x13398=x13393;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13397;
IkReal gconst24=x13397;
IkReal gconst25=((-1.0)*r21*x13398);
IkReal gconst26=(r20*x13398);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13402 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13402.valid){
continue;
}
IkReal x13400=((-1.0)*(x13402.value));
IkReal x13401=x13393;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13400;
IkReal gconst24=x13400;
IkReal gconst25=((-1.0)*r21*x13401);
IkReal gconst26=(r20*x13401);
CheckValue<IkReal> x13410=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13410.valid){
continue;
}
IkReal x13403=x13410.value;
IkReal x13404=(sj3*x13403);
IkReal x13405=(r11*x13404);
IkReal x13406=(r00*x13404);
IkReal x13407=(r01*x13404);
IkReal x13408=(r10*x13404);
IkReal x13409=(r20*r21*x13404);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x13407))+((r00*r20*r21*x13405))+((r01*x13405*(r21*r21)))+((r10*x13406*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13411=gconst25*gconst25;
IkReal x13412=gconst26*gconst26;
IkReal x13413=(r00*r11);
IkReal x13414=(r01*r10);
IkReal x13415=(r02*sj3);
IkReal x13416=(gconst25*r10);
IkReal x13417=(gconst26*r11);
IkReal x13418=((1.0)*sj3);
IkReal x13419=((1.0)*cj3);
IkReal x13420=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13421=IKPowWithIntegerCheck(IKsign((((x13414*x13420))+((x13413*x13420))+(((-1.0)*r02*r12*x13419))+(((-1.0)*r01*r11*x13411*x13419))+(((-1.0)*r00*r10*x13412*x13419)))),-1);
if(!x13421.valid){
continue;
}
CheckValue<IkReal> x13422 = IKatan2WithCheck(IkReal((((x13415*x13417))+((x13415*x13416)))),IkReal(((((-1.0)*gconst26*r00*x13416*x13418))+((gconst25*r01*sj3*x13417))+(((-1.0)*x13412*x13413*x13418))+((sj3*x13411*x13414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13421.value)))+(x13422.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13423=IKsin(j4);
IkReal x13424=IKcos(j4);
IkReal x13425=(sj1*sj2);
IkReal x13426=(gconst26*sj3);
IkReal x13427=(gconst25*sj3);
IkReal x13428=(gconst26*r10);
IkReal x13429=(gconst25*r11);
IkReal x13430=(cj3*gconst25);
IkReal x13431=((1.0)*cj2);
IkReal x13432=(cj1*sj2);
IkReal x13433=(gconst26*r00);
IkReal x13434=(gconst26*r20);
IkReal x13435=(cj3*gconst26);
IkReal x13436=(cj1*x13431);
IkReal x13437=((1.0)*x13424);
IkReal x13438=((1.0)*x13423);
IkReal x13439=(cj3*x13423);
IkReal x13440=(gconst25*x13423);
evalcond[0]=((((-1.0)*x13434*x13438))+(((-1.0)*r22*x13437))+((r21*x13440)));
evalcond[1]=((((-1.0)*x13433*x13438))+((r01*x13440))+(((-1.0)*r02*x13437)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13437))+(((-1.0)*x13428*x13438))+((x13423*x13429)));
evalcond[3]=(((r11*x13426))+((r12*x13439))+(((-1.0)*cj3*x13428*x13437))+((r10*x13427))+((cj3*x13424*x13429)));
evalcond[4]=(((r10*x13424*x13426))+(((-1.0)*r11*x13427*x13437))+((r11*x13435))+(((-1.0)*r12*sj3*x13438))+((r10*x13430)));
evalcond[5]=(x13432+((cj2*sj1))+(((-1.0)*cj3*x13434*x13437))+((r22*x13439))+((r21*x13424*x13430))+((r21*x13426))+((r20*x13427)));
evalcond[6]=(x13425+(((-1.0)*x13436))+((r02*x13439))+((r01*x13424*x13430))+(((-1.0)*cj3*x13433*x13437))+((r00*x13427))+((r01*x13426)));
evalcond[7]=(x13425+(((-1.0)*x13436))+(((-1.0)*r21*x13427*x13437))+((r20*x13424*x13426))+((r21*x13435))+((r20*x13430))+(((-1.0)*r22*sj3*x13438)));
evalcond[8]=(((r01*x13435))+(((-1.0)*x13432))+(((-1.0)*sj1*x13431))+(((-1.0)*r01*x13427*x13437))+(((-1.0)*r02*sj3*x13438))+((r00*x13424*x13426))+((r00*x13430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13441=gconst26*gconst26;
IkReal x13442=gconst25*gconst25;
IkReal x13443=(r01*r10);
IkReal x13444=(cj3*r11);
IkReal x13445=(gconst25*gconst26);
IkReal x13446=(cj3*r10);
IkReal x13447=(r00*x13441);
IkReal x13448=((1.0)*sj3*x13445);
CheckValue<IkReal> x13449 = IKatan2WithCheck(IkReal((((gconst26*r02*x13444))+((gconst25*r02*x13446)))),IkReal((((r01*x13444*x13445))+(((-1.0)*r00*x13445*x13446))+((cj3*x13442*x13443))+(((-1.0)*x13444*x13447)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13449.valid){
continue;
}
CheckValue<IkReal> x13450=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r01*r11*sj3*x13442))+(((-1.0)*r00*r11*x13448))+(((-1.0)*x13443*x13448))+((r10*sj3*x13447)))),-1);
if(!x13450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13449.value)+(((1.5707963267949)*(x13450.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13451=IKsin(j4);
IkReal x13452=IKcos(j4);
IkReal x13453=(sj1*sj2);
IkReal x13454=(gconst26*sj3);
IkReal x13455=(gconst25*sj3);
IkReal x13456=(gconst26*r10);
IkReal x13457=(gconst25*r11);
IkReal x13458=(cj3*gconst25);
IkReal x13459=((1.0)*cj2);
IkReal x13460=(cj1*sj2);
IkReal x13461=(gconst26*r00);
IkReal x13462=(gconst26*r20);
IkReal x13463=(cj3*gconst26);
IkReal x13464=(cj1*x13459);
IkReal x13465=((1.0)*x13452);
IkReal x13466=((1.0)*x13451);
IkReal x13467=(cj3*x13451);
IkReal x13468=(gconst25*x13451);
evalcond[0]=((((-1.0)*r22*x13465))+((r21*x13468))+(((-1.0)*x13462*x13466)));
evalcond[1]=((((-1.0)*x13461*x13466))+(((-1.0)*r02*x13465))+((r01*x13468)));
evalcond[2]=((1.0)+((x13451*x13457))+(((-1.0)*x13456*x13466))+(((-1.0)*r12*x13465)));
evalcond[3]=(((r10*x13455))+((r12*x13467))+(((-1.0)*cj3*x13456*x13465))+((r11*x13454))+((cj3*x13452*x13457)));
evalcond[4]=(((r10*x13458))+((r10*x13452*x13454))+(((-1.0)*r11*x13455*x13465))+((r11*x13463))+(((-1.0)*r12*sj3*x13466)));
evalcond[5]=(x13460+((cj2*sj1))+((r20*x13455))+((r21*x13454))+(((-1.0)*cj3*x13462*x13465))+((r22*x13467))+((r21*x13452*x13458)));
evalcond[6]=(x13453+((r01*x13452*x13458))+(((-1.0)*x13464))+((r02*x13467))+(((-1.0)*cj3*x13461*x13465))+((r01*x13454))+((r00*x13455)));
evalcond[7]=(x13453+((r20*x13458))+((r21*x13463))+(((-1.0)*x13464))+(((-1.0)*r21*x13455*x13465))+(((-1.0)*r22*sj3*x13466))+((r20*x13452*x13454)));
evalcond[8]=((((-1.0)*r02*sj3*x13466))+((r00*x13452*x13454))+(((-1.0)*r01*x13455*x13465))+(((-1.0)*x13460))+(((-1.0)*sj1*x13459))+((r01*x13463))+((r00*x13458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13469=((1.0)*gconst26);
CheckValue<IkReal> x13470 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13469))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13470.valid){
continue;
}
CheckValue<IkReal> x13471=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13469))+(((-1.0)*gconst25*r00)))),-1);
if(!x13471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13470.value)+(((1.5707963267949)*(x13471.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13472=IKsin(j4);
IkReal x13473=IKcos(j4);
IkReal x13474=(sj1*sj2);
IkReal x13475=(gconst26*sj3);
IkReal x13476=(gconst25*sj3);
IkReal x13477=(gconst26*r10);
IkReal x13478=(gconst25*r11);
IkReal x13479=(cj3*gconst25);
IkReal x13480=((1.0)*cj2);
IkReal x13481=(cj1*sj2);
IkReal x13482=(gconst26*r00);
IkReal x13483=(gconst26*r20);
IkReal x13484=(cj3*gconst26);
IkReal x13485=(cj1*x13480);
IkReal x13486=((1.0)*x13473);
IkReal x13487=((1.0)*x13472);
IkReal x13488=(cj3*x13472);
IkReal x13489=(gconst25*x13472);
evalcond[0]=((((-1.0)*x13483*x13487))+(((-1.0)*r22*x13486))+((r21*x13489)));
evalcond[1]=((((-1.0)*x13482*x13487))+(((-1.0)*r02*x13486))+((r01*x13489)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13486))+(((-1.0)*x13477*x13487))+((x13472*x13478)));
evalcond[3]=(((r11*x13475))+((r10*x13476))+(((-1.0)*cj3*x13477*x13486))+((cj3*x13473*x13478))+((r12*x13488)));
evalcond[4]=(((r10*x13479))+(((-1.0)*r11*x13476*x13486))+((r10*x13473*x13475))+(((-1.0)*r12*sj3*x13487))+((r11*x13484)));
evalcond[5]=(x13481+((cj2*sj1))+(((-1.0)*cj3*x13483*x13486))+((r21*x13475))+((r21*x13473*x13479))+((r20*x13476))+((r22*x13488)));
evalcond[6]=(x13474+(((-1.0)*x13485))+((r02*x13488))+((r00*x13476))+((r01*x13475))+((r01*x13473*x13479))+(((-1.0)*cj3*x13482*x13486)));
evalcond[7]=(x13474+(((-1.0)*r21*x13476*x13486))+(((-1.0)*x13485))+((r20*x13473*x13475))+(((-1.0)*r22*sj3*x13487))+((r20*x13479))+((r21*x13484)));
evalcond[8]=((((-1.0)*sj1*x13480))+(((-1.0)*x13481))+((r00*x13479))+((r00*x13473*x13475))+(((-1.0)*r01*x13476*x13486))+((r01*x13484))+(((-1.0)*r02*sj3*x13487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13491 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13491)==0){
continue;
}
IkReal x13490=pow(x13491,-0.5);
CheckValue<IkReal> x13492 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13492.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13492.value))));
IkReal gconst28=((1.0)*r21*x13490);
IkReal gconst29=((-1.0)*r20*x13490);
CheckValue<IkReal> x13493 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13493.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13493.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13496 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13496.valid){
continue;
}
IkReal x13494=((1.0)*(x13496.value));
IkReal x13495=x13490;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13494)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13494)));
IkReal gconst28=((1.0)*r21*x13495);
IkReal gconst29=((-1.0)*r20*x13495);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13499 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13499.valid){
continue;
}
IkReal x13497=((1.0)*(x13499.value));
IkReal x13498=x13490;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13497)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13497)));
IkReal gconst28=((1.0)*r21*x13498);
IkReal gconst29=((-1.0)*r20*x13498);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13502 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13502.valid){
continue;
}
IkReal x13500=((1.0)*(x13502.value));
IkReal x13501=x13490;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13500)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13500)));
IkReal gconst28=((1.0)*r21*x13501);
IkReal gconst29=((-1.0)*r20*x13501);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13505 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13505.valid){
continue;
}
IkReal x13503=((1.0)*(x13505.value));
IkReal x13504=x13490;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13503)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13503)));
IkReal gconst28=((1.0)*r21*x13504);
IkReal gconst29=((-1.0)*r20*x13504);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13508 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13508.valid){
continue;
}
IkReal x13506=((1.0)*(x13508.value));
IkReal x13507=x13490;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13506)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13506)));
IkReal gconst28=((1.0)*r21*x13507);
IkReal gconst29=((-1.0)*r20*x13507);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13511 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13511.valid){
continue;
}
IkReal x13509=((1.0)*(x13511.value));
IkReal x13510=x13490;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13509)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13509)));
IkReal gconst28=((1.0)*r21*x13510);
IkReal gconst29=((-1.0)*r20*x13510);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13512=(gconst29*r10);
IkReal x13513=(gconst28*r11);
CheckValue<IkReal> x13514=IKPowWithIntegerCheck(IKsign(((x13512*x13512)+(r12*r12)+(((-2.0)*x13512*x13513))+(x13513*x13513))),-1);
if(!x13514.valid){
continue;
}
CheckValue<IkReal> x13515 = IKatan2WithCheck(IkReal((x13512+(((-1.0)*x13513)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13514.value)))+(x13515.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13516=IKsin(j4);
IkReal x13517=IKcos(j4);
IkReal x13518=(gconst28*r11);
IkReal x13519=((1.0)*cj2);
IkReal x13520=((1.0)*x13517);
IkReal x13521=(gconst29*x13517);
IkReal x13522=(gconst28*x13516);
IkReal x13523=((1.0)*x13516);
IkReal x13524=(gconst29*x13523);
evalcond[0]=(((r21*x13522))+(((-1.0)*r22*x13520))+(((-1.0)*r20*x13524)));
evalcond[1]=(((r01*x13522))+(((-1.0)*r00*x13524))+(((-1.0)*r02*x13520)));
evalcond[2]=((((-1.0)*x13518*x13520))+(((-1.0)*r12*x13523))+((r10*x13521)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13520))+(((-1.0)*r10*x13524))+((x13516*x13518)));
evalcond[4]=((((-1.0)*r22*x13523))+((r20*x13521))+(((-1.0)*cj1*x13519))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13520)));
evalcond[5]=((((-1.0)*sj1*x13519))+(((-1.0)*gconst28*r01*x13520))+(((-1.0)*cj1*sj2))+((r00*x13521))+(((-1.0)*r02*x13523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13525=((1.0)*gconst29);
CheckValue<IkReal> x13526 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13525))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13526.valid){
continue;
}
CheckValue<IkReal> x13527=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13525)))),-1);
if(!x13527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13526.value)+(((1.5707963267949)*(x13527.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13528=IKsin(j4);
IkReal x13529=IKcos(j4);
IkReal x13530=(gconst28*r11);
IkReal x13531=((1.0)*cj2);
IkReal x13532=((1.0)*x13529);
IkReal x13533=(gconst29*x13529);
IkReal x13534=(gconst28*x13528);
IkReal x13535=((1.0)*x13528);
IkReal x13536=(gconst29*x13535);
evalcond[0]=((((-1.0)*r22*x13532))+(((-1.0)*r20*x13536))+((r21*x13534)));
evalcond[1]=((((-1.0)*r02*x13532))+(((-1.0)*r00*x13536))+((r01*x13534)));
evalcond[2]=((((-1.0)*r12*x13535))+(((-1.0)*x13530*x13532))+((r10*x13533)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13532))+((x13528*x13530))+(((-1.0)*r10*x13536)));
evalcond[4]=((((-1.0)*r22*x13535))+((r20*x13533))+(((-1.0)*cj1*x13531))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13532)));
evalcond[5]=((((-1.0)*sj1*x13531))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r01*x13532))+(((-1.0)*r02*x13535))+((r00*x13533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13537=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13537.valid){
continue;
}
CheckValue<IkReal> x13538 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13537.value)))+(x13538.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13539=IKsin(j4);
IkReal x13540=IKcos(j4);
IkReal x13541=(gconst28*r11);
IkReal x13542=((1.0)*cj2);
IkReal x13543=((1.0)*x13540);
IkReal x13544=(gconst29*x13540);
IkReal x13545=(gconst28*x13539);
IkReal x13546=((1.0)*x13539);
IkReal x13547=(gconst29*x13546);
evalcond[0]=(((r21*x13545))+(((-1.0)*r22*x13543))+(((-1.0)*r20*x13547)));
evalcond[1]=(((r01*x13545))+(((-1.0)*r02*x13543))+(((-1.0)*r00*x13547)));
evalcond[2]=(((r10*x13544))+(((-1.0)*r12*x13546))+(((-1.0)*x13541*x13543)));
evalcond[3]=((1.0)+((x13539*x13541))+(((-1.0)*r10*x13547))+(((-1.0)*r12*x13543)));
evalcond[4]=((((-1.0)*gconst28*r21*x13543))+((sj1*sj2))+((r20*x13544))+(((-1.0)*r22*x13546))+(((-1.0)*cj1*x13542)));
evalcond[5]=((((-1.0)*gconst28*r01*x13543))+((r00*x13544))+(((-1.0)*r02*x13546))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13550 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13550.valid){
continue;
}
IkReal x13548=((1.0)*(x13550.value));
IkReal x13549=x13490;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13548)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13548)));
IkReal gconst28=((1.0)*r21*x13549);
IkReal gconst29=((-1.0)*r20*x13549);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13553 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13553.valid){
continue;
}
IkReal x13551=((1.0)*(x13553.value));
IkReal x13552=x13490;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13551)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13551)));
IkReal gconst28=((1.0)*r21*x13552);
IkReal gconst29=((-1.0)*r20*x13552);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13556 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13556.valid){
continue;
}
IkReal x13554=((1.0)*(x13556.value));
IkReal x13555=x13490;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13554)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13554)));
IkReal gconst28=((1.0)*r21*x13555);
IkReal gconst29=((-1.0)*r20*x13555);
IkReal x13557=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13561=IKPowWithIntegerCheck(x13557,-1);
if(!x13561.valid){
continue;
}
IkReal x13558=x13561.value;
IkReal x13559=((1.0)*x13558);
IkReal x13560=((((-1.0)*x13559*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13559*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x13558)));
j4eval[0]=x13560;
j4eval[1]=r12;
j4eval[2]=x13557;
j4eval[3]=IKsign(x13560);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13562=(gconst28*r11);
IkReal x13563=(gconst29*r10);
CheckValue<IkReal> x13564 = IKatan2WithCheck(IkReal((x13562+(((-1.0)*x13563)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13564.valid){
continue;
}
CheckValue<IkReal> x13565=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13563*x13563)))+(((-1.0)*(r12*r12)))+(((2.0)*x13562*x13563))+(((-1.0)*(x13562*x13562))))),-1);
if(!x13565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13564.value)+(((1.5707963267949)*(x13565.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13566=IKcos(j4);
IkReal x13567=IKsin(j4);
IkReal x13568=(gconst29*r10);
IkReal x13569=(gconst29*r20);
IkReal x13570=(gconst28*r21);
IkReal x13571=((1.0)*cj2);
IkReal x13572=(gconst29*r00);
IkReal x13573=((1.0)*x13566);
IkReal x13574=((1.0)*x13567);
IkReal x13575=(gconst28*x13566);
IkReal x13576=(gconst28*x13567);
evalcond[0]=((((-1.0)*x13568*x13573))+((r11*x13575))+((r12*x13567)));
evalcond[1]=((((-1.0)*r22*x13573))+((x13567*x13570))+(((-1.0)*x13569*x13574)));
evalcond[2]=((((-1.0)*r02*x13573))+(((-1.0)*x13572*x13574))+((r01*x13576)));
evalcond[3]=((1.0)+(((-1.0)*x13568*x13574))+((r11*x13576))+(((-1.0)*r12*x13573)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x13571))+((x13566*x13570))+((r22*x13567))+(((-1.0)*x13569*x13573)));
evalcond[5]=((((-1.0)*sj1*x13571))+(((-1.0)*x13572*x13573))+(((-1.0)*cj1*sj2))+((r02*x13567))+((r01*x13575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13577=((1.0)*gconst29);
CheckValue<IkReal> x13578 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13577))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13578.valid){
continue;
}
CheckValue<IkReal> x13579=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13577))+(((-1.0)*gconst28*r00)))),-1);
if(!x13579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13578.value)+(((1.5707963267949)*(x13579.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13580=IKcos(j4);
IkReal x13581=IKsin(j4);
IkReal x13582=(gconst29*r10);
IkReal x13583=(gconst29*r20);
IkReal x13584=(gconst28*r21);
IkReal x13585=((1.0)*cj2);
IkReal x13586=(gconst29*r00);
IkReal x13587=((1.0)*x13580);
IkReal x13588=((1.0)*x13581);
IkReal x13589=(gconst28*x13580);
IkReal x13590=(gconst28*x13581);
evalcond[0]=(((r12*x13581))+((r11*x13589))+(((-1.0)*x13582*x13587)));
evalcond[1]=((((-1.0)*x13583*x13588))+((x13581*x13584))+(((-1.0)*r22*x13587)));
evalcond[2]=((((-1.0)*r02*x13587))+((r01*x13590))+(((-1.0)*x13586*x13588)));
evalcond[3]=((1.0)+((r11*x13590))+(((-1.0)*r12*x13587))+(((-1.0)*x13582*x13588)));
evalcond[4]=(((x13580*x13584))+((sj1*sj2))+(((-1.0)*cj1*x13585))+(((-1.0)*x13583*x13587))+((r22*x13581)));
evalcond[5]=((((-1.0)*sj1*x13585))+(((-1.0)*cj1*sj2))+(((-1.0)*x13586*x13587))+((r01*x13589))+((r02*x13581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13591=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13591.valid){
continue;
}
CheckValue<IkReal> x13592 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13591.value)))+(x13592.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13593=IKcos(j4);
IkReal x13594=IKsin(j4);
IkReal x13595=(gconst29*r10);
IkReal x13596=(gconst29*r20);
IkReal x13597=(gconst28*r21);
IkReal x13598=((1.0)*cj2);
IkReal x13599=(gconst29*r00);
IkReal x13600=((1.0)*x13593);
IkReal x13601=((1.0)*x13594);
IkReal x13602=(gconst28*x13593);
IkReal x13603=(gconst28*x13594);
evalcond[0]=(((r11*x13602))+(((-1.0)*x13595*x13600))+((r12*x13594)));
evalcond[1]=((((-1.0)*x13596*x13601))+((x13594*x13597))+(((-1.0)*r22*x13600)));
evalcond[2]=((((-1.0)*x13599*x13601))+(((-1.0)*r02*x13600))+((r01*x13603)));
evalcond[3]=((1.0)+((r11*x13603))+(((-1.0)*x13595*x13601))+(((-1.0)*r12*x13600)));
evalcond[4]=(((x13593*x13597))+((r22*x13594))+(((-1.0)*x13596*x13600))+((sj1*sj2))+(((-1.0)*cj1*x13598)));
evalcond[5]=((((-1.0)*x13599*x13600))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13598))+((r02*x13594))+((r01*x13602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13606 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13606.valid){
continue;
}
IkReal x13604=((1.0)*(x13606.value));
IkReal x13605=x13490;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13604)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13604)));
IkReal gconst28=((1.0)*r21*x13605);
IkReal gconst29=((-1.0)*r20*x13605);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13609 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13609.valid){
continue;
}
IkReal x13607=((1.0)*(x13609.value));
IkReal x13608=x13490;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13607)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13607)));
IkReal gconst28=((1.0)*r21*x13608);
IkReal gconst29=((-1.0)*r20*x13608);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13612 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13612.valid){
continue;
}
IkReal x13610=((1.0)*(x13612.value));
IkReal x13611=x13490;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13610)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13610)));
IkReal gconst28=((1.0)*r21*x13611);
IkReal gconst29=((-1.0)*r20*x13611);
IkReal x13613=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13617=IKPowWithIntegerCheck(x13613,-1);
if(!x13617.valid){
continue;
}
IkReal x13614=x13617.value;
IkReal x13615=((1.0)*x13614);
IkReal x13616=((((-2.0)*r10*r11*r20*r21*x13614))+(((-1.0)*x13615*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13615*(r11*r11)*(r21*r21))));
j4eval[0]=x13616;
j4eval[1]=r12;
j4eval[2]=x13613;
j4eval[3]=IKsign(x13616);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13618=(gconst28*r11);
IkReal x13619=(gconst29*r10);
CheckValue<IkReal> x13620=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13618*x13618)))+(((-1.0)*(r12*r12)))+(((2.0)*x13618*x13619))+(((-1.0)*(x13619*x13619))))),-1);
if(!x13620.valid){
continue;
}
CheckValue<IkReal> x13621 = IKatan2WithCheck(IkReal((x13618+(((-1.0)*x13619)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13620.value)))+(x13621.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13622=IKcos(j4);
IkReal x13623=IKsin(j4);
IkReal x13624=(gconst29*r10);
IkReal x13625=(gconst29*r20);
IkReal x13626=(gconst28*r21);
IkReal x13627=(gconst29*r00);
IkReal x13628=((1.0)*x13622);
IkReal x13629=((1.0)*x13623);
IkReal x13630=(gconst28*x13622);
IkReal x13631=(gconst28*x13623);
evalcond[0]=(((r11*x13630))+((r12*x13623))+(((-1.0)*x13624*x13628)));
evalcond[1]=(((x13623*x13626))+(((-1.0)*x13625*x13629))+(((-1.0)*r22*x13628)));
evalcond[2]=((((-1.0)*x13627*x13629))+(((-1.0)*r02*x13628))+((r01*x13631)));
evalcond[3]=((1.0)+((r11*x13631))+(((-1.0)*x13624*x13629))+(((-1.0)*r12*x13628)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13622*x13626))+(((-1.0)*x13625*x13628))+((r22*x13623)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13623))+(((-1.0)*x13627*x13628))+((r01*x13630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13632=((1.0)*gconst29);
CheckValue<IkReal> x13633 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13632)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13633.valid){
continue;
}
CheckValue<IkReal> x13634=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13632))+(((-1.0)*gconst28*r00)))),-1);
if(!x13634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13633.value)+(((1.5707963267949)*(x13634.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13635=IKcos(j4);
IkReal x13636=IKsin(j4);
IkReal x13637=(gconst29*r10);
IkReal x13638=(gconst29*r20);
IkReal x13639=(gconst28*r21);
IkReal x13640=(gconst29*r00);
IkReal x13641=((1.0)*x13635);
IkReal x13642=((1.0)*x13636);
IkReal x13643=(gconst28*x13635);
IkReal x13644=(gconst28*x13636);
evalcond[0]=(((r12*x13636))+((r11*x13643))+(((-1.0)*x13637*x13641)));
evalcond[1]=(((x13636*x13639))+(((-1.0)*x13638*x13642))+(((-1.0)*r22*x13641)));
evalcond[2]=((((-1.0)*x13640*x13642))+((r01*x13644))+(((-1.0)*r02*x13641)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13641))+((r11*x13644))+(((-1.0)*x13637*x13642)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x13636))+((x13635*x13639))+(((-1.0)*x13638*x13641)));
evalcond[5]=((((-1.0)*x13640*x13641))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13636))+((r01*x13643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13645=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13645.valid){
continue;
}
CheckValue<IkReal> x13646 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13645.value)))+(x13646.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13647=IKcos(j4);
IkReal x13648=IKsin(j4);
IkReal x13649=(gconst29*r10);
IkReal x13650=(gconst29*r20);
IkReal x13651=(gconst28*r21);
IkReal x13652=(gconst29*r00);
IkReal x13653=((1.0)*x13647);
IkReal x13654=((1.0)*x13648);
IkReal x13655=(gconst28*x13647);
IkReal x13656=(gconst28*x13648);
evalcond[0]=((((-1.0)*x13649*x13653))+((r12*x13648))+((r11*x13655)));
evalcond[1]=(((x13648*x13651))+(((-1.0)*r22*x13653))+(((-1.0)*x13650*x13654)));
evalcond[2]=(((r01*x13656))+(((-1.0)*r02*x13653))+(((-1.0)*x13652*x13654)));
evalcond[3]=((1.0)+(((-1.0)*x13649*x13654))+(((-1.0)*r12*x13653))+((r11*x13656)));
evalcond[4]=(((cj2*sj1))+((r22*x13648))+((cj1*sj2))+(((-1.0)*x13650*x13653))+((x13647*x13651)));
evalcond[5]=(((r02*x13648))+((r01*x13655))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13652*x13653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13659 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13659.valid){
continue;
}
IkReal x13657=((1.0)*(x13659.value));
IkReal x13658=x13490;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13657)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13657)));
IkReal gconst28=((1.0)*r21*x13658);
IkReal gconst29=((-1.0)*r20*x13658);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13662 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13662.valid){
continue;
}
IkReal x13660=((1.0)*(x13662.value));
IkReal x13661=x13490;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13660)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13660)));
IkReal gconst28=((1.0)*r21*x13661);
IkReal gconst29=((-1.0)*r20*x13661);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13665 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13665.valid){
continue;
}
IkReal x13663=((1.0)*(x13665.value));
IkReal x13664=x13490;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13663)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13663)));
IkReal gconst28=((1.0)*r21*x13664);
IkReal gconst29=((-1.0)*r20*x13664);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13666=(gconst29*r10);
IkReal x13667=(gconst28*r11);
CheckValue<IkReal> x13668 = IKatan2WithCheck(IkReal((x13666+(((-1.0)*x13667)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13668.valid){
continue;
}
CheckValue<IkReal> x13669=IKPowWithIntegerCheck(IKsign(((x13667*x13667)+(r12*r12)+(((-2.0)*x13666*x13667))+(x13666*x13666))),-1);
if(!x13669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13668.value)+(((1.5707963267949)*(x13669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13670=IKsin(j4);
IkReal x13671=IKcos(j4);
IkReal x13672=(gconst28*r11);
IkReal x13673=((1.0)*x13671);
IkReal x13674=(gconst29*x13671);
IkReal x13675=(gconst28*x13670);
IkReal x13676=((1.0)*x13670);
IkReal x13677=(gconst29*x13676);
evalcond[0]=((((-1.0)*r20*x13677))+((r21*x13675))+(((-1.0)*r22*x13673)));
evalcond[1]=(((r01*x13675))+(((-1.0)*r00*x13677))+(((-1.0)*r02*x13673)));
evalcond[2]=((((-1.0)*x13672*x13673))+(((-1.0)*r12*x13676))+((r10*x13674)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13673))+((x13670*x13672))+(((-1.0)*r10*x13677)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13673))+((cj1*sj2))+((r20*x13674))+(((-1.0)*r22*x13676)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13674))+(((-1.0)*r02*x13676))+(((-1.0)*gconst28*r01*x13673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13678=((1.0)*gconst29);
CheckValue<IkReal> x13679 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13678))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13679.valid){
continue;
}
CheckValue<IkReal> x13680=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13678))+(((-1.0)*gconst28*r00)))),-1);
if(!x13680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13679.value)+(((1.5707963267949)*(x13680.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13681=IKsin(j4);
IkReal x13682=IKcos(j4);
IkReal x13683=(gconst28*r11);
IkReal x13684=((1.0)*x13682);
IkReal x13685=(gconst29*x13682);
IkReal x13686=(gconst28*x13681);
IkReal x13687=((1.0)*x13681);
IkReal x13688=(gconst29*x13687);
evalcond[0]=((((-1.0)*r22*x13684))+(((-1.0)*r20*x13688))+((r21*x13686)));
evalcond[1]=((((-1.0)*r00*x13688))+((r01*x13686))+(((-1.0)*r02*x13684)));
evalcond[2]=((((-1.0)*r12*x13687))+((r10*x13685))+(((-1.0)*x13683*x13684)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13688))+(((-1.0)*r12*x13684))+((x13681*x13683)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x13687))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13684))+((r20*x13685)));
evalcond[5]=((((-1.0)*gconst28*r01*x13684))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13685))+(((-1.0)*r02*x13687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13689=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13689.valid){
continue;
}
CheckValue<IkReal> x13690 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13689.value)))+(x13690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13691=IKsin(j4);
IkReal x13692=IKcos(j4);
IkReal x13693=(gconst28*r11);
IkReal x13694=((1.0)*x13692);
IkReal x13695=(gconst29*x13692);
IkReal x13696=(gconst28*x13691);
IkReal x13697=((1.0)*x13691);
IkReal x13698=(gconst29*x13697);
evalcond[0]=((((-1.0)*r20*x13698))+((r21*x13696))+(((-1.0)*r22*x13694)));
evalcond[1]=(((r01*x13696))+(((-1.0)*r02*x13694))+(((-1.0)*r00*x13698)));
evalcond[2]=(((r10*x13695))+(((-1.0)*x13693*x13694))+(((-1.0)*r12*x13697)));
evalcond[3]=((1.0)+((x13691*x13693))+(((-1.0)*r10*x13698))+(((-1.0)*r12*x13694)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13694))+((cj1*sj2))+((r20*x13695))+(((-1.0)*r22*x13697)));
evalcond[5]=(((r00*x13695))+(((-1.0)*r02*x13697))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13699=gconst28*gconst28;
IkReal x13700=gconst29*gconst29;
IkReal x13701=(r11*r21);
IkReal x13702=(gconst29*sj3);
IkReal x13703=((1.0)*cj3);
IkReal x13704=(r10*r20);
IkReal x13705=(r10*r21);
IkReal x13706=(r11*r20);
IkReal x13707=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13708 = IKatan2WithCheck(IkReal((((r11*r22*x13702))+((gconst28*r10*r22*sj3)))),IkReal(((((-1.0)*gconst28*x13702*x13704))+((sj3*x13699*x13705))+((gconst28*x13701*x13702))+(((-1.0)*sj3*x13700*x13706)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13708.valid){
continue;
}
CheckValue<IkReal> x13709=IKPowWithIntegerCheck(IKsign((((x13706*x13707))+((x13705*x13707))+(((-1.0)*x13699*x13701*x13703))+(((-1.0)*r12*r22*x13703))+(((-1.0)*x13700*x13703*x13704)))),-1);
if(!x13709.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13708.value)+(((1.5707963267949)*(x13709.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13710=IKsin(j4);
IkReal x13711=IKcos(j4);
IkReal x13712=(sj1*sj2);
IkReal x13713=(gconst29*r20);
IkReal x13714=(gconst28*r20);
IkReal x13715=((1.0)*cj2);
IkReal x13716=(r11*sj3);
IkReal x13717=(cj1*sj2);
IkReal x13718=(gconst29*r01);
IkReal x13719=(gconst29*r10);
IkReal x13720=(cj3*gconst28);
IkReal x13721=(cj3*gconst29);
IkReal x13722=(gconst28*sj3);
IkReal x13723=(gconst29*r00);
IkReal x13724=(cj1*x13715);
IkReal x13725=((1.0)*x13711);
IkReal x13726=((1.0)*x13710);
IkReal x13727=(gconst28*x13710);
IkReal x13728=(cj3*x13710);
IkReal x13729=(sj3*x13711);
evalcond[0]=((((-1.0)*x13713*x13726))+(((-1.0)*r22*x13725))+((r21*x13727)));
evalcond[1]=(((r01*x13727))+(((-1.0)*x13723*x13726))+(((-1.0)*r02*x13725)));
evalcond[2]=((1.0)+((r11*x13727))+(((-1.0)*r12*x13725))+(((-1.0)*x13719*x13726)));
evalcond[3]=(((r12*x13728))+((r10*x13722))+((gconst29*x13716))+((r11*x13711*x13720))+(((-1.0)*cj3*x13719*x13725)));
evalcond[4]=((((-1.0)*r12*sj3*x13726))+((r10*x13720))+((r11*x13721))+((x13719*x13729))+(((-1.0)*gconst28*x13716*x13725)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj3*x13713*x13725))+((gconst29*r21*sj3))+((sj3*x13714))+x13717+((r22*x13728))+((r21*x13711*x13720)));
evalcond[6]=((((-1.0)*r00*x13721*x13725))+((sj3*x13718))+((r00*x13722))+((r01*x13711*x13720))+x13712+((r02*x13728))+(((-1.0)*x13724)));
evalcond[7]=(x13712+((r21*x13721))+((cj3*x13714))+(((-1.0)*r22*sj3*x13726))+((x13713*x13729))+(((-1.0)*x13724))+(((-1.0)*r21*x13722*x13725)));
evalcond[8]=((((-1.0)*x13717))+((r00*x13720))+(((-1.0)*sj1*x13715))+((x13723*x13729))+((cj3*x13718))+(((-1.0)*r01*x13722*x13725))+(((-1.0)*r02*sj3*x13726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13730=((1.0)*gconst29);
CheckValue<IkReal> x13731 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13730))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13731.valid){
continue;
}
CheckValue<IkReal> x13732=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13730)))),-1);
if(!x13732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13731.value)+(((1.5707963267949)*(x13732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13733=IKsin(j4);
IkReal x13734=IKcos(j4);
IkReal x13735=(sj1*sj2);
IkReal x13736=(gconst29*r20);
IkReal x13737=(gconst28*r20);
IkReal x13738=((1.0)*cj2);
IkReal x13739=(r11*sj3);
IkReal x13740=(cj1*sj2);
IkReal x13741=(gconst29*r01);
IkReal x13742=(gconst29*r10);
IkReal x13743=(cj3*gconst28);
IkReal x13744=(cj3*gconst29);
IkReal x13745=(gconst28*sj3);
IkReal x13746=(gconst29*r00);
IkReal x13747=(cj1*x13738);
IkReal x13748=((1.0)*x13734);
IkReal x13749=((1.0)*x13733);
IkReal x13750=(gconst28*x13733);
IkReal x13751=(cj3*x13733);
IkReal x13752=(sj3*x13734);
evalcond[0]=(((r21*x13750))+(((-1.0)*r22*x13748))+(((-1.0)*x13736*x13749)));
evalcond[1]=((((-1.0)*r02*x13748))+(((-1.0)*x13746*x13749))+((r01*x13750)));
evalcond[2]=((1.0)+((r11*x13750))+(((-1.0)*r12*x13748))+(((-1.0)*x13742*x13749)));
evalcond[3]=(((r12*x13751))+(((-1.0)*cj3*x13742*x13748))+((r11*x13734*x13743))+((r10*x13745))+((gconst29*x13739)));
evalcond[4]=((((-1.0)*r12*sj3*x13749))+(((-1.0)*gconst28*x13739*x13748))+((r10*x13743))+((r11*x13744))+((x13742*x13752)));
evalcond[5]=(((cj2*sj1))+((r22*x13751))+((gconst29*r21*sj3))+x13740+((r21*x13734*x13743))+((sj3*x13737))+(((-1.0)*cj3*x13736*x13748)));
evalcond[6]=(x13735+((r02*x13751))+((r01*x13734*x13743))+(((-1.0)*r00*x13744*x13748))+(((-1.0)*x13747))+((sj3*x13741))+((r00*x13745)));
evalcond[7]=((((-1.0)*r21*x13745*x13748))+x13735+(((-1.0)*r22*sj3*x13749))+((r21*x13744))+(((-1.0)*x13747))+((cj3*x13737))+((x13736*x13752)));
evalcond[8]=((((-1.0)*sj1*x13738))+(((-1.0)*r02*sj3*x13749))+(((-1.0)*x13740))+((x13746*x13752))+((cj3*x13741))+(((-1.0)*r01*x13745*x13748))+((r00*x13743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13753=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13753.valid){
continue;
}
CheckValue<IkReal> x13754 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13753.value)))+(x13754.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13755=IKsin(j4);
IkReal x13756=IKcos(j4);
IkReal x13757=(sj1*sj2);
IkReal x13758=(gconst29*r20);
IkReal x13759=(gconst28*r20);
IkReal x13760=((1.0)*cj2);
IkReal x13761=(r11*sj3);
IkReal x13762=(cj1*sj2);
IkReal x13763=(gconst29*r01);
IkReal x13764=(gconst29*r10);
IkReal x13765=(cj3*gconst28);
IkReal x13766=(cj3*gconst29);
IkReal x13767=(gconst28*sj3);
IkReal x13768=(gconst29*r00);
IkReal x13769=(cj1*x13760);
IkReal x13770=((1.0)*x13756);
IkReal x13771=((1.0)*x13755);
IkReal x13772=(gconst28*x13755);
IkReal x13773=(cj3*x13755);
IkReal x13774=(sj3*x13756);
evalcond[0]=((((-1.0)*r22*x13770))+(((-1.0)*x13758*x13771))+((r21*x13772)));
evalcond[1]=(((r01*x13772))+(((-1.0)*r02*x13770))+(((-1.0)*x13768*x13771)));
evalcond[2]=((1.0)+((r11*x13772))+(((-1.0)*r12*x13770))+(((-1.0)*x13764*x13771)));
evalcond[3]=(((gconst29*x13761))+((r11*x13756*x13765))+((r10*x13767))+(((-1.0)*cj3*x13764*x13770))+((r12*x13773)));
evalcond[4]=(((r11*x13766))+(((-1.0)*gconst28*x13761*x13770))+((r10*x13765))+((x13764*x13774))+(((-1.0)*r12*sj3*x13771)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+x13762+(((-1.0)*cj3*x13758*x13770))+((sj3*x13759))+((r22*x13773))+((r21*x13756*x13765)));
evalcond[6]=((((-1.0)*r00*x13766*x13770))+x13757+((r00*x13767))+((sj3*x13763))+((r01*x13756*x13765))+(((-1.0)*x13769))+((r02*x13773)));
evalcond[7]=(x13757+(((-1.0)*r22*sj3*x13771))+(((-1.0)*r21*x13767*x13770))+((r21*x13766))+((x13758*x13774))+((cj3*x13759))+(((-1.0)*x13769)));
evalcond[8]=((((-1.0)*x13762))+(((-1.0)*sj1*x13760))+((x13768*x13774))+((r00*x13765))+((cj3*x13763))+(((-1.0)*r02*sj3*x13771))+(((-1.0)*r01*x13767*x13770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13775=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13775);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13775);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13776=(r11*sj5);
IkReal x13777=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x13777))+x13776);
j4eval[1]=((((-1.0)*cj3*x13777))+((cj3*x13776)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13778=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13778);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13778);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13779=(cj5*r10);
IkReal x13780=(r11*sj5);
j4eval[0]=((((-1.0)*x13779))+x13780);
j4eval[1]=(((sj3*x13779))+(((-1.0)*sj3*x13780)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13781=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13781);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13781);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13782=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13782);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13782);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13783=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13783))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13783)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13784=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13784);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13784);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13785=((1.0)*sj1);
CheckValue<IkReal> x13786=IKPowWithIntegerCheck(r22,-1);
if(!x13786.valid){
continue;
}
CheckValue<IkReal> x13787=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13787.valid){
continue;
}
if( IKabs(((x13786.value)*(((((-1.0)*cj2*x13785))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13787.value)*(((((-1.0)*sj2*x13785))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13786.value)*(((((-1.0)*cj2*x13785))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13787.value)*(((((-1.0)*sj2*x13785))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13786.value)*(((((-1.0)*cj2*x13785))+(((-1.0)*cj1*sj2))))), ((x13787.value)*(((((-1.0)*sj2*x13785))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13788=IKsin(j4);
IkReal x13789=IKcos(j4);
IkReal x13790=((1.0)*cj5);
IkReal x13791=(sj5*x13789);
IkReal x13792=(sj5*x13788);
evalcond[0]=((-1.0)*r22*x13789);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13788)));
evalcond[2]=(((r01*x13792))+(((-1.0)*r00*x13788*x13790)));
evalcond[3]=((((-1.0)*r10*x13789*x13790))+((r11*x13791)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13788*x13790))+((r11*x13792)));
evalcond[5]=((((-1.0)*r00*x13789*x13790))+((r01*x13791))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13793=((1.0)*cj5);
CheckValue<IkReal> x13794=IKPowWithIntegerCheck(((((-1.0)*r10*x13793))+((r11*sj5))),-1);
if(!x13794.valid){
continue;
}
CheckValue<IkReal> x13795=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13793))),-1);
if(!x13795.valid){
continue;
}
if( IKabs(((-1.0)*(x13794.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13795.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13794.value)))+IKsqr(((x13795.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13794.value)), ((x13795.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13796=IKsin(j4);
IkReal x13797=IKcos(j4);
IkReal x13798=((1.0)*cj5);
IkReal x13799=(sj5*x13797);
IkReal x13800=(sj5*x13796);
evalcond[0]=((-1.0)*r22*x13797);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13796)));
evalcond[2]=(((r01*x13800))+(((-1.0)*r00*x13796*x13798)));
evalcond[3]=((((-1.0)*r10*x13797*x13798))+((r11*x13799)));
evalcond[4]=((1.0)+((r11*x13800))+(((-1.0)*r10*x13796*x13798)));
evalcond[5]=(((r01*x13799))+(((-1.0)*r00*x13797*x13798))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13801=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13801);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13801);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13802=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13802);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13802);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13803=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13803.valid){
continue;
}
CheckValue<IkReal> x13804=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13804.valid){
continue;
}
if( IKabs(((-1.0)*(x13803.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13804.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13803.value)))+IKsqr(((x13804.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13803.value)), ((x13804.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13805=IKsin(j4);
IkReal x13806=IKcos(j4);
IkReal x13807=(cj5*x13806);
IkReal x13808=(sj5*x13805);
IkReal x13809=((1.0)*cj5*x13805);
IkReal x13810=((1.0)*sj5*x13806);
evalcond[0]=((-1.0)*r22*x13806);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13805)));
evalcond[2]=(((r01*x13808))+(((-1.0)*r00*x13809)));
evalcond[3]=((((-1.0)*r11*x13810))+((r10*x13807)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13809))+((r11*x13808)));
evalcond[5]=(((r00*x13807))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13811=IKPowWithIntegerCheck(r22,-1);
if(!x13811.valid){
continue;
}
CheckValue<IkReal> x13812=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13812.valid){
continue;
}
if( IKabs(((x13811.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13812.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13811.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13812.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13811.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13812.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13813=IKsin(j4);
IkReal x13814=IKcos(j4);
IkReal x13815=(cj5*x13814);
IkReal x13816=(sj5*x13813);
IkReal x13817=((1.0)*cj5*x13813);
IkReal x13818=((1.0)*sj5*x13814);
evalcond[0]=((-1.0)*r22*x13814);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13813)));
evalcond[2]=(((r01*x13816))+(((-1.0)*r00*x13817)));
evalcond[3]=(((r10*x13815))+(((-1.0)*r11*x13818)));
evalcond[4]=((1.0)+((r11*x13816))+(((-1.0)*r10*x13817)));
evalcond[5]=(((r00*x13815))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13819=((1.0)*r10);
CheckValue<IkReal> x13820=IKPowWithIntegerCheck(cj3,-1);
if(!x13820.valid){
continue;
}
CheckValue<IkReal> x13821=IKPowWithIntegerCheck(r22,-1);
if(!x13821.valid){
continue;
}
CheckValue<IkReal> x13822=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13819))+((cj3*r11*sj5))),-1);
if(!x13822.valid){
continue;
}
if( IKabs(((x13820.value)*(x13821.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13822.value)*(((((-1.0)*sj3*sj5*x13819))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13820.value)*(x13821.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13822.value)*(((((-1.0)*sj3*sj5*x13819))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13820.value)*(x13821.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13822.value)*(((((-1.0)*sj3*sj5*x13819))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13823=IKsin(j4);
IkReal x13824=IKcos(j4);
IkReal x13825=(sj1*sj2);
IkReal x13826=(r11*sj5);
IkReal x13827=(r00*sj3);
IkReal x13828=(cj5*r01);
IkReal x13829=((1.0)*cj1);
IkReal x13830=(cj3*sj5);
IkReal x13831=(cj5*r11);
IkReal x13832=(r10*sj3);
IkReal x13833=(cj2*sj1);
IkReal x13834=((1.0)*cj5);
IkReal x13835=((1.0)*sj3);
IkReal x13836=(r01*sj5);
IkReal x13837=(cj2*x13829);
IkReal x13838=(cj3*x13824);
IkReal x13839=(r22*x13823);
IkReal x13840=(cj5*x13824);
IkReal x13841=(x13823*x13834);
evalcond[0]=((-1.0)*r22*x13824);
evalcond[1]=(x13833+((cj1*sj2))+((cj3*x13839)));
evalcond[2]=(((x13823*x13836))+(((-1.0)*r00*x13841)));
evalcond[3]=((1.0)+((x13823*x13826))+(((-1.0)*r10*x13841)));
evalcond[4]=((((-1.0)*x13837))+x13825+(((-1.0)*x13835*x13839)));
evalcond[5]=((((-1.0)*r10*x13834*x13838))+((x13826*x13838))+((sj5*x13832))+((sj3*x13831)));
evalcond[6]=((((-1.0)*x13824*x13826*x13835))+((r10*x13830))+((x13832*x13840))+((cj3*x13831)));
evalcond[7]=((((-1.0)*r00*x13834*x13838))+(((-1.0)*x13837))+x13825+((r01*x13824*x13830))+((sj3*x13828))+((sj5*x13827)));
evalcond[8]=((((-1.0)*sj2*x13829))+((cj3*x13828))+(((-1.0)*x13824*x13835*x13836))+(((-1.0)*x13833))+((r00*x13830))+((x13827*x13840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13842=(cj5*r10);
IkReal x13843=((1.0)*r11);
CheckValue<IkReal> x13844=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x13842))),-1);
if(!x13844.valid){
continue;
}
CheckValue<IkReal> x13845=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13843))+((sj3*x13842))),-1);
if(!x13845.valid){
continue;
}
if( IKabs(((-1.0)*(x13844.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13845.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13843)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13844.value)))+IKsqr(((x13845.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13843))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13844.value)), ((x13845.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13843))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13846=IKsin(j4);
IkReal x13847=IKcos(j4);
IkReal x13848=(sj1*sj2);
IkReal x13849=(r11*sj5);
IkReal x13850=(r00*sj3);
IkReal x13851=(cj5*r01);
IkReal x13852=((1.0)*cj1);
IkReal x13853=(cj3*sj5);
IkReal x13854=(cj5*r11);
IkReal x13855=(r10*sj3);
IkReal x13856=(cj2*sj1);
IkReal x13857=((1.0)*cj5);
IkReal x13858=((1.0)*sj3);
IkReal x13859=(r01*sj5);
IkReal x13860=(cj2*x13852);
IkReal x13861=(cj3*x13847);
IkReal x13862=(r22*x13846);
IkReal x13863=(cj5*x13847);
IkReal x13864=(x13846*x13857);
evalcond[0]=((-1.0)*r22*x13847);
evalcond[1]=(x13856+((cj1*sj2))+((cj3*x13862)));
evalcond[2]=((((-1.0)*r00*x13864))+((x13846*x13859)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13864))+((x13846*x13849)));
evalcond[4]=(x13848+(((-1.0)*x13858*x13862))+(((-1.0)*x13860)));
evalcond[5]=(((sj3*x13854))+((sj5*x13855))+(((-1.0)*r10*x13857*x13861))+((x13849*x13861)));
evalcond[6]=((((-1.0)*x13847*x13849*x13858))+((x13855*x13863))+((cj3*x13854))+((r10*x13853)));
evalcond[7]=((((-1.0)*r00*x13857*x13861))+x13848+((sj3*x13851))+((sj5*x13850))+(((-1.0)*x13860))+((r01*x13847*x13853)));
evalcond[8]=((((-1.0)*x13856))+((r00*x13853))+(((-1.0)*x13847*x13858*x13859))+(((-1.0)*sj2*x13852))+((cj3*x13851))+((x13850*x13863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13865=((1.0)*sj3);
IkReal x13866=(r11*sj5);
IkReal x13867=((1.0)*cj5*r10);
CheckValue<IkReal> x13868=IKPowWithIntegerCheck((x13866+(((-1.0)*x13867))),-1);
if(!x13868.valid){
continue;
}
CheckValue<IkReal> x13869=IKPowWithIntegerCheck(((((-1.0)*cj3*x13867))+((cj3*x13866))),-1);
if(!x13869.valid){
continue;
}
if( IKabs(((-1.0)*(x13868.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13869.value)*(((((-1.0)*r10*sj5*x13865))+(((-1.0)*cj5*r11*x13865)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13868.value)))+IKsqr(((x13869.value)*(((((-1.0)*r10*sj5*x13865))+(((-1.0)*cj5*r11*x13865))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13868.value)), ((x13869.value)*(((((-1.0)*r10*sj5*x13865))+(((-1.0)*cj5*r11*x13865))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13870=IKsin(j4);
IkReal x13871=IKcos(j4);
IkReal x13872=(sj1*sj2);
IkReal x13873=(r11*sj5);
IkReal x13874=(r00*sj3);
IkReal x13875=(cj5*r01);
IkReal x13876=((1.0)*cj1);
IkReal x13877=(cj3*sj5);
IkReal x13878=(cj5*r11);
IkReal x13879=(r10*sj3);
IkReal x13880=(cj2*sj1);
IkReal x13881=((1.0)*cj5);
IkReal x13882=((1.0)*sj3);
IkReal x13883=(r01*sj5);
IkReal x13884=(cj2*x13876);
IkReal x13885=(cj3*x13871);
IkReal x13886=(r22*x13870);
IkReal x13887=(cj5*x13871);
IkReal x13888=(x13870*x13881);
evalcond[0]=((-1.0)*r22*x13871);
evalcond[1]=(((cj3*x13886))+x13880+((cj1*sj2)));
evalcond[2]=(((x13870*x13883))+(((-1.0)*r00*x13888)));
evalcond[3]=((1.0)+((x13870*x13873))+(((-1.0)*r10*x13888)));
evalcond[4]=(x13872+(((-1.0)*x13882*x13886))+(((-1.0)*x13884)));
evalcond[5]=(((sj3*x13878))+((sj5*x13879))+(((-1.0)*r10*x13881*x13885))+((x13873*x13885)));
evalcond[6]=(((cj3*x13878))+((x13879*x13887))+((r10*x13877))+(((-1.0)*x13871*x13873*x13882)));
evalcond[7]=(((sj3*x13875))+((sj5*x13874))+x13872+((r01*x13871*x13877))+(((-1.0)*x13884))+(((-1.0)*r00*x13881*x13885)));
evalcond[8]=((((-1.0)*x13871*x13882*x13883))+((cj3*x13875))+(((-1.0)*sj2*x13876))+((r00*x13877))+(((-1.0)*x13880))+((x13874*x13887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13889=cj5*cj5;
IkReal x13890=((1.0)*cj3);
IkReal x13891=(r10*r21);
IkReal x13892=(cj5*sj5);
IkReal x13893=(r11*r21);
IkReal x13894=(r11*r20);
IkReal x13895=(r22*sj3);
IkReal x13896=(r10*r20);
IkReal x13897=((1.0)*sj3*x13889);
CheckValue<IkReal> x13898 = IKatan2WithCheck(IkReal((((r10*sj5*x13895))+((cj5*r11*x13895)))),IkReal((((sj3*x13891))+(((-1.0)*sj3*x13892*x13896))+((sj3*x13892*x13893))+(((-1.0)*x13894*x13897))+(((-1.0)*x13891*x13897)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13898.valid){
continue;
}
CheckValue<IkReal> x13899=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13889*x13890*x13896))+((cj3*x13892*x13894))+(((-1.0)*r12*r22*x13890))+(((-1.0)*x13890*x13893))+((cj3*x13889*x13893))+((cj3*x13891*x13892)))),-1);
if(!x13899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13898.value)+(((1.5707963267949)*(x13899.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13900=IKsin(j4);
IkReal x13901=IKcos(j4);
IkReal x13902=(sj1*sj2);
IkReal x13903=(cj5*sj3);
IkReal x13904=(cj5*r10);
IkReal x13905=(r00*sj5);
IkReal x13906=(r11*sj5);
IkReal x13907=(cj3*cj5);
IkReal x13908=((1.0)*cj1);
IkReal x13909=(cj3*sj5);
IkReal x13910=(r21*sj5);
IkReal x13911=(cj2*sj1);
IkReal x13912=(sj3*sj5);
IkReal x13913=(r01*sj5);
IkReal x13914=(cj2*x13908);
IkReal x13915=((1.0)*x13901);
IkReal x13916=((1.0)*x13900);
IkReal x13917=(cj3*x13900);
IkReal x13918=(cj3*x13901);
evalcond[0]=((((-1.0)*r22*x13915))+(((-1.0)*cj5*r20*x13916))+((x13900*x13910)));
evalcond[1]=((((-1.0)*cj5*r00*x13916))+((x13900*x13913))+(((-1.0)*r02*x13915)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13915))+(((-1.0)*x13904*x13916))+((x13900*x13906)));
evalcond[3]=(((r10*x13912))+((x13906*x13918))+(((-1.0)*cj3*x13904*x13915))+((r12*x13917))+((r11*x13903)));
evalcond[4]=((((-1.0)*sj3*x13906*x13915))+((r10*x13909))+(((-1.0)*r12*sj3*x13916))+((r10*x13901*x13903))+((r11*x13907)));
evalcond[5]=(((r22*x13917))+((cj1*sj2))+x13911+((r20*x13912))+((r21*x13903))+(((-1.0)*r20*x13907*x13915))+((r21*x13901*x13909)));
evalcond[6]=(((r02*x13917))+x13902+((r01*x13901*x13909))+((r01*x13903))+((sj3*x13905))+(((-1.0)*x13914))+(((-1.0)*r00*x13907*x13915)));
evalcond[7]=((((-1.0)*r22*sj3*x13916))+(((-1.0)*sj3*x13910*x13915))+x13902+((r20*x13909))+((r20*x13901*x13903))+((r21*x13907))+(((-1.0)*x13914)));
evalcond[8]=((((-1.0)*r02*sj3*x13916))+(((-1.0)*x13911))+(((-1.0)*sj2*x13908))+((r01*x13907))+((cj3*x13905))+(((-1.0)*r01*x13912*x13915))+((r00*x13901*x13903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13919=((1.0)*cj5);
CheckValue<IkReal> x13920=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13919)))),-1);
if(!x13920.valid){
continue;
}
CheckValue<IkReal> x13921 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13919)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13920.value)))+(x13921.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13922=IKsin(j4);
IkReal x13923=IKcos(j4);
IkReal x13924=(sj1*sj2);
IkReal x13925=(cj5*sj3);
IkReal x13926=(cj5*r10);
IkReal x13927=(r00*sj5);
IkReal x13928=(r11*sj5);
IkReal x13929=(cj3*cj5);
IkReal x13930=((1.0)*cj1);
IkReal x13931=(cj3*sj5);
IkReal x13932=(r21*sj5);
IkReal x13933=(cj2*sj1);
IkReal x13934=(sj3*sj5);
IkReal x13935=(r01*sj5);
IkReal x13936=(cj2*x13930);
IkReal x13937=((1.0)*x13923);
IkReal x13938=((1.0)*x13922);
IkReal x13939=(cj3*x13922);
IkReal x13940=(cj3*x13923);
evalcond[0]=((((-1.0)*cj5*r20*x13938))+(((-1.0)*r22*x13937))+((x13922*x13932)));
evalcond[1]=((((-1.0)*cj5*r00*x13938))+(((-1.0)*r02*x13937))+((x13922*x13935)));
evalcond[2]=((1.0)+(((-1.0)*x13926*x13938))+(((-1.0)*r12*x13937))+((x13922*x13928)));
evalcond[3]=(((r10*x13934))+(((-1.0)*cj3*x13926*x13937))+((x13928*x13940))+((r11*x13925))+((r12*x13939)));
evalcond[4]=((((-1.0)*r12*sj3*x13938))+(((-1.0)*sj3*x13928*x13937))+((r10*x13931))+((r10*x13923*x13925))+((r11*x13929)));
evalcond[5]=(((r20*x13934))+((r21*x13925))+(((-1.0)*r20*x13929*x13937))+((cj1*sj2))+x13933+((r22*x13939))+((r21*x13923*x13931)));
evalcond[6]=(((sj3*x13927))+x13924+(((-1.0)*x13936))+((r01*x13925))+((r01*x13923*x13931))+((r02*x13939))+(((-1.0)*r00*x13929*x13937)));
evalcond[7]=(((r20*x13931))+((r21*x13929))+(((-1.0)*r22*sj3*x13938))+x13924+(((-1.0)*x13936))+((r20*x13923*x13925))+(((-1.0)*sj3*x13932*x13937)));
evalcond[8]=((((-1.0)*sj2*x13930))+(((-1.0)*r02*sj3*x13938))+(((-1.0)*r01*x13934*x13937))+((r01*x13929))+((r00*x13923*x13925))+(((-1.0)*x13933))+((cj3*x13927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13941=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13941.valid){
continue;
}
CheckValue<IkReal> x13942 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13941.value)))+(x13942.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13943=IKsin(j4);
IkReal x13944=IKcos(j4);
IkReal x13945=(sj1*sj2);
IkReal x13946=(cj5*sj3);
IkReal x13947=(cj5*r10);
IkReal x13948=(r00*sj5);
IkReal x13949=(r11*sj5);
IkReal x13950=(cj3*cj5);
IkReal x13951=((1.0)*cj1);
IkReal x13952=(cj3*sj5);
IkReal x13953=(r21*sj5);
IkReal x13954=(cj2*sj1);
IkReal x13955=(sj3*sj5);
IkReal x13956=(r01*sj5);
IkReal x13957=(cj2*x13951);
IkReal x13958=((1.0)*x13944);
IkReal x13959=((1.0)*x13943);
IkReal x13960=(cj3*x13943);
IkReal x13961=(cj3*x13944);
evalcond[0]=((((-1.0)*cj5*r20*x13959))+((x13943*x13953))+(((-1.0)*r22*x13958)));
evalcond[1]=(((x13943*x13956))+(((-1.0)*r02*x13958))+(((-1.0)*cj5*r00*x13959)));
evalcond[2]=((1.0)+((x13943*x13949))+(((-1.0)*x13947*x13959))+(((-1.0)*r12*x13958)));
evalcond[3]=((((-1.0)*cj3*x13947*x13958))+((x13949*x13961))+((r12*x13960))+((r10*x13955))+((r11*x13946)));
evalcond[4]=((((-1.0)*r12*sj3*x13959))+((r11*x13950))+(((-1.0)*sj3*x13949*x13958))+((r10*x13944*x13946))+((r10*x13952)));
evalcond[5]=(((cj1*sj2))+x13954+(((-1.0)*r20*x13950*x13958))+((r21*x13944*x13952))+((r22*x13960))+((r20*x13955))+((r21*x13946)));
evalcond[6]=(((r02*x13960))+((r01*x13944*x13952))+(((-1.0)*x13957))+(((-1.0)*r00*x13950*x13958))+x13945+((sj3*x13948))+((r01*x13946)));
evalcond[7]=((((-1.0)*x13957))+x13945+((r21*x13950))+((r20*x13944*x13946))+(((-1.0)*r22*sj3*x13959))+(((-1.0)*sj3*x13953*x13958))+((r20*x13952)));
evalcond[8]=(((cj3*x13948))+(((-1.0)*r02*sj3*x13959))+((r01*x13950))+((r00*x13944*x13946))+(((-1.0)*r01*x13955*x13958))+(((-1.0)*sj2*x13951))+(((-1.0)*x13954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13962=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13962;
j4eval[1]=IKsign(x13962);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13963=((1.0)*cj5);
IkReal x13964=((((-1.0)*r21*x13963))+(((-1.0)*r20*sj5)));
j4eval[0]=x13964;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13963))))));
j4eval[2]=IKsign(x13964);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13965=cj5*cj5;
IkReal x13966=(cj3*r21);
IkReal x13967=(cj5*sj5);
IkReal x13968=((1.0)*cj3);
IkReal x13969=(((r11*x13965*x13966))+(((-1.0)*r12*r22*x13968))+(((-1.0)*r10*r20*x13965*x13968))+((cj3*r11*r20*x13967))+((r10*x13966*x13967))+(((-1.0)*r11*x13966)));
j4eval[0]=x13969;
j4eval[1]=IKsign(x13969);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13970=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13970;
j4eval[1]=IKsign(x13970);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13971=((1.0)*cj5);
IkReal x13972=((((-1.0)*r21*x13971))+(((-1.0)*r20*sj5)));
j4eval[0]=x13972;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13971))))));
j4eval[2]=IKsign(x13972);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13973=cj5*cj5;
IkReal x13974=r11*r11;
IkReal x13975=(cj5*r10);
IkReal x13976=(r11*sj5);
IkReal x13977=((((2.0)*x13975*x13976))+(((-1.0)*x13973*(r10*r10)))+(((-1.0)*x13974))+(((-1.0)*(r12*r12)))+((x13973*x13974)));
j4eval[0]=x13977;
j4eval[1]=((IKabs((x13975+(((-1.0)*x13976)))))+(IKabs(r12)));
j4eval[2]=IKsign(x13977);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13978=cj5*cj5;
IkReal x13979=r11*r11;
IkReal x13980=(cj5*r10);
IkReal x13981=(r11*sj5);
CheckValue<IkReal> x13982=IKPowWithIntegerCheck(IKsign((((x13978*x13979))+(((-1.0)*x13979))+(((-1.0)*x13978*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x13980*x13981)))),-1);
if(!x13982.valid){
continue;
}
CheckValue<IkReal> x13983 = IKatan2WithCheck(IkReal((x13980+(((-1.0)*x13981)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13982.value)))+(x13983.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13984=IKsin(j4);
IkReal x13985=IKcos(j4);
IkReal x13986=(cj5*r10);
IkReal x13987=(r01*sj5);
IkReal x13988=(cj5*r00);
IkReal x13989=(cj5*r20);
IkReal x13990=((1.0)*x13985);
IkReal x13991=((1.0)*x13984);
IkReal x13992=(sj5*x13984);
evalcond[0]=(((r21*x13992))+(((-1.0)*x13989*x13991))+(((-1.0)*r22*x13990)));
evalcond[1]=((((-1.0)*r02*x13990))+(((-1.0)*x13988*x13991))+((x13984*x13987)));
evalcond[2]=((((-1.0)*r11*sj5*x13990))+(((-1.0)*r12*x13991))+((x13985*x13986)));
evalcond[3]=((-1.0)+((r11*x13992))+(((-1.0)*x13986*x13991))+(((-1.0)*r12*x13990)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x13991))+((cj1*sj2))+((x13985*x13988))+(((-1.0)*x13987*x13990)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x13985*x13989))+(((-1.0)*r22*x13991))+(((-1.0)*r21*sj5*x13990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13993=((1.0)*cj5);
CheckValue<IkReal> x13994 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13993)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13994.valid){
continue;
}
CheckValue<IkReal> x13995=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13993))+(((-1.0)*r20*sj5)))),-1);
if(!x13995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13994.value)+(((1.5707963267949)*(x13995.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13996=IKsin(j4);
IkReal x13997=IKcos(j4);
IkReal x13998=(cj5*r10);
IkReal x13999=(r01*sj5);
IkReal x14000=(cj5*r00);
IkReal x14001=(cj5*r20);
IkReal x14002=((1.0)*x13997);
IkReal x14003=((1.0)*x13996);
IkReal x14004=(sj5*x13996);
evalcond[0]=(((r21*x14004))+(((-1.0)*x14001*x14003))+(((-1.0)*r22*x14002)));
evalcond[1]=((((-1.0)*x14000*x14003))+(((-1.0)*r02*x14002))+((x13996*x13999)));
evalcond[2]=(((x13997*x13998))+(((-1.0)*r11*sj5*x14002))+(((-1.0)*r12*x14003)));
evalcond[3]=((-1.0)+(((-1.0)*x13998*x14003))+((r11*x14004))+(((-1.0)*r12*x14002)));
evalcond[4]=((((-1.0)*r02*x14003))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13999*x14002))+((x13997*x14000)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x13997*x14001))+(((-1.0)*r21*sj5*x14002))+(((-1.0)*r22*x14003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14005 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14005.valid){
continue;
}
CheckValue<IkReal> x14006=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14005.value)+(((1.5707963267949)*(x14006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14007=IKsin(j4);
IkReal x14008=IKcos(j4);
IkReal x14009=(cj5*r10);
IkReal x14010=(r01*sj5);
IkReal x14011=(cj5*r00);
IkReal x14012=(cj5*r20);
IkReal x14013=((1.0)*x14008);
IkReal x14014=((1.0)*x14007);
IkReal x14015=(sj5*x14007);
evalcond[0]=((((-1.0)*x14012*x14014))+((r21*x14015))+(((-1.0)*r22*x14013)));
evalcond[1]=((((-1.0)*r02*x14013))+((x14007*x14010))+(((-1.0)*x14011*x14014)));
evalcond[2]=((((-1.0)*r11*sj5*x14013))+(((-1.0)*r12*x14014))+((x14008*x14009)));
evalcond[3]=((-1.0)+(((-1.0)*x14009*x14014))+((r11*x14015))+(((-1.0)*r12*x14013)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x14014))+((cj1*sj2))+(((-1.0)*x14010*x14013))+((x14008*x14011)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x14008*x14012))+(((-1.0)*r21*sj5*x14013))+(((-1.0)*r22*x14014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14016=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14016;
j4eval[1]=IKsign(x14016);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14017=((1.0)*cj5);
IkReal x14018=((((-1.0)*r21*x14017))+(((-1.0)*r20*sj5)));
j4eval[0]=x14018;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x14017))))));
j4eval[2]=IKsign(x14018);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14019=cj5*cj5;
IkReal x14020=r11*r11;
IkReal x14021=(r11*sj5);
IkReal x14022=(cj5*r10);
IkReal x14023=((r12*r12)+(((-2.0)*x14021*x14022))+((x14019*(r10*r10)))+(((-1.0)*x14019*x14020))+x14020);
j4eval[0]=x14023;
j4eval[1]=IKsign(x14023);
j4eval[2]=((IKabs(((((-1.0)*x14022))+x14021)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14024=cj5*cj5;
IkReal x14025=r11*r11;
IkReal x14026=(cj5*r10);
IkReal x14027=(r11*sj5);
CheckValue<IkReal> x14028=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x14024*x14025))+(((-2.0)*x14026*x14027))+x14025+((x14024*(r10*r10))))),-1);
if(!x14028.valid){
continue;
}
CheckValue<IkReal> x14029 = IKatan2WithCheck(IkReal(((((-1.0)*x14026))+x14027)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14028.value)))+(x14029.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14030=IKcos(j4);
IkReal x14031=IKsin(j4);
IkReal x14032=(cj5*r00);
IkReal x14033=(cj5*r10);
IkReal x14034=(r21*sj5);
IkReal x14035=(cj5*r20);
IkReal x14036=((1.0)*x14030);
IkReal x14037=((1.0)*x14031);
IkReal x14038=(sj5*x14031);
IkReal x14039=(sj5*x14030);
evalcond[0]=(((r11*x14039))+(((-1.0)*x14033*x14036))+((r12*x14031)));
evalcond[1]=((((-1.0)*x14035*x14037))+((x14031*x14034))+(((-1.0)*r22*x14036)));
evalcond[2]=(((r01*x14038))+(((-1.0)*x14032*x14037))+(((-1.0)*r02*x14036)));
evalcond[3]=((-1.0)+((r11*x14038))+(((-1.0)*x14033*x14037))+(((-1.0)*r12*x14036)));
evalcond[4]=(((r01*x14039))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14032*x14036))+((r02*x14031)));
evalcond[5]=(((r22*x14031))+((x14030*x14034))+(((-1.0)*x14035*x14036))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14040=((1.0)*cj5);
CheckValue<IkReal> x14041=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14040))+(((-1.0)*r20*sj5)))),-1);
if(!x14041.valid){
continue;
}
CheckValue<IkReal> x14042 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14040)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14041.value)))+(x14042.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14043=IKcos(j4);
IkReal x14044=IKsin(j4);
IkReal x14045=(cj5*r00);
IkReal x14046=(cj5*r10);
IkReal x14047=(r21*sj5);
IkReal x14048=(cj5*r20);
IkReal x14049=((1.0)*x14043);
IkReal x14050=((1.0)*x14044);
IkReal x14051=(sj5*x14044);
IkReal x14052=(sj5*x14043);
evalcond[0]=(((r11*x14052))+(((-1.0)*x14046*x14049))+((r12*x14044)));
evalcond[1]=((((-1.0)*x14048*x14050))+(((-1.0)*r22*x14049))+((x14044*x14047)));
evalcond[2]=((((-1.0)*x14045*x14050))+(((-1.0)*r02*x14049))+((r01*x14051)));
evalcond[3]=((-1.0)+((r11*x14051))+(((-1.0)*r12*x14049))+(((-1.0)*x14046*x14050)));
evalcond[4]=((((-1.0)*x14045*x14049))+((cj2*sj1))+((cj1*sj2))+((r02*x14044))+((r01*x14052)));
evalcond[5]=(((r22*x14044))+(((-1.0)*x14048*x14049))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14043*x14047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14053 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14053.valid){
continue;
}
CheckValue<IkReal> x14054=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14053.value)+(((1.5707963267949)*(x14054.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14055=IKcos(j4);
IkReal x14056=IKsin(j4);
IkReal x14057=(cj5*r00);
IkReal x14058=(cj5*r10);
IkReal x14059=(r21*sj5);
IkReal x14060=(cj5*r20);
IkReal x14061=((1.0)*x14055);
IkReal x14062=((1.0)*x14056);
IkReal x14063=(sj5*x14056);
IkReal x14064=(sj5*x14055);
evalcond[0]=((((-1.0)*x14058*x14061))+((r12*x14056))+((r11*x14064)));
evalcond[1]=((((-1.0)*r22*x14061))+(((-1.0)*x14060*x14062))+((x14056*x14059)));
evalcond[2]=((((-1.0)*x14057*x14062))+((r01*x14063))+(((-1.0)*r02*x14061)));
evalcond[3]=((-1.0)+(((-1.0)*x14058*x14062))+(((-1.0)*r12*x14061))+((r11*x14063)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x14057*x14061))+((cj1*sj2))+((r02*x14056))+((r01*x14064)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x14055*x14059))+(((-1.0)*x14060*x14061))+((r22*x14056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14066 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14066)==0){
continue;
}
IkReal x14065=pow(x14066,-0.5);
CheckValue<IkReal> x14067 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14067.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14067.value));
IkReal gconst37=((-1.0)*r01*x14065);
IkReal gconst38=(r00*x14065);
CheckValue<IkReal> x14068 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14068.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14068.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14071 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14071.valid){
continue;
}
IkReal x14069=((-1.0)*(x14071.value));
IkReal x14070=x14065;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14069;
IkReal gconst36=x14069;
IkReal gconst37=((-1.0)*r01*x14070);
IkReal gconst38=(r00*x14070);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14074 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14074.valid){
continue;
}
IkReal x14072=((-1.0)*(x14074.value));
IkReal x14073=x14065;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14072;
IkReal gconst36=x14072;
IkReal gconst37=((-1.0)*r01*x14073);
IkReal gconst38=(r00*x14073);
CheckValue<IkReal> x14082=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14082.valid){
continue;
}
IkReal x14075=x14082.value;
IkReal x14076=(sj3*x14075);
IkReal x14077=(r11*x14076);
IkReal x14078=(r21*x14076);
IkReal x14079=(r20*x14076);
IkReal x14080=(r10*x14076);
IkReal x14081=(r00*r01*x14076);
j4eval[0]=IKsign((((r21*x14077*(r01*r01)))+((r10*x14079*(r00*r00)))+((r12*r22*sj3))+((r00*r01*r20*x14077))+((r00*r01*r10*x14078))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14083=gconst38*gconst38;
IkReal x14084=gconst37*gconst37;
IkReal x14085=((1.0)*cj3);
IkReal x14086=(r11*r20);
IkReal x14087=(r10*sj3);
IkReal x14088=(gconst37*gconst38);
IkReal x14089=(r11*sj3);
IkReal x14090=(r21*x14084);
IkReal x14091=(cj3*x14088);
CheckValue<IkReal> x14092=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14085*x14090))+((x14086*x14091))+(((-1.0)*r12*r22*x14085))+(((-1.0)*r10*r20*x14083*x14085))+((r10*r21*x14091)))),-1);
if(!x14092.valid){
continue;
}
CheckValue<IkReal> x14093 = IKatan2WithCheck(IkReal((((gconst38*r22*x14089))+((gconst37*r22*x14087)))),IkReal(((((-1.0)*sj3*x14083*x14086))+((x14087*x14090))+(((-1.0)*r20*x14087*x14088))+((r21*x14088*x14089)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14092.value)))+(x14093.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14094=IKsin(j4);
IkReal x14095=IKcos(j4);
IkReal x14096=(cj2*sj1);
IkReal x14097=(cj1*sj2);
IkReal x14098=(gconst38*r21);
IkReal x14099=(cj3*r20);
IkReal x14100=(gconst38*r10);
IkReal x14101=(cj3*gconst37);
IkReal x14102=(sj1*sj2);
IkReal x14103=(gconst38*r00);
IkReal x14104=(cj1*cj2);
IkReal x14105=(gconst37*sj3);
IkReal x14106=(gconst38*r20);
IkReal x14107=(gconst38*r01);
IkReal x14108=(gconst38*r11);
IkReal x14109=((1.0)*x14095);
IkReal x14110=((1.0)*x14094);
IkReal x14111=(cj3*x14094);
IkReal x14112=(sj3*x14095);
IkReal x14113=(gconst37*x14094);
IkReal x14114=(x14097+x14096);
evalcond[0]=((((-1.0)*x14106*x14110))+(((-1.0)*r22*x14109))+((r21*x14113)));
evalcond[1]=(((r01*x14113))+(((-1.0)*r02*x14109))+(((-1.0)*x14103*x14110)));
evalcond[2]=((-1.0)+((r11*x14113))+(((-1.0)*r12*x14109))+(((-1.0)*x14100*x14110)));
evalcond[3]=(((sj3*x14108))+((r10*x14105))+((r11*x14095*x14101))+((r12*x14111))+(((-1.0)*cj3*x14100*x14109)));
evalcond[4]=((((-1.0)*r11*x14105*x14109))+((cj3*x14108))+((r10*x14101))+((x14100*x14112))+(((-1.0)*r12*sj3*x14110)));
evalcond[5]=(((r21*x14095*x14101))+((sj3*x14098))+(((-1.0)*gconst38*x14099*x14109))+((r22*x14111))+x14114+((r20*x14105)));
evalcond[6]=(((r02*x14111))+((sj3*x14107))+((r00*x14105))+(((-1.0)*x14102))+x14104+(((-1.0)*cj3*x14103*x14109))+((r01*x14095*x14101)));
evalcond[7]=(((x14103*x14112))+((r00*x14101))+(((-1.0)*r01*x14105*x14109))+((cj3*x14107))+(((-1.0)*r02*sj3*x14110))+x14114);
evalcond[8]=((((-1.0)*r21*x14105*x14109))+(((-1.0)*x14104))+((gconst37*x14099))+x14102+((cj3*x14098))+((x14106*x14112))+(((-1.0)*r22*sj3*x14110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14115=gconst38*gconst38;
IkReal x14116=gconst37*gconst37;
IkReal x14117=(gconst37*r10);
IkReal x14118=(cj3*r22);
IkReal x14119=((1.0)*gconst38);
IkReal x14120=(r21*sj3);
IkReal x14121=(gconst38*r11);
IkReal x14122=(cj3*r20);
IkReal x14123=(cj3*r21);
IkReal x14124=(r20*sj3);
CheckValue<IkReal> x14125=IKPowWithIntegerCheck(IKsign((((r11*x14116*x14120))+((r12*r22*sj3))+(((-1.0)*gconst37*r11*x14119*x14124))+(((-1.0)*x14117*x14119*x14120))+((r10*x14115*x14124)))),-1);
if(!x14125.valid){
continue;
}
CheckValue<IkReal> x14126 = IKatan2WithCheck(IkReal((((x14118*x14121))+((x14117*x14118)))),IkReal((((gconst37*x14121*x14123))+(((-1.0)*r11*x14115*x14122))+((r10*x14116*x14123))+(((-1.0)*x14117*x14119*x14122)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14125.value)))+(x14126.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14127=IKsin(j4);
IkReal x14128=IKcos(j4);
IkReal x14129=(cj2*sj1);
IkReal x14130=(cj1*sj2);
IkReal x14131=(gconst38*r21);
IkReal x14132=(cj3*r20);
IkReal x14133=(gconst38*r10);
IkReal x14134=(cj3*gconst37);
IkReal x14135=(sj1*sj2);
IkReal x14136=(gconst38*r00);
IkReal x14137=(cj1*cj2);
IkReal x14138=(gconst37*sj3);
IkReal x14139=(gconst38*r20);
IkReal x14140=(gconst38*r01);
IkReal x14141=(gconst38*r11);
IkReal x14142=((1.0)*x14128);
IkReal x14143=((1.0)*x14127);
IkReal x14144=(cj3*x14127);
IkReal x14145=(sj3*x14128);
IkReal x14146=(gconst37*x14127);
IkReal x14147=(x14130+x14129);
evalcond[0]=((((-1.0)*x14139*x14143))+(((-1.0)*r22*x14142))+((r21*x14146)));
evalcond[1]=(((r01*x14146))+(((-1.0)*r02*x14142))+(((-1.0)*x14136*x14143)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14142))+((r11*x14146))+(((-1.0)*x14133*x14143)));
evalcond[3]=(((r10*x14138))+((sj3*x14141))+(((-1.0)*cj3*x14133*x14142))+((r12*x14144))+((r11*x14128*x14134)));
evalcond[4]=(((cj3*x14141))+(((-1.0)*r11*x14138*x14142))+(((-1.0)*r12*sj3*x14143))+((r10*x14134))+((x14133*x14145)));
evalcond[5]=(((r21*x14128*x14134))+((r20*x14138))+((sj3*x14131))+(((-1.0)*gconst38*x14132*x14142))+((r22*x14144))+x14147);
evalcond[6]=((((-1.0)*x14135))+(((-1.0)*cj3*x14136*x14142))+((r02*x14144))+((sj3*x14140))+x14137+((r01*x14128*x14134))+((r00*x14138)));
evalcond[7]=((((-1.0)*r01*x14138*x14142))+(((-1.0)*r02*sj3*x14143))+((cj3*x14140))+((x14136*x14145))+x14147+((r00*x14134)));
evalcond[8]=((((-1.0)*x14137))+(((-1.0)*r21*x14138*x14142))+(((-1.0)*r22*sj3*x14143))+((gconst37*x14132))+((x14139*x14145))+x14135+((cj3*x14131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14148=((1.0)*gconst38);
CheckValue<IkReal> x14149 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14148))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14149.valid){
continue;
}
CheckValue<IkReal> x14150=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14148)))),-1);
if(!x14150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14149.value)+(((1.5707963267949)*(x14150.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14151=IKsin(j4);
IkReal x14152=IKcos(j4);
IkReal x14153=(cj2*sj1);
IkReal x14154=(cj1*sj2);
IkReal x14155=(gconst38*r21);
IkReal x14156=(cj3*r20);
IkReal x14157=(gconst38*r10);
IkReal x14158=(cj3*gconst37);
IkReal x14159=(sj1*sj2);
IkReal x14160=(gconst38*r00);
IkReal x14161=(cj1*cj2);
IkReal x14162=(gconst37*sj3);
IkReal x14163=(gconst38*r20);
IkReal x14164=(gconst38*r01);
IkReal x14165=(gconst38*r11);
IkReal x14166=((1.0)*x14152);
IkReal x14167=((1.0)*x14151);
IkReal x14168=(cj3*x14151);
IkReal x14169=(sj3*x14152);
IkReal x14170=(gconst37*x14151);
IkReal x14171=(x14154+x14153);
evalcond[0]=((((-1.0)*x14163*x14167))+(((-1.0)*r22*x14166))+((r21*x14170)));
evalcond[1]=((((-1.0)*r02*x14166))+((r01*x14170))+(((-1.0)*x14160*x14167)));
evalcond[2]=((-1.0)+(((-1.0)*x14157*x14167))+((r11*x14170))+(((-1.0)*r12*x14166)));
evalcond[3]=(((r10*x14162))+((sj3*x14165))+(((-1.0)*cj3*x14157*x14166))+((r11*x14152*x14158))+((r12*x14168)));
evalcond[4]=((((-1.0)*r11*x14162*x14166))+((cj3*x14165))+((r10*x14158))+(((-1.0)*r12*sj3*x14167))+((x14157*x14169)));
evalcond[5]=(((sj3*x14155))+(((-1.0)*gconst38*x14156*x14166))+((r22*x14168))+x14171+((r20*x14162))+((r21*x14152*x14158)));
evalcond[6]=(((sj3*x14164))+((r02*x14168))+((r01*x14152*x14158))+(((-1.0)*cj3*x14160*x14166))+((r00*x14162))+x14161+(((-1.0)*x14159)));
evalcond[7]=(((cj3*x14164))+((x14160*x14169))+(((-1.0)*r02*sj3*x14167))+(((-1.0)*r01*x14162*x14166))+((r00*x14158))+x14171);
evalcond[8]=(((cj3*x14155))+(((-1.0)*r21*x14162*x14166))+(((-1.0)*r22*sj3*x14167))+((gconst37*x14156))+x14159+((x14163*x14169))+(((-1.0)*x14161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14173 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14173)==0){
continue;
}
IkReal x14172=pow(x14173,-0.5);
CheckValue<IkReal> x14174 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14174.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14174.value))));
IkReal gconst40=((1.0)*r01*x14172);
IkReal gconst41=((-1.0)*r00*x14172);
CheckValue<IkReal> x14175 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14175.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14175.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14178 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14178.valid){
continue;
}
IkReal x14176=((1.0)*(x14178.value));
IkReal x14177=x14172;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14176)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14176)));
IkReal gconst40=((1.0)*r01*x14177);
IkReal gconst41=((-1.0)*r00*x14177);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14181 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14181.valid){
continue;
}
IkReal x14179=((1.0)*(x14181.value));
IkReal x14180=x14172;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14179)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14179)));
IkReal gconst40=((1.0)*r01*x14180);
IkReal gconst41=((-1.0)*r00*x14180);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14182=gconst41*gconst41;
IkReal x14183=gconst40*gconst40;
IkReal x14184=(gconst40*r10);
IkReal x14185=(r22*sj3);
IkReal x14186=(r11*sj3);
IkReal x14187=((1.0)*cj3);
IkReal x14188=(gconst41*r21);
IkReal x14189=(gconst41*r20);
IkReal x14190=(r21*x14183);
IkReal x14191=((1.0)*r20*x14182);
CheckValue<IkReal> x14192=IKPowWithIntegerCheck(IKsign((((cj3*x14184*x14188))+(((-1.0)*r12*r22*x14187))+(((-1.0)*r11*x14187*x14190))+(((-1.0)*r10*r20*x14182*x14187))+((cj3*gconst40*r11*x14189)))),-1);
if(!x14192.valid){
continue;
}
CheckValue<IkReal> x14193 = IKatan2WithCheck(IkReal((((gconst41*r11*x14185))+((x14184*x14185)))),IkReal((((r10*sj3*x14190))+((gconst40*x14186*x14188))+(((-1.0)*x14186*x14191))+(((-1.0)*sj3*x14184*x14189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14192.value)))+(x14193.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14194=IKsin(j4);
IkReal x14195=IKcos(j4);
IkReal x14196=(cj2*sj1);
IkReal x14197=(cj1*sj2);
IkReal x14198=(gconst40*sj3);
IkReal x14199=(gconst41*sj3);
IkReal x14200=(gconst41*r20);
IkReal x14201=(cj3*gconst41);
IkReal x14202=(sj1*sj2);
IkReal x14203=(cj1*cj2);
IkReal x14204=(cj3*gconst40);
IkReal x14205=((1.0)*x14195);
IkReal x14206=((1.0)*x14194);
IkReal x14207=(cj3*x14194);
IkReal x14208=(gconst40*x14194);
IkReal x14209=(x14196+x14197);
IkReal x14210=(x14195*x14204);
evalcond[0]=(((r21*x14208))+(((-1.0)*r22*x14205))+(((-1.0)*x14200*x14206)));
evalcond[1]=((((-1.0)*gconst41*r00*x14206))+(((-1.0)*r02*x14205))+((r01*x14208)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14206))+(((-1.0)*r12*x14205))+((r11*x14208)));
evalcond[3]=((((-1.0)*r10*x14201*x14205))+((r10*x14198))+((r11*x14210))+((r11*x14199))+((r12*x14207)));
evalcond[4]=(((r10*x14204))+(((-1.0)*r12*sj3*x14206))+(((-1.0)*r11*x14198*x14205))+((r11*x14201))+((r10*x14195*x14199)));
evalcond[5]=((((-1.0)*cj3*x14200*x14205))+((r22*x14207))+((r21*x14210))+((r21*x14199))+x14209+((r20*x14198)));
evalcond[6]=(((r02*x14207))+(((-1.0)*r00*x14201*x14205))+((r01*x14210))+((r01*x14199))+(((-1.0)*x14202))+((r00*x14198))+x14203);
evalcond[7]=((((-1.0)*r01*x14198*x14205))+((r00*x14195*x14199))+(((-1.0)*r02*sj3*x14206))+((r00*x14204))+((r01*x14201))+x14209);
evalcond[8]=((((-1.0)*r21*x14198*x14205))+((r20*x14204))+((r21*x14201))+(((-1.0)*x14203))+(((-1.0)*r22*sj3*x14206))+((r20*x14195*x14199))+x14202);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14211=((1.0)*gconst41);
CheckValue<IkReal> x14212=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14211))+(((-1.0)*gconst40*r20)))),-1);
if(!x14212.valid){
continue;
}
CheckValue<IkReal> x14213 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14211))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14212.value)))+(x14213.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14214=IKsin(j4);
IkReal x14215=IKcos(j4);
IkReal x14216=(cj2*sj1);
IkReal x14217=(cj1*sj2);
IkReal x14218=(gconst40*sj3);
IkReal x14219=(gconst41*sj3);
IkReal x14220=(gconst41*r20);
IkReal x14221=(cj3*gconst41);
IkReal x14222=(sj1*sj2);
IkReal x14223=(cj1*cj2);
IkReal x14224=(cj3*gconst40);
IkReal x14225=((1.0)*x14215);
IkReal x14226=((1.0)*x14214);
IkReal x14227=(cj3*x14214);
IkReal x14228=(gconst40*x14214);
IkReal x14229=(x14217+x14216);
IkReal x14230=(x14215*x14224);
evalcond[0]=(((r21*x14228))+(((-1.0)*r22*x14225))+(((-1.0)*x14220*x14226)));
evalcond[1]=((((-1.0)*gconst41*r00*x14226))+(((-1.0)*r02*x14225))+((r01*x14228)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14225))+((r11*x14228))+(((-1.0)*gconst41*r10*x14226)));
evalcond[3]=(((r11*x14219))+((r10*x14218))+(((-1.0)*r10*x14221*x14225))+((r11*x14230))+((r12*x14227)));
evalcond[4]=((((-1.0)*r11*x14218*x14225))+((r10*x14224))+(((-1.0)*r12*sj3*x14226))+((r11*x14221))+((r10*x14215*x14219)));
evalcond[5]=(((r21*x14230))+((r22*x14227))+((r21*x14219))+((r20*x14218))+x14229+(((-1.0)*cj3*x14220*x14225)));
evalcond[6]=(((r02*x14227))+((r01*x14219))+((r01*x14230))+((r00*x14218))+(((-1.0)*r00*x14221*x14225))+(((-1.0)*x14222))+x14223);
evalcond[7]=((((-1.0)*r01*x14218*x14225))+((r00*x14215*x14219))+((r00*x14224))+(((-1.0)*r02*sj3*x14226))+((r01*x14221))+x14229);
evalcond[8]=(((r20*x14224))+(((-1.0)*r21*x14218*x14225))+((r21*x14221))+((r20*x14215*x14219))+(((-1.0)*x14223))+x14222+(((-1.0)*r22*sj3*x14226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14231 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14231.valid){
continue;
}
CheckValue<IkReal> x14232=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14231.value)+(((1.5707963267949)*(x14232.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14233=IKsin(j4);
IkReal x14234=IKcos(j4);
IkReal x14235=(cj2*sj1);
IkReal x14236=(cj1*sj2);
IkReal x14237=(gconst40*sj3);
IkReal x14238=(gconst41*sj3);
IkReal x14239=(gconst41*r20);
IkReal x14240=(cj3*gconst41);
IkReal x14241=(sj1*sj2);
IkReal x14242=(cj1*cj2);
IkReal x14243=(cj3*gconst40);
IkReal x14244=((1.0)*x14234);
IkReal x14245=((1.0)*x14233);
IkReal x14246=(cj3*x14233);
IkReal x14247=(gconst40*x14233);
IkReal x14248=(x14235+x14236);
IkReal x14249=(x14234*x14243);
evalcond[0]=(((r21*x14247))+(((-1.0)*x14239*x14245))+(((-1.0)*r22*x14244)));
evalcond[1]=((((-1.0)*gconst41*r00*x14245))+((r01*x14247))+(((-1.0)*r02*x14244)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14245))+((r11*x14247))+(((-1.0)*r12*x14244)));
evalcond[3]=((((-1.0)*r10*x14240*x14244))+((r10*x14237))+((r12*x14246))+((r11*x14249))+((r11*x14238)));
evalcond[4]=((((-1.0)*r11*x14237*x14244))+((r11*x14240))+((r10*x14243))+(((-1.0)*r12*sj3*x14245))+((r10*x14234*x14238)));
evalcond[5]=(((r21*x14249))+((r20*x14237))+((r21*x14238))+(((-1.0)*cj3*x14239*x14244))+x14248+((r22*x14246)));
evalcond[6]=((((-1.0)*x14241))+(((-1.0)*r00*x14240*x14244))+((r02*x14246))+((r01*x14238))+((r00*x14237))+((r01*x14249))+x14242);
evalcond[7]=(((r00*x14234*x14238))+(((-1.0)*r02*sj3*x14245))+((r01*x14240))+x14248+((r00*x14243))+(((-1.0)*r01*x14237*x14244)));
evalcond[8]=(((r21*x14240))+(((-1.0)*r22*sj3*x14245))+(((-1.0)*x14242))+((r20*x14243))+((r20*x14234*x14238))+(((-1.0)*r21*x14237*x14244))+x14241);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14250=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14250);
rxp1_1=(px*r21);
rxp1_2=(r11*x14250);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14251=(r11*sj5);
IkReal x14252=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14252))+x14251);
j4eval[1]=(((cj3*x14251))+(((-1.0)*cj3*x14252)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14253=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14253);
rxp1_1=(px*r21);
rxp1_2=(r11*x14253);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14254=(cj5*r10);
IkReal x14255=(r11*sj5);
j4eval[0]=(x14255+(((-1.0)*x14254)));
j4eval[1]=((((-1.0)*sj3*x14255))+((sj3*x14254)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14256=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14256);
rxp1_1=(px*r21);
rxp1_2=(r11*x14256);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14257=((1.0)*r10);
CheckValue<IkReal> x14258=IKPowWithIntegerCheck(cj3,-1);
if(!x14258.valid){
continue;
}
CheckValue<IkReal> x14259=IKPowWithIntegerCheck(r02,-1);
if(!x14259.valid){
continue;
}
CheckValue<IkReal> x14260=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14257))),-1);
if(!x14260.valid){
continue;
}
if( IKabs(((x14258.value)*(x14259.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14260.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14257)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14258.value)*(x14259.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14260.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14257))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14258.value)*(x14259.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14260.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14257))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14261=IKsin(j4);
IkReal x14262=IKcos(j4);
IkReal x14263=(cj2*sj1);
IkReal x14264=(cj1*sj2);
IkReal x14265=(cj5*r10);
IkReal x14266=(sj1*sj2);
IkReal x14267=(cj5*sj3);
IkReal x14268=(r11*sj5);
IkReal x14269=(cj3*sj5);
IkReal x14270=(r21*sj5);
IkReal x14271=(cj1*cj2);
IkReal x14272=(cj3*cj5);
IkReal x14273=(sj3*sj5);
IkReal x14274=((1.0)*x14261);
IkReal x14275=(r20*x14262);
IkReal x14276=(cj3*x14262);
IkReal x14277=(sj3*x14262);
IkReal x14278=(x14264+x14263);
evalcond[0]=((-1.0)*r02*x14262);
evalcond[1]=((((-1.0)*cj5*r20*x14274))+((x14261*x14270)));
evalcond[2]=((((-1.0)*x14266))+((cj3*r02*x14261))+x14271);
evalcond[3]=((((-1.0)*r02*sj3*x14274))+x14278);
evalcond[4]=((-1.0)+(((-1.0)*x14265*x14274))+((x14261*x14268)));
evalcond[5]=((((-1.0)*x14265*x14276))+((x14268*x14276))+((r11*x14267))+((r10*x14273)));
evalcond[6]=((((-1.0)*x14268*x14277))+((r11*x14272))+((x14265*x14277))+((r10*x14269)));
evalcond[7]=(((r21*x14262*x14269))+((r21*x14267))+(((-1.0)*x14272*x14275))+((r20*x14273))+x14278);
evalcond[8]=((((-1.0)*x14271))+(((-1.0)*x14270*x14277))+((r21*x14272))+((x14267*x14275))+((r20*x14269))+x14266);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14279=(cj5*r10);
IkReal x14280=((1.0)*r11);
CheckValue<IkReal> x14281=IKPowWithIntegerCheck(((((-1.0)*x14279))+((r11*sj5))),-1);
if(!x14281.valid){
continue;
}
CheckValue<IkReal> x14282=IKPowWithIntegerCheck((((sj3*x14279))+(((-1.0)*sj3*sj5*x14280))),-1);
if(!x14282.valid){
continue;
}
if( IKabs(x14281.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14282.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14280)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14281.value)+IKsqr(((x14282.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14280))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14281.value, ((x14282.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14280))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14283=IKsin(j4);
IkReal x14284=IKcos(j4);
IkReal x14285=(cj2*sj1);
IkReal x14286=(cj1*sj2);
IkReal x14287=(cj5*r10);
IkReal x14288=(sj1*sj2);
IkReal x14289=(cj5*sj3);
IkReal x14290=(r11*sj5);
IkReal x14291=(cj3*sj5);
IkReal x14292=(r21*sj5);
IkReal x14293=(cj1*cj2);
IkReal x14294=(cj3*cj5);
IkReal x14295=(sj3*sj5);
IkReal x14296=((1.0)*x14283);
IkReal x14297=(r20*x14284);
IkReal x14298=(cj3*x14284);
IkReal x14299=(sj3*x14284);
IkReal x14300=(x14285+x14286);
evalcond[0]=((-1.0)*r02*x14284);
evalcond[1]=(((x14283*x14292))+(((-1.0)*cj5*r20*x14296)));
evalcond[2]=(((cj3*r02*x14283))+(((-1.0)*x14288))+x14293);
evalcond[3]=((((-1.0)*r02*sj3*x14296))+x14300);
evalcond[4]=((-1.0)+((x14283*x14290))+(((-1.0)*x14287*x14296)));
evalcond[5]=((((-1.0)*x14287*x14298))+((r10*x14295))+((x14290*x14298))+((r11*x14289)));
evalcond[6]=(((x14287*x14299))+((r10*x14291))+(((-1.0)*x14290*x14299))+((r11*x14294)));
evalcond[7]=(((r20*x14295))+((r21*x14289))+(((-1.0)*x14294*x14297))+((r21*x14284*x14291))+x14300);
evalcond[8]=(((r20*x14291))+((x14289*x14297))+((r21*x14294))+(((-1.0)*x14292*x14299))+(((-1.0)*x14293))+x14288);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14301=((1.0)*r10);
IkReal x14302=(r11*sj5);
CheckValue<IkReal> x14303=IKPowWithIntegerCheck(((((-1.0)*cj5*x14301))+x14302),-1);
if(!x14303.valid){
continue;
}
CheckValue<IkReal> x14304=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x14301))+((cj3*x14302))),-1);
if(!x14304.valid){
continue;
}
if( IKabs(x14303.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14304.value)*(((((-1.0)*sj3*sj5*x14301))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14303.value)+IKsqr(((x14304.value)*(((((-1.0)*sj3*sj5*x14301))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14303.value, ((x14304.value)*(((((-1.0)*sj3*sj5*x14301))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14305=IKsin(j4);
IkReal x14306=IKcos(j4);
IkReal x14307=(cj2*sj1);
IkReal x14308=(cj1*sj2);
IkReal x14309=(cj5*r10);
IkReal x14310=(sj1*sj2);
IkReal x14311=(cj5*sj3);
IkReal x14312=(r11*sj5);
IkReal x14313=(cj3*sj5);
IkReal x14314=(r21*sj5);
IkReal x14315=(cj1*cj2);
IkReal x14316=(cj3*cj5);
IkReal x14317=(sj3*sj5);
IkReal x14318=((1.0)*x14305);
IkReal x14319=(r20*x14306);
IkReal x14320=(cj3*x14306);
IkReal x14321=(sj3*x14306);
IkReal x14322=(x14307+x14308);
evalcond[0]=((-1.0)*r02*x14306);
evalcond[1]=((((-1.0)*cj5*r20*x14318))+((x14305*x14314)));
evalcond[2]=(((cj3*r02*x14305))+(((-1.0)*x14310))+x14315);
evalcond[3]=((((-1.0)*r02*sj3*x14318))+x14322);
evalcond[4]=((-1.0)+(((-1.0)*x14309*x14318))+((x14305*x14312)));
evalcond[5]=(((r11*x14311))+(((-1.0)*x14309*x14320))+((x14312*x14320))+((r10*x14317)));
evalcond[6]=(((r11*x14316))+(((-1.0)*x14312*x14321))+((x14309*x14321))+((r10*x14313)));
evalcond[7]=((((-1.0)*x14316*x14319))+((r20*x14317))+((r21*x14306*x14313))+((r21*x14311))+x14322);
evalcond[8]=((((-1.0)*x14314*x14321))+((x14311*x14319))+(((-1.0)*x14315))+((r20*x14313))+((r21*x14316))+x14310);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14323=cj5*cj5;
IkReal x14324=((1.0)*cj3);
IkReal x14325=(r10*r21);
IkReal x14326=(cj5*sj5);
IkReal x14327=(r11*r21);
IkReal x14328=(r11*r20);
IkReal x14329=(r22*sj3);
IkReal x14330=(r10*r20);
IkReal x14331=((1.0)*sj3*x14323);
CheckValue<IkReal> x14332 = IKatan2WithCheck(IkReal((((r10*sj5*x14329))+((cj5*r11*x14329)))),IkReal(((((-1.0)*sj3*x14326*x14330))+((sj3*x14325))+((sj3*x14326*x14327))+(((-1.0)*x14328*x14331))+(((-1.0)*x14325*x14331)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14332.valid){
continue;
}
CheckValue<IkReal> x14333=IKPowWithIntegerCheck(IKsign((((cj3*x14325*x14326))+((cj3*x14323*x14327))+((cj3*x14326*x14328))+(((-1.0)*x14323*x14324*x14330))+(((-1.0)*r12*r22*x14324))+(((-1.0)*x14324*x14327)))),-1);
if(!x14333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14332.value)+(((1.5707963267949)*(x14333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14334=IKsin(j4);
IkReal x14335=IKcos(j4);
IkReal x14336=(cj2*sj1);
IkReal x14337=(cj1*sj2);
IkReal x14338=(cj5*sj3);
IkReal x14339=(cj5*r10);
IkReal x14340=(r00*sj5);
IkReal x14341=(sj1*sj2);
IkReal x14342=(r11*sj5);
IkReal x14343=(cj3*cj5);
IkReal x14344=(cj3*sj5);
IkReal x14345=(r21*sj5);
IkReal x14346=(cj1*cj2);
IkReal x14347=(sj3*sj5);
IkReal x14348=(r01*sj5);
IkReal x14349=((1.0)*x14335);
IkReal x14350=((1.0)*x14334);
IkReal x14351=(cj3*x14334);
IkReal x14352=(cj3*x14335);
IkReal x14353=(x14336+x14337);
evalcond[0]=((((-1.0)*cj5*r20*x14350))+((x14334*x14345))+(((-1.0)*r22*x14349)));
evalcond[1]=((((-1.0)*cj5*r00*x14350))+((x14334*x14348))+(((-1.0)*r02*x14349)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14349))+((x14334*x14342))+(((-1.0)*x14339*x14350)));
evalcond[3]=((((-1.0)*cj3*x14339*x14349))+((r11*x14338))+((r12*x14351))+((r10*x14347))+((x14342*x14352)));
evalcond[4]=(((r10*x14335*x14338))+((r11*x14343))+((r10*x14344))+(((-1.0)*r12*sj3*x14350))+(((-1.0)*sj3*x14342*x14349)));
evalcond[5]=(((r21*x14335*x14344))+((r20*x14347))+((r22*x14351))+x14353+(((-1.0)*r20*x14343*x14349))+((r21*x14338)));
evalcond[6]=(((r02*x14351))+(((-1.0)*x14341))+((r01*x14335*x14344))+((r01*x14338))+((sj3*x14340))+x14346+(((-1.0)*r00*x14343*x14349)));
evalcond[7]=(((cj3*x14340))+((r01*x14343))+(((-1.0)*r01*x14347*x14349))+((r00*x14335*x14338))+x14353+(((-1.0)*r02*sj3*x14350)));
evalcond[8]=((((-1.0)*r22*sj3*x14350))+((r21*x14343))+(((-1.0)*x14346))+(((-1.0)*sj3*x14345*x14349))+((r20*x14344))+x14341+((r20*x14335*x14338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14354=((1.0)*cj5);
CheckValue<IkReal> x14355=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14354))+(((-1.0)*r20*sj5)))),-1);
if(!x14355.valid){
continue;
}
CheckValue<IkReal> x14356 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14354)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14355.value)))+(x14356.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14357=IKsin(j4);
IkReal x14358=IKcos(j4);
IkReal x14359=(cj2*sj1);
IkReal x14360=(cj1*sj2);
IkReal x14361=(cj5*sj3);
IkReal x14362=(cj5*r10);
IkReal x14363=(r00*sj5);
IkReal x14364=(sj1*sj2);
IkReal x14365=(r11*sj5);
IkReal x14366=(cj3*cj5);
IkReal x14367=(cj3*sj5);
IkReal x14368=(r21*sj5);
IkReal x14369=(cj1*cj2);
IkReal x14370=(sj3*sj5);
IkReal x14371=(r01*sj5);
IkReal x14372=((1.0)*x14358);
IkReal x14373=((1.0)*x14357);
IkReal x14374=(cj3*x14357);
IkReal x14375=(cj3*x14358);
IkReal x14376=(x14359+x14360);
evalcond[0]=((((-1.0)*r22*x14372))+((x14357*x14368))+(((-1.0)*cj5*r20*x14373)));
evalcond[1]=((((-1.0)*cj5*r00*x14373))+(((-1.0)*r02*x14372))+((x14357*x14371)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14372))+((x14357*x14365))+(((-1.0)*x14362*x14373)));
evalcond[3]=(((r11*x14361))+((x14365*x14375))+(((-1.0)*cj3*x14362*x14372))+((r10*x14370))+((r12*x14374)));
evalcond[4]=(((r10*x14367))+((r11*x14366))+(((-1.0)*r12*sj3*x14373))+(((-1.0)*sj3*x14365*x14372))+((r10*x14358*x14361)));
evalcond[5]=(((r21*x14358*x14367))+((r22*x14374))+((r21*x14361))+((r20*x14370))+(((-1.0)*r20*x14366*x14372))+x14376);
evalcond[6]=(((sj3*x14363))+((r01*x14358*x14367))+(((-1.0)*x14364))+((r01*x14361))+(((-1.0)*r00*x14366*x14372))+x14369+((r02*x14374)));
evalcond[7]=(((cj3*x14363))+(((-1.0)*r01*x14370*x14372))+(((-1.0)*r02*sj3*x14373))+((r01*x14366))+((r00*x14358*x14361))+x14376);
evalcond[8]=(((r20*x14367))+(((-1.0)*sj3*x14368*x14372))+(((-1.0)*x14369))+((r21*x14366))+((r20*x14358*x14361))+(((-1.0)*r22*sj3*x14373))+x14364);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14377 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14377.valid){
continue;
}
CheckValue<IkReal> x14378=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14377.value)+(((1.5707963267949)*(x14378.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14379=IKsin(j4);
IkReal x14380=IKcos(j4);
IkReal x14381=(cj2*sj1);
IkReal x14382=(cj1*sj2);
IkReal x14383=(cj5*sj3);
IkReal x14384=(cj5*r10);
IkReal x14385=(r00*sj5);
IkReal x14386=(sj1*sj2);
IkReal x14387=(r11*sj5);
IkReal x14388=(cj3*cj5);
IkReal x14389=(cj3*sj5);
IkReal x14390=(r21*sj5);
IkReal x14391=(cj1*cj2);
IkReal x14392=(sj3*sj5);
IkReal x14393=(r01*sj5);
IkReal x14394=((1.0)*x14380);
IkReal x14395=((1.0)*x14379);
IkReal x14396=(cj3*x14379);
IkReal x14397=(cj3*x14380);
IkReal x14398=(x14381+x14382);
evalcond[0]=(((x14379*x14390))+(((-1.0)*cj5*r20*x14395))+(((-1.0)*r22*x14394)));
evalcond[1]=(((x14379*x14393))+(((-1.0)*cj5*r00*x14395))+(((-1.0)*r02*x14394)));
evalcond[2]=((-1.0)+(((-1.0)*x14384*x14395))+((x14379*x14387))+(((-1.0)*r12*x14394)));
evalcond[3]=(((x14387*x14397))+((r12*x14396))+(((-1.0)*cj3*x14384*x14394))+((r11*x14383))+((r10*x14392)));
evalcond[4]=((((-1.0)*sj3*x14387*x14394))+((r10*x14389))+((r11*x14388))+((r10*x14380*x14383))+(((-1.0)*r12*sj3*x14395)));
evalcond[5]=(((r21*x14383))+((r21*x14380*x14389))+((r22*x14396))+(((-1.0)*r20*x14388*x14394))+x14398+((r20*x14392)));
evalcond[6]=((((-1.0)*r00*x14388*x14394))+(((-1.0)*x14386))+((r01*x14380*x14389))+((r01*x14383))+((r02*x14396))+x14391+((sj3*x14385)));
evalcond[7]=((((-1.0)*r02*sj3*x14395))+((r01*x14388))+((cj3*x14385))+((r00*x14380*x14383))+x14398+(((-1.0)*r01*x14392*x14394)));
evalcond[8]=(((r20*x14389))+(((-1.0)*x14391))+(((-1.0)*sj3*x14390*x14394))+((r21*x14388))+(((-1.0)*r22*sj3*x14395))+((r20*x14380*x14383))+x14386);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14399=((-1.0)*r00);
IkReal x14401 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14401)==0){
continue;
}
IkReal x14400=pow(x14401,-0.5);
CheckValue<IkReal> x14402 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14399),IKFAST_ATAN2_MAGTHRESH);
if(!x14402.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14402.value));
IkReal gconst13=(r01*x14400);
IkReal gconst14=(x14399*x14400);
CheckValue<IkReal> x14403 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14403.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14403.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14404=((-1.0)*r00);
IkReal x14405=x14400;
CheckValue<IkReal> x14407 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14404),IKFAST_ATAN2_MAGTHRESH);
if(!x14407.valid){
continue;
}
IkReal x14406=((-1.0)*(x14407.value));
sj5=gconst13;
cj5=gconst14;
j5=x14406;
IkReal gconst12=x14406;
IkReal gconst13=(r01*x14405);
IkReal gconst14=(x14404*x14405);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14408=((1.0)*sj0);
IkReal x14409=((1.0)*cj0);
CheckValue<IkReal> x14410 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14409))+(((-1.0)*r12*x14408)))),IkReal((((cj0*gconst14*r00))+(((-1.0)*gconst13*r11*x14408))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r01*x14409)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14410.valid){
continue;
}
CheckValue<IkReal> x14411=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14410.value)+(((1.5707963267949)*(x14411.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14412=IKsin(j4);
IkReal x14413=IKcos(j4);
IkReal x14414=((1.0)*r22);
IkReal x14415=((1.0)*r12);
IkReal x14416=(gconst13*sj3);
IkReal x14417=(gconst13*r01);
IkReal x14418=(sj1*sj2);
IkReal x14419=(gconst14*sj3);
IkReal x14420=(cj2*sj1);
IkReal x14421=((1.0)*sj0);
IkReal x14422=(cj3*gconst13);
IkReal x14423=(cj3*gconst14);
IkReal x14424=((1.0)*cj0);
IkReal x14425=((1.0)*gconst14);
IkReal x14426=(cj1*sj2);
IkReal x14427=(sj3*x14412);
IkReal x14428=((1.0)*cj1*cj2);
IkReal x14429=(cj3*x14413);
IkReal x14430=(cj3*x14412);
IkReal x14431=(gconst13*x14412);
IkReal x14432=((1.0)*x14413);
IkReal x14433=(x14412*x14425);
evalcond[0]=(((r21*x14431))+(((-1.0)*x14413*x14414))+(((-1.0)*r20*x14433)));
evalcond[1]=((((-1.0)*r10*x14433))+cj0+((r11*x14431))+(((-1.0)*x14413*x14415)));
evalcond[2]=(((x14412*x14417))+(((-1.0)*r00*x14433))+(((-1.0)*r02*x14432))+(((-1.0)*x14421)));
evalcond[3]=(((r21*x14419))+x14426+x14420+((r22*x14430))+(((-1.0)*r20*x14423*x14432))+((r20*x14416))+((r21*x14413*x14422)));
evalcond[4]=((((-1.0)*r21*x14416*x14432))+((r20*x14422))+x14418+(((-1.0)*x14414*x14427))+((r20*x14413*x14419))+(((-1.0)*x14428))+((r21*x14423)));
evalcond[5]=(((cj0*x14418))+(((-1.0)*r00*x14423*x14432))+((r00*x14416))+((r01*x14419))+((r02*x14430))+((x14417*x14429))+(((-1.0)*cj1*cj2*x14424)));
evalcond[6]=(((r11*x14419))+((sj0*x14418))+((r12*x14430))+((r11*x14413*x14422))+(((-1.0)*r10*x14423*x14432))+((r10*x14416))+(((-1.0)*cj1*cj2*x14421)));
evalcond[7]=(((r00*x14413*x14419))+(((-1.0)*x14420*x14424))+((r01*x14423))+((r00*x14422))+(((-1.0)*r01*x14416*x14432))+(((-1.0)*x14424*x14426))+(((-1.0)*r02*x14427)));
evalcond[8]=(((r10*x14413*x14419))+(((-1.0)*x14421*x14426))+((r11*x14423))+(((-1.0)*x14420*x14421))+(((-1.0)*r11*x14416*x14432))+((r10*x14422))+(((-1.0)*x14415*x14427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14434=((1.0)*gconst14);
CheckValue<IkReal> x14435 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14434))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14435.valid){
continue;
}
CheckValue<IkReal> x14436=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14434)))),-1);
if(!x14436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14435.value)+(((1.5707963267949)*(x14436.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14437=IKsin(j4);
IkReal x14438=IKcos(j4);
IkReal x14439=((1.0)*r22);
IkReal x14440=((1.0)*r12);
IkReal x14441=(gconst13*sj3);
IkReal x14442=(gconst13*r01);
IkReal x14443=(sj1*sj2);
IkReal x14444=(gconst14*sj3);
IkReal x14445=(cj2*sj1);
IkReal x14446=((1.0)*sj0);
IkReal x14447=(cj3*gconst13);
IkReal x14448=(cj3*gconst14);
IkReal x14449=((1.0)*cj0);
IkReal x14450=((1.0)*gconst14);
IkReal x14451=(cj1*sj2);
IkReal x14452=(sj3*x14437);
IkReal x14453=((1.0)*cj1*cj2);
IkReal x14454=(cj3*x14438);
IkReal x14455=(cj3*x14437);
IkReal x14456=(gconst13*x14437);
IkReal x14457=((1.0)*x14438);
IkReal x14458=(x14437*x14450);
evalcond[0]=((((-1.0)*x14438*x14439))+(((-1.0)*r20*x14458))+((r21*x14456)));
evalcond[1]=((((-1.0)*x14438*x14440))+cj0+((r11*x14456))+(((-1.0)*r10*x14458)));
evalcond[2]=((((-1.0)*x14446))+((x14437*x14442))+(((-1.0)*r00*x14458))+(((-1.0)*r02*x14457)));
evalcond[3]=(((r20*x14441))+((r21*x14438*x14447))+x14451+x14445+(((-1.0)*r20*x14448*x14457))+((r22*x14455))+((r21*x14444)));
evalcond[4]=((((-1.0)*x14439*x14452))+(((-1.0)*x14453))+((r20*x14447))+(((-1.0)*r21*x14441*x14457))+x14443+((r20*x14438*x14444))+((r21*x14448)));
evalcond[5]=((((-1.0)*r00*x14448*x14457))+((x14442*x14454))+((r01*x14444))+((r00*x14441))+(((-1.0)*cj1*cj2*x14449))+((r02*x14455))+((cj0*x14443)));
evalcond[6]=((((-1.0)*r10*x14448*x14457))+((sj0*x14443))+((r12*x14455))+((r10*x14441))+((r11*x14444))+((r11*x14438*x14447))+(((-1.0)*cj1*cj2*x14446)));
evalcond[7]=((((-1.0)*r02*x14452))+(((-1.0)*x14449*x14451))+((r01*x14448))+((r00*x14447))+((r00*x14438*x14444))+(((-1.0)*r01*x14441*x14457))+(((-1.0)*x14445*x14449)));
evalcond[8]=((((-1.0)*x14440*x14452))+(((-1.0)*x14446*x14451))+((r10*x14447))+((r11*x14448))+((r10*x14438*x14444))+(((-1.0)*r11*x14441*x14457))+(((-1.0)*x14445*x14446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14459=((-1.0)*r01);
IkReal x14461 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14461)==0){
continue;
}
IkReal x14460=pow(x14461,-0.5);
CheckValue<IkReal> x14462 = IKatan2WithCheck(IkReal(x14459),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14462.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14462.value))));
IkReal gconst16=(x14459*x14460);
IkReal gconst17=((1.0)*r00*x14460);
CheckValue<IkReal> x14463 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14463.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14463.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14464=((-1.0)*r01);
CheckValue<IkReal> x14467 = IKatan2WithCheck(IkReal(x14464),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14467.valid){
continue;
}
IkReal x14465=((1.0)*(x14467.value));
IkReal x14466=x14460;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14465)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14465)));
IkReal gconst16=(x14464*x14466);
IkReal gconst17=((1.0)*r00*x14466);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14468=((-1.0)*r01);
CheckValue<IkReal> x14471 = IKatan2WithCheck(IkReal(x14468),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14471.valid){
continue;
}
IkReal x14469=((1.0)*(x14471.value));
IkReal x14470=x14460;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14469)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14469)));
IkReal gconst16=(x14468*x14470);
IkReal gconst17=((1.0)*r00*x14470);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14472=((-1.0)*r01);
CheckValue<IkReal> x14475 = IKatan2WithCheck(IkReal(x14472),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14475.valid){
continue;
}
IkReal x14473=((1.0)*(x14475.value));
IkReal x14474=x14460;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14473)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14473)));
IkReal gconst16=(x14472*x14474);
IkReal gconst17=((1.0)*r00*x14474);
IkReal x14476=r02*r02;
IkReal x14477=(r12*sj0);
IkReal x14478=((1.0)*cj0);
IkReal x14479=x14460;
j4eval[0]=((IKabs((((cj0*x14476*x14479))+((r02*x14477*x14479))+(((-1.0)*x14478*x14479)))))+(IKabs(((((-1.0)*x14477))+(((-1.0)*r02*x14478))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14480=((-1.0)*r01);
CheckValue<IkReal> x14483 = IKatan2WithCheck(IkReal(x14480),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14483.valid){
continue;
}
IkReal x14481=((1.0)*(x14483.value));
IkReal x14482=x14460;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14481)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14481)));
IkReal gconst16=(x14480*x14482);
IkReal gconst17=((1.0)*r00*x14482);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14484=((-1.0)*r01);
CheckValue<IkReal> x14487 = IKatan2WithCheck(IkReal(x14484),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14487.valid){
continue;
}
IkReal x14485=((1.0)*(x14487.value));
IkReal x14486=x14460;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14485)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14485)));
IkReal gconst16=(x14484*x14486);
IkReal gconst17=((1.0)*r00*x14486);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14488=gconst16*gconst16;
IkReal x14489=gconst17*gconst17;
IkReal x14490=(r11*sj3);
IkReal x14491=(cj3*r10);
IkReal x14492=((1.0)*cj3);
IkReal x14493=(r10*sj3);
IkReal x14494=(gconst16*gconst17);
IkReal x14495=(r21*x14488);
IkReal x14496=((1.0)*r20*x14489);
CheckValue<IkReal> x14497=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x14492))+(((-1.0)*x14491*x14496))+((cj3*r11*r20*x14494))+(((-1.0)*r11*x14492*x14495))+((r21*x14491*x14494)))),-1);
if(!x14497.valid){
continue;
}
CheckValue<IkReal> x14498 = IKatan2WithCheck(IkReal((((gconst17*r22*x14490))+((gconst16*r22*x14493)))),IkReal(((((-1.0)*x14490*x14496))+((r21*x14490*x14494))+((x14493*x14495))+(((-1.0)*r20*x14493*x14494)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14497.value)))+(x14498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14499=IKsin(j4);
IkReal x14500=IKcos(j4);
IkReal x14501=(cj2*sj1);
IkReal x14502=(cj1*sj2);
IkReal x14503=(gconst16*r21);
IkReal x14504=(cj3*gconst17);
IkReal x14505=(gconst16*r20);
IkReal x14506=(sj1*sj2);
IkReal x14507=(gconst17*r20);
IkReal x14508=(gconst17*sj3);
IkReal x14509=(gconst16*r10);
IkReal x14510=(cj1*cj2);
IkReal x14511=(gconst16*sj3);
IkReal x14512=((1.0)*x14500);
IkReal x14513=((1.0)*x14499);
IkReal x14514=(gconst16*x14499);
IkReal x14515=(cj3*x14500);
IkReal x14516=(cj3*x14499);
IkReal x14517=(x14502+x14501);
evalcond[0]=((((-1.0)*r22*x14512))+(((-1.0)*x14507*x14513))+((x14499*x14503)));
evalcond[1]=((((-1.0)*gconst17*r00*x14513))+((r01*x14514))+(((-1.0)*r02*x14512)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14513))+((r11*x14514))+(((-1.0)*r12*x14512)));
evalcond[3]=(((r12*x14516))+((sj3*x14509))+(((-1.0)*r10*x14504*x14512))+((r11*x14508))+((gconst16*r11*x14515)));
evalcond[4]=(((cj3*x14509))+(((-1.0)*r11*x14511*x14512))+((r11*x14504))+((r10*x14500*x14508))+(((-1.0)*r12*sj3*x14513)));
evalcond[5]=((((-1.0)*r20*x14504*x14512))+((r22*x14516))+((x14503*x14515))+((r21*x14508))+x14517+((sj3*x14505)));
evalcond[6]=(((r00*x14511))+((gconst16*r01*x14515))+(((-1.0)*x14506))+x14510+((r02*x14516))+((r01*x14508))+(((-1.0)*r00*x14504*x14512)));
evalcond[7]=((((-1.0)*r02*sj3*x14513))+x14517+(((-1.0)*r01*x14511*x14512))+((r00*x14500*x14508))+((r01*x14504))+((cj3*gconst16*r00)));
evalcond[8]=(((cj3*x14505))+((r21*x14504))+x14506+(((-1.0)*sj3*x14503*x14512))+((sj3*x14500*x14507))+(((-1.0)*r22*sj3*x14513))+(((-1.0)*x14510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14518=((1.0)*gconst17);
CheckValue<IkReal> x14519 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14518))+((gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14519.valid){
continue;
}
CheckValue<IkReal> x14520=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14518))+(((-1.0)*gconst16*r20)))),-1);
if(!x14520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14519.value)+(((1.5707963267949)*(x14520.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14521=IKsin(j4);
IkReal x14522=IKcos(j4);
IkReal x14523=(cj2*sj1);
IkReal x14524=(cj1*sj2);
IkReal x14525=(gconst16*r21);
IkReal x14526=(cj3*gconst17);
IkReal x14527=(gconst16*r20);
IkReal x14528=(sj1*sj2);
IkReal x14529=(gconst17*r20);
IkReal x14530=(gconst17*sj3);
IkReal x14531=(gconst16*r10);
IkReal x14532=(cj1*cj2);
IkReal x14533=(gconst16*sj3);
IkReal x14534=((1.0)*x14522);
IkReal x14535=((1.0)*x14521);
IkReal x14536=(gconst16*x14521);
IkReal x14537=(cj3*x14522);
IkReal x14538=(cj3*x14521);
IkReal x14539=(x14523+x14524);
evalcond[0]=((((-1.0)*r22*x14534))+((x14521*x14525))+(((-1.0)*x14529*x14535)));
evalcond[1]=(((r01*x14536))+(((-1.0)*gconst17*r00*x14535))+(((-1.0)*r02*x14534)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14535))+(((-1.0)*r12*x14534))+((r11*x14536)));
evalcond[3]=(((r12*x14538))+((r11*x14530))+(((-1.0)*r10*x14526*x14534))+((sj3*x14531))+((gconst16*r11*x14537)));
evalcond[4]=((((-1.0)*r12*sj3*x14535))+((cj3*x14531))+((r10*x14522*x14530))+((r11*x14526))+(((-1.0)*r11*x14533*x14534)));
evalcond[5]=((((-1.0)*r20*x14526*x14534))+((sj3*x14527))+((r21*x14530))+((r22*x14538))+x14539+((x14525*x14537)));
evalcond[6]=((((-1.0)*x14528))+(((-1.0)*r00*x14526*x14534))+((r02*x14538))+((r00*x14533))+((r01*x14530))+x14532+((gconst16*r01*x14537)));
evalcond[7]=(((r00*x14522*x14530))+(((-1.0)*r02*sj3*x14535))+((r01*x14526))+(((-1.0)*r01*x14533*x14534))+x14539+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*sj3*x14525*x14534))+(((-1.0)*x14532))+((cj3*x14527))+x14528+((sj3*x14522*x14529))+((r21*x14526))+(((-1.0)*r22*sj3*x14535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14540=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14540.valid){
continue;
}
CheckValue<IkReal> x14541 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14540.value)))+(x14541.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14542=IKsin(j4);
IkReal x14543=IKcos(j4);
IkReal x14544=(cj2*sj1);
IkReal x14545=(cj1*sj2);
IkReal x14546=(gconst16*r21);
IkReal x14547=(cj3*gconst17);
IkReal x14548=(gconst16*r20);
IkReal x14549=(sj1*sj2);
IkReal x14550=(gconst17*r20);
IkReal x14551=(gconst17*sj3);
IkReal x14552=(gconst16*r10);
IkReal x14553=(cj1*cj2);
IkReal x14554=(gconst16*sj3);
IkReal x14555=((1.0)*x14543);
IkReal x14556=((1.0)*x14542);
IkReal x14557=(gconst16*x14542);
IkReal x14558=(cj3*x14543);
IkReal x14559=(cj3*x14542);
IkReal x14560=(x14545+x14544);
evalcond[0]=((((-1.0)*x14550*x14556))+((x14542*x14546))+(((-1.0)*r22*x14555)));
evalcond[1]=((((-1.0)*r02*x14555))+((r01*x14557))+(((-1.0)*gconst17*r00*x14556)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14556))+(((-1.0)*r12*x14555))+((r11*x14557)));
evalcond[3]=(((sj3*x14552))+((r12*x14559))+((gconst16*r11*x14558))+(((-1.0)*r10*x14547*x14555))+((r11*x14551)));
evalcond[4]=(((r10*x14543*x14551))+((r11*x14547))+(((-1.0)*r11*x14554*x14555))+((cj3*x14552))+(((-1.0)*r12*sj3*x14556)));
evalcond[5]=((((-1.0)*r20*x14547*x14555))+x14560+((sj3*x14548))+((x14546*x14558))+((r22*x14559))+((r21*x14551)));
evalcond[6]=(((gconst16*r01*x14558))+(((-1.0)*x14549))+((r02*x14559))+x14553+(((-1.0)*r00*x14547*x14555))+((r01*x14551))+((r00*x14554)));
evalcond[7]=(((r01*x14547))+((r00*x14543*x14551))+(((-1.0)*r01*x14554*x14555))+x14560+(((-1.0)*r02*sj3*x14556))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*r22*sj3*x14556))+((cj3*x14548))+((r21*x14547))+(((-1.0)*sj3*x14546*x14555))+x14549+((sj3*x14543*x14550))+(((-1.0)*x14553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14561=((-1.0)*r01);
CheckValue<IkReal> x14564 = IKatan2WithCheck(IkReal(x14561),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14564.valid){
continue;
}
IkReal x14562=((1.0)*(x14564.value));
IkReal x14563=x14460;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14562)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14562)));
IkReal gconst16=(x14561*x14563);
IkReal gconst17=((1.0)*r00*x14563);
IkReal x14565=r02*r02;
IkReal x14566=(r12*sj0);
IkReal x14567=((1.0)*cj0);
IkReal x14568=x14460;
j4eval[0]=((IKabs((((cj0*x14565*x14568))+(((-1.0)*x14567*x14568))+((r02*x14566*x14568)))))+(IKabs(((((-1.0)*r02*x14567))+(((-1.0)*x14566))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14569=((1.0)*r12);
IkReal x14570=(sj1*sj2);
IkReal x14571=(cj1*cj2);
IkReal x14572=((1.0)*sj3);
IkReal x14573=(gconst16*r21);
IkReal x14574=(cj3*gconst16*r20);
IkReal x14575=(gconst17*r20*sj3);
IkReal x14576=(cj3*gconst17*r21);
CheckValue<IkReal> x14577=IKPowWithIntegerCheck((((gconst17*r10*sj3*x14573))+(((-1.0)*r10*r20*x14572*(gconst17*gconst17)))+(((-1.0)*gconst16*r11*x14572*x14573))+((gconst16*r11*x14575))),-1);
if(!x14577.valid){
continue;
}
CheckValue<IkReal> x14578=IKPowWithIntegerCheck(((((-1.0)*x14572*x14573))+x14575),-1);
if(!x14578.valid){
continue;
}
if( IKabs(((x14577.value)*(((((-1.0)*x14569*x14574))+(((-1.0)*x14569*x14576))+(((-1.0)*x14569*x14570))+((cj0*sj3*x14573))+((r12*x14571))+(((-1.0)*cj0*gconst17*r20*x14572)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14578.value)*((x14571+(((-1.0)*x14576))+(((-1.0)*x14574))+(((-1.0)*x14570)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14577.value)*(((((-1.0)*x14569*x14574))+(((-1.0)*x14569*x14576))+(((-1.0)*x14569*x14570))+((cj0*sj3*x14573))+((r12*x14571))+(((-1.0)*cj0*gconst17*r20*x14572))))))+IKsqr(((x14578.value)*((x14571+(((-1.0)*x14576))+(((-1.0)*x14574))+(((-1.0)*x14570))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14577.value)*(((((-1.0)*x14569*x14574))+(((-1.0)*x14569*x14576))+(((-1.0)*x14569*x14570))+((cj0*sj3*x14573))+((r12*x14571))+(((-1.0)*cj0*gconst17*r20*x14572))))), ((x14578.value)*((x14571+(((-1.0)*x14576))+(((-1.0)*x14574))+(((-1.0)*x14570))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14579=IKsin(j4);
IkReal x14580=IKcos(j4);
IkReal x14581=((1.0)*gconst17);
IkReal x14582=(gconst17*sj3);
IkReal x14583=(gconst16*r21);
IkReal x14584=(cj3*gconst17);
IkReal x14585=(sj1*sj2);
IkReal x14586=((1.0)*sj0);
IkReal x14587=(gconst16*sj3);
IkReal x14588=(cj3*gconst16);
IkReal x14589=(cj2*sj1);
IkReal x14590=((1.0)*cj0);
IkReal x14591=((1.0)*sj3);
IkReal x14592=(cj1*sj2);
IkReal x14593=(cj3*x14580);
IkReal x14594=(gconst16*x14579);
IkReal x14595=((1.0)*x14580);
IkReal x14596=((1.0)*cj1*cj2);
IkReal x14597=(r02*x14579);
IkReal x14598=(r12*x14579);
evalcond[0]=((((-1.0)*r20*x14579*x14581))+((x14579*x14583)));
evalcond[1]=(cj0+(((-1.0)*r12*x14595))+(((-1.0)*r10*x14579*x14581))+((r11*x14594)));
evalcond[2]=((((-1.0)*r02*x14595))+(((-1.0)*x14586))+(((-1.0)*r00*x14579*x14581))+((r01*x14594)));
evalcond[3]=(((r20*x14587))+((r21*x14582))+x14589+x14592+(((-1.0)*r20*x14581*x14593))+((x14583*x14593)));
evalcond[4]=(((r20*x14588))+(((-1.0)*x14596))+((r21*x14584))+x14585+((r20*x14580*x14582))+(((-1.0)*x14580*x14583*x14591)));
evalcond[5]=(((cj3*x14597))+(((-1.0)*r00*x14581*x14593))+(((-1.0)*cj1*cj2*x14590))+((r00*x14587))+((r01*x14582))+((r01*x14580*x14588))+((cj0*x14585)));
evalcond[6]=(((cj3*x14598))+((sj0*x14585))+((r11*x14580*x14588))+(((-1.0)*cj1*cj2*x14586))+((r10*x14587))+(((-1.0)*r10*x14581*x14593))+((r11*x14582)));
evalcond[7]=(((r00*x14580*x14582))+(((-1.0)*r01*x14587*x14595))+((r00*x14588))+(((-1.0)*x14589*x14590))+((r01*x14584))+(((-1.0)*x14591*x14597))+(((-1.0)*x14590*x14592)));
evalcond[8]=((((-1.0)*r11*x14587*x14595))+((r10*x14588))+((r11*x14584))+(((-1.0)*x14586*x14592))+(((-1.0)*x14586*x14589))+(((-1.0)*x14591*x14598))+((r10*x14580*x14582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14599=((1.0)*sj0);
IkReal x14600=((1.0)*cj0);
CheckValue<IkReal> x14601=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14601.valid){
continue;
}
CheckValue<IkReal> x14602 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14599))+(((-1.0)*r02*x14600)))),IkReal(((((-1.0)*gconst16*r01*x14600))+(((-1.0)*gconst16*r11*x14599))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14601.value)))+(x14602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14603=IKsin(j4);
IkReal x14604=IKcos(j4);
IkReal x14605=((1.0)*gconst17);
IkReal x14606=(gconst17*sj3);
IkReal x14607=(gconst16*r21);
IkReal x14608=(cj3*gconst17);
IkReal x14609=(sj1*sj2);
IkReal x14610=((1.0)*sj0);
IkReal x14611=(gconst16*sj3);
IkReal x14612=(cj3*gconst16);
IkReal x14613=(cj2*sj1);
IkReal x14614=((1.0)*cj0);
IkReal x14615=((1.0)*sj3);
IkReal x14616=(cj1*sj2);
IkReal x14617=(cj3*x14604);
IkReal x14618=(gconst16*x14603);
IkReal x14619=((1.0)*x14604);
IkReal x14620=((1.0)*cj1*cj2);
IkReal x14621=(r02*x14603);
IkReal x14622=(r12*x14603);
evalcond[0]=(((x14603*x14607))+(((-1.0)*r20*x14603*x14605)));
evalcond[1]=(cj0+(((-1.0)*r10*x14603*x14605))+(((-1.0)*r12*x14619))+((r11*x14618)));
evalcond[2]=((((-1.0)*r00*x14603*x14605))+((r01*x14618))+(((-1.0)*r02*x14619))+(((-1.0)*x14610)));
evalcond[3]=((((-1.0)*r20*x14605*x14617))+((x14607*x14617))+((r21*x14606))+x14616+x14613+((r20*x14611)));
evalcond[4]=((((-1.0)*x14620))+((r20*x14604*x14606))+((r21*x14608))+x14609+((r20*x14612))+(((-1.0)*x14604*x14607*x14615)));
evalcond[5]=(((cj3*x14621))+((cj0*x14609))+((r01*x14604*x14612))+((r01*x14606))+(((-1.0)*cj1*cj2*x14614))+((r00*x14611))+(((-1.0)*r00*x14605*x14617)));
evalcond[6]=(((r11*x14604*x14612))+((sj0*x14609))+(((-1.0)*r10*x14605*x14617))+((r10*x14611))+((cj3*x14622))+(((-1.0)*cj1*cj2*x14610))+((r11*x14606)));
evalcond[7]=(((r00*x14604*x14606))+(((-1.0)*x14613*x14614))+(((-1.0)*r01*x14611*x14619))+((r01*x14608))+((r00*x14612))+(((-1.0)*x14614*x14616))+(((-1.0)*x14615*x14621)));
evalcond[8]=(((r10*x14612))+((r11*x14608))+(((-1.0)*r11*x14611*x14619))+((r10*x14604*x14606))+(((-1.0)*x14610*x14616))+(((-1.0)*x14610*x14613))+(((-1.0)*x14615*x14622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14623=((1.0)*sj0);
IkReal x14624=((1.0)*cj0);
CheckValue<IkReal> x14625=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14625.valid){
continue;
}
CheckValue<IkReal> x14626 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14624))+(((-1.0)*r12*x14623)))),IkReal(((((-1.0)*gconst16*r01*x14624))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14623)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14625.value)))+(x14626.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14627=IKsin(j4);
IkReal x14628=IKcos(j4);
IkReal x14629=(cj3*gconst17);
IkReal x14630=(gconst16*r21);
IkReal x14631=(gconst17*sj3);
IkReal x14632=(gconst16*r20);
IkReal x14633=(sj1*sj2);
IkReal x14634=(gconst16*r10);
IkReal x14635=(cj2*sj1);
IkReal x14636=(gconst16*sj3);
IkReal x14637=((1.0)*cj0);
IkReal x14638=((1.0)*sj0);
IkReal x14639=(cj1*sj2);
IkReal x14640=((1.0)*x14628);
IkReal x14641=(gconst16*x14627);
IkReal x14642=(cj3*x14628);
IkReal x14643=(cj3*x14627);
IkReal x14644=((1.0)*cj1*cj2);
IkReal x14645=((1.0)*gconst17*x14627);
IkReal x14646=((1.0)*sj3*x14627);
evalcond[0]=((((-1.0)*r22*x14640))+((x14627*x14630))+(((-1.0)*r20*x14645)));
evalcond[1]=(((r11*x14641))+cj0+(((-1.0)*r12*x14640))+(((-1.0)*r10*x14645)));
evalcond[2]=((((-1.0)*x14638))+((r01*x14641))+(((-1.0)*r02*x14640))+(((-1.0)*r00*x14645)));
evalcond[3]=(((x14630*x14642))+((sj3*x14632))+((r22*x14643))+x14639+x14635+(((-1.0)*r20*x14629*x14640))+((r21*x14631)));
evalcond[4]=(((r21*x14629))+(((-1.0)*r22*x14646))+((cj3*x14632))+(((-1.0)*sj3*x14630*x14640))+x14633+(((-1.0)*x14644))+((r20*x14628*x14631)));
evalcond[5]=((((-1.0)*r00*x14629*x14640))+((cj0*x14633))+((r01*x14631))+(((-1.0)*cj1*cj2*x14637))+((r00*x14636))+((r02*x14643))+((gconst16*r01*x14642)));
evalcond[6]=(((gconst16*r11*x14642))+((r12*x14643))+((sj3*x14634))+(((-1.0)*r10*x14629*x14640))+((r11*x14631))+(((-1.0)*cj1*cj2*x14638))+((sj0*x14633)));
evalcond[7]=((((-1.0)*x14637*x14639))+((r00*x14628*x14631))+(((-1.0)*r01*x14636*x14640))+(((-1.0)*r02*x14646))+(((-1.0)*x14635*x14637))+((r01*x14629))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*r11*x14636*x14640))+(((-1.0)*r12*x14646))+((r11*x14629))+((r10*x14628*x14631))+((cj3*x14634))+(((-1.0)*x14638*x14639))+(((-1.0)*x14635*x14638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14647=((1.0)*gconst17);
CheckValue<IkReal> x14648 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x14647)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14648.valid){
continue;
}
CheckValue<IkReal> x14649=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14647)))),-1);
if(!x14649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14648.value)+(((1.5707963267949)*(x14649.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14650=IKsin(j4);
IkReal x14651=IKcos(j4);
IkReal x14652=(cj3*gconst17);
IkReal x14653=(gconst16*r21);
IkReal x14654=(gconst17*sj3);
IkReal x14655=(gconst16*r20);
IkReal x14656=(sj1*sj2);
IkReal x14657=(gconst16*r10);
IkReal x14658=(cj2*sj1);
IkReal x14659=(gconst16*sj3);
IkReal x14660=((1.0)*cj0);
IkReal x14661=((1.0)*sj0);
IkReal x14662=(cj1*sj2);
IkReal x14663=((1.0)*x14651);
IkReal x14664=(gconst16*x14650);
IkReal x14665=(cj3*x14651);
IkReal x14666=(cj3*x14650);
IkReal x14667=((1.0)*cj1*cj2);
IkReal x14668=((1.0)*gconst17*x14650);
IkReal x14669=((1.0)*sj3*x14650);
evalcond[0]=((((-1.0)*r22*x14663))+((x14650*x14653))+(((-1.0)*r20*x14668)));
evalcond[1]=(cj0+(((-1.0)*r10*x14668))+(((-1.0)*r12*x14663))+((r11*x14664)));
evalcond[2]=(((r01*x14664))+(((-1.0)*r00*x14668))+(((-1.0)*r02*x14663))+(((-1.0)*x14661)));
evalcond[3]=((((-1.0)*r20*x14652*x14663))+((sj3*x14655))+((r22*x14666))+x14658+x14662+((r21*x14654))+((x14653*x14665)));
evalcond[4]=((((-1.0)*r22*x14669))+(((-1.0)*sj3*x14653*x14663))+x14656+((r21*x14652))+((cj3*x14655))+((r20*x14651*x14654))+(((-1.0)*x14667)));
evalcond[5]=(((r02*x14666))+((gconst16*r01*x14665))+((cj0*x14656))+((r00*x14659))+((r01*x14654))+(((-1.0)*cj1*cj2*x14660))+(((-1.0)*r00*x14652*x14663)));
evalcond[6]=(((gconst16*r11*x14665))+((sj0*x14656))+((sj3*x14657))+(((-1.0)*cj1*cj2*x14661))+(((-1.0)*r10*x14652*x14663))+((r12*x14666))+((r11*x14654)));
evalcond[7]=((((-1.0)*x14660*x14662))+((r01*x14652))+(((-1.0)*x14658*x14660))+((r00*x14651*x14654))+(((-1.0)*r01*x14659*x14663))+(((-1.0)*r02*x14669))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*r11*x14659*x14663))+(((-1.0)*x14661*x14662))+(((-1.0)*r12*x14669))+(((-1.0)*x14658*x14661))+((r10*x14651*x14654))+((cj3*x14657))+((r11*x14652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14670=((1.0)*gconst17);
CheckValue<IkReal> x14671 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14670))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14671.valid){
continue;
}
CheckValue<IkReal> x14672=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14670)))),-1);
if(!x14672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14671.value)+(((1.5707963267949)*(x14672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14673=IKsin(j4);
IkReal x14674=IKcos(j4);
IkReal x14675=(cj3*gconst17);
IkReal x14676=(gconst16*r21);
IkReal x14677=(gconst17*sj3);
IkReal x14678=(gconst16*r20);
IkReal x14679=(sj1*sj2);
IkReal x14680=(gconst16*r10);
IkReal x14681=(cj2*sj1);
IkReal x14682=(gconst16*sj3);
IkReal x14683=((1.0)*cj0);
IkReal x14684=((1.0)*sj0);
IkReal x14685=(cj1*sj2);
IkReal x14686=((1.0)*x14674);
IkReal x14687=(gconst16*x14673);
IkReal x14688=(cj3*x14674);
IkReal x14689=(cj3*x14673);
IkReal x14690=((1.0)*cj1*cj2);
IkReal x14691=((1.0)*gconst17*x14673);
IkReal x14692=((1.0)*sj3*x14673);
evalcond[0]=((((-1.0)*r20*x14691))+((x14673*x14676))+(((-1.0)*r22*x14686)));
evalcond[1]=(cj0+((r11*x14687))+(((-1.0)*r12*x14686))+(((-1.0)*r10*x14691)));
evalcond[2]=(((r01*x14687))+(((-1.0)*r00*x14691))+(((-1.0)*r02*x14686))+(((-1.0)*x14684)));
evalcond[3]=(((x14676*x14688))+((r21*x14677))+(((-1.0)*r20*x14675*x14686))+x14685+x14681+((sj3*x14678))+((r22*x14689)));
evalcond[4]=((((-1.0)*sj3*x14676*x14686))+((r21*x14675))+((r20*x14674*x14677))+(((-1.0)*x14690))+(((-1.0)*r22*x14692))+x14679+((cj3*x14678)));
evalcond[5]=((((-1.0)*r00*x14675*x14686))+((r00*x14682))+(((-1.0)*cj1*cj2*x14683))+((cj0*x14679))+((r01*x14677))+((r02*x14689))+((gconst16*r01*x14688)));
evalcond[6]=(((sj0*x14679))+((sj3*x14680))+(((-1.0)*cj1*cj2*x14684))+(((-1.0)*r10*x14675*x14686))+((r12*x14689))+((gconst16*r11*x14688))+((r11*x14677)));
evalcond[7]=((((-1.0)*x14683*x14685))+(((-1.0)*r02*x14692))+(((-1.0)*x14681*x14683))+((r01*x14675))+(((-1.0)*r01*x14682*x14686))+((r00*x14674*x14677))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14684*x14685))+((cj3*x14680))+((r10*x14674*x14677))+(((-1.0)*x14681*x14684))+(((-1.0)*r11*x14682*x14686))+((r11*x14675))+(((-1.0)*r12*x14692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14693=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14693;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14693);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14694=((1.0)*cj5);
IkReal x14695=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14694)));
j4eval[0]=x14695;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14694))))));
j4eval[2]=IKsign(x14695);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14696=cj5*cj5;
IkReal x14697=(cj3*r01);
IkReal x14698=(cj5*sj5);
IkReal x14699=((1.0)*cj3);
IkReal x14700=(((r20*x14697*x14698))+(((-1.0)*r02*r22*x14699))+((r21*x14696*x14697))+(((-1.0)*r21*x14697))+(((-1.0)*r00*r20*x14696*x14699))+((cj3*r00*r21*x14698)));
j4eval[0]=x14700;
j4eval[1]=IKsign(x14700);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14701=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14701;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14701);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14702=((1.0)*cj5);
IkReal x14703=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14702)));
j4eval[0]=x14703;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14702))))));
j4eval[2]=IKsign(x14703);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14704=cj5*cj5;
IkReal x14705=r01*r01;
IkReal x14706=(r01*sj5);
IkReal x14707=(cj5*r00);
IkReal x14708=((((-1.0)*x14705))+(((2.0)*x14706*x14707))+(((-1.0)*(r02*r02)))+((x14704*x14705))+(((-1.0)*x14704*(r00*r00))));
j4eval[0]=x14708;
j4eval[1]=IKsign(x14708);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14706))+x14707))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14709=cj5*cj5;
IkReal x14710=r01*r01;
IkReal x14711=(r01*sj5);
IkReal x14712=(cj5*r00);
CheckValue<IkReal> x14713=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x14710))+(((-1.0)*x14709*(r00*r00)))+(((2.0)*x14711*x14712))+((x14709*x14710)))),-1);
if(!x14713.valid){
continue;
}
CheckValue<IkReal> x14714 = IKatan2WithCheck(IkReal(((((-1.0)*x14711))+x14712)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14713.value)))+(x14714.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14715=IKsin(j4);
IkReal x14716=IKcos(j4);
IkReal x14717=(cj5*r10);
IkReal x14718=(r01*sj5);
IkReal x14719=((1.0)*cj2);
IkReal x14720=(cj5*r00);
IkReal x14721=(cj5*r20);
IkReal x14722=((1.0)*x14716);
IkReal x14723=((1.0)*x14715);
IkReal x14724=(sj5*x14715);
evalcond[0]=(((r21*x14724))+(((-1.0)*x14721*x14723))+(((-1.0)*r22*x14722)));
evalcond[1]=((((-1.0)*r12*x14722))+(((-1.0)*x14717*x14723))+((r11*x14724)));
evalcond[2]=((((-1.0)*x14718*x14722))+(((-1.0)*r02*x14723))+((x14716*x14720)));
evalcond[3]=((-1.0)+(((-1.0)*x14720*x14723))+(((-1.0)*r02*x14722))+((x14715*x14718)));
evalcond[4]=((((-1.0)*r21*sj5*x14722))+((sj1*sj2))+(((-1.0)*r22*x14723))+((x14716*x14721))+(((-1.0)*cj1*x14719)));
evalcond[5]=((((-1.0)*sj1*x14719))+(((-1.0)*r12*x14723))+((x14716*x14717))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14725=((1.0)*cj5);
CheckValue<IkReal> x14726 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14725))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14726.valid){
continue;
}
CheckValue<IkReal> x14727=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14725))+(((-1.0)*r10*sj5)))),-1);
if(!x14727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14726.value)+(((1.5707963267949)*(x14727.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14728=IKsin(j4);
IkReal x14729=IKcos(j4);
IkReal x14730=(cj5*r10);
IkReal x14731=(r01*sj5);
IkReal x14732=((1.0)*cj2);
IkReal x14733=(cj5*r00);
IkReal x14734=(cj5*r20);
IkReal x14735=((1.0)*x14729);
IkReal x14736=((1.0)*x14728);
IkReal x14737=(sj5*x14728);
evalcond[0]=((((-1.0)*r22*x14735))+(((-1.0)*x14734*x14736))+((r21*x14737)));
evalcond[1]=((((-1.0)*r12*x14735))+((r11*x14737))+(((-1.0)*x14730*x14736)));
evalcond[2]=((((-1.0)*r02*x14736))+(((-1.0)*x14731*x14735))+((x14729*x14733)));
evalcond[3]=((-1.0)+((x14728*x14731))+(((-1.0)*r02*x14735))+(((-1.0)*x14733*x14736)));
evalcond[4]=((((-1.0)*r21*sj5*x14735))+((sj1*sj2))+(((-1.0)*cj1*x14732))+(((-1.0)*r22*x14736))+((x14729*x14734)));
evalcond[5]=((((-1.0)*sj1*x14732))+(((-1.0)*r12*x14736))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14735))+((x14729*x14730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14738=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14738.valid){
continue;
}
CheckValue<IkReal> x14739 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14738.value)))+(x14739.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14740=IKsin(j4);
IkReal x14741=IKcos(j4);
IkReal x14742=(cj5*r10);
IkReal x14743=(r01*sj5);
IkReal x14744=((1.0)*cj2);
IkReal x14745=(cj5*r00);
IkReal x14746=(cj5*r20);
IkReal x14747=((1.0)*x14741);
IkReal x14748=((1.0)*x14740);
IkReal x14749=(sj5*x14740);
evalcond[0]=(((r21*x14749))+(((-1.0)*x14746*x14748))+(((-1.0)*r22*x14747)));
evalcond[1]=((((-1.0)*x14742*x14748))+((r11*x14749))+(((-1.0)*r12*x14747)));
evalcond[2]=((((-1.0)*x14743*x14747))+(((-1.0)*r02*x14748))+((x14741*x14745)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14747))+(((-1.0)*x14745*x14748))+((x14740*x14743)));
evalcond[4]=(((sj1*sj2))+((x14741*x14746))+(((-1.0)*r22*x14748))+(((-1.0)*cj1*x14744))+(((-1.0)*r21*sj5*x14747)));
evalcond[5]=((((-1.0)*r11*sj5*x14747))+(((-1.0)*cj1*sj2))+((x14741*x14742))+(((-1.0)*sj1*x14744))+(((-1.0)*r12*x14748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14750=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14750;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14750);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14751=((1.0)*cj5);
IkReal x14752=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14751)));
j4eval[0]=x14752;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x14751))+((r21*sj5))))));
j4eval[2]=IKsign(x14752);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14753=cj5*cj5;
IkReal x14754=r01*r01;
IkReal x14755=(cj5*r00);
IkReal x14756=(r01*sj5);
IkReal x14757=(((x14753*(r00*r00)))+(((-1.0)*x14753*x14754))+x14754+(r02*r02)+(((-2.0)*x14755*x14756)));
j4eval[0]=x14757;
j4eval[1]=IKsign(x14757);
j4eval[2]=((IKabs(r02))+(IKabs((x14756+(((-1.0)*x14755))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14758=cj5*cj5;
IkReal x14759=r01*r01;
IkReal x14760=(r01*sj5);
IkReal x14761=(cj5*r00);
CheckValue<IkReal> x14762 = IKatan2WithCheck(IkReal(((((-1.0)*x14761))+x14760)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14762.valid){
continue;
}
CheckValue<IkReal> x14763=IKPowWithIntegerCheck(IKsign((((x14758*(r00*r00)))+(((-2.0)*x14760*x14761))+(((-1.0)*x14758*x14759))+x14759+(r02*r02))),-1);
if(!x14763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14762.value)+(((1.5707963267949)*(x14763.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14764=IKcos(j4);
IkReal x14765=IKsin(j4);
IkReal x14766=(cj5*r00);
IkReal x14767=(cj5*r10);
IkReal x14768=(r21*sj5);
IkReal x14769=((1.0)*cj2);
IkReal x14770=(cj5*r20);
IkReal x14771=((1.0)*x14764);
IkReal x14772=((1.0)*x14765);
IkReal x14773=(sj5*x14765);
IkReal x14774=(sj5*x14764);
evalcond[0]=(((r01*x14774))+((r02*x14765))+(((-1.0)*x14766*x14771)));
evalcond[1]=((((-1.0)*x14770*x14772))+(((-1.0)*r22*x14771))+((x14765*x14768)));
evalcond[2]=(((r11*x14773))+(((-1.0)*x14767*x14772))+(((-1.0)*r12*x14771)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14771))+((r01*x14773))+(((-1.0)*x14766*x14772)));
evalcond[4]=(((x14764*x14768))+(((-1.0)*x14770*x14771))+((sj1*sj2))+(((-1.0)*cj1*x14769))+((r22*x14765)));
evalcond[5]=((((-1.0)*sj1*x14769))+((r11*x14774))+(((-1.0)*cj1*sj2))+(((-1.0)*x14767*x14771))+((r12*x14765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14775=((1.0)*cj5);
CheckValue<IkReal> x14776 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14775)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14776.valid){
continue;
}
CheckValue<IkReal> x14777=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14775)))),-1);
if(!x14777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14776.value)+(((1.5707963267949)*(x14777.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14778=IKcos(j4);
IkReal x14779=IKsin(j4);
IkReal x14780=(cj5*r00);
IkReal x14781=(cj5*r10);
IkReal x14782=(r21*sj5);
IkReal x14783=((1.0)*cj2);
IkReal x14784=(cj5*r20);
IkReal x14785=((1.0)*x14778);
IkReal x14786=((1.0)*x14779);
IkReal x14787=(sj5*x14779);
IkReal x14788=(sj5*x14778);
evalcond[0]=(((r01*x14788))+(((-1.0)*x14780*x14785))+((r02*x14779)));
evalcond[1]=(((x14779*x14782))+(((-1.0)*x14784*x14786))+(((-1.0)*r22*x14785)));
evalcond[2]=((((-1.0)*x14781*x14786))+(((-1.0)*r12*x14785))+((r11*x14787)));
evalcond[3]=((-1.0)+((r01*x14787))+(((-1.0)*x14780*x14786))+(((-1.0)*r02*x14785)));
evalcond[4]=(((r22*x14779))+((x14778*x14782))+((sj1*sj2))+(((-1.0)*x14784*x14785))+(((-1.0)*cj1*x14783)));
evalcond[5]=(((r12*x14779))+(((-1.0)*sj1*x14783))+(((-1.0)*cj1*sj2))+(((-1.0)*x14781*x14785))+((r11*x14788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14789=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14789.valid){
continue;
}
CheckValue<IkReal> x14790 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14789.value)))+(x14790.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14791=IKcos(j4);
IkReal x14792=IKsin(j4);
IkReal x14793=(cj5*r00);
IkReal x14794=(cj5*r10);
IkReal x14795=(r21*sj5);
IkReal x14796=((1.0)*cj2);
IkReal x14797=(cj5*r20);
IkReal x14798=((1.0)*x14791);
IkReal x14799=((1.0)*x14792);
IkReal x14800=(sj5*x14792);
IkReal x14801=(sj5*x14791);
evalcond[0]=((((-1.0)*x14793*x14798))+((r01*x14801))+((r02*x14792)));
evalcond[1]=((((-1.0)*x14797*x14799))+((x14792*x14795))+(((-1.0)*r22*x14798)));
evalcond[2]=((((-1.0)*r12*x14798))+((r11*x14800))+(((-1.0)*x14794*x14799)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14798))+(((-1.0)*x14793*x14799))+((r01*x14800)));
evalcond[4]=((((-1.0)*x14797*x14798))+((sj1*sj2))+(((-1.0)*cj1*x14796))+((r22*x14792))+((x14791*x14795)));
evalcond[5]=((((-1.0)*sj1*x14796))+(((-1.0)*cj1*sj2))+((r12*x14792))+((r11*x14801))+(((-1.0)*x14794*x14798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14803 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14803)==0){
continue;
}
IkReal x14802=pow(x14803,-0.5);
CheckValue<IkReal> x14804 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14804.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14804.value));
IkReal gconst49=((-1.0)*r21*x14802);
IkReal gconst50=(r20*x14802);
CheckValue<IkReal> x14805 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14805.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14805.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14808 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14808.valid){
continue;
}
IkReal x14806=((-1.0)*(x14808.value));
IkReal x14807=x14802;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14806;
IkReal gconst48=x14806;
IkReal gconst49=((-1.0)*r21*x14807);
IkReal gconst50=(r20*x14807);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14811 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14811.valid){
continue;
}
IkReal x14809=((-1.0)*(x14811.value));
IkReal x14810=x14802;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14809;
IkReal gconst48=x14809;
IkReal gconst49=((-1.0)*r21*x14810);
IkReal gconst50=(r20*x14810);
CheckValue<IkReal> x14819=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14819.valid){
continue;
}
IkReal x14812=x14819.value;
IkReal x14813=(sj3*x14812);
IkReal x14814=(r11*x14813);
IkReal x14815=(r00*x14813);
IkReal x14816=(r01*x14813);
IkReal x14817=(r10*x14813);
IkReal x14818=(r20*r21*x14813);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x14814))+((r10*x14815*(r20*r20)))+((r01*x14814*(r21*r21)))+((r10*r20*r21*x14816))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14820=gconst49*gconst49;
IkReal x14821=gconst50*gconst50;
IkReal x14822=((1.0)*cj3);
IkReal x14823=(gconst50*r01);
IkReal x14824=(gconst49*r10);
IkReal x14825=(r12*sj3);
IkReal x14826=(gconst49*r00);
IkReal x14827=(r00*sj3);
IkReal x14828=(r11*x14820);
IkReal x14829=(r10*x14821);
CheckValue<IkReal> x14830 = IKatan2WithCheck(IkReal((((x14823*x14825))+((x14825*x14826)))),IkReal((((x14827*x14828))+((gconst49*r11*sj3*x14823))+(((-1.0)*r01*sj3*x14829))+(((-1.0)*gconst50*x14824*x14827)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14830.valid){
continue;
}
CheckValue<IkReal> x14831=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x14822*x14829))+((cj3*x14823*x14824))+((cj3*gconst50*r11*x14826))+(((-1.0)*r02*r12*x14822))+(((-1.0)*r01*x14822*x14828)))),-1);
if(!x14831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14830.value)+(((1.5707963267949)*(x14831.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14832=IKsin(j4);
IkReal x14833=IKcos(j4);
IkReal x14834=(sj1*sj2);
IkReal x14835=(gconst50*r20);
IkReal x14836=(gconst50*sj3);
IkReal x14837=(cj3*r01);
IkReal x14838=(gconst50*r10);
IkReal x14839=(gconst49*sj3);
IkReal x14840=((1.0)*cj2);
IkReal x14841=(cj1*sj2);
IkReal x14842=(cj3*r11);
IkReal x14843=(gconst50*r00);
IkReal x14844=(cj3*r21);
IkReal x14845=(cj3*gconst49);
IkReal x14846=(cj1*x14840);
IkReal x14847=((1.0)*x14833);
IkReal x14848=((1.0)*x14832);
IkReal x14849=(gconst49*x14832);
IkReal x14850=(gconst49*x14833);
IkReal x14851=(cj3*x14832);
evalcond[0]=((((-1.0)*x14835*x14848))+(((-1.0)*r22*x14847))+((r21*x14849)));
evalcond[1]=((((-1.0)*x14838*x14848))+((r11*x14849))+(((-1.0)*r12*x14847)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14847))+((r01*x14849))+(((-1.0)*x14843*x14848)));
evalcond[3]=(((x14837*x14850))+(((-1.0)*cj3*x14843*x14847))+((r02*x14851))+((r01*x14836))+((r00*x14839)));
evalcond[4]=(((gconst50*x14837))+(((-1.0)*r02*sj3*x14848))+(((-1.0)*r01*x14839*x14847))+((r00*x14845))+((r00*x14833*x14836)));
evalcond[5]=(((cj2*sj1))+((x14844*x14850))+x14841+((r20*x14839))+((r21*x14836))+(((-1.0)*cj3*x14835*x14847))+((r22*x14851)));
evalcond[6]=(x14834+((r11*x14836))+(((-1.0)*cj3*x14838*x14847))+(((-1.0)*x14846))+((r10*x14839))+((r12*x14851))+((x14842*x14850)));
evalcond[7]=(((r20*x14845))+x14834+(((-1.0)*r21*x14839*x14847))+(((-1.0)*x14846))+((gconst50*x14844))+((sj3*x14833*x14835))+(((-1.0)*r22*sj3*x14848)));
evalcond[8]=((((-1.0)*x14841))+(((-1.0)*sj1*x14840))+((r10*x14833*x14836))+((gconst50*x14842))+((r10*x14845))+(((-1.0)*r11*x14839*x14847))+(((-1.0)*r12*sj3*x14848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14852=gconst49*gconst49;
IkReal x14853=gconst50*gconst50;
IkReal x14854=(cj3*r12);
IkReal x14855=(gconst49*r00);
IkReal x14856=(r01*r11);
IkReal x14857=(r00*r11);
IkReal x14858=(cj3*gconst50);
IkReal x14859=((1.0)*r01*r10);
IkReal x14860=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14861 = IKatan2WithCheck(IkReal((((x14854*x14855))+((gconst50*r01*x14854)))),IkReal(((((-1.0)*cj3*x14853*x14859))+((cj3*x14852*x14857))+(((-1.0)*r10*x14855*x14858))+((gconst49*x14856*x14858)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14861.valid){
continue;
}
CheckValue<IkReal> x14862=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst50*r11*sj3*x14855))+((sj3*x14852*x14856))+(((-1.0)*x14859*x14860))+((r00*r10*sj3*x14853)))),-1);
if(!x14862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14861.value)+(((1.5707963267949)*(x14862.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14863=IKsin(j4);
IkReal x14864=IKcos(j4);
IkReal x14865=(sj1*sj2);
IkReal x14866=(gconst50*r20);
IkReal x14867=(gconst50*sj3);
IkReal x14868=(cj3*r01);
IkReal x14869=(gconst50*r10);
IkReal x14870=(gconst49*sj3);
IkReal x14871=((1.0)*cj2);
IkReal x14872=(cj1*sj2);
IkReal x14873=(cj3*r11);
IkReal x14874=(gconst50*r00);
IkReal x14875=(cj3*r21);
IkReal x14876=(cj3*gconst49);
IkReal x14877=(cj1*x14871);
IkReal x14878=((1.0)*x14864);
IkReal x14879=((1.0)*x14863);
IkReal x14880=(gconst49*x14863);
IkReal x14881=(gconst49*x14864);
IkReal x14882=(cj3*x14863);
evalcond[0]=((((-1.0)*r22*x14878))+(((-1.0)*x14866*x14879))+((r21*x14880)));
evalcond[1]=((((-1.0)*x14869*x14879))+((r11*x14880))+(((-1.0)*r12*x14878)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14878))+((r01*x14880))+(((-1.0)*x14874*x14879)));
evalcond[3]=(((x14868*x14881))+((r00*x14870))+(((-1.0)*cj3*x14874*x14878))+((r01*x14867))+((r02*x14882)));
evalcond[4]=(((r00*x14876))+((r00*x14864*x14867))+((gconst50*x14868))+(((-1.0)*r02*sj3*x14879))+(((-1.0)*r01*x14870*x14878)));
evalcond[5]=((((-1.0)*cj3*x14866*x14878))+((cj2*sj1))+((r22*x14882))+x14872+((x14875*x14881))+((r20*x14870))+((r21*x14867)));
evalcond[6]=(((r10*x14870))+((x14873*x14881))+((r12*x14882))+x14865+(((-1.0)*cj3*x14869*x14878))+(((-1.0)*x14877))+((r11*x14867)));
evalcond[7]=((((-1.0)*r22*sj3*x14879))+x14865+(((-1.0)*r21*x14870*x14878))+((gconst50*x14875))+(((-1.0)*x14877))+((r20*x14876))+((sj3*x14864*x14866)));
evalcond[8]=(((r10*x14864*x14867))+((r10*x14876))+(((-1.0)*r11*x14870*x14878))+(((-1.0)*r12*sj3*x14879))+((gconst50*x14873))+(((-1.0)*x14872))+(((-1.0)*sj1*x14871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14883=((1.0)*gconst50);
CheckValue<IkReal> x14884=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14883)))),-1);
if(!x14884.valid){
continue;
}
CheckValue<IkReal> x14885 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14883)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14884.value)))+(x14885.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14886=IKsin(j4);
IkReal x14887=IKcos(j4);
IkReal x14888=(sj1*sj2);
IkReal x14889=(gconst50*r20);
IkReal x14890=(gconst50*sj3);
IkReal x14891=(cj3*r01);
IkReal x14892=(gconst50*r10);
IkReal x14893=(gconst49*sj3);
IkReal x14894=((1.0)*cj2);
IkReal x14895=(cj1*sj2);
IkReal x14896=(cj3*r11);
IkReal x14897=(gconst50*r00);
IkReal x14898=(cj3*r21);
IkReal x14899=(cj3*gconst49);
IkReal x14900=(cj1*x14894);
IkReal x14901=((1.0)*x14887);
IkReal x14902=((1.0)*x14886);
IkReal x14903=(gconst49*x14886);
IkReal x14904=(gconst49*x14887);
IkReal x14905=(cj3*x14886);
evalcond[0]=(((r21*x14903))+(((-1.0)*r22*x14901))+(((-1.0)*x14889*x14902)));
evalcond[1]=((((-1.0)*r12*x14901))+(((-1.0)*x14892*x14902))+((r11*x14903)));
evalcond[2]=((-1.0)+((r01*x14903))+(((-1.0)*r02*x14901))+(((-1.0)*x14897*x14902)));
evalcond[3]=(((r01*x14890))+((r00*x14893))+((r02*x14905))+(((-1.0)*cj3*x14897*x14901))+((x14891*x14904)));
evalcond[4]=((((-1.0)*r01*x14893*x14901))+((r00*x14899))+((gconst50*x14891))+((r00*x14887*x14890))+(((-1.0)*r02*sj3*x14902)));
evalcond[5]=(((r22*x14905))+((cj2*sj1))+x14895+((r21*x14890))+((x14898*x14904))+((r20*x14893))+(((-1.0)*cj3*x14889*x14901)));
evalcond[6]=(((r10*x14893))+(((-1.0)*cj3*x14892*x14901))+((r11*x14890))+(((-1.0)*x14900))+x14888+((r12*x14905))+((x14896*x14904)));
evalcond[7]=((((-1.0)*x14900))+x14888+((gconst50*x14898))+(((-1.0)*r22*sj3*x14902))+((sj3*x14887*x14889))+((r20*x14899))+(((-1.0)*r21*x14893*x14901)));
evalcond[8]=((((-1.0)*sj1*x14894))+((r10*x14899))+(((-1.0)*r11*x14893*x14901))+((gconst50*x14896))+((r10*x14887*x14890))+(((-1.0)*x14895))+(((-1.0)*r12*sj3*x14902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14907 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14907)==0){
continue;
}
IkReal x14906=pow(x14907,-0.5);
CheckValue<IkReal> x14908 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14908.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14908.value))));
IkReal gconst52=((1.0)*r21*x14906);
IkReal gconst53=((-1.0)*r20*x14906);
CheckValue<IkReal> x14909 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14909.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14909.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14912 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14912.valid){
continue;
}
IkReal x14910=((1.0)*(x14912.value));
IkReal x14911=x14906;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14910)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14910)));
IkReal gconst52=((1.0)*r21*x14911);
IkReal gconst53=((-1.0)*r20*x14911);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14915 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14915.valid){
continue;
}
IkReal x14913=((1.0)*(x14915.value));
IkReal x14914=x14906;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14913)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14913)));
IkReal gconst52=((1.0)*r21*x14914);
IkReal gconst53=((-1.0)*r20*x14914);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14918 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14918.valid){
continue;
}
IkReal x14916=((1.0)*(x14918.value));
IkReal x14917=x14906;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14916)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14916)));
IkReal gconst52=((1.0)*r21*x14917);
IkReal gconst53=((-1.0)*r20*x14917);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14919=gconst52*gconst52;
IkReal x14920=gconst53*gconst53;
IkReal x14921=(gconst53*r01);
IkReal x14922=(cj3*r20);
IkReal x14923=(r22*sj3);
IkReal x14924=((1.0)*cj3);
IkReal x14925=(gconst52*sj3);
IkReal x14926=((1.0)*r00);
IkReal x14927=(gconst52*r00);
IkReal x14928=(r21*x14919);
CheckValue<IkReal> x14929 = IKatan2WithCheck(IkReal((((x14921*x14923))+((x14923*x14927)))),IkReal((((r00*sj3*x14928))+(((-1.0)*r01*r20*sj3*x14920))+((r21*x14921*x14925))+(((-1.0)*gconst53*r20*x14925*x14926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14929.valid){
continue;
}
CheckValue<IkReal> x14930=IKPowWithIntegerCheck(IKsign((((cj3*gconst53*r21*x14927))+(((-1.0)*r02*r22*x14924))+((gconst52*x14921*x14922))+(((-1.0)*x14920*x14922*x14926))+(((-1.0)*r01*x14924*x14928)))),-1);
if(!x14930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14929.value)+(((1.5707963267949)*(x14930.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14931=IKsin(j4);
IkReal x14932=IKcos(j4);
IkReal x14933=(sj1*sj2);
IkReal x14934=((1.0)*cj1);
IkReal x14935=(cj3*gconst52);
IkReal x14936=(gconst53*sj3);
IkReal x14937=(cj3*gconst53);
IkReal x14938=(cj2*sj1);
IkReal x14939=(gconst52*sj3);
IkReal x14940=(cj2*x14934);
IkReal x14941=((1.0)*x14932);
IkReal x14942=((1.0)*x14931);
IkReal x14943=(gconst52*x14931);
IkReal x14944=(cj3*x14931);
evalcond[0]=((((-1.0)*gconst53*r20*x14942))+((r21*x14943))+(((-1.0)*r22*x14941)));
evalcond[1]=((((-1.0)*r12*x14941))+(((-1.0)*gconst53*r10*x14942))+((r11*x14943)));
evalcond[2]=((-1.0)+((r01*x14943))+(((-1.0)*r02*x14941))+(((-1.0)*gconst53*r00*x14942)));
evalcond[3]=(((r01*x14936))+((r00*x14939))+(((-1.0)*r00*x14937*x14941))+((r02*x14944))+((r01*x14932*x14935)));
evalcond[4]=(((r00*x14932*x14936))+(((-1.0)*r02*sj3*x14942))+((r01*x14937))+(((-1.0)*r01*x14939*x14941))+((r00*x14935)));
evalcond[5]=(x14938+((r22*x14944))+((cj1*sj2))+(((-1.0)*r20*x14937*x14941))+((r21*x14936))+((r21*x14932*x14935))+((r20*x14939)));
evalcond[6]=(((r12*x14944))+x14933+(((-1.0)*r10*x14937*x14941))+((r10*x14939))+(((-1.0)*x14940))+((r11*x14932*x14935))+((r11*x14936)));
evalcond[7]=(x14933+((r20*x14932*x14936))+((r21*x14937))+(((-1.0)*x14940))+(((-1.0)*r22*sj3*x14942))+(((-1.0)*r21*x14939*x14941))+((r20*x14935)));
evalcond[8]=((((-1.0)*x14938))+((r10*x14932*x14936))+(((-1.0)*r12*sj3*x14942))+((r10*x14935))+(((-1.0)*sj2*x14934))+((r11*x14937))+(((-1.0)*r11*x14939*x14941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14945=((1.0)*gconst53);
CheckValue<IkReal> x14946 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14945))+((gconst52*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14946.valid){
continue;
}
CheckValue<IkReal> x14947=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14945))+(((-1.0)*gconst52*r10)))),-1);
if(!x14947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14946.value)+(((1.5707963267949)*(x14947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14948=IKsin(j4);
IkReal x14949=IKcos(j4);
IkReal x14950=(sj1*sj2);
IkReal x14951=((1.0)*cj1);
IkReal x14952=(cj3*gconst52);
IkReal x14953=(gconst53*sj3);
IkReal x14954=(cj3*gconst53);
IkReal x14955=(cj2*sj1);
IkReal x14956=(gconst52*sj3);
IkReal x14957=(cj2*x14951);
IkReal x14958=((1.0)*x14949);
IkReal x14959=((1.0)*x14948);
IkReal x14960=(gconst52*x14948);
IkReal x14961=(cj3*x14948);
evalcond[0]=((((-1.0)*gconst53*r20*x14959))+(((-1.0)*r22*x14958))+((r21*x14960)));
evalcond[1]=(((r11*x14960))+(((-1.0)*r12*x14958))+(((-1.0)*gconst53*r10*x14959)));
evalcond[2]=((-1.0)+((r01*x14960))+(((-1.0)*r02*x14958))+(((-1.0)*gconst53*r00*x14959)));
evalcond[3]=((((-1.0)*r00*x14954*x14958))+((r01*x14953))+((r00*x14956))+((r02*x14961))+((r01*x14949*x14952)));
evalcond[4]=((((-1.0)*r02*sj3*x14959))+((r01*x14954))+((r00*x14952))+(((-1.0)*r01*x14956*x14958))+((r00*x14949*x14953)));
evalcond[5]=((((-1.0)*r20*x14954*x14958))+((r22*x14961))+x14955+((cj1*sj2))+((r21*x14953))+((r20*x14956))+((r21*x14949*x14952)));
evalcond[6]=(x14950+((r12*x14961))+((r10*x14956))+(((-1.0)*x14957))+((r11*x14949*x14952))+(((-1.0)*r10*x14954*x14958))+((r11*x14953)));
evalcond[7]=(x14950+(((-1.0)*r21*x14956*x14958))+(((-1.0)*x14957))+(((-1.0)*r22*sj3*x14959))+((r20*x14949*x14953))+((r21*x14954))+((r20*x14952)));
evalcond[8]=(((r10*x14949*x14953))+(((-1.0)*sj2*x14951))+((r10*x14952))+(((-1.0)*r12*sj3*x14959))+(((-1.0)*r11*x14956*x14958))+(((-1.0)*x14955))+((r11*x14954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14962 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14962.valid){
continue;
}
CheckValue<IkReal> x14963=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14962.value)+(((1.5707963267949)*(x14963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14964=IKsin(j4);
IkReal x14965=IKcos(j4);
IkReal x14966=(sj1*sj2);
IkReal x14967=((1.0)*cj1);
IkReal x14968=(cj3*gconst52);
IkReal x14969=(gconst53*sj3);
IkReal x14970=(cj3*gconst53);
IkReal x14971=(cj2*sj1);
IkReal x14972=(gconst52*sj3);
IkReal x14973=(cj2*x14967);
IkReal x14974=((1.0)*x14965);
IkReal x14975=((1.0)*x14964);
IkReal x14976=(gconst52*x14964);
IkReal x14977=(cj3*x14964);
evalcond[0]=((((-1.0)*gconst53*r20*x14975))+(((-1.0)*r22*x14974))+((r21*x14976)));
evalcond[1]=((((-1.0)*r12*x14974))+((r11*x14976))+(((-1.0)*gconst53*r10*x14975)));
evalcond[2]=((-1.0)+(((-1.0)*gconst53*r00*x14975))+((r01*x14976))+(((-1.0)*r02*x14974)));
evalcond[3]=(((r01*x14969))+((r02*x14977))+((r01*x14965*x14968))+(((-1.0)*r00*x14970*x14974))+((r00*x14972)));
evalcond[4]=(((r00*x14965*x14969))+(((-1.0)*r01*x14972*x14974))+(((-1.0)*r02*sj3*x14975))+((r00*x14968))+((r01*x14970)));
evalcond[5]=(((r22*x14977))+x14971+((cj1*sj2))+((r20*x14972))+((r21*x14965*x14968))+(((-1.0)*r20*x14970*x14974))+((r21*x14969)));
evalcond[6]=(x14966+((r12*x14977))+((r11*x14965*x14968))+(((-1.0)*r10*x14970*x14974))+(((-1.0)*x14973))+((r11*x14969))+((r10*x14972)));
evalcond[7]=((((-1.0)*r22*sj3*x14975))+x14966+(((-1.0)*x14973))+(((-1.0)*r21*x14972*x14974))+((r20*x14965*x14969))+((r20*x14968))+((r21*x14970)));
evalcond[8]=(((r10*x14965*x14969))+(((-1.0)*sj2*x14967))+(((-1.0)*x14971))+(((-1.0)*r11*x14972*x14974))+((r11*x14970))+((r10*x14968))+(((-1.0)*r12*sj3*x14975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14978=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14978);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14978);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14979=(r01*sj5);
IkReal x14980=((1.0)*cj5*r00);
j4eval[0]=(x14979+(((-1.0)*x14980)));
j4eval[1]=(((cj3*x14979))+(((-1.0)*cj3*x14980)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14981=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14981);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14981);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14982=(cj5*r00);
IkReal x14983=(r01*sj5);
j4eval[0]=(x14983+(((-1.0)*x14982)));
j4eval[1]=(((sj3*x14982))+(((-1.0)*sj3*x14983)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14984=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14984);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14984);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14985=((1.0)*r00);
CheckValue<IkReal> x14986=IKPowWithIntegerCheck(cj3,-1);
if(!x14986.valid){
continue;
}
CheckValue<IkReal> x14987=IKPowWithIntegerCheck(r22,-1);
if(!x14987.valid){
continue;
}
CheckValue<IkReal> x14988=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14985))),-1);
if(!x14988.valid){
continue;
}
if( IKabs(((x14986.value)*(x14987.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14988.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14985)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14986.value)*(x14987.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14988.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14985))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14986.value)*(x14987.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14988.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14985))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14989=IKsin(j4);
IkReal x14990=IKcos(j4);
IkReal x14991=(sj1*sj2);
IkReal x14992=(cj5*sj3);
IkReal x14993=(r11*sj5);
IkReal x14994=(cj3*cj5);
IkReal x14995=((1.0)*cj1);
IkReal x14996=(cj3*sj5);
IkReal x14997=(sj3*sj5);
IkReal x14998=(cj2*sj1);
IkReal x14999=(r01*sj5);
IkReal x15000=((1.0)*sj3);
IkReal x15001=(cj2*x14995);
IkReal x15002=(r10*x14990);
IkReal x15003=(r22*x14989);
IkReal x15004=(cj3*x14990);
IkReal x15005=((1.0)*cj5*x14989);
evalcond[0]=((-1.0)*r22*x14990);
evalcond[1]=(x14998+((cj1*sj2))+((cj3*x15003)));
evalcond[2]=(((x14989*x14993))+(((-1.0)*r10*x15005)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x15005))+((x14989*x14999)));
evalcond[4]=(x14991+(((-1.0)*x15000*x15003))+(((-1.0)*x15001)));
evalcond[5]=(((r01*x14990*x14996))+((r00*x14997))+((r01*x14992))+(((-1.0)*r00*x14990*x14994)));
evalcond[6]=(((r00*x14990*x14992))+((r00*x14996))+((r01*x14994))+(((-1.0)*r01*x14990*x14997)));
evalcond[7]=(x14991+((r10*x14997))+((r11*x14992))+(((-1.0)*x14994*x15002))+((x14993*x15004))+(((-1.0)*x15001)));
evalcond[8]=(((r10*x14996))+((r11*x14994))+(((-1.0)*x14990*x14993*x15000))+(((-1.0)*sj2*x14995))+((x14992*x15002))+(((-1.0)*x14998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15006=((1.0)*cj3);
IkReal x15007=(cj5*r00);
IkReal x15008=(r01*sj5);
CheckValue<IkReal> x15009=IKPowWithIntegerCheck(((((-1.0)*x15007))+x15008),-1);
if(!x15009.valid){
continue;
}
CheckValue<IkReal> x15010=IKPowWithIntegerCheck((((sj3*x15007))+(((-1.0)*sj3*x15008))),-1);
if(!x15010.valid){
continue;
}
if( IKabs(x15009.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15010.value)*(((((-1.0)*cj5*r01*x15006))+(((-1.0)*r00*sj5*x15006)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15009.value)+IKsqr(((x15010.value)*(((((-1.0)*cj5*r01*x15006))+(((-1.0)*r00*sj5*x15006))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15009.value, ((x15010.value)*(((((-1.0)*cj5*r01*x15006))+(((-1.0)*r00*sj5*x15006))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15011=IKsin(j4);
IkReal x15012=IKcos(j4);
IkReal x15013=(sj1*sj2);
IkReal x15014=(cj5*sj3);
IkReal x15015=(r11*sj5);
IkReal x15016=(cj3*cj5);
IkReal x15017=((1.0)*cj1);
IkReal x15018=(cj3*sj5);
IkReal x15019=(sj3*sj5);
IkReal x15020=(cj2*sj1);
IkReal x15021=(r01*sj5);
IkReal x15022=((1.0)*sj3);
IkReal x15023=(cj2*x15017);
IkReal x15024=(r10*x15012);
IkReal x15025=(r22*x15011);
IkReal x15026=(cj3*x15012);
IkReal x15027=((1.0)*cj5*x15011);
evalcond[0]=((-1.0)*r22*x15012);
evalcond[1]=(((cj1*sj2))+x15020+((cj3*x15025)));
evalcond[2]=((((-1.0)*r10*x15027))+((x15011*x15015)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x15027))+((x15011*x15021)));
evalcond[4]=(x15013+(((-1.0)*x15022*x15025))+(((-1.0)*x15023)));
evalcond[5]=(((r00*x15019))+((r01*x15014))+((r01*x15012*x15018))+(((-1.0)*r00*x15012*x15016)));
evalcond[6]=(((r00*x15012*x15014))+((r00*x15018))+(((-1.0)*r01*x15012*x15019))+((r01*x15016)));
evalcond[7]=((((-1.0)*x15016*x15024))+((r10*x15019))+((x15015*x15026))+x15013+(((-1.0)*x15023))+((r11*x15014)));
evalcond[8]=((((-1.0)*x15012*x15015*x15022))+(((-1.0)*x15020))+((r10*x15018))+((x15014*x15024))+((r11*x15016))+(((-1.0)*sj2*x15017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15028=((1.0)*sj3);
IkReal x15029=(r01*sj5);
IkReal x15030=((1.0)*cj5*r00);
CheckValue<IkReal> x15031=IKPowWithIntegerCheck(((((-1.0)*x15030))+x15029),-1);
if(!x15031.valid){
continue;
}
CheckValue<IkReal> x15032=IKPowWithIntegerCheck((((cj3*x15029))+(((-1.0)*cj3*x15030))),-1);
if(!x15032.valid){
continue;
}
if( IKabs(x15031.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15032.value)*(((((-1.0)*r00*sj5*x15028))+(((-1.0)*cj5*r01*x15028)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15031.value)+IKsqr(((x15032.value)*(((((-1.0)*r00*sj5*x15028))+(((-1.0)*cj5*r01*x15028))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15031.value, ((x15032.value)*(((((-1.0)*r00*sj5*x15028))+(((-1.0)*cj5*r01*x15028))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15033=IKsin(j4);
IkReal x15034=IKcos(j4);
IkReal x15035=(sj1*sj2);
IkReal x15036=(cj5*sj3);
IkReal x15037=(r11*sj5);
IkReal x15038=(cj3*cj5);
IkReal x15039=((1.0)*cj1);
IkReal x15040=(cj3*sj5);
IkReal x15041=(sj3*sj5);
IkReal x15042=(cj2*sj1);
IkReal x15043=(r01*sj5);
IkReal x15044=((1.0)*sj3);
IkReal x15045=(cj2*x15039);
IkReal x15046=(r10*x15034);
IkReal x15047=(r22*x15033);
IkReal x15048=(cj3*x15034);
IkReal x15049=((1.0)*cj5*x15033);
evalcond[0]=((-1.0)*r22*x15034);
evalcond[1]=(((cj3*x15047))+((cj1*sj2))+x15042);
evalcond[2]=(((x15033*x15037))+(((-1.0)*r10*x15049)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x15049))+((x15033*x15043)));
evalcond[4]=((((-1.0)*x15045))+x15035+(((-1.0)*x15044*x15047)));
evalcond[5]=(((r01*x15036))+((r00*x15041))+(((-1.0)*r00*x15034*x15038))+((r01*x15034*x15040)));
evalcond[6]=(((r01*x15038))+((r00*x15040))+(((-1.0)*r01*x15034*x15041))+((r00*x15034*x15036)));
evalcond[7]=((((-1.0)*x15045))+(((-1.0)*x15038*x15046))+((x15037*x15048))+x15035+((r11*x15036))+((r10*x15041)));
evalcond[8]=((((-1.0)*sj2*x15039))+(((-1.0)*x15034*x15037*x15044))+((r11*x15038))+(((-1.0)*x15042))+((r10*x15040))+((x15036*x15046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15050=cj5*cj5;
IkReal x15051=(cj3*r20);
IkReal x15052=(r21*sj3);
IkReal x15053=((1.0)*cj3);
IkReal x15054=(r01*r21);
IkReal x15055=(r01*sj3);
IkReal x15056=(r00*sj5);
IkReal x15057=(cj5*r01*sj5);
IkReal x15058=((1.0)*x15050);
CheckValue<IkReal> x15059=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15053*x15054))+((cj3*cj5*r21*x15056))+(((-1.0)*r02*r22*x15053))+(((-1.0)*r00*x15051*x15058))+((cj3*x15050*x15054))+((x15051*x15057)))),-1);
if(!x15059.valid){
continue;
}
CheckValue<IkReal> x15060 = IKatan2WithCheck(IkReal((((r22*sj3*x15056))+((cj5*r22*x15055)))),IkReal((((x15052*x15057))+(((-1.0)*r00*x15052*x15058))+(((-1.0)*cj5*r20*sj3*x15056))+(((-1.0)*r20*x15055*x15058))+((r00*x15052)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15059.value)))+(x15060.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15061=IKsin(j4);
IkReal x15062=IKcos(j4);
IkReal x15063=(sj1*sj2);
IkReal x15064=(r11*sj5);
IkReal x15065=(cj5*r10);
IkReal x15066=(cj5*r01);
IkReal x15067=(cj5*r00);
IkReal x15068=((1.0)*cj1);
IkReal x15069=(cj3*sj5);
IkReal x15070=(r21*sj5);
IkReal x15071=(cj5*sj3);
IkReal x15072=(sj3*sj5);
IkReal x15073=(cj2*sj1);
IkReal x15074=(r01*sj5);
IkReal x15075=(cj3*cj5);
IkReal x15076=(cj5*r20);
IkReal x15077=(cj2*x15068);
IkReal x15078=((1.0)*x15062);
IkReal x15079=((1.0)*x15061);
IkReal x15080=(cj3*x15062);
IkReal x15081=(sj3*x15062);
IkReal x15082=(cj3*x15061);
evalcond[0]=(((x15061*x15070))+(((-1.0)*r22*x15078))+(((-1.0)*x15076*x15079)));
evalcond[1]=((((-1.0)*r12*x15078))+((x15061*x15064))+(((-1.0)*x15065*x15079)));
evalcond[2]=((-1.0)+((x15061*x15074))+(((-1.0)*r02*x15078))+(((-1.0)*x15067*x15079)));
evalcond[3]=(((sj3*x15066))+((r02*x15082))+((r00*x15072))+((r01*x15062*x15069))+(((-1.0)*cj3*x15067*x15078)));
evalcond[4]=((((-1.0)*r01*x15072*x15078))+((r00*x15069))+((cj3*x15066))+(((-1.0)*r02*sj3*x15079))+((x15067*x15081)));
evalcond[5]=(((cj1*sj2))+((r22*x15082))+x15073+(((-1.0)*r20*x15075*x15078))+((r20*x15072))+((r21*x15071))+((r21*x15062*x15069)));
evalcond[6]=((((-1.0)*x15077))+((r12*x15082))+((r11*x15071))+x15063+((r10*x15072))+(((-1.0)*cj3*x15065*x15078))+((x15064*x15080)));
evalcond[7]=((((-1.0)*x15077))+(((-1.0)*r22*sj3*x15079))+((r20*x15069))+x15063+(((-1.0)*sj3*x15070*x15078))+((r21*x15075))+((r20*x15062*x15071)));
evalcond[8]=((((-1.0)*sj2*x15068))+(((-1.0)*r12*sj3*x15079))+((r11*x15075))+(((-1.0)*x15073))+((r10*x15069))+(((-1.0)*sj3*x15064*x15078))+((x15065*x15081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15083=((1.0)*cj5);
CheckValue<IkReal> x15084 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15084.valid){
continue;
}
CheckValue<IkReal> x15085=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15083)))),-1);
if(!x15085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15084.value)+(((1.5707963267949)*(x15085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15086=IKsin(j4);
IkReal x15087=IKcos(j4);
IkReal x15088=(sj1*sj2);
IkReal x15089=(r11*sj5);
IkReal x15090=(cj5*r10);
IkReal x15091=(cj5*r01);
IkReal x15092=(cj5*r00);
IkReal x15093=((1.0)*cj1);
IkReal x15094=(cj3*sj5);
IkReal x15095=(r21*sj5);
IkReal x15096=(cj5*sj3);
IkReal x15097=(sj3*sj5);
IkReal x15098=(cj2*sj1);
IkReal x15099=(r01*sj5);
IkReal x15100=(cj3*cj5);
IkReal x15101=(cj5*r20);
IkReal x15102=(cj2*x15093);
IkReal x15103=((1.0)*x15087);
IkReal x15104=((1.0)*x15086);
IkReal x15105=(cj3*x15087);
IkReal x15106=(sj3*x15087);
IkReal x15107=(cj3*x15086);
evalcond[0]=(((x15086*x15095))+(((-1.0)*r22*x15103))+(((-1.0)*x15101*x15104)));
evalcond[1]=((((-1.0)*r12*x15103))+((x15086*x15089))+(((-1.0)*x15090*x15104)));
evalcond[2]=((-1.0)+((x15086*x15099))+(((-1.0)*x15092*x15104))+(((-1.0)*r02*x15103)));
evalcond[3]=(((sj3*x15091))+((r00*x15097))+(((-1.0)*cj3*x15092*x15103))+((r02*x15107))+((r01*x15087*x15094)));
evalcond[4]=(((r00*x15094))+((cj3*x15091))+(((-1.0)*r01*x15097*x15103))+((x15092*x15106))+(((-1.0)*r02*sj3*x15104)));
evalcond[5]=(((r21*x15096))+((r21*x15087*x15094))+((r22*x15107))+((r20*x15097))+((cj1*sj2))+x15098+(((-1.0)*r20*x15100*x15103)));
evalcond[6]=(((r12*x15107))+(((-1.0)*cj3*x15090*x15103))+((x15089*x15105))+x15088+((r11*x15096))+((r10*x15097))+(((-1.0)*x15102)));
evalcond[7]=(((r20*x15094))+((r21*x15100))+((r20*x15087*x15096))+x15088+(((-1.0)*r22*sj3*x15104))+(((-1.0)*sj3*x15095*x15103))+(((-1.0)*x15102)));
evalcond[8]=(((x15090*x15106))+(((-1.0)*sj3*x15089*x15103))+(((-1.0)*x15098))+((r10*x15094))+(((-1.0)*r12*sj3*x15104))+(((-1.0)*sj2*x15093))+((r11*x15100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15108=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15108.valid){
continue;
}
CheckValue<IkReal> x15109 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15108.value)))+(x15109.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15110=IKsin(j4);
IkReal x15111=IKcos(j4);
IkReal x15112=(sj1*sj2);
IkReal x15113=(r11*sj5);
IkReal x15114=(cj5*r10);
IkReal x15115=(cj5*r01);
IkReal x15116=(cj5*r00);
IkReal x15117=((1.0)*cj1);
IkReal x15118=(cj3*sj5);
IkReal x15119=(r21*sj5);
IkReal x15120=(cj5*sj3);
IkReal x15121=(sj3*sj5);
IkReal x15122=(cj2*sj1);
IkReal x15123=(r01*sj5);
IkReal x15124=(cj3*cj5);
IkReal x15125=(cj5*r20);
IkReal x15126=(cj2*x15117);
IkReal x15127=((1.0)*x15111);
IkReal x15128=((1.0)*x15110);
IkReal x15129=(cj3*x15111);
IkReal x15130=(sj3*x15111);
IkReal x15131=(cj3*x15110);
evalcond[0]=(((x15110*x15119))+(((-1.0)*r22*x15127))+(((-1.0)*x15125*x15128)));
evalcond[1]=((((-1.0)*x15114*x15128))+((x15110*x15113))+(((-1.0)*r12*x15127)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15127))+((x15110*x15123))+(((-1.0)*x15116*x15128)));
evalcond[3]=(((r00*x15121))+((sj3*x15115))+((r01*x15111*x15118))+((r02*x15131))+(((-1.0)*cj3*x15116*x15127)));
evalcond[4]=((((-1.0)*r02*sj3*x15128))+((cj3*x15115))+(((-1.0)*r01*x15121*x15127))+((x15116*x15130))+((r00*x15118)));
evalcond[5]=(((r20*x15121))+((r21*x15120))+((cj1*sj2))+((r22*x15131))+x15122+(((-1.0)*r20*x15124*x15127))+((r21*x15111*x15118)));
evalcond[6]=((((-1.0)*x15126))+((x15113*x15129))+x15112+((r12*x15131))+((r10*x15121))+(((-1.0)*cj3*x15114*x15127))+((r11*x15120)));
evalcond[7]=(((r21*x15124))+(((-1.0)*x15126))+((r20*x15118))+(((-1.0)*r22*sj3*x15128))+(((-1.0)*sj3*x15119*x15127))+x15112+((r20*x15111*x15120)));
evalcond[8]=((((-1.0)*sj2*x15117))+((r10*x15118))+(((-1.0)*r12*sj3*x15128))+(((-1.0)*sj3*x15113*x15127))+((x15114*x15130))+(((-1.0)*x15122))+((r11*x15124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15132=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15132;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15132);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15133=((1.0)*cj5);
IkReal x15134=((((-1.0)*r21*x15133))+(((-1.0)*r20*sj5)));
j4eval[0]=x15134;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15133))+((r11*sj5))))));
j4eval[2]=IKsign(x15134);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15135=cj5*cj5;
IkReal x15136=(cj3*r01);
IkReal x15137=(cj5*sj5);
IkReal x15138=((1.0)*cj3);
IkReal x15139=(((r21*x15135*x15136))+(((-1.0)*r02*r22*x15138))+((cj3*r00*r21*x15137))+((r20*x15136*x15137))+(((-1.0)*r21*x15136))+(((-1.0)*r00*r20*x15135*x15138)));
j4eval[0]=x15139;
j4eval[1]=IKsign(x15139);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15140=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15140;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15140);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15141=((1.0)*cj5);
IkReal x15142=((((-1.0)*r21*x15141))+(((-1.0)*r20*sj5)));
j4eval[0]=x15142;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15141))+((r11*sj5))))));
j4eval[2]=IKsign(x15142);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15143=cj5*cj5;
IkReal x15144=r01*r01;
IkReal x15145=(cj5*r00);
IkReal x15146=(r01*sj5);
IkReal x15147=(x15144+((x15143*(r00*r00)))+(((-1.0)*x15143*x15144))+(r02*r02)+(((-2.0)*x15145*x15146)));
j4eval[0]=x15147;
j4eval[1]=((IKabs(((((-1.0)*x15146))+x15145)))+(IKabs(r02)));
j4eval[2]=IKsign(x15147);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15148=cj5*cj5;
IkReal x15149=r01*r01;
IkReal x15150=(r01*sj5);
IkReal x15151=(cj5*r00);
CheckValue<IkReal> x15152=IKPowWithIntegerCheck(IKsign((((x15148*(r00*r00)))+x15149+(((-2.0)*x15150*x15151))+(((-1.0)*x15148*x15149))+(r02*r02))),-1);
if(!x15152.valid){
continue;
}
CheckValue<IkReal> x15153 = IKatan2WithCheck(IkReal((x15151+(((-1.0)*x15150)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15152.value)))+(x15153.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15154=IKsin(j4);
IkReal x15155=IKcos(j4);
IkReal x15156=(cj5*r10);
IkReal x15157=(r01*sj5);
IkReal x15158=(cj5*r00);
IkReal x15159=(cj5*r20);
IkReal x15160=((1.0)*x15155);
IkReal x15161=((1.0)*x15154);
IkReal x15162=(sj5*x15154);
evalcond[0]=((((-1.0)*x15159*x15161))+((r21*x15162))+(((-1.0)*r22*x15160)));
evalcond[1]=(((r11*x15162))+(((-1.0)*x15156*x15161))+(((-1.0)*r12*x15160)));
evalcond[2]=((((-1.0)*r02*x15161))+(((-1.0)*x15157*x15160))+((x15155*x15158)));
evalcond[3]=((1.0)+((x15154*x15157))+(((-1.0)*r02*x15160))+(((-1.0)*x15158*x15161)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x15160))+((x15155*x15156))+(((-1.0)*r12*x15161)));
evalcond[5]=((((-1.0)*r21*sj5*x15160))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15161))+((x15155*x15159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15163=((1.0)*cj5);
CheckValue<IkReal> x15164=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15163))+(((-1.0)*r20*sj5)))),-1);
if(!x15164.valid){
continue;
}
CheckValue<IkReal> x15165 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15163)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15164.value)))+(x15165.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15166=IKsin(j4);
IkReal x15167=IKcos(j4);
IkReal x15168=(cj5*r10);
IkReal x15169=(r01*sj5);
IkReal x15170=(cj5*r00);
IkReal x15171=(cj5*r20);
IkReal x15172=((1.0)*x15167);
IkReal x15173=((1.0)*x15166);
IkReal x15174=(sj5*x15166);
evalcond[0]=((((-1.0)*x15171*x15173))+((r21*x15174))+(((-1.0)*r22*x15172)));
evalcond[1]=(((r11*x15174))+(((-1.0)*r12*x15172))+(((-1.0)*x15168*x15173)));
evalcond[2]=((((-1.0)*r02*x15173))+((x15167*x15170))+(((-1.0)*x15169*x15172)));
evalcond[3]=((1.0)+(((-1.0)*x15170*x15173))+(((-1.0)*r02*x15172))+((x15166*x15169)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x15172))+((x15167*x15168))+(((-1.0)*r12*x15173)));
evalcond[5]=((((-1.0)*r21*sj5*x15172))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15167*x15171))+(((-1.0)*r22*x15173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15175 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15175.valid){
continue;
}
CheckValue<IkReal> x15176=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15175.value)+(((1.5707963267949)*(x15176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15177=IKsin(j4);
IkReal x15178=IKcos(j4);
IkReal x15179=(cj5*r10);
IkReal x15180=(r01*sj5);
IkReal x15181=(cj5*r00);
IkReal x15182=(cj5*r20);
IkReal x15183=((1.0)*x15178);
IkReal x15184=((1.0)*x15177);
IkReal x15185=(sj5*x15177);
evalcond[0]=((((-1.0)*x15182*x15184))+((r21*x15185))+(((-1.0)*r22*x15183)));
evalcond[1]=(((r11*x15185))+(((-1.0)*r12*x15183))+(((-1.0)*x15179*x15184)));
evalcond[2]=((((-1.0)*r02*x15184))+((x15178*x15181))+(((-1.0)*x15180*x15183)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15183))+((x15177*x15180))+(((-1.0)*x15181*x15184)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x15183))+((cj1*sj2))+((x15178*x15179))+(((-1.0)*r12*x15184)));
evalcond[5]=((((-1.0)*r21*sj5*x15183))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15178*x15182))+(((-1.0)*r22*x15184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15186=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15186;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15186);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15187=((1.0)*cj5);
IkReal x15188=((((-1.0)*r21*x15187))+(((-1.0)*r20*sj5)));
j4eval[0]=x15188;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x15187))))));
j4eval[2]=IKsign(x15188);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15189=cj5*cj5;
IkReal x15190=r01*r01;
IkReal x15191=(r01*sj5);
IkReal x15192=(cj5*r00);
IkReal x15193=((((2.0)*x15191*x15192))+(((-1.0)*(r02*r02)))+(((-1.0)*x15189*(r00*r00)))+(((-1.0)*x15190))+((x15189*x15190)));
j4eval[0]=x15193;
j4eval[1]=IKsign(x15193);
j4eval[2]=((IKabs((x15191+(((-1.0)*x15192)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15194=cj5*cj5;
IkReal x15195=r01*r01;
IkReal x15196=(r01*sj5);
IkReal x15197=(cj5*r00);
CheckValue<IkReal> x15198 = IKatan2WithCheck(IkReal((x15196+(((-1.0)*x15197)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15198.valid){
continue;
}
CheckValue<IkReal> x15199=IKPowWithIntegerCheck(IKsign(((((2.0)*x15196*x15197))+(((-1.0)*x15194*(r00*r00)))+(((-1.0)*(r02*r02)))+((x15194*x15195))+(((-1.0)*x15195)))),-1);
if(!x15199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15198.value)+(((1.5707963267949)*(x15199.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15200=IKcos(j4);
IkReal x15201=IKsin(j4);
IkReal x15202=(cj5*r00);
IkReal x15203=(cj5*r10);
IkReal x15204=(r21*sj5);
IkReal x15205=(cj5*r20);
IkReal x15206=((1.0)*x15200);
IkReal x15207=((1.0)*x15201);
IkReal x15208=(sj5*x15201);
IkReal x15209=(sj5*x15200);
evalcond[0]=((((-1.0)*x15202*x15206))+((r01*x15209))+((r02*x15201)));
evalcond[1]=((((-1.0)*r22*x15206))+(((-1.0)*x15205*x15207))+((x15201*x15204)));
evalcond[2]=(((r11*x15208))+(((-1.0)*r12*x15206))+(((-1.0)*x15203*x15207)));
evalcond[3]=((1.0)+(((-1.0)*x15202*x15207))+((r01*x15208))+(((-1.0)*r02*x15206)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x15209))+((r12*x15201))+(((-1.0)*x15203*x15206)));
evalcond[5]=(((x15200*x15204))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15201))+(((-1.0)*x15205*x15206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15210=((1.0)*cj5);
CheckValue<IkReal> x15211 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15210)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15211.valid){
continue;
}
CheckValue<IkReal> x15212=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15210))+(((-1.0)*r20*sj5)))),-1);
if(!x15212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15211.value)+(((1.5707963267949)*(x15212.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15213=IKcos(j4);
IkReal x15214=IKsin(j4);
IkReal x15215=(cj5*r00);
IkReal x15216=(cj5*r10);
IkReal x15217=(r21*sj5);
IkReal x15218=(cj5*r20);
IkReal x15219=((1.0)*x15213);
IkReal x15220=((1.0)*x15214);
IkReal x15221=(sj5*x15214);
IkReal x15222=(sj5*x15213);
evalcond[0]=(((r02*x15214))+((r01*x15222))+(((-1.0)*x15215*x15219)));
evalcond[1]=(((x15214*x15217))+(((-1.0)*x15218*x15220))+(((-1.0)*r22*x15219)));
evalcond[2]=((((-1.0)*r12*x15219))+(((-1.0)*x15216*x15220))+((r11*x15221)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15219))+(((-1.0)*x15215*x15220))+((r01*x15221)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x15214))+(((-1.0)*x15216*x15219))+((r11*x15222)));
evalcond[5]=(((x15213*x15217))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15214))+(((-1.0)*x15218*x15219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15223 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15223.valid){
continue;
}
CheckValue<IkReal> x15224=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15223.value)+(((1.5707963267949)*(x15224.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15225=IKcos(j4);
IkReal x15226=IKsin(j4);
IkReal x15227=(cj5*r00);
IkReal x15228=(cj5*r10);
IkReal x15229=(r21*sj5);
IkReal x15230=(cj5*r20);
IkReal x15231=((1.0)*x15225);
IkReal x15232=((1.0)*x15226);
IkReal x15233=(sj5*x15226);
IkReal x15234=(sj5*x15225);
evalcond[0]=(((r01*x15234))+((r02*x15226))+(((-1.0)*x15227*x15231)));
evalcond[1]=((((-1.0)*x15230*x15232))+((x15226*x15229))+(((-1.0)*r22*x15231)));
evalcond[2]=((((-1.0)*r12*x15231))+(((-1.0)*x15228*x15232))+((r11*x15233)));
evalcond[3]=((1.0)+((r01*x15233))+(((-1.0)*r02*x15231))+(((-1.0)*x15227*x15232)));
evalcond[4]=(((r12*x15226))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x15228*x15231))+((r11*x15234)));
evalcond[5]=((((-1.0)*x15230*x15231))+((r22*x15226))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15225*x15229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15236 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15236)==0){
continue;
}
IkReal x15235=pow(x15236,-0.5);
CheckValue<IkReal> x15237 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15237.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15237.value));
IkReal gconst61=((-1.0)*r11*x15235);
IkReal gconst62=(r10*x15235);
CheckValue<IkReal> x15238 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15238.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15238.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15241 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15241.valid){
continue;
}
IkReal x15239=((-1.0)*(x15241.value));
IkReal x15240=x15235;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15239;
IkReal gconst60=x15239;
IkReal gconst61=((-1.0)*r11*x15240);
IkReal gconst62=(r10*x15240);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15244 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15244.valid){
continue;
}
IkReal x15242=((-1.0)*(x15244.value));
IkReal x15243=x15235;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15242;
IkReal gconst60=x15242;
IkReal gconst61=((-1.0)*r11*x15243);
IkReal gconst62=(r10*x15243);
CheckValue<IkReal> x15252=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15252.valid){
continue;
}
IkReal x15245=x15252.value;
IkReal x15246=(sj3*x15245);
IkReal x15247=(r20*x15246);
IkReal x15248=(r00*x15246);
IkReal x15249=(r01*x15246);
IkReal x15250=(r21*x15246);
IkReal x15251=(r10*r11*x15246);
j4eval[0]=IKsign((((r00*x15247*(r10*r10)))+((r10*r11*r21*x15248))+((r21*x15249*(r11*r11)))+((r01*r10*r11*x15247))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15253=gconst61*gconst61;
IkReal x15254=gconst62*gconst62;
IkReal x15255=(cj3*r01);
IkReal x15256=(r22*sj3);
IkReal x15257=(gconst61*r00);
IkReal x15258=((1.0)*cj3);
IkReal x15259=(gconst62*r01);
IkReal x15260=((1.0)*sj3);
IkReal x15261=(gconst61*gconst62*r20);
IkReal x15262=(r21*x15253);
IkReal x15263=(r20*x15254);
CheckValue<IkReal> x15264 = IKatan2WithCheck(IkReal((((x15256*x15257))+((x15256*x15259)))),IkReal((((gconst61*r21*sj3*x15259))+((r00*sj3*x15262))+(((-1.0)*gconst62*r20*x15257*x15260))+(((-1.0)*r01*x15260*x15263)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15264.valid){
continue;
}
CheckValue<IkReal> x15265=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15255*x15262))+((cj3*gconst62*r21*x15257))+(((-1.0)*r02*r22*x15258))+(((-1.0)*r00*x15258*x15263))+((x15255*x15261)))),-1);
if(!x15265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15264.value)+(((1.5707963267949)*(x15265.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15266=IKsin(j4);
IkReal x15267=IKcos(j4);
IkReal x15268=(cj2*sj1);
IkReal x15269=(cj1*sj2);
IkReal x15270=(gconst61*sj3);
IkReal x15271=(cj3*gconst61);
IkReal x15272=(cj3*gconst62);
IkReal x15273=(sj1*sj2);
IkReal x15274=(gconst62*sj3);
IkReal x15275=(cj1*cj2);
IkReal x15276=((1.0)*x15267);
IkReal x15277=((1.0)*x15266);
IkReal x15278=(gconst61*x15266);
IkReal x15279=(cj3*x15266);
IkReal x15280=(x15269+x15268);
evalcond[0]=((((-1.0)*gconst62*r20*x15277))+(((-1.0)*r22*x15276))+((r21*x15278)));
evalcond[1]=(((r11*x15278))+(((-1.0)*r12*x15276))+(((-1.0)*gconst62*r10*x15277)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15277))+(((-1.0)*r02*x15276))+((r01*x15278)));
evalcond[3]=((((-1.0)*r00*x15272*x15276))+((r02*x15279))+((r01*x15267*x15271))+((r01*x15274))+((r00*x15270)));
evalcond[4]=((((-1.0)*r02*sj3*x15277))+((r00*x15267*x15274))+(((-1.0)*r01*x15270*x15276))+((r01*x15272))+((r00*x15271)));
evalcond[5]=(((r22*x15279))+x15280+((r21*x15267*x15271))+(((-1.0)*r20*x15272*x15276))+((r20*x15270))+((r21*x15274)));
evalcond[6]=(((r12*x15279))+((r11*x15274))+x15275+((r11*x15267*x15271))+(((-1.0)*r10*x15272*x15276))+((r10*x15270))+(((-1.0)*x15273)));
evalcond[7]=(((r11*x15272))+x15280+(((-1.0)*r12*sj3*x15277))+((r10*x15267*x15274))+((r10*x15271))+(((-1.0)*r11*x15270*x15276)));
evalcond[8]=((((-1.0)*r21*x15270*x15276))+x15273+(((-1.0)*r22*sj3*x15277))+((r20*x15271))+((r21*x15272))+(((-1.0)*x15275))+((r20*x15267*x15274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15281=gconst61*gconst61;
IkReal x15282=gconst62*gconst62;
IkReal x15283=(cj3*r22);
IkReal x15284=(gconst62*r01);
IkReal x15285=(gconst61*r00);
IkReal x15286=((1.0)*r20);
IkReal x15287=(cj3*r21);
IkReal x15288=(r21*sj3);
CheckValue<IkReal> x15289=IKPowWithIntegerCheck(IKsign((((r01*x15281*x15288))+(((-1.0)*gconst62*x15285*x15288))+((r00*r20*sj3*x15282))+(((-1.0)*gconst61*sj3*x15284*x15286))+((r02*r22*sj3)))),-1);
if(!x15289.valid){
continue;
}
CheckValue<IkReal> x15290 = IKatan2WithCheck(IkReal((((x15283*x15285))+((x15283*x15284)))),IkReal(((((-1.0)*cj3*r01*x15282*x15286))+((gconst61*x15284*x15287))+((r00*x15281*x15287))+(((-1.0)*cj3*gconst62*x15285*x15286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15289.value)))+(x15290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15291=IKsin(j4);
IkReal x15292=IKcos(j4);
IkReal x15293=(cj2*sj1);
IkReal x15294=(cj1*sj2);
IkReal x15295=(gconst61*sj3);
IkReal x15296=(cj3*gconst61);
IkReal x15297=(cj3*gconst62);
IkReal x15298=(sj1*sj2);
IkReal x15299=(gconst62*sj3);
IkReal x15300=(cj1*cj2);
IkReal x15301=((1.0)*x15292);
IkReal x15302=((1.0)*x15291);
IkReal x15303=(gconst61*x15291);
IkReal x15304=(cj3*x15291);
IkReal x15305=(x15294+x15293);
evalcond[0]=((((-1.0)*gconst62*r20*x15302))+((r21*x15303))+(((-1.0)*r22*x15301)));
evalcond[1]=((((-1.0)*gconst62*r10*x15302))+(((-1.0)*r12*x15301))+((r11*x15303)));
evalcond[2]=((1.0)+((r01*x15303))+(((-1.0)*r02*x15301))+(((-1.0)*gconst62*r00*x15302)));
evalcond[3]=(((r02*x15304))+((r01*x15299))+((r01*x15292*x15296))+((r00*x15295))+(((-1.0)*r00*x15297*x15301)));
evalcond[4]=((((-1.0)*r02*sj3*x15302))+(((-1.0)*r01*x15295*x15301))+((r01*x15297))+((r00*x15296))+((r00*x15292*x15299)));
evalcond[5]=(((r20*x15295))+x15305+((r21*x15299))+((r21*x15292*x15296))+((r22*x15304))+(((-1.0)*r20*x15297*x15301)));
evalcond[6]=(((r10*x15295))+(((-1.0)*r10*x15297*x15301))+(((-1.0)*x15298))+((r11*x15299))+x15300+((r11*x15292*x15296))+((r12*x15304)));
evalcond[7]=(((r10*x15296))+((r11*x15297))+(((-1.0)*r12*sj3*x15302))+x15305+(((-1.0)*r11*x15295*x15301))+((r10*x15292*x15299)));
evalcond[8]=((((-1.0)*r21*x15295*x15301))+((r20*x15296))+((r20*x15292*x15299))+(((-1.0)*x15300))+x15298+((r21*x15297))+(((-1.0)*r22*sj3*x15302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15306=((1.0)*gconst62);
CheckValue<IkReal> x15307 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15306))+((gconst61*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15307.valid){
continue;
}
CheckValue<IkReal> x15308=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x15306)))),-1);
if(!x15308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15307.value)+(((1.5707963267949)*(x15308.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15309=IKsin(j4);
IkReal x15310=IKcos(j4);
IkReal x15311=(cj2*sj1);
IkReal x15312=(cj1*sj2);
IkReal x15313=(gconst61*sj3);
IkReal x15314=(cj3*gconst61);
IkReal x15315=(cj3*gconst62);
IkReal x15316=(sj1*sj2);
IkReal x15317=(gconst62*sj3);
IkReal x15318=(cj1*cj2);
IkReal x15319=((1.0)*x15310);
IkReal x15320=((1.0)*x15309);
IkReal x15321=(gconst61*x15309);
IkReal x15322=(cj3*x15309);
IkReal x15323=(x15311+x15312);
evalcond[0]=((((-1.0)*gconst62*r20*x15320))+((r21*x15321))+(((-1.0)*r22*x15319)));
evalcond[1]=(((r11*x15321))+(((-1.0)*gconst62*r10*x15320))+(((-1.0)*r12*x15319)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15320))+((r01*x15321))+(((-1.0)*r02*x15319)));
evalcond[3]=(((r01*x15317))+((r00*x15313))+((r01*x15310*x15314))+(((-1.0)*r00*x15315*x15319))+((r02*x15322)));
evalcond[4]=(((r01*x15315))+((r00*x15314))+(((-1.0)*r02*sj3*x15320))+(((-1.0)*r01*x15313*x15319))+((r00*x15310*x15317)));
evalcond[5]=((((-1.0)*r20*x15315*x15319))+((r21*x15310*x15314))+((r22*x15322))+x15323+((r21*x15317))+((r20*x15313)));
evalcond[6]=(((r11*x15317))+(((-1.0)*x15316))+((r12*x15322))+x15318+((r10*x15313))+((r11*x15310*x15314))+(((-1.0)*r10*x15315*x15319)));
evalcond[7]=((((-1.0)*r11*x15313*x15319))+((r11*x15315))+((r10*x15310*x15317))+x15323+(((-1.0)*r12*sj3*x15320))+((r10*x15314)));
evalcond[8]=((((-1.0)*x15318))+((r20*x15310*x15317))+(((-1.0)*r21*x15313*x15319))+x15316+((r21*x15315))+(((-1.0)*r22*sj3*x15320))+((r20*x15314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15325 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15325)==0){
continue;
}
IkReal x15324=pow(x15325,-0.5);
CheckValue<IkReal> x15326 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15326.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15326.value))));
IkReal gconst64=((1.0)*r11*x15324);
IkReal gconst65=((-1.0)*r10*x15324);
CheckValue<IkReal> x15327 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15327.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15327.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15330 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15330.valid){
continue;
}
IkReal x15328=((1.0)*(x15330.value));
IkReal x15329=x15324;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15328)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15328)));
IkReal gconst64=((1.0)*r11*x15329);
IkReal gconst65=((-1.0)*r10*x15329);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15331=gconst64*gconst64;
IkReal x15332=gconst65*gconst65;
IkReal x15333=(gconst65*r01);
IkReal x15334=(cj3*r22);
IkReal x15335=(gconst64*r00);
IkReal x15336=(cj3*r21);
IkReal x15337=((1.0)*gconst64*sj3);
IkReal x15338=((1.0)*cj3*r20);
CheckValue<IkReal> x15339 = IKatan2WithCheck(IkReal((((x15333*x15334))+((x15334*x15335)))),IkReal((((r00*x15331*x15336))+(((-1.0)*gconst65*x15335*x15338))+(((-1.0)*r01*x15332*x15338))+((gconst64*x15333*x15336)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15339.valid){
continue;
}
CheckValue<IkReal> x15340=IKPowWithIntegerCheck(IKsign((((r01*r21*sj3*x15331))+((r00*r20*sj3*x15332))+(((-1.0)*r20*x15333*x15337))+(((-1.0)*gconst65*r21*sj3*x15335))+((r02*r22*sj3)))),-1);
if(!x15340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15339.value)+(((1.5707963267949)*(x15340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15341=IKsin(j4);
IkReal x15342=IKcos(j4);
IkReal x15343=(cj2*sj1);
IkReal x15344=(cj1*sj2);
IkReal x15345=(cj3*gconst64);
IkReal x15346=(gconst65*r21);
IkReal x15347=(sj1*sj2);
IkReal x15348=(gconst65*sj3);
IkReal x15349=(gconst64*sj3);
IkReal x15350=(cj3*gconst65);
IkReal x15351=(cj1*cj2);
IkReal x15352=((1.0)*x15342);
IkReal x15353=((1.0)*x15341);
IkReal x15354=(cj3*x15341);
IkReal x15355=(gconst64*x15341);
IkReal x15356=(x15343+x15344);
evalcond[0]=((((-1.0)*r22*x15352))+(((-1.0)*gconst65*r20*x15353))+((r21*x15355)));
evalcond[1]=((((-1.0)*r12*x15352))+((r11*x15355))+(((-1.0)*gconst65*r10*x15353)));
evalcond[2]=((1.0)+(((-1.0)*gconst65*r00*x15353))+(((-1.0)*r02*x15352))+((r01*x15355)));
evalcond[3]=(((r00*x15349))+((r01*x15348))+(((-1.0)*r00*x15350*x15352))+((r02*x15354))+((r01*x15342*x15345)));
evalcond[4]=(((r00*x15345))+((r00*x15342*x15348))+(((-1.0)*r01*x15349*x15352))+((r01*x15350))+(((-1.0)*r02*sj3*x15353)));
evalcond[5]=((((-1.0)*r20*x15350*x15352))+((r22*x15354))+x15356+((r20*x15349))+((sj3*x15346))+((r21*x15342*x15345)));
evalcond[6]=((((-1.0)*r10*x15350*x15352))+((r11*x15348))+((r12*x15354))+((r10*x15349))+x15351+((r11*x15342*x15345))+(((-1.0)*x15347)));
evalcond[7]=(((r10*x15342*x15348))+(((-1.0)*r12*sj3*x15353))+((r10*x15345))+x15356+((r11*x15350))+(((-1.0)*r11*x15349*x15352)));
evalcond[8]=(((cj3*x15346))+(((-1.0)*r22*sj3*x15353))+x15347+((r20*x15345))+(((-1.0)*x15351))+((r20*x15342*x15348))+(((-1.0)*r21*x15349*x15352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15357=((1.0)*gconst65);
CheckValue<IkReal> x15358=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*r20))+(((-1.0)*r21*x15357)))),-1);
if(!x15358.valid){
continue;
}
CheckValue<IkReal> x15359 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15357))+((gconst64*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15358.value)))+(x15359.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15360=IKsin(j4);
IkReal x15361=IKcos(j4);
IkReal x15362=(cj2*sj1);
IkReal x15363=(cj1*sj2);
IkReal x15364=(cj3*gconst64);
IkReal x15365=(gconst65*r21);
IkReal x15366=(sj1*sj2);
IkReal x15367=(gconst65*sj3);
IkReal x15368=(gconst64*sj3);
IkReal x15369=(cj3*gconst65);
IkReal x15370=(cj1*cj2);
IkReal x15371=((1.0)*x15361);
IkReal x15372=((1.0)*x15360);
IkReal x15373=(cj3*x15360);
IkReal x15374=(gconst64*x15360);
IkReal x15375=(x15362+x15363);
evalcond[0]=(((r21*x15374))+(((-1.0)*gconst65*r20*x15372))+(((-1.0)*r22*x15371)));
evalcond[1]=((((-1.0)*gconst65*r10*x15372))+(((-1.0)*r12*x15371))+((r11*x15374)));
evalcond[2]=((1.0)+((r01*x15374))+(((-1.0)*gconst65*r00*x15372))+(((-1.0)*r02*x15371)));
evalcond[3]=((((-1.0)*r00*x15369*x15371))+((r02*x15373))+((r01*x15361*x15364))+((r00*x15368))+((r01*x15367)));
evalcond[4]=((((-1.0)*r02*sj3*x15372))+((r00*x15361*x15367))+(((-1.0)*r01*x15368*x15371))+((r00*x15364))+((r01*x15369)));
evalcond[5]=(((r21*x15361*x15364))+x15375+((r20*x15368))+((sj3*x15365))+(((-1.0)*r20*x15369*x15371))+((r22*x15373)));
evalcond[6]=(((r10*x15368))+x15370+((r11*x15367))+((r11*x15361*x15364))+(((-1.0)*r10*x15369*x15371))+(((-1.0)*x15366))+((r12*x15373)));
evalcond[7]=(((r10*x15361*x15367))+((r10*x15364))+(((-1.0)*r12*sj3*x15372))+x15375+((r11*x15369))+(((-1.0)*r11*x15368*x15371)));
evalcond[8]=(((cj3*x15365))+(((-1.0)*x15370))+x15366+(((-1.0)*r21*x15368*x15371))+((r20*x15364))+(((-1.0)*r22*sj3*x15372))+((r20*x15361*x15367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15376=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15376);
rxp0_2=(py*r00);
rxp1_0=(r21*x15376);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15377=(r01*sj5);
IkReal x15378=((1.0)*cj5*r00);
j4eval[0]=(x15377+(((-1.0)*x15378)));
j4eval[1]=((((-1.0)*cj3*x15378))+((cj3*x15377)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15379=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15379);
rxp0_2=(py*r00);
rxp1_0=(r21*x15379);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15380=(cj5*r00);
IkReal x15381=(r01*sj5);
j4eval[0]=(x15381+(((-1.0)*x15380)));
j4eval[1]=((((-1.0)*sj3*x15381))+((sj3*x15380)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15382=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15382);
rxp0_2=(py*r00);
rxp1_0=(r21*x15382);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15383=((1.0)*r00);
CheckValue<IkReal> x15384=IKPowWithIntegerCheck(cj3,-1);
if(!x15384.valid){
continue;
}
CheckValue<IkReal> x15385=IKPowWithIntegerCheck(r12,-1);
if(!x15385.valid){
continue;
}
CheckValue<IkReal> x15386=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15383))),-1);
if(!x15386.valid){
continue;
}
if( IKabs(((x15384.value)*(x15385.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15386.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15383)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15384.value)*(x15385.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15386.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15383))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15384.value)*(x15385.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15386.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15383))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15387=IKsin(j4);
IkReal x15388=IKcos(j4);
IkReal x15389=(cj2*sj1);
IkReal x15390=(cj1*sj2);
IkReal x15391=(sj1*sj2);
IkReal x15392=(cj5*sj3);
IkReal x15393=(cj3*cj5);
IkReal x15394=(r21*sj5);
IkReal x15395=(cj1*cj2);
IkReal x15396=(r00*sj5);
IkReal x15397=(r01*sj5);
IkReal x15398=(r20*sj5);
IkReal x15399=((1.0)*x15387);
IkReal x15400=(r20*x15388);
IkReal x15401=(r00*x15388);
IkReal x15402=(cj3*x15388);
IkReal x15403=(x15390+x15389);
IkReal x15404=((1.0)*sj3*x15388);
evalcond[0]=((-1.0)*r12*x15388);
evalcond[1]=((((-1.0)*cj5*r20*x15399))+((x15387*x15394)));
evalcond[2]=(x15395+(((-1.0)*x15391))+((cj3*r12*x15387)));
evalcond[3]=(x15403+(((-1.0)*r12*sj3*x15399)));
evalcond[4]=((1.0)+((x15387*x15397))+(((-1.0)*cj5*r00*x15399)));
evalcond[5]=(((x15397*x15402))+((sj3*x15396))+((r01*x15392))+(((-1.0)*x15393*x15401)));
evalcond[6]=(((x15392*x15401))+((cj3*x15396))+(((-1.0)*x15397*x15404))+((r01*x15393)));
evalcond[7]=(((x15394*x15402))+((r21*x15392))+((sj3*x15398))+x15403+(((-1.0)*x15393*x15400)));
evalcond[8]=(((r21*x15393))+((x15392*x15400))+((cj3*x15398))+x15391+(((-1.0)*x15394*x15404))+(((-1.0)*x15395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15405=((1.0)*r01);
IkReal x15406=(cj5*r00);
CheckValue<IkReal> x15407=IKPowWithIntegerCheck(((((-1.0)*x15406))+((r01*sj5))),-1);
if(!x15407.valid){
continue;
}
CheckValue<IkReal> x15408=IKPowWithIntegerCheck((((sj3*x15406))+(((-1.0)*sj3*sj5*x15405))),-1);
if(!x15408.valid){
continue;
}
if( IKabs(((-1.0)*(x15407.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15408.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15405)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15407.value)))+IKsqr(((x15408.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15405))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15407.value)), ((x15408.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15405))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15409=IKsin(j4);
IkReal x15410=IKcos(j4);
IkReal x15411=(cj2*sj1);
IkReal x15412=(cj1*sj2);
IkReal x15413=(sj1*sj2);
IkReal x15414=(cj5*sj3);
IkReal x15415=(cj3*cj5);
IkReal x15416=(r21*sj5);
IkReal x15417=(cj1*cj2);
IkReal x15418=(r00*sj5);
IkReal x15419=(r01*sj5);
IkReal x15420=(r20*sj5);
IkReal x15421=((1.0)*x15409);
IkReal x15422=(r20*x15410);
IkReal x15423=(r00*x15410);
IkReal x15424=(cj3*x15410);
IkReal x15425=(x15412+x15411);
IkReal x15426=((1.0)*sj3*x15410);
evalcond[0]=((-1.0)*r12*x15410);
evalcond[1]=(((x15409*x15416))+(((-1.0)*cj5*r20*x15421)));
evalcond[2]=((((-1.0)*x15413))+x15417+((cj3*r12*x15409)));
evalcond[3]=((((-1.0)*r12*sj3*x15421))+x15425);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15421))+((x15409*x15419)));
evalcond[5]=(((r01*x15414))+((sj3*x15418))+((x15419*x15424))+(((-1.0)*x15415*x15423)));
evalcond[6]=((((-1.0)*x15419*x15426))+((cj3*x15418))+((x15414*x15423))+((r01*x15415)));
evalcond[7]=(((sj3*x15420))+((x15416*x15424))+x15425+((r21*x15414))+(((-1.0)*x15415*x15422)));
evalcond[8]=((((-1.0)*x15416*x15426))+(((-1.0)*x15417))+((x15414*x15422))+((cj3*x15420))+x15413+((r21*x15415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15427=((1.0)*r00);
IkReal x15428=(r01*sj5);
CheckValue<IkReal> x15429=IKPowWithIntegerCheck(((((-1.0)*cj5*x15427))+x15428),-1);
if(!x15429.valid){
continue;
}
CheckValue<IkReal> x15430=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x15427))+((cj3*x15428))),-1);
if(!x15430.valid){
continue;
}
if( IKabs(((-1.0)*(x15429.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15430.value)*(((((-1.0)*sj3*sj5*x15427))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15429.value)))+IKsqr(((x15430.value)*(((((-1.0)*sj3*sj5*x15427))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15429.value)), ((x15430.value)*(((((-1.0)*sj3*sj5*x15427))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15431=IKsin(j4);
IkReal x15432=IKcos(j4);
IkReal x15433=(cj2*sj1);
IkReal x15434=(cj1*sj2);
IkReal x15435=(sj1*sj2);
IkReal x15436=(cj5*sj3);
IkReal x15437=(cj3*cj5);
IkReal x15438=(r21*sj5);
IkReal x15439=(cj1*cj2);
IkReal x15440=(r00*sj5);
IkReal x15441=(r01*sj5);
IkReal x15442=(r20*sj5);
IkReal x15443=((1.0)*x15431);
IkReal x15444=(r20*x15432);
IkReal x15445=(r00*x15432);
IkReal x15446=(cj3*x15432);
IkReal x15447=(x15434+x15433);
IkReal x15448=((1.0)*sj3*x15432);
evalcond[0]=((-1.0)*r12*x15432);
evalcond[1]=((((-1.0)*cj5*r20*x15443))+((x15431*x15438)));
evalcond[2]=(((cj3*r12*x15431))+(((-1.0)*x15435))+x15439);
evalcond[3]=(x15447+(((-1.0)*r12*sj3*x15443)));
evalcond[4]=((1.0)+((x15431*x15441))+(((-1.0)*cj5*r00*x15443)));
evalcond[5]=(((sj3*x15440))+(((-1.0)*x15437*x15445))+((x15441*x15446))+((r01*x15436)));
evalcond[6]=((((-1.0)*x15441*x15448))+((x15436*x15445))+((r01*x15437))+((cj3*x15440)));
evalcond[7]=(((sj3*x15442))+((r21*x15436))+(((-1.0)*x15437*x15444))+((x15438*x15446))+x15447);
evalcond[8]=(((r21*x15437))+(((-1.0)*x15438*x15448))+((x15436*x15444))+(((-1.0)*x15439))+x15435+((cj3*x15442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15449=cj5*cj5;
IkReal x15450=(cj3*r20);
IkReal x15451=(r21*sj3);
IkReal x15452=((1.0)*cj3);
IkReal x15453=(r01*r21);
IkReal x15454=(r01*sj3);
IkReal x15455=(r00*sj5);
IkReal x15456=(cj5*r01*sj5);
IkReal x15457=((1.0)*x15449);
CheckValue<IkReal> x15458=IKPowWithIntegerCheck(IKsign((((x15450*x15456))+(((-1.0)*x15452*x15453))+((cj3*x15449*x15453))+((cj3*cj5*r21*x15455))+(((-1.0)*r02*r22*x15452))+(((-1.0)*r00*x15450*x15457)))),-1);
if(!x15458.valid){
continue;
}
CheckValue<IkReal> x15459 = IKatan2WithCheck(IkReal((((cj5*r22*x15454))+((r22*sj3*x15455)))),IkReal((((r00*x15451))+(((-1.0)*cj5*r20*sj3*x15455))+((x15451*x15456))+(((-1.0)*r00*x15451*x15457))+(((-1.0)*r20*x15454*x15457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15458.value)))+(x15459.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15460=IKsin(j4);
IkReal x15461=IKcos(j4);
IkReal x15462=(cj2*sj1);
IkReal x15463=(cj1*sj2);
IkReal x15464=(r11*sj5);
IkReal x15465=(cj5*r10);
IkReal x15466=(sj1*sj2);
IkReal x15467=(cj5*r01);
IkReal x15468=(cj5*r00);
IkReal x15469=(cj3*sj5);
IkReal x15470=(r21*sj5);
IkReal x15471=(cj1*cj2);
IkReal x15472=(cj5*sj3);
IkReal x15473=(sj3*sj5);
IkReal x15474=(r01*sj5);
IkReal x15475=(cj3*cj5);
IkReal x15476=(cj5*r20);
IkReal x15477=((1.0)*x15461);
IkReal x15478=((1.0)*x15460);
IkReal x15479=(cj3*x15461);
IkReal x15480=(sj3*x15461);
IkReal x15481=(cj3*x15460);
IkReal x15482=(x15463+x15462);
evalcond[0]=((((-1.0)*r22*x15477))+((x15460*x15470))+(((-1.0)*x15476*x15478)));
evalcond[1]=(((x15460*x15464))+(((-1.0)*x15465*x15478))+(((-1.0)*r12*x15477)));
evalcond[2]=((1.0)+((x15460*x15474))+(((-1.0)*x15468*x15478))+(((-1.0)*r02*x15477)));
evalcond[3]=(((r02*x15481))+((r00*x15473))+(((-1.0)*cj3*x15468*x15477))+((r01*x15461*x15469))+((sj3*x15467)));
evalcond[4]=((((-1.0)*r01*x15473*x15477))+((r00*x15469))+((cj3*x15467))+((x15468*x15480))+(((-1.0)*r02*sj3*x15478)));
evalcond[5]=(((r21*x15461*x15469))+((r22*x15481))+((r21*x15472))+x15482+((r20*x15473))+(((-1.0)*r20*x15475*x15477)));
evalcond[6]=((((-1.0)*x15466))+((r12*x15481))+(((-1.0)*cj3*x15465*x15477))+x15471+((x15464*x15479))+((r11*x15472))+((r10*x15473)));
evalcond[7]=((((-1.0)*r12*sj3*x15478))+x15482+(((-1.0)*sj3*x15464*x15477))+((r10*x15469))+((r11*x15475))+((x15465*x15480)));
evalcond[8]=((((-1.0)*x15471))+(((-1.0)*sj3*x15470*x15477))+((r21*x15475))+((r20*x15461*x15472))+x15466+((r20*x15469))+(((-1.0)*r22*sj3*x15478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15483=((1.0)*cj5);
CheckValue<IkReal> x15484=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15483))+(((-1.0)*r20*sj5)))),-1);
if(!x15484.valid){
continue;
}
CheckValue<IkReal> x15485 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15483)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15484.value)))+(x15485.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15486=IKsin(j4);
IkReal x15487=IKcos(j4);
IkReal x15488=(cj2*sj1);
IkReal x15489=(cj1*sj2);
IkReal x15490=(r11*sj5);
IkReal x15491=(cj5*r10);
IkReal x15492=(sj1*sj2);
IkReal x15493=(cj5*r01);
IkReal x15494=(cj5*r00);
IkReal x15495=(cj3*sj5);
IkReal x15496=(r21*sj5);
IkReal x15497=(cj1*cj2);
IkReal x15498=(cj5*sj3);
IkReal x15499=(sj3*sj5);
IkReal x15500=(r01*sj5);
IkReal x15501=(cj3*cj5);
IkReal x15502=(cj5*r20);
IkReal x15503=((1.0)*x15487);
IkReal x15504=((1.0)*x15486);
IkReal x15505=(cj3*x15487);
IkReal x15506=(sj3*x15487);
IkReal x15507=(cj3*x15486);
IkReal x15508=(x15489+x15488);
evalcond[0]=((((-1.0)*r22*x15503))+(((-1.0)*x15502*x15504))+((x15486*x15496)));
evalcond[1]=((((-1.0)*x15491*x15504))+(((-1.0)*r12*x15503))+((x15486*x15490)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15503))+(((-1.0)*x15494*x15504))+((x15486*x15500)));
evalcond[3]=(((r00*x15499))+((sj3*x15493))+((r02*x15507))+(((-1.0)*cj3*x15494*x15503))+((r01*x15487*x15495)));
evalcond[4]=(((r00*x15495))+(((-1.0)*r02*sj3*x15504))+((cj3*x15493))+(((-1.0)*r01*x15499*x15503))+((x15494*x15506)));
evalcond[5]=(((r22*x15507))+((r20*x15499))+(((-1.0)*r20*x15501*x15503))+((r21*x15487*x15495))+x15508+((r21*x15498)));
evalcond[6]=(((x15490*x15505))+(((-1.0)*cj3*x15491*x15503))+((r10*x15499))+((r11*x15498))+((r12*x15507))+x15497+(((-1.0)*x15492)));
evalcond[7]=(((x15491*x15506))+((r10*x15495))+((r11*x15501))+(((-1.0)*r12*sj3*x15504))+x15508+(((-1.0)*sj3*x15490*x15503)));
evalcond[8]=((((-1.0)*r22*sj3*x15504))+((r20*x15487*x15498))+((r20*x15495))+(((-1.0)*sj3*x15496*x15503))+x15492+((r21*x15501))+(((-1.0)*x15497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15509 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15509.valid){
continue;
}
CheckValue<IkReal> x15510=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15509.value)+(((1.5707963267949)*(x15510.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15511=IKsin(j4);
IkReal x15512=IKcos(j4);
IkReal x15513=(cj2*sj1);
IkReal x15514=(cj1*sj2);
IkReal x15515=(r11*sj5);
IkReal x15516=(cj5*r10);
IkReal x15517=(sj1*sj2);
IkReal x15518=(cj5*r01);
IkReal x15519=(cj5*r00);
IkReal x15520=(cj3*sj5);
IkReal x15521=(r21*sj5);
IkReal x15522=(cj1*cj2);
IkReal x15523=(cj5*sj3);
IkReal x15524=(sj3*sj5);
IkReal x15525=(r01*sj5);
IkReal x15526=(cj3*cj5);
IkReal x15527=(cj5*r20);
IkReal x15528=((1.0)*x15512);
IkReal x15529=((1.0)*x15511);
IkReal x15530=(cj3*x15512);
IkReal x15531=(sj3*x15512);
IkReal x15532=(cj3*x15511);
IkReal x15533=(x15513+x15514);
evalcond[0]=(((x15511*x15521))+(((-1.0)*r22*x15528))+(((-1.0)*x15527*x15529)));
evalcond[1]=((((-1.0)*r12*x15528))+(((-1.0)*x15516*x15529))+((x15511*x15515)));
evalcond[2]=((1.0)+((x15511*x15525))+(((-1.0)*x15519*x15529))+(((-1.0)*r02*x15528)));
evalcond[3]=((((-1.0)*cj3*x15519*x15528))+((r01*x15512*x15520))+((r02*x15532))+((sj3*x15518))+((r00*x15524)));
evalcond[4]=(((x15519*x15531))+((r00*x15520))+(((-1.0)*r01*x15524*x15528))+((cj3*x15518))+(((-1.0)*r02*sj3*x15529)));
evalcond[5]=(((r21*x15512*x15520))+((r20*x15524))+((r21*x15523))+(((-1.0)*r20*x15526*x15528))+x15533+((r22*x15532)));
evalcond[6]=(((r10*x15524))+(((-1.0)*cj3*x15516*x15528))+((r12*x15532))+x15522+((r11*x15523))+(((-1.0)*x15517))+((x15515*x15530)));
evalcond[7]=(((r10*x15520))+(((-1.0)*r12*sj3*x15529))+(((-1.0)*sj3*x15515*x15528))+((x15516*x15531))+x15533+((r11*x15526)));
evalcond[8]=(((r20*x15520))+((r21*x15526))+(((-1.0)*r22*sj3*x15529))+(((-1.0)*x15522))+(((-1.0)*sj3*x15521*x15528))+((r20*x15512*x15523))+x15517);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15534=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15534);
rxp1_1=(px*r21);
rxp1_2=(r11*x15534);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15535=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15535);
rxp1_1=(px*r21);
rxp1_2=(r11*x15535);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15536=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x15536)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15536)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15537=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15537);
rxp1_1=(px*r21);
rxp1_2=(r11*x15537);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15538=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15538);
rxp1_1=(px*r21);
rxp1_2=(r11*x15538);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15539=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15539);
rxp1_1=(px*r21);
rxp1_2=(r11*x15539);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15540=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15540);
rxp1_1=(px*r21);
rxp1_2=(r11*x15540);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15543=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15543.valid){
continue;
}
IkReal x15541=x15543.value;
IkReal x15542=(sj0*x15541);
cj4array[0]=(((cj2*sj1*x15542))+((cj1*sj2*x15542)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15544=IKsin(j4);
IkReal x15545=IKcos(j4);
IkReal x15546=(cj5*r20);
IkReal x15547=(r21*sj5);
IkReal x15548=((1.0)*x15544);
IkReal x15549=((1.0)*x15545);
evalcond[0]=((-1.0)*r02*x15544);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15549)));
evalcond[2]=((((-1.0)*x15546*x15548))+((x15544*x15547)));
evalcond[3]=((((-1.0)*cj5*r10*x15548))+((r11*sj5*x15544)));
evalcond[4]=(((x15545*x15546))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15547*x15549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15551=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15551.valid){
continue;
}
IkReal x15550=x15551.value;
cj4array[0]=(((cj1*cj2*x15550))+(((-1.0)*sj1*sj2*x15550)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15552=IKsin(j4);
IkReal x15553=IKcos(j4);
IkReal x15554=(r11*sj5);
IkReal x15555=((1.0)*sj0);
IkReal x15556=((1.0)*x15553);
IkReal x15557=((1.0)*cj5*x15552);
evalcond[0]=((-1.0)*r02*x15552);
evalcond[1]=((((-1.0)*r02*x15556))+(((-1.0)*x15555)));
evalcond[2]=(((r21*sj5*x15552))+(((-1.0)*r20*x15557)));
evalcond[3]=(((x15552*x15554))+(((-1.0)*r10*x15557)));
evalcond[4]=(((cj5*r10*x15553))+(((-1.0)*cj1*sj2*x15555))+(((-1.0)*x15554*x15556))+(((-1.0)*cj2*sj1*x15555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15558=IKPowWithIntegerCheck(r02,-1);
if(!x15558.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15558.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15559=IKsin(j4);
IkReal x15560=IKcos(j4);
IkReal x15561=((1.0)*sj0);
IkReal x15562=(cj5*x15560);
IkReal x15563=(sj5*x15559);
IkReal x15564=((1.0)*sj5*x15560);
IkReal x15565=((1.0)*cj5*x15559);
evalcond[0]=((-1.0)*r02*x15559);
evalcond[1]=(((r21*x15563))+(((-1.0)*r20*x15565)));
evalcond[2]=((((-1.0)*r10*x15565))+((r11*x15563)));
evalcond[3]=((((-1.0)*r21*x15564))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x15562)));
evalcond[4]=((((-1.0)*r11*x15564))+((r10*x15562))+(((-1.0)*cj1*sj2*x15561))+(((-1.0)*cj2*sj1*x15561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15566=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15566);
rxp1_1=(px*r21);
rxp1_2=(r11*x15566);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15567=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15567);
rxp1_1=(px*r21);
rxp1_2=(r11*x15567);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15568=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15568);
rxp1_1=(px*r21);
rxp1_2=(r11*x15568);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15571=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15571.valid){
continue;
}
IkReal x15569=x15571.value;
IkReal x15570=(sj0*x15569);
cj4array[0]=(((cj2*sj1*x15570))+((cj1*sj2*x15570)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15572=IKsin(j4);
IkReal x15573=IKcos(j4);
IkReal x15574=(r21*sj5);
IkReal x15575=((1.0)*cj5*r20);
evalcond[0]=(r02*x15572);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15573)));
evalcond[2]=(((x15572*x15574))+(((-1.0)*x15572*x15575)));
evalcond[3]=(((r11*sj5*x15572))+(((-1.0)*cj5*r10*x15572)));
evalcond[4]=(((x15573*x15574))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15573*x15575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15577=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15577.valid){
continue;
}
IkReal x15576=x15577.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15576))+((cj1*cj2*x15576)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15578=IKsin(j4);
IkReal x15579=IKcos(j4);
IkReal x15580=((1.0)*sj0);
IkReal x15581=((1.0)*cj5);
IkReal x15582=(sj5*x15578);
evalcond[0]=(r02*x15578);
evalcond[1]=((((-1.0)*x15580))+(((-1.0)*r02*x15579)));
evalcond[2]=((((-1.0)*r20*x15578*x15581))+((r21*x15582)));
evalcond[3]=(((r11*x15582))+(((-1.0)*r10*x15578*x15581)));
evalcond[4]=(((r11*sj5*x15579))+(((-1.0)*r10*x15579*x15581))+(((-1.0)*cj1*sj2*x15580))+(((-1.0)*cj2*sj1*x15580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15583=IKPowWithIntegerCheck(r02,-1);
if(!x15583.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15583.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15584=IKsin(j4);
IkReal x15585=IKcos(j4);
IkReal x15586=((1.0)*cj1);
IkReal x15587=(r21*sj5);
IkReal x15588=((1.0)*cj5);
IkReal x15589=(r11*sj5);
evalcond[0]=(r02*x15584);
evalcond[1]=(((x15584*x15587))+(((-1.0)*r20*x15584*x15588)));
evalcond[2]=(((x15584*x15589))+(((-1.0)*r10*x15584*x15588)));
evalcond[3]=((((-1.0)*r20*x15585*x15588))+((x15585*x15587))+(((-1.0)*cj2*x15586))+((sj1*sj2)));
evalcond[4]=(((x15585*x15589))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x15586))+(((-1.0)*r10*x15585*x15588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15590 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15590.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15590.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15591 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15591.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15591.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15592=((-1.0)*r10);
CheckValue<IkReal> x15594 = IKatan2WithCheck(IkReal(x15592),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15594.valid){
continue;
}
IkReal x15593=((-1.0)*(x15594.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15592);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15593;
IkReal gconst66=x15593;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15595=((-1.0)*r10);
CheckValue<IkReal> x15597 = IKatan2WithCheck(IkReal(x15595),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15597.valid){
continue;
}
IkReal x15596=((-1.0)*(x15597.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15595);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15596;
IkReal gconst66=x15596;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15598=((-1.0)*r10);
CheckValue<IkReal> x15600 = IKatan2WithCheck(IkReal(x15598),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15600.valid){
continue;
}
IkReal x15599=((-1.0)*(x15600.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15598);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15599;
IkReal gconst66=x15599;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15601=((1.0)*gconst67);
IkReal x15602=(cj1*cj2);
IkReal x15603=((1.0)*sj1*sj2);
CheckValue<IkReal> x15604=IKPowWithIntegerCheck(cj3,-1);
if(!x15604.valid){
continue;
}
CheckValue<IkReal> x15605=IKPowWithIntegerCheck(r02,-1);
if(!x15605.valid){
continue;
}
CheckValue<IkReal> x15606=IKPowWithIntegerCheck(((((-1.0)*r21*sj3*x15601))+((gconst68*r20*sj3))),-1);
if(!x15606.valid){
continue;
}
if( IKabs(((x15604.value)*(x15605.value)*((((cj0*x15602))+(((-1.0)*cj0*x15603)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15606.value)*(((((-1.0)*x15603))+x15602+(((-1.0)*cj3*r20*x15601))+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15604.value)*(x15605.value)*((((cj0*x15602))+(((-1.0)*cj0*x15603))))))+IKsqr(((x15606.value)*(((((-1.0)*x15603))+x15602+(((-1.0)*cj3*r20*x15601))+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15604.value)*(x15605.value)*((((cj0*x15602))+(((-1.0)*cj0*x15603))))), ((x15606.value)*(((((-1.0)*x15603))+x15602+(((-1.0)*cj3*r20*x15601))+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15607=IKsin(j4);
IkReal x15608=IKcos(j4);
IkReal x15609=(sj1*sj2);
IkReal x15610=(gconst68*sj3);
IkReal x15611=(gconst67*r11);
IkReal x15612=(gconst67*sj3);
IkReal x15613=((1.0)*gconst68);
IkReal x15614=(cj2*sj1);
IkReal x15615=((1.0)*cj0);
IkReal x15616=((1.0)*sj0);
IkReal x15617=(cj3*gconst67);
IkReal x15618=(cj3*gconst68);
IkReal x15619=(cj1*sj2);
IkReal x15620=(gconst67*r21);
IkReal x15621=((1.0)*cj1*cj2);
IkReal x15622=(cj3*x15608);
IkReal x15623=((1.0)*x15608);
IkReal x15624=(r02*x15607);
evalcond[0]=((((-1.0)*x15616))+(((-1.0)*r02*x15623)));
evalcond[1]=(((x15607*x15620))+(((-1.0)*r20*x15607*x15613)));
evalcond[2]=(cj0+(((-1.0)*r10*x15607*x15613))+((x15607*x15611)));
evalcond[3]=(((cj0*x15609))+((cj3*x15624))+(((-1.0)*cj1*cj2*x15615)));
evalcond[4]=((((-1.0)*x15615*x15619))+(((-1.0)*x15614*x15615))+(((-1.0)*sj3*x15624)));
evalcond[5]=(((r21*x15610))+x15614+x15619+(((-1.0)*r20*x15613*x15622))+((r20*x15612))+((r21*x15608*x15617)));
evalcond[6]=(((r21*x15618))+(((-1.0)*x15621))+((r20*x15608*x15610))+x15609+((r20*x15617))+(((-1.0)*r21*x15612*x15623)));
evalcond[7]=((((-1.0)*r10*x15613*x15622))+((r11*x15610))+((r10*x15612))+((x15611*x15622))+(((-1.0)*cj1*cj2*x15616))+((sj0*x15609)));
evalcond[8]=((((-1.0)*x15616*x15619))+((r10*x15608*x15610))+(((-1.0)*sj3*x15611*x15623))+(((-1.0)*x15614*x15616))+((r11*x15618))+((r10*x15617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15627=IKPowWithIntegerCheck(r02,-1);
if(!x15627.valid){
continue;
}
IkReal x15625=x15627.value;
IkReal x15626=((1.0)*cj0);
CheckValue<IkReal> x15628=IKPowWithIntegerCheck(sj3,-1);
if(!x15628.valid){
continue;
}
if( IKabs((x15625*(x15628.value)*(((((-1.0)*cj1*sj2*x15626))+(((-1.0)*cj2*sj1*x15626)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15625)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15625*(x15628.value)*(((((-1.0)*cj1*sj2*x15626))+(((-1.0)*cj2*sj1*x15626))))))+IKsqr(((-1.0)*sj0*x15625))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15625*(x15628.value)*(((((-1.0)*cj1*sj2*x15626))+(((-1.0)*cj2*sj1*x15626))))), ((-1.0)*sj0*x15625));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15629=IKsin(j4);
IkReal x15630=IKcos(j4);
IkReal x15631=(sj1*sj2);
IkReal x15632=(gconst68*sj3);
IkReal x15633=(gconst67*r11);
IkReal x15634=(gconst67*sj3);
IkReal x15635=((1.0)*gconst68);
IkReal x15636=(cj2*sj1);
IkReal x15637=((1.0)*cj0);
IkReal x15638=((1.0)*sj0);
IkReal x15639=(cj3*gconst67);
IkReal x15640=(cj3*gconst68);
IkReal x15641=(cj1*sj2);
IkReal x15642=(gconst67*r21);
IkReal x15643=((1.0)*cj1*cj2);
IkReal x15644=(cj3*x15630);
IkReal x15645=((1.0)*x15630);
IkReal x15646=(r02*x15629);
evalcond[0]=((((-1.0)*r02*x15645))+(((-1.0)*x15638)));
evalcond[1]=((((-1.0)*r20*x15629*x15635))+((x15629*x15642)));
evalcond[2]=(cj0+(((-1.0)*r10*x15629*x15635))+((x15629*x15633)));
evalcond[3]=((((-1.0)*cj1*cj2*x15637))+((cj3*x15646))+((cj0*x15631)));
evalcond[4]=((((-1.0)*x15637*x15641))+(((-1.0)*sj3*x15646))+(((-1.0)*x15636*x15637)));
evalcond[5]=(((r20*x15634))+x15636+x15641+(((-1.0)*r20*x15635*x15644))+((r21*x15632))+((r21*x15630*x15639)));
evalcond[6]=(((r20*x15639))+(((-1.0)*r21*x15634*x15645))+x15631+((r21*x15640))+(((-1.0)*x15643))+((r20*x15630*x15632)));
evalcond[7]=((((-1.0)*cj1*cj2*x15638))+((r11*x15632))+(((-1.0)*r10*x15635*x15644))+((x15633*x15644))+((sj0*x15631))+((r10*x15634)));
evalcond[8]=((((-1.0)*x15638*x15641))+((r10*x15630*x15632))+(((-1.0)*x15636*x15638))+((r11*x15640))+((r10*x15639))+(((-1.0)*sj3*x15633*x15645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15648=IKPowWithIntegerCheck(r02,-1);
if(!x15648.valid){
continue;
}
IkReal x15647=x15648.value;
CheckValue<IkReal> x15649=IKPowWithIntegerCheck(cj3,-1);
if(!x15649.valid){
continue;
}
if( IKabs((x15647*(x15649.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15647)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15647*(x15649.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15647))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15647*(x15649.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15647));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15650=IKsin(j4);
IkReal x15651=IKcos(j4);
IkReal x15652=(sj1*sj2);
IkReal x15653=(gconst68*sj3);
IkReal x15654=(gconst67*r11);
IkReal x15655=(gconst67*sj3);
IkReal x15656=((1.0)*gconst68);
IkReal x15657=(cj2*sj1);
IkReal x15658=((1.0)*cj0);
IkReal x15659=((1.0)*sj0);
IkReal x15660=(cj3*gconst67);
IkReal x15661=(cj3*gconst68);
IkReal x15662=(cj1*sj2);
IkReal x15663=(gconst67*r21);
IkReal x15664=((1.0)*cj1*cj2);
IkReal x15665=(cj3*x15651);
IkReal x15666=((1.0)*x15651);
IkReal x15667=(r02*x15650);
evalcond[0]=((((-1.0)*x15659))+(((-1.0)*r02*x15666)));
evalcond[1]=((((-1.0)*r20*x15650*x15656))+((x15650*x15663)));
evalcond[2]=(cj0+((x15650*x15654))+(((-1.0)*r10*x15650*x15656)));
evalcond[3]=((((-1.0)*cj1*cj2*x15658))+((cj3*x15667))+((cj0*x15652)));
evalcond[4]=((((-1.0)*x15658*x15662))+(((-1.0)*x15657*x15658))+(((-1.0)*sj3*x15667)));
evalcond[5]=(((r21*x15651*x15660))+x15657+x15662+(((-1.0)*r20*x15656*x15665))+((r21*x15653))+((r20*x15655)));
evalcond[6]=((((-1.0)*x15664))+((r20*x15660))+x15652+((r21*x15661))+((r20*x15651*x15653))+(((-1.0)*r21*x15655*x15666)));
evalcond[7]=(((r10*x15655))+(((-1.0)*r10*x15656*x15665))+(((-1.0)*cj1*cj2*x15659))+((x15654*x15665))+((r11*x15653))+((sj0*x15652)));
evalcond[8]=(((r10*x15660))+((r11*x15661))+(((-1.0)*x15657*x15659))+((r10*x15651*x15653))+(((-1.0)*sj3*x15654*x15666))+(((-1.0)*x15659*x15662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15668=((-1.0)*r10);
CheckValue<IkReal> x15669 = IKatan2WithCheck(IkReal(x15668),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15669.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15669.value))));
IkReal gconst70=x15668;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15670 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15670.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15670.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15671=((-1.0)*r10);
IkReal x15672=((-1.0)*r11);
CheckValue<IkReal> x15674 = IKatan2WithCheck(IkReal(x15671),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15674.valid){
continue;
}
IkReal x15673=((1.0)*(x15674.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15671);
rxp1_1=(px*r21);
rxp1_2=(px*x15672);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15673)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15673)));
IkReal gconst70=x15671;
IkReal gconst71=x15672;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15675=((-1.0)*r10);
IkReal x15676=((-1.0)*r11);
CheckValue<IkReal> x15678 = IKatan2WithCheck(IkReal(x15675),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15678.valid){
continue;
}
IkReal x15677=((1.0)*(x15678.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15675);
rxp1_1=(px*r21);
rxp1_2=(px*x15676);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15677)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15677)));
IkReal gconst70=x15675;
IkReal gconst71=x15676;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15679=((-1.0)*r10);
IkReal x15680=((-1.0)*r11);
CheckValue<IkReal> x15682 = IKatan2WithCheck(IkReal(x15679),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15682.valid){
continue;
}
IkReal x15681=((1.0)*(x15682.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15679);
rxp1_1=(px*r21);
rxp1_2=(px*x15680);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15681)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15681)));
IkReal gconst70=x15679;
IkReal gconst71=x15680;
IkReal x15683=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r10*r21*x15683))+(((-1.0)*r11*r20*x15683)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15684=((1.0)*r21);
IkReal x15685=(cj1*cj2);
IkReal x15686=((1.0)*sj1*sj2);
CheckValue<IkReal> x15687=IKPowWithIntegerCheck(cj3,-1);
if(!x15687.valid){
continue;
}
CheckValue<IkReal> x15688=IKPowWithIntegerCheck(r02,-1);
if(!x15688.valid){
continue;
}
CheckValue<IkReal> x15689=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15684))+((gconst71*r20*sj3))),-1);
if(!x15689.valid){
continue;
}
if( IKabs(((x15687.value)*(x15688.value)*((((cj0*x15685))+(((-1.0)*cj0*x15686)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15689.value)*(((((-1.0)*cj3*gconst71*x15684))+x15685+(((-1.0)*x15686))+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15687.value)*(x15688.value)*((((cj0*x15685))+(((-1.0)*cj0*x15686))))))+IKsqr(((x15689.value)*(((((-1.0)*cj3*gconst71*x15684))+x15685+(((-1.0)*x15686))+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15687.value)*(x15688.value)*((((cj0*x15685))+(((-1.0)*cj0*x15686))))), ((x15689.value)*(((((-1.0)*cj3*gconst71*x15684))+x15685+(((-1.0)*x15686))+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15690=IKsin(j4);
IkReal x15691=IKcos(j4);
IkReal x15692=(cj3*gconst70);
IkReal x15693=(sj1*sj2);
IkReal x15694=((1.0)*gconst71);
IkReal x15695=(gconst71*sj3);
IkReal x15696=(cj2*sj1);
IkReal x15697=((1.0)*sj0);
IkReal x15698=(gconst70*r11);
IkReal x15699=(gconst70*sj3);
IkReal x15700=((1.0)*cj0);
IkReal x15701=(cj3*gconst71);
IkReal x15702=(cj1*sj2);
IkReal x15703=((1.0)*cj1*cj2);
IkReal x15704=(r21*x15691);
IkReal x15705=(r10*x15691);
IkReal x15706=((1.0)*x15691);
IkReal x15707=(r02*x15690);
IkReal x15708=(r20*x15691);
evalcond[0]=((((-1.0)*x15697))+(((-1.0)*r02*x15706)));
evalcond[1]=((((-1.0)*r20*x15690*x15694))+((gconst70*r21*x15690)));
evalcond[2]=(cj0+((x15690*x15698))+(((-1.0)*r10*x15690*x15694)));
evalcond[3]=(((cj3*x15707))+(((-1.0)*cj1*cj2*x15700))+((cj0*x15693)));
evalcond[4]=((((-1.0)*x15700*x15702))+(((-1.0)*x15696*x15700))+(((-1.0)*sj3*x15707)));
evalcond[5]=(((r20*x15699))+((r21*x15695))+x15696+x15702+((x15692*x15704))+(((-1.0)*cj3*x15694*x15708)));
evalcond[6]=((((-1.0)*x15703))+(((-1.0)*x15699*x15704))+((r20*x15692))+((x15695*x15708))+x15693+((r21*x15701)));
evalcond[7]=(((r11*x15691*x15692))+((r10*x15699))+((r11*x15695))+((sj0*x15693))+(((-1.0)*cj1*cj2*x15697))+(((-1.0)*cj3*x15694*x15705)));
evalcond[8]=(((r11*x15701))+((r10*x15692))+((x15695*x15705))+(((-1.0)*x15697*x15702))+(((-1.0)*x15696*x15697))+(((-1.0)*sj3*x15698*x15706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15711=IKPowWithIntegerCheck(r02,-1);
if(!x15711.valid){
continue;
}
IkReal x15709=x15711.value;
IkReal x15710=((1.0)*cj0);
CheckValue<IkReal> x15712=IKPowWithIntegerCheck(sj3,-1);
if(!x15712.valid){
continue;
}
if( IKabs((x15709*(x15712.value)*(((((-1.0)*cj2*sj1*x15710))+(((-1.0)*cj1*sj2*x15710)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15709)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15709*(x15712.value)*(((((-1.0)*cj2*sj1*x15710))+(((-1.0)*cj1*sj2*x15710))))))+IKsqr(((-1.0)*sj0*x15709))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15709*(x15712.value)*(((((-1.0)*cj2*sj1*x15710))+(((-1.0)*cj1*sj2*x15710))))), ((-1.0)*sj0*x15709));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15713=IKsin(j4);
IkReal x15714=IKcos(j4);
IkReal x15715=(cj3*gconst70);
IkReal x15716=(sj1*sj2);
IkReal x15717=((1.0)*gconst71);
IkReal x15718=(gconst71*sj3);
IkReal x15719=(cj2*sj1);
IkReal x15720=((1.0)*sj0);
IkReal x15721=(gconst70*r11);
IkReal x15722=(gconst70*sj3);
IkReal x15723=((1.0)*cj0);
IkReal x15724=(cj3*gconst71);
IkReal x15725=(cj1*sj2);
IkReal x15726=((1.0)*cj1*cj2);
IkReal x15727=(r21*x15714);
IkReal x15728=(r10*x15714);
IkReal x15729=((1.0)*x15714);
IkReal x15730=(r02*x15713);
IkReal x15731=(r20*x15714);
evalcond[0]=((((-1.0)*x15720))+(((-1.0)*r02*x15729)));
evalcond[1]=(((gconst70*r21*x15713))+(((-1.0)*r20*x15713*x15717)));
evalcond[2]=(cj0+((x15713*x15721))+(((-1.0)*r10*x15713*x15717)));
evalcond[3]=((((-1.0)*cj1*cj2*x15723))+((cj0*x15716))+((cj3*x15730)));
evalcond[4]=((((-1.0)*sj3*x15730))+(((-1.0)*x15723*x15725))+(((-1.0)*x15719*x15723)));
evalcond[5]=(((r20*x15722))+((r21*x15718))+x15725+x15719+((x15715*x15727))+(((-1.0)*cj3*x15717*x15731)));
evalcond[6]=((((-1.0)*x15722*x15727))+((x15718*x15731))+(((-1.0)*x15726))+((r20*x15715))+((r21*x15724))+x15716);
evalcond[7]=((((-1.0)*cj1*cj2*x15720))+((r11*x15714*x15715))+((r10*x15722))+((sj0*x15716))+((r11*x15718))+(((-1.0)*cj3*x15717*x15728)));
evalcond[8]=(((x15718*x15728))+((r11*x15724))+(((-1.0)*sj3*x15721*x15729))+((r10*x15715))+(((-1.0)*x15720*x15725))+(((-1.0)*x15719*x15720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15733=IKPowWithIntegerCheck(r02,-1);
if(!x15733.valid){
continue;
}
IkReal x15732=x15733.value;
CheckValue<IkReal> x15734=IKPowWithIntegerCheck(cj3,-1);
if(!x15734.valid){
continue;
}
if( IKabs((x15732*(x15734.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15732)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15732*(x15734.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15732))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15732*(x15734.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15732));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15735=IKsin(j4);
IkReal x15736=IKcos(j4);
IkReal x15737=(cj3*gconst70);
IkReal x15738=(sj1*sj2);
IkReal x15739=((1.0)*gconst71);
IkReal x15740=(gconst71*sj3);
IkReal x15741=(cj2*sj1);
IkReal x15742=((1.0)*sj0);
IkReal x15743=(gconst70*r11);
IkReal x15744=(gconst70*sj3);
IkReal x15745=((1.0)*cj0);
IkReal x15746=(cj3*gconst71);
IkReal x15747=(cj1*sj2);
IkReal x15748=((1.0)*cj1*cj2);
IkReal x15749=(r21*x15736);
IkReal x15750=(r10*x15736);
IkReal x15751=((1.0)*x15736);
IkReal x15752=(r02*x15735);
IkReal x15753=(r20*x15736);
evalcond[0]=((((-1.0)*x15742))+(((-1.0)*r02*x15751)));
evalcond[1]=((((-1.0)*r20*x15735*x15739))+((gconst70*r21*x15735)));
evalcond[2]=(cj0+((x15735*x15743))+(((-1.0)*r10*x15735*x15739)));
evalcond[3]=(((cj3*x15752))+((cj0*x15738))+(((-1.0)*cj1*cj2*x15745)));
evalcond[4]=((((-1.0)*x15741*x15745))+(((-1.0)*x15745*x15747))+(((-1.0)*sj3*x15752)));
evalcond[5]=((((-1.0)*cj3*x15739*x15753))+((r21*x15740))+x15747+x15741+((r20*x15744))+((x15737*x15749)));
evalcond[6]=(((r20*x15737))+(((-1.0)*x15744*x15749))+(((-1.0)*x15748))+((r21*x15746))+x15738+((x15740*x15753)));
evalcond[7]=(((r11*x15736*x15737))+(((-1.0)*cj3*x15739*x15750))+((sj0*x15738))+((r11*x15740))+(((-1.0)*cj1*cj2*x15742))+((r10*x15744)));
evalcond[8]=((((-1.0)*x15742*x15747))+(((-1.0)*x15741*x15742))+(((-1.0)*sj3*x15743*x15751))+((r11*x15746))+((r10*x15737))+((x15740*x15750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15755=IKPowWithIntegerCheck(r02,-1);
if(!x15755.valid){
continue;
}
IkReal x15754=x15755.value;
CheckValue<IkReal> x15756=IKPowWithIntegerCheck(cj3,-1);
if(!x15756.valid){
continue;
}
if( IKabs((x15754*(x15756.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15754)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15754*(x15756.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15754))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15754*(x15756.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15754));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15757=IKsin(j4);
IkReal x15758=IKcos(j4);
IkReal x15759=(cj5*r10);
IkReal x15760=(sj1*sj2);
IkReal x15761=(cj5*sj3);
IkReal x15762=(r11*sj5);
IkReal x15763=(cj3*cj5);
IkReal x15764=(cj3*sj5);
IkReal x15765=(r21*sj5);
IkReal x15766=(cj2*sj1);
IkReal x15767=((1.0)*sj0);
IkReal x15768=((1.0)*cj0);
IkReal x15769=(sj3*sj5);
IkReal x15770=(cj1*sj2);
IkReal x15771=((1.0)*cj1*cj2);
IkReal x15772=((1.0)*x15757);
IkReal x15773=(r20*x15758);
IkReal x15774=(cj3*x15758);
IkReal x15775=(sj3*x15758);
evalcond[0]=((((-1.0)*r02*x15758))+(((-1.0)*x15767)));
evalcond[1]=(((x15757*x15765))+(((-1.0)*cj5*r20*x15772)));
evalcond[2]=(cj0+(((-1.0)*x15759*x15772))+((x15757*x15762)));
evalcond[3]=(((cj3*r02*x15757))+((cj0*x15760))+(((-1.0)*cj1*cj2*x15768)));
evalcond[4]=((((-1.0)*r02*sj3*x15772))+(((-1.0)*x15768*x15770))+(((-1.0)*x15766*x15768)));
evalcond[5]=(((r21*x15761))+((r20*x15769))+((r21*x15758*x15764))+x15770+x15766+(((-1.0)*x15763*x15773)));
evalcond[6]=(((r21*x15763))+(((-1.0)*x15765*x15775))+(((-1.0)*x15771))+((r20*x15764))+((x15761*x15773))+x15760);
evalcond[7]=(((r10*x15769))+((sj0*x15760))+(((-1.0)*x15759*x15774))+((x15762*x15774))+(((-1.0)*cj1*cj2*x15767))+((r11*x15761)));
evalcond[8]=(((r10*x15764))+((x15759*x15775))+((r11*x15763))+(((-1.0)*x15762*x15775))+(((-1.0)*x15767*x15770))+(((-1.0)*x15766*x15767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15776=((1.0)*sj3);
IkReal x15777=((1.0)*cj5);
CheckValue<IkReal> x15778=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x15777))),-1);
if(!x15778.valid){
continue;
}
CheckValue<IkReal> x15779=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15777))),-1);
if(!x15779.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15778.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15779.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15776))+(((-1.0)*cj5*r21*x15776)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15778.value)))+IKsqr(((x15779.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15776))+(((-1.0)*cj5*r21*x15776))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15778.value)), ((x15779.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15776))+(((-1.0)*cj5*r21*x15776))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15780=IKsin(j4);
IkReal x15781=IKcos(j4);
IkReal x15782=(cj5*r10);
IkReal x15783=(sj1*sj2);
IkReal x15784=(cj5*sj3);
IkReal x15785=(r11*sj5);
IkReal x15786=(cj3*cj5);
IkReal x15787=(cj3*sj5);
IkReal x15788=(r21*sj5);
IkReal x15789=(cj2*sj1);
IkReal x15790=((1.0)*sj0);
IkReal x15791=((1.0)*cj0);
IkReal x15792=(sj3*sj5);
IkReal x15793=(cj1*sj2);
IkReal x15794=((1.0)*cj1*cj2);
IkReal x15795=((1.0)*x15780);
IkReal x15796=(r20*x15781);
IkReal x15797=(cj3*x15781);
IkReal x15798=(sj3*x15781);
evalcond[0]=((((-1.0)*x15790))+(((-1.0)*r02*x15781)));
evalcond[1]=((((-1.0)*cj5*r20*x15795))+((x15780*x15788)));
evalcond[2]=(cj0+((x15780*x15785))+(((-1.0)*x15782*x15795)));
evalcond[3]=(((cj3*r02*x15780))+(((-1.0)*cj1*cj2*x15791))+((cj0*x15783)));
evalcond[4]=((((-1.0)*r02*sj3*x15795))+(((-1.0)*x15789*x15791))+(((-1.0)*x15791*x15793)));
evalcond[5]=(((r21*x15781*x15787))+((r21*x15784))+((r20*x15792))+x15789+x15793+(((-1.0)*x15786*x15796)));
evalcond[6]=(((r21*x15786))+(((-1.0)*x15794))+(((-1.0)*x15788*x15798))+x15783+((x15784*x15796))+((r20*x15787)));
evalcond[7]=(((sj0*x15783))+(((-1.0)*cj1*cj2*x15790))+(((-1.0)*x15782*x15797))+((r10*x15792))+((r11*x15784))+((x15785*x15797)));
evalcond[8]=((((-1.0)*x15785*x15798))+((r10*x15787))+(((-1.0)*x15789*x15790))+((x15782*x15798))+((r11*x15786))+(((-1.0)*x15790*x15793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15799=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15799.valid){
continue;
}
CheckValue<IkReal> x15800=IKPowWithIntegerCheck(r02,-1);
if(!x15800.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15799.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15800.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15799.value)))+IKsqr(((-1.0)*sj0*(x15800.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15799.value)), ((-1.0)*sj0*(x15800.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15801=IKsin(j4);
IkReal x15802=IKcos(j4);
IkReal x15803=(cj5*r10);
IkReal x15804=(sj1*sj2);
IkReal x15805=(cj5*sj3);
IkReal x15806=(r11*sj5);
IkReal x15807=(cj3*cj5);
IkReal x15808=(cj3*sj5);
IkReal x15809=(r21*sj5);
IkReal x15810=(cj2*sj1);
IkReal x15811=((1.0)*sj0);
IkReal x15812=((1.0)*cj0);
IkReal x15813=(sj3*sj5);
IkReal x15814=(cj1*sj2);
IkReal x15815=((1.0)*cj1*cj2);
IkReal x15816=((1.0)*x15801);
IkReal x15817=(r20*x15802);
IkReal x15818=(cj3*x15802);
IkReal x15819=(sj3*x15802);
evalcond[0]=((((-1.0)*x15811))+(((-1.0)*r02*x15802)));
evalcond[1]=((((-1.0)*cj5*r20*x15816))+((x15801*x15809)));
evalcond[2]=(cj0+((x15801*x15806))+(((-1.0)*x15803*x15816)));
evalcond[3]=((((-1.0)*cj1*cj2*x15812))+((cj0*x15804))+((cj3*r02*x15801)));
evalcond[4]=((((-1.0)*x15812*x15814))+(((-1.0)*r02*sj3*x15816))+(((-1.0)*x15810*x15812)));
evalcond[5]=((((-1.0)*x15807*x15817))+((r21*x15805))+((r21*x15802*x15808))+((r20*x15813))+x15810+x15814);
evalcond[6]=((((-1.0)*x15815))+((r21*x15807))+((x15805*x15817))+x15804+((r20*x15808))+(((-1.0)*x15809*x15819)));
evalcond[7]=((((-1.0)*cj1*cj2*x15811))+((r10*x15813))+(((-1.0)*x15803*x15818))+((r11*x15805))+((x15806*x15818))+((sj0*x15804)));
evalcond[8]=(((r10*x15808))+((r11*x15807))+(((-1.0)*x15806*x15819))+(((-1.0)*x15810*x15811))+(((-1.0)*x15811*x15814))+((x15803*x15819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15820=((1.0)*sj0);
IkReal x15821=((1.0)*cj0);
CheckValue<IkReal> x15822=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15822.valid){
continue;
}
CheckValue<IkReal> x15823 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15821))+(((-1.0)*r12*x15820)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x15820))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x15821)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15822.value)))+(x15823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15824=IKsin(j4);
IkReal x15825=IKcos(j4);
IkReal x15826=(r11*sj5);
IkReal x15827=(cj5*r10);
IkReal x15828=(sj1*sj2);
IkReal x15829=(cj5*sj3);
IkReal x15830=((1.0)*sj0);
IkReal x15831=(cj3*cj5);
IkReal x15832=(cj3*sj5);
IkReal x15833=(r21*sj5);
IkReal x15834=(cj2*sj1);
IkReal x15835=(sj3*sj5);
IkReal x15836=(r01*sj5);
IkReal x15837=((1.0)*cj0);
IkReal x15838=(cj1*sj2);
IkReal x15839=((1.0)*x15825);
IkReal x15840=((1.0)*x15824);
IkReal x15841=(cj3*x15825);
IkReal x15842=((1.0)*cj1*cj2);
IkReal x15843=(cj3*x15824);
evalcond[0]=((((-1.0)*cj5*r20*x15840))+((x15824*x15833))+(((-1.0)*r22*x15839)));
evalcond[1]=((((-1.0)*x15827*x15840))+cj0+((x15824*x15826))+(((-1.0)*r12*x15839)));
evalcond[2]=(((x15824*x15836))+(((-1.0)*r02*x15839))+(((-1.0)*cj5*r00*x15840))+(((-1.0)*x15830)));
evalcond[3]=((((-1.0)*r20*x15831*x15839))+((r21*x15825*x15832))+((r20*x15835))+((r21*x15829))+((r22*x15843))+x15834+x15838);
evalcond[4]=(((r20*x15832))+(((-1.0)*r22*sj3*x15840))+((r20*x15825*x15829))+(((-1.0)*x15842))+(((-1.0)*sj3*x15833*x15839))+x15828+((r21*x15831)));
evalcond[5]=(((r01*x15829))+((r01*x15825*x15832))+((r02*x15843))+((r00*x15835))+(((-1.0)*cj1*cj2*x15837))+(((-1.0)*r00*x15831*x15839))+((cj0*x15828)));
evalcond[6]=(((r10*x15835))+((x15826*x15841))+(((-1.0)*cj3*x15827*x15839))+(((-1.0)*cj1*cj2*x15830))+((r12*x15843))+((r11*x15829))+((sj0*x15828)));
evalcond[7]=((((-1.0)*r02*sj3*x15840))+(((-1.0)*r01*x15835*x15839))+((r00*x15825*x15829))+(((-1.0)*x15837*x15838))+((r01*x15831))+((r00*x15832))+(((-1.0)*x15834*x15837)));
evalcond[8]=(((r10*x15832))+(((-1.0)*x15830*x15838))+(((-1.0)*x15830*x15834))+((sj3*x15825*x15827))+((r11*x15831))+(((-1.0)*r12*sj3*x15840))+(((-1.0)*sj3*x15826*x15839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15844=((1.0)*cj5);
CheckValue<IkReal> x15845=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15844)))),-1);
if(!x15845.valid){
continue;
}
CheckValue<IkReal> x15846 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x15844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15845.value)))+(x15846.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15847=IKsin(j4);
IkReal x15848=IKcos(j4);
IkReal x15849=(r11*sj5);
IkReal x15850=(cj5*r10);
IkReal x15851=(sj1*sj2);
IkReal x15852=(cj5*sj3);
IkReal x15853=((1.0)*sj0);
IkReal x15854=(cj3*cj5);
IkReal x15855=(cj3*sj5);
IkReal x15856=(r21*sj5);
IkReal x15857=(cj2*sj1);
IkReal x15858=(sj3*sj5);
IkReal x15859=(r01*sj5);
IkReal x15860=((1.0)*cj0);
IkReal x15861=(cj1*sj2);
IkReal x15862=((1.0)*x15848);
IkReal x15863=((1.0)*x15847);
IkReal x15864=(cj3*x15848);
IkReal x15865=((1.0)*cj1*cj2);
IkReal x15866=(cj3*x15847);
evalcond[0]=((((-1.0)*r22*x15862))+(((-1.0)*cj5*r20*x15863))+((x15847*x15856)));
evalcond[1]=(cj0+((x15847*x15849))+(((-1.0)*x15850*x15863))+(((-1.0)*r12*x15862)));
evalcond[2]=((((-1.0)*cj5*r00*x15863))+(((-1.0)*r02*x15862))+(((-1.0)*x15853))+((x15847*x15859)));
evalcond[3]=(((r22*x15866))+(((-1.0)*r20*x15854*x15862))+((r20*x15858))+((r21*x15848*x15855))+((r21*x15852))+x15857+x15861);
evalcond[4]=(((r20*x15848*x15852))+(((-1.0)*x15865))+(((-1.0)*r22*sj3*x15863))+((r20*x15855))+(((-1.0)*sj3*x15856*x15862))+((r21*x15854))+x15851);
evalcond[5]=(((r01*x15848*x15855))+((cj0*x15851))+((r02*x15866))+((r00*x15858))+((r01*x15852))+(((-1.0)*r00*x15854*x15862))+(((-1.0)*cj1*cj2*x15860)));
evalcond[6]=(((x15849*x15864))+((r12*x15866))+((r10*x15858))+(((-1.0)*cj3*x15850*x15862))+(((-1.0)*cj1*cj2*x15853))+((r11*x15852))+((sj0*x15851)));
evalcond[7]=(((r00*x15855))+((r00*x15848*x15852))+((r01*x15854))+(((-1.0)*x15857*x15860))+(((-1.0)*r02*sj3*x15863))+(((-1.0)*r01*x15858*x15862))+(((-1.0)*x15860*x15861)));
evalcond[8]=((((-1.0)*x15853*x15857))+(((-1.0)*sj3*x15849*x15862))+((r10*x15855))+(((-1.0)*x15853*x15861))+((sj3*x15848*x15850))+((r11*x15854))+(((-1.0)*r12*sj3*x15863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15867=((1.0)*cj5);
CheckValue<IkReal> x15868 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15867)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15868.valid){
continue;
}
CheckValue<IkReal> x15869=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15867)))),-1);
if(!x15869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15868.value)+(((1.5707963267949)*(x15869.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15870=IKsin(j4);
IkReal x15871=IKcos(j4);
IkReal x15872=(r11*sj5);
IkReal x15873=(cj5*r10);
IkReal x15874=(sj1*sj2);
IkReal x15875=(cj5*sj3);
IkReal x15876=((1.0)*sj0);
IkReal x15877=(cj3*cj5);
IkReal x15878=(cj3*sj5);
IkReal x15879=(r21*sj5);
IkReal x15880=(cj2*sj1);
IkReal x15881=(sj3*sj5);
IkReal x15882=(r01*sj5);
IkReal x15883=((1.0)*cj0);
IkReal x15884=(cj1*sj2);
IkReal x15885=((1.0)*x15871);
IkReal x15886=((1.0)*x15870);
IkReal x15887=(cj3*x15871);
IkReal x15888=((1.0)*cj1*cj2);
IkReal x15889=(cj3*x15870);
evalcond[0]=(((x15870*x15879))+(((-1.0)*cj5*r20*x15886))+(((-1.0)*r22*x15885)));
evalcond[1]=(((x15870*x15872))+cj0+(((-1.0)*r12*x15885))+(((-1.0)*x15873*x15886)));
evalcond[2]=((((-1.0)*cj5*r00*x15886))+(((-1.0)*r02*x15885))+(((-1.0)*x15876))+((x15870*x15882)));
evalcond[3]=(((r21*x15871*x15878))+((r20*x15881))+((r21*x15875))+((r22*x15889))+(((-1.0)*r20*x15877*x15885))+x15884+x15880);
evalcond[4]=(((r20*x15871*x15875))+(((-1.0)*sj3*x15879*x15885))+((r20*x15878))+((r21*x15877))+(((-1.0)*x15888))+(((-1.0)*r22*sj3*x15886))+x15874);
evalcond[5]=(((r01*x15875))+((r00*x15881))+((r01*x15871*x15878))+(((-1.0)*r00*x15877*x15885))+(((-1.0)*cj1*cj2*x15883))+((r02*x15889))+((cj0*x15874)));
evalcond[6]=(((r11*x15875))+((r10*x15881))+((x15872*x15887))+(((-1.0)*cj3*x15873*x15885))+((r12*x15889))+(((-1.0)*cj1*cj2*x15876))+((sj0*x15874)));
evalcond[7]=((((-1.0)*x15883*x15884))+(((-1.0)*r01*x15881*x15885))+((r01*x15877))+((r00*x15878))+(((-1.0)*x15880*x15883))+((r00*x15871*x15875))+(((-1.0)*r02*sj3*x15886)));
evalcond[8]=(((r11*x15877))+(((-1.0)*sj3*x15872*x15885))+((r10*x15878))+(((-1.0)*r12*sj3*x15886))+(((-1.0)*x15876*x15880))+(((-1.0)*x15876*x15884))+((sj3*x15871*x15873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15890=cj5*cj5;
IkReal x15891=r21*r21;
IkReal x15892=r20*r20;
IkReal x15893=(r20*r21);
IkReal x15894=((1.0)*cj3);
IkReal x15895=((1.0)*cj5);
IkReal x15896=(cj1*sj2);
IkReal x15897=(cj5*sj5);
IkReal x15898=(sj3*sj5);
IkReal x15899=(cj2*sj1);
IkReal x15900=(r21*sj5);
CheckValue<IkReal> x15901 = IKatan2WithCheck(IkReal((((cj5*r21*r22*sj3))+((r20*r22*x15898))+((r22*x15896))+((r22*x15899)))),IkReal((((x15896*x15900))+((sj3*x15891*x15897))+((sj3*x15893))+((x15899*x15900))+(((-1.0)*r20*x15895*x15899))+(((-1.0)*r20*x15895*x15896))+(((-1.0)*x15892*x15895*x15898))+(((-2.0)*sj3*x15890*x15893)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15901.valid){
continue;
}
CheckValue<IkReal> x15902=IKPowWithIntegerCheck(IKsign((((cj3*x15890*x15891))+(((-1.0)*x15894*(r22*r22)))+(((2.0)*cj3*x15893*x15897))+(((-1.0)*x15890*x15892*x15894))+(((-1.0)*x15891*x15894)))),-1);
if(!x15902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15901.value)+(((1.5707963267949)*(x15902.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15903=IKsin(j4);
IkReal x15904=IKcos(j4);
IkReal x15905=(cj3*r21);
IkReal x15906=(r21*sj5);
IkReal x15907=(r20*sj5);
IkReal x15908=(cj5*r20);
IkReal x15909=((1.0)*x15904);
IkReal x15910=((1.0)*x15903);
evalcond[0]=(((x15903*x15906))+(((-1.0)*x15908*x15910))+(((-1.0)*r22*x15909)));
evalcond[1]=(((cj2*sj1))+((sj3*x15907))+((cj5*r21*sj3))+((cj1*sj2))+((cj3*r22*x15903))+(((-1.0)*cj3*x15908*x15909))+((sj5*x15904*x15905)));
evalcond[2]=(((cj5*x15905))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*sj3*x15906*x15909))+(((-1.0)*r22*sj3*x15910))+((sj3*x15904*x15908))+((cj3*x15907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15911=(cj5*sj4);
IkReal x15912=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15912))+(((-1.0)*r00*x15911)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15911))+(((-1.0)*r11*x15912))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15912))+(((-1.0)*r00*x15911))))+IKsqr((((r10*x15911))+(((-1.0)*r11*x15912))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15912))+(((-1.0)*r00*x15911))), (((r10*x15911))+(((-1.0)*r11*x15912))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15913=IKcos(j0);
IkReal x15914=IKsin(j0);
IkReal x15915=(r02*sj4);
IkReal x15916=((1.0)*sj3);
IkReal x15917=(r12*sj4);
IkReal x15918=(cj3*cj4);
IkReal x15919=((1.0)*cj5);
IkReal x15920=(r11*sj5);
IkReal x15921=((1.0)*cj1);
IkReal x15922=((0.39225)*sj1);
IkReal x15923=(cj5*r01);
IkReal x15924=(r01*sj5);
IkReal x15925=(r00*sj5);
IkReal x15926=((1.0)*sj1);
IkReal x15927=((0.39225)*cj2);
IkReal x15928=(cj5*r11);
IkReal x15929=(r10*sj5);
IkReal x15930=((1.0)*cj4);
IkReal x15931=(sj2*x15913);
IkReal x15932=(sj2*x15914);
IkReal x15933=(cj4*cj5*sj3);
IkReal x15934=(cj1*x15913);
IkReal x15935=(cj2*x15913);
IkReal x15936=(cj1*x15914);
IkReal x15937=(cj2*x15914);
evalcond[0]=((((-1.0)*r12*x15930))+(((-1.0)*r10*sj4*x15919))+((sj4*x15920))+x15913);
evalcond[1]=((((-1.0)*r00*sj4*x15919))+(((-1.0)*x15914))+(((-1.0)*r02*x15930))+((sj4*x15924)));
evalcond[2]=(((x15927*x15934))+(((-0.09465)*x15925))+(((-0.09465)*x15923))+(((-1.0)*px))+(((-1.0)*x15922*x15931))+(((0.425)*x15934))+(((-0.10915)*x15914)));
evalcond[3]=(((x15927*x15936))+(((0.10915)*x15913))+(((-0.09465)*x15928))+(((-0.09465)*x15929))+(((-1.0)*py))+(((-1.0)*x15922*x15932))+(((0.425)*x15936)));
evalcond[4]=(((sj3*x15923))+((sj3*x15925))+((x15918*x15924))+((cj3*x15915))+(((-1.0)*r00*x15918*x15919))+(((-1.0)*x15921*x15935))+((sj1*x15931)));
evalcond[5]=((((-1.0)*r10*x15918*x15919))+((sj3*x15929))+((sj3*x15928))+((x15918*x15920))+((cj3*x15917))+(((-1.0)*x15921*x15937))+((sj1*x15932)));
evalcond[6]=(((cj3*x15925))+((cj3*x15923))+(((-1.0)*cj4*x15916*x15924))+((r00*x15933))+(((-1.0)*x15926*x15935))+(((-1.0)*x15921*x15931))+(((-1.0)*x15915*x15916)));
evalcond[7]=(((cj3*x15929))+((cj3*x15928))+(((-1.0)*cj4*x15916*x15920))+(((-1.0)*x15926*x15937))+(((-1.0)*x15921*x15932))+(((-1.0)*x15916*x15917))+((r10*x15933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15938=cj5*cj5;
IkReal x15939=r21*r21;
IkReal x15940=r20*r20;
IkReal x15941=(r20*r21);
IkReal x15942=(sj1*sj2);
IkReal x15943=(r21*sj5);
IkReal x15944=(cj1*cj2);
IkReal x15945=(cj5*r20);
IkReal x15946=(cj5*sj5);
IkReal x15947=(cj3*r22);
IkReal x15948=(sj3*x15939);
CheckValue<IkReal> x15949 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15944))+((r20*sj5*x15947))+((cj5*r21*x15947))+((r22*x15942)))),IkReal((((cj3*x15939*x15946))+((cj3*x15941))+((x15942*x15943))+(((-1.0)*x15943*x15944))+(((-2.0)*cj3*x15938*x15941))+(((-1.0)*x15942*x15945))+((x15944*x15945))+(((-1.0)*cj3*x15940*x15946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15949.valid){
continue;
}
CheckValue<IkReal> x15950=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-1.0)*x15938*x15948))+(((-2.0)*sj3*x15941*x15946))+((sj3*x15938*x15940))+x15948)),-1);
if(!x15950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15949.value)+(((1.5707963267949)*(x15950.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15951=IKsin(j4);
IkReal x15952=IKcos(j4);
IkReal x15953=(cj3*r21);
IkReal x15954=(r21*sj5);
IkReal x15955=(r20*sj5);
IkReal x15956=(cj5*r20);
IkReal x15957=((1.0)*x15952);
IkReal x15958=((1.0)*x15951);
evalcond[0]=((((-1.0)*r22*x15957))+(((-1.0)*x15956*x15958))+((x15951*x15954)));
evalcond[1]=(((cj2*sj1))+((sj5*x15952*x15953))+((cj5*r21*sj3))+((cj1*sj2))+((cj3*r22*x15951))+((sj3*x15955))+(((-1.0)*cj3*x15956*x15957)));
evalcond[2]=((((-1.0)*r22*sj3*x15958))+((sj3*x15952*x15956))+((cj5*x15953))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*sj3*x15954*x15957))+((cj3*x15955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15959=(cj5*sj4);
IkReal x15960=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15960))+(((-1.0)*r00*x15959)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15960))+((r10*x15959))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15960))+(((-1.0)*r00*x15959))))+IKsqr(((((-1.0)*r11*x15960))+((r10*x15959))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15960))+(((-1.0)*r00*x15959))), ((((-1.0)*r11*x15960))+((r10*x15959))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15961=IKcos(j0);
IkReal x15962=IKsin(j0);
IkReal x15963=(r02*sj4);
IkReal x15964=((1.0)*sj3);
IkReal x15965=(r12*sj4);
IkReal x15966=(cj3*cj4);
IkReal x15967=((1.0)*cj5);
IkReal x15968=(r11*sj5);
IkReal x15969=((1.0)*cj1);
IkReal x15970=((0.39225)*sj1);
IkReal x15971=(cj5*r01);
IkReal x15972=(r01*sj5);
IkReal x15973=(r00*sj5);
IkReal x15974=((1.0)*sj1);
IkReal x15975=((0.39225)*cj2);
IkReal x15976=(cj5*r11);
IkReal x15977=(r10*sj5);
IkReal x15978=((1.0)*cj4);
IkReal x15979=(sj2*x15961);
IkReal x15980=(sj2*x15962);
IkReal x15981=(cj4*cj5*sj3);
IkReal x15982=(cj1*x15961);
IkReal x15983=(cj2*x15961);
IkReal x15984=(cj1*x15962);
IkReal x15985=(cj2*x15962);
evalcond[0]=(((sj4*x15968))+(((-1.0)*r10*sj4*x15967))+(((-1.0)*r12*x15978))+x15961);
evalcond[1]=((((-1.0)*r00*sj4*x15967))+((sj4*x15972))+(((-1.0)*x15962))+(((-1.0)*r02*x15978)));
evalcond[2]=(((x15975*x15982))+(((-0.09465)*x15973))+(((-0.09465)*x15971))+(((-0.10915)*x15962))+(((0.425)*x15982))+(((-1.0)*x15970*x15979))+(((-1.0)*px)));
evalcond[3]=(((x15975*x15984))+(((-0.09465)*x15977))+(((-0.09465)*x15976))+(((0.425)*x15984))+(((0.10915)*x15961))+(((-1.0)*x15970*x15980))+(((-1.0)*py)));
evalcond[4]=((((-1.0)*x15969*x15983))+((sj1*x15979))+((sj3*x15973))+((sj3*x15971))+((x15966*x15972))+(((-1.0)*r00*x15966*x15967))+((cj3*x15963)));
evalcond[5]=((((-1.0)*x15969*x15985))+((sj1*x15980))+((sj3*x15976))+((sj3*x15977))+((x15966*x15968))+(((-1.0)*r10*x15966*x15967))+((cj3*x15965)));
evalcond[6]=(((r00*x15981))+(((-1.0)*x15963*x15964))+((cj3*x15971))+((cj3*x15973))+(((-1.0)*x15974*x15983))+(((-1.0)*cj4*x15964*x15972))+(((-1.0)*x15969*x15979)));
evalcond[7]=((((-1.0)*x15969*x15980))+(((-1.0)*cj4*x15964*x15968))+(((-1.0)*x15964*x15965))+((r10*x15981))+((cj3*x15977))+((cj3*x15976))+(((-1.0)*x15974*x15985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5 (babf06440cef5a4c889647aed8954a0d)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
